<!DOCTYPE html>
<html lang="en">
  <head>
    <%- include('../../partials/head', { pageNote: `Question ${number_in_alternative_group}` }); %>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/bootstrap-table.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/extensions/auto-refresh/bootstrap-table-auto-refresh.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/extensions/filter-control/bootstrap-table-filter-control.min.js') %>"></script>
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/bootstrap-table.min.css') %>" rel="stylesheet" />
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.min.css') %>" rel="stylesheet" />
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/extensions/filter-control/bootstrap-table-filter-control.min.css') %>" rel="stylesheet" />
  </head>
  <body>
    <script>
     const has_course_instance_permission_edit = <%= !!authz_data.has_course_instance_permission_edit %>;
     $(function () {
       var savedFilterValues = {};
       window.bsTable = $('#grading-table').bootstrapTable({
         classes: 'table table-sm table-bordered',
         url: '<%= urlPrefix %>/assessment/<%= assessment.id %>/manual_grading/assessment_question/<%= assessment_question.id %>/instances.json',
         dataField: 'instance_questions',
         escape: true,
         uniqueId: 'id',
         idField: 'id',
         selectItemName: 'instance_question_id',
         showButtonText: true,
         showColumns: true,
         showRefresh: true,
         autoRefresh: true,
         autoRefreshStatus: false,
         autoRefreshInterval: 30,
         buttonsOrder: ['columns', 'refresh', 'autoRefresh', 'showStudentInfo', 'status'],
         theadClasses: 'thead-light',
         stickyHeader: true,
         filterControl: true,
         rowStyle: row => (row.requires_manual_grading ? {} : { classes: 'text-muted bg-light' }),
         buttons: {
           showStudentInfo: {
             text: 'Show student info',
             icon: 'fa-eye',
             event: () => {
               const button = $('#js-show-student-info-button');
               $('#grading-table').bootstrapTable(
                 button.hasClass('active') ? 'hideColumn' : 'showColumn',
                 ['user_or_group_name', 'uid']
               );
               button.toggleClass('active');
             },
             attributes: {
               id: 'js-show-student-info-button',
               title: 'Show/hide student identification information',
             },
           },
           status: {
             text: 'Tag for grading',
             icon: 'fa-tags',
             render: <%= authz_data.has_course_instance_permission_edit %>,
             html: gradingTagDropdown,
           },
         },
         onUncheck: updateGradingTagButton,
         onUncheckAll: updateGradingTagButton,
         onUncheckSome: updateGradingTagButton,
         onCheck: updateGradingTagButton,
         onCheckAll: updateGradingTagButton,
         onCheckSome: updateGradingTagButton,
         onCreatedControls: () => {
           $('#grading-table th[data-field="points"] .filter-control input').tooltip({
             title: 'hint: use <code>&lt;<%= Math.ceil(assessment_question.max_points / 2) %></code>, or <code>&gt;0</code>',
             html: true,
           });
           $('#grading-table th[data-field="score_perc"] .filter-control input').tooltip({
             title: 'hint: use <code>&lt;50</code>, or <code>&gt;0</code>',
             html: true,
           });
         },
         onPreBody: () => {
           $('#grading-table [data-toggle="popover"]').popover('dispose');
           $('#grading-table [data-toggle="tooltip"]').tooltip('dispose');
         },
         onPostBody: () => {
           updateGradingTagButton();
           $('#grading-table [data-toggle="popover"]').popover({
             sanitize: false,
             content: function() {
               let dataContent = $($(this).data('base-content'));
               dataContent.submit(ajaxSubmit).submit(e => $(this).popover('hide'));
               return dataContent;
             },
           });
           $('#grading-table [data-toggle=tooltip]').tooltip({ html: true });
         },
         columns: [[
           {
             checkbox: true,
           },
           {
             field: 'index',
             title: 'Instance',
             searchable: false,
             sortable: true,
             switchable: false,
             formatter: (value, row) => `<a href="<%= urlPrefix %>/assessment/<%= assessment.id %>/manual_grading/instance_question/${row.id}">Instance ${row.index}` +
                           (row.open_issue_count ? ` <span class="badge badge-pill badge-danger">${row.open_issue_count}</span>` : '') + '</a>' +
                           (row.assessment_open ? ` <span title="Assessment instance is still open" data-toggle="tooltip"><i class="fas fa-exclamation-triangle text-warning"></i></span>` : ''),
           },
           {
             field: 'user_or_group_name',
             title: '<%= assessment.group_work ? 'Group Name' : 'Name' %>',
             searchable: true,
             filterControl: 'input',
             sortable: true,
             visible: false,
           },
           {
             field: 'uid',
             title: '<%= assessment.group_work ? 'UIDs' : 'UID' %>',
             searchable: true,
             filterControl: 'input',
             sortable: true,
             visible: false,
           },
           {
             field: 'requires_manual_grading',
             title: 'Grading status',
             filterControl: 'select',
             sortable: true,
             class: 'text-center',
             formatter: (value, row) => row.requires_manual_grading ? 'Requires grading' : 'Graded',
           },
           {
             field: 'assigned_grader',
             title: 'Assigned grader',
             filterControl: 'select',
             formatter: (value, row) => row.assigned_grader_name || 'â€”',
           },
           {
             field: 'auto_points',
             title: 'Auto points',
             class: 'text-center',
             filterControl: 'input',
             visible: <%= assessment_question.max_auto_points > 0 %>,
             searchFormatter: false,
             sortable: true,
             formatter: pointsFormatter,
           },
           {
             field: 'manual_points',
             title: 'Manual points',
             class: 'text-center',
             filterControl: 'input',
             visible: true,
             searchFormatter: false,
             sortable: true,
             formatter: pointsFormatter,
           },
           {
             field: 'points',
             title: 'Total points',
             class: 'text-center',
             filterControl: 'input',
             visible: false,
             searchFormatter: false,
             sortable: true,
             formatter: pointsFormatter,
           },
           {
             field: 'score_perc',
             title: 'Percentage score',
             class: 'text-center align-middle text-nowrap',
             filterControl: 'input',
             searchFormatter: false,
             sortable: true,
             formatter: scorebarFormatter,
           },
           {
             field: 'last_grader',
             title: 'Graded by',
             filterControl: 'select',
             formatter: (value, row) => row.last_grader ? row.last_grader_name : '&mdash;',
           },
         ]],
       });
     });

     function ajaxSubmit(e) {
       e.preventDefault();
       const submitter = e.submitter || e.originalEvent?.submitter;
       if (submitter) {
         // Obtain information from submit button that was used
         $(e.target).find('input[name=batch_action_data]')
                    .val(JSON.stringify($(submitter).data('batch-action') || {}));
       }
       $.post($(e.target).attr('action'), $(e.target).serialize(), function(data) {
         if (data.conflict_grading_job_id) {
           $('#grading-conflict-modal').find('a.conflict-details-link').attr('href', data.conflict_details_url);
           $('#grading-conflict-modal').modal({});
         }
         $('#grading-table').bootstrapTable('refresh');
       }, 'json').fail(function(data) {
         // TODO Better user notification of update failure
       });
     }

     function gradingTagDropdown() {
       const course_staff = JSON.parse('<%- JSON.stringify(course_staff) %>') || [];
       const dropdown = $('<div class="dropdown btn-group">');
       const button = $('<button class="btn btn-secondary dropdown-toggle grading-tag-button" data-toggle="dropdown" name="status" disabled>').appendTo(dropdown);
       button.text(' Tag for grading').prepend($('<i class="fas fa-tags">'));

       const menu = $('<div class="dropdown-menu dropdown-menu-right">').appendTo(dropdown);
       menu.append('<div class="dropdown-header">Assign for grading</div>');

       course_staff.forEach((grader) => {
         const item_grader = $('<button class="dropdown-item" type="submit">').appendTo(menu);
         item_grader.attr('data-batch-action', JSON.stringify({
           requires_manual_grading: true,
           assigned_grader: grader.user_id,
         }));
         item_grader.text(` Assign to: ${grader.name || ''} (${grader.uid})`);
         item_grader.prepend('<i class="fas fa-user-tag"></i>');
       });

       const item_no_grader = $('<button class="dropdown-item" type="submit">').appendTo(menu);
       item_no_grader.attr('data-batch-action', JSON.stringify({
         assigned_grader: null,
       }));
       item_no_grader.text(` Remove grader assignment`).prepend('<i class="fas fa-user-slash"></i>');

       menu.append('<div class="dropdown-divider">');

       const item_req_grade = $('<button class="dropdown-item" type="submit">').appendTo(menu);
       item_req_grade.attr('data-batch-action', JSON.stringify({
         requires_manual_grading: true,
       }));
       item_req_grade.text(` Tag as required grading`).prepend('<i class="fas fa-tag"></i>');

       const item_graded = $('<button class="dropdown-item" type="submit">').appendTo(menu);
       item_graded.attr('data-batch-action', JSON.stringify({
         requires_manual_grading: false,
       }));
       item_graded.text(` Tag as graded`).prepend('<i class="fas fa-check-square"></i>');

       return $('<div>').append(dropdown).html();
     }

     function updateGradingTagButton() {
       $('.grading-tag-button').prop('disabled', !$('#grading-table').bootstrapTable('getSelections').length);
     }

     // Copied from partials/stringFormatter.ejs, simplifying for single value only.
     function getStringFromFloat(v) {
       vAsString = String(v);
       vAsFixed = (Math.floor(v*100) / 100).toFixed(2);
       if (vAsString.length <= vAsFixed.length) {
         return vAsString;
       } else {
         return vAsFixed;
       }
     }

     function pointsFormatter(points, row, _index, field) {
       const max =
         field === 'manual_points' ? row.max_manual_points :
         field === 'auto_points' ? row.max_auto_points :
         field === 'points' ? row.max_points : 0;
       let text = `${getStringFromFloat(points)} <small>/<span class="text-muted">${max}</span></small> `, button = '';
       if (has_course_instance_permission_edit) {
         button = `<button type="button" class="btn btn-xs btn-secondary"
                            id="editQuestionPoints_${field}_${row.id}"
                            data-toggle="popover" data-container="body"
                            data-html="true" data-placement="auto" title="Change question points"
                            data-base-content="<%= include('../../partials/editQuestionPointsForm',
                                                           {id: 'editQuestionPoints_${field}_${row.id}', field: '${field}',
                                                            instance_question: {id: '${row.id}',
                                                            points: '${points}', max_points: '${max}',
                                                            modified_at: '${row.modified_at}',
                                                            manual_rubric_id: assessment_question.manual_rubric_id}}); %>">
                      <i class="fa fa-edit" aria-hidden="true"></i>
                    </button>`;
       }
       return text + button;
     }

     function scorebarFormatter(score, row) {

       let bar = '', button = '';
       if (score != null) {
         bar = '<div class="progress bg" style="min-width: 10em; max-width: 20em;">';
         let left = '', right = '';
         if (score >= 50) {
           left = `${Math.floor(score)}%`;
         } else {
           right = `${Math.floor(score)}%`;
         }
         bar += `<div class="progress-bar bg-success" style="width: ${Math.floor(Math.min(100, score))}%">${left}</div>`;
         bar += `<div class="progress-bar bg-danger" style="width: ${100 - Math.floor(Math.min(100, score))}%">${right}</div>`;
         bar += '</div>';
       }
       if (has_course_instance_permission_edit) {
         button = `<button type="button" class="btn btn-xs btn-secondary"
                            id="editQuestionScorePerc${row.id}"
                            data-toggle="popover" data-container="body"
                            data-html="true" data-placement="auto" title="Change question percentage score"
                            data-base-content="<%= include('../../partials/editQuestionScorePercForm',
                                                           {id: 'editQuestionScorePerc${row.id}',
                                                            instance_question: {id: '${row.id}', score_perc: '${row.score_perc}', modified_at: '${row.modified_at}',
                                                            manual_rubric_id: assessment_question.manual_rubric_id}}); %>">
                      <i class="fa fa-edit" aria-hidden="true"></i>
                    </button>`;
       }
       return `<div class="d-inline-block align-middle">${bar}</div> ${button}`;
     }
    </script>
    <%- include('../../partials/navbar'); %>
    <div class="modal" tabindex="-1" role="dialog" id="grading-conflict-modal">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Grading conflict detected</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <p>Another grader has already graded this submission.</p>
          </div>
          <div class="modal-footer">
            <a class="btn btn-primary conflict-details-link" href="/">See details</a>
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Dismiss</button>
          </div>
        </div>
      </div>
    </div>
    <main id="content" class="container-fluid">
      <%- include('../../partials/assessmentOpenInstancesAlert') %>
      <a class="btn btn-primary mb-2" href="<%= urlPrefix %>/assessment/<%= assessment.id %>/manual_grading">
        <i class="fas fa-arrow-left"></i>
        Back to <%= assessment_set.name %> <%= assessment.number %> Overview
      </a>
      <%- include('../../partials/assessmentSyncErrorsAndWarnings'); %>

      <div class="card mb-4">
        <div class="card-header bg-primary text-white">
          <%= assessment.tid %> / Question <%= number_in_alternative_group %>.
          <%= question.title %>
        </div>
        <form name="grading-form" method="POST" onsubmit="ajaxSubmit(event)">
          <input type="hidden" name="__action" value="batch_action">
          <input type="hidden" name="batch_action_data" value="">
          <input type="hidden" name="__csrf_token" value="<%= __csrf_token %>">
          <table id="grading-table"></table>
        </form>
      </div>

    </main>
  </body>
</html>
