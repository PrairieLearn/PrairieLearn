(() => {
  const greekLetters = new Set([
    'Alpha',
    'Beta',
    'Gamma',
    'Delta',
    'Epsilon',
    'Zeta',
    'Eta',
    'Theta',
    'Iota',
    'Kappa',
    'Lamda',
    'Mu',
    'Nu',
    'Xi',
    'Omicron',
    'Pi',
    'Rho',
    'Sigma',
    'Tau',
    'Upsilon',
    'Phi',
    'Chi',
    'Psi',
    'Omega',
    'alpha',
    'beta',
    'gamma',
    'delta',
    'epsilon',
    'zeta',
    'eta',
    'theta',
    'iota',
    'kappa',
    'lamda',
    'mu',
    'nu',
    'xi',
    'omicron',
    'pi',
    'rho',
    'sigma',
    'tau',
    'upsilon',
    'phi',
    'chi',
    'psi',
    'omega',
  ]);

  // Note that we include trigonometric functions in this list, even if they are disabled for grading
  // Otherwise, an accidental function call like "sin" would be converted into "s*i*n", which leads to
  // a much harder to understand error message (about "s" being an unknown variable) generated by SymPy.
  const defaultFunctions = [
    'Abs',
    'abs',
    'acos',
    'acosh',
    'arccos',
    'arcsin',
    'arctan',
    'arctan2',
    'asin',
    'asinh',
    'atan',
    'atan2',
    'atanh',
    'cos',
    'cosh',
    'cot',
    'csc',
    'exp',
    'factorial',
    'ln',
    'log',
    'Max',
    'max',
    'Min',
    'min',
    'sec',
    'sgn',
    'sign',
    'sin',
    'sinh',
    'tan',
    'tanh',
  ];
  /**
   * Initialize a <math-field> element with custom settings for <pl-symbolic-input>
   *
   * @param {string} name Name of the element to look up the tag
   */
  window.PLSymbolicInput = function (name) {
    const mf = document.getElementById('symbolic-input-' + name);

    // Always keep basic right-click items and append to other menu items
    const standardMenuItems = new Set(['cut', 'copy', 'paste', 'select-all']);
    const endMenuItems = mf.menuItems.filter((item) => standardMenuItems.has(item.id));

    // If the allow-trig attribute is set, basic trig functions are added to the virtual keyboard
    const allowTrig = mf.getAttribute('allow-trig');

    mf.menuItems = [
      {
        id: 'fraction',
        label: () => '<span class="ML__insert-template"><sup>x</sup>&frasl;<sub>y</sub></span>',
        onMenuSelect: () => mf.insert('\\frac{#@}{#?}'),
      },
      {
        id: 'power',
        label: () => '<span class="ML__insert-template">x<sup>y</sup></span>',
        onMenuSelect: () => mf.insert('{#@}^{#?}'),
      },
      {
        id: 'sqrt',
        label: '√',
        onMenuSelect: () => mf.insert('\\sqrt{#@}'),
      },
      {
        id: 'pi',
        label: 'π',
        onMenuSelect: () => mf.insert('\\pi'),
      },
      {
        id: 'infinity',
        label: '∞',
        onMenuSelect: () => mf.insert('\\infty'),
      },
      { type: 'divider' },
      ...endMenuItems,
    ];

    mathVirtualKeyboard.layouts = [
      {
        label: 'math',
        rows: [
          [
            { class: 'small', latex: '{#@}^{#?}', width: 1 },
            { class: 'small', latex: '{#@}^{2}', width: 1 },
            { class: 'small', latex: '\\frac{#@}{#0}', width: 1.3 },
            '[separator]',
            '7',
            '8',
            '9',
            '+',
            '[separator]',
            'e',
            '\\infty',
            '\\pi',
          ],
          [
            { class: 'small', latex: '\\sqrt', insert: '\\sqrt{#0}', width: 1 },
            {
              class: 'small',
              latex: '\\ln',
              insert: '\\ln({#0})',
              variants: [{ class: 'small', latex: '\\log', insert: '\\log({#0})' }],
            },
            { class: 'small', latex: '!', width: 1 },
            '[separator]',
            '4',
            '5',
            '6',
            '-',
            '[separator]',
            { latex: 'x' },
            { latex: 'y' },
            '=',
          ],
          [
            { class: 'small', latex: '|#0|', insert: '\\abs({#0})' },
            { class: 'small', latex: '\\min', insert: '\\min({#0})' },
            { class: 'small', latex: '\\max', insert: '\\max({#0})' },
            '[separator]',
            '1',
            '2',
            '3',
            { latex: '\\times', insert: '\\cdot' },
            '[separator]',
            '(',
            ')',
            {
              class: 'small',
              latex: '\\mathrm{sign}',
              insert: '\\operatorname{sign}({#0})',
            },
          ],
          [
            allowTrig
              ? {
                  class: 'small',
                  latex: '\\sin',
                  insert: '\\sin({#0})',
                  width: 1,
                  variants: [
                    { class: 'small', latex: '\\csc', insert: '\\csc({#0})' },
                    { class: 'small', latex: '\\arcsin', insert: '\\arcsin({#0})' },
                    {
                      class: 'small',
                      latex: '\\mathrm{asinh}',
                      insert: '\\operatorname{asinh}({#0})',
                    },
                  ],
                }
              : '[separator]',
            allowTrig
              ? {
                  class: 'small',
                  latex: '\\cos',
                  insert: '\\cos({#0})',
                  width: 1,
                  variants: [
                    { class: 'small', latex: '\\sec', insert: '\\sec({#0})' },
                    { class: 'small', latex: '\\arccos', insert: '\\arccos({#0})' },
                    {
                      class: 'small',
                      latex: '\\mathrm{acosh}',
                      insert: '\\operatorname{acosh}({#0})',
                    },
                  ],
                }
              : '[separator]',
            allowTrig
              ? {
                  class: 'small',
                  latex: '\\tan',
                  insert: '\\tan({#0})',
                  width: 1,
                  variants: [
                    { class: 'small', latex: '\\cot', insert: '\\cot({#0})' },
                    { class: 'small', latex: '\\arctan', insert: '\\arctan({#0})' },
                    {
                      class: 'small',
                      latex: '\\mathrm{atanh}',
                      insert: '\\operatorname{atanh}({#0})',
                    },
                    {
                      class: 'small',
                      latex: '\\mathrm{arctan2}',
                      insert: '\\operatorname{arctan2}({#0})',
                    },
                  ],
                }
              : '[separator]',
            '[separator]',
            { label: '0', width: 2 },
            '.',
            '/',
            '[separator]',
            { label: '[left]' },
            { label: '[right]' },
            { label: '[backspace]', width: 1 },
          ],
        ],
      },
      {
        label: 'abc',
        rows: [
          ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],
          [
            { label: 'q' },
            { label: 'w' },
            { label: 'e' },
            { label: 'r' },
            { label: 't' },
            { label: 'y' },
            { label: 'u' },
            { label: 'i' },
            { label: 'o' },
            { label: 'p' },
          ],
          [
            { label: 'a' },
            { label: 's' },
            { label: 'd' },
            { label: 'f' },
            { label: 'g' },
            { label: 'h' },
            { label: 'j' },
            { label: 'k' },
            { label: 'l' },
          ],
          [
            { label: 'z' },
            { label: 'x' },
            { label: 'c' },
            { label: 'v' },
            { label: 'b' },
            { label: 'n' },
            { label: 'm' },
            '[backspace]',
          ],
          ['-', '+', '=', { latex: '\\times' }, '/', '.', ',', '[left]', '[right]', '[return]'],
        ],
      },
    ];

    setUpSymbolicInputMacros(mf);

    // Additional shortcuts for instant replacement inside the pl-symbolic-input box
    mf.inlineShortcuts = {
      '**': {
        value: '{#@}^{#?}',
      },
      '*': {
        value: '\\cdot',
      },
      '|': {
        value: '\\abs{#0}',
      },
      // Prevent double | key presses being replaced by absabs
      '||': {
        value: '\\abs{#0}',
      },
      sqrt: {
        value: '\\sqrt{#0}',
      },
      pi: {
        value: '\\pi',
      },
      infty: {
        value: '\\infty',
      },
      infinity: {
        value: '\\infty',
      },
    };

    // Disable auto-complete suggestions for macros
    mf.popoverPolicy = 'off';

    const placeholderText = mf.dataset.placeholderText;
    mf.setAttribute('placeholder', `\\text{${placeholderText}}`);

    // Set up sync between input box and hidden submission data inputs
    const updateSubmissionData = function () {
      $('#symbolic-input-sub-' + name).val(mf.getValue('plain-text'));
      $('#symbolic-input-latex-' + name).val(mf.getValue('latex'));
    };

    updateSubmissionData();
    mf.addEventListener('input', updateSubmissionData);

    // Disable access to manual "\" macro mode
    mf.addEventListener(
      'keydown',
      (ev) => {
        if (ev.key === '\\') {
          ev.preventDefault();
          mf.executeCommand(['insert', '\\backslash']);
        } else if (ev.key === 'Escape') {
          ev.preventDefault();
        }
      },
      { capture: true },
    );

    // We can't attach custom CSS with `pl-symbolic-input.css` to points other than ::part from the main page since it lives inside a shadow DOM
    const customCSS = new CSSStyleSheet();
    customCSS.replaceSync(`
    .ML__content-placeholder .ML__text {
      background: inherit;
    }
    @media (pointer: coarse) {
      .ML__virtual-keyboard-toggle {
        min-width: 0px;
        min-height: 0px;
      }
    }
    `);
    mf.shadowRoot.adoptedStyleSheets.push(customCSS);
  };

  /**
   * Initialize the <math-field> element used to represent parse errors.
   * This element is read-only and only needs to be updated with the set of allowed function names for display
   *
   * @param {string} uuid UUID of the element to look up the tag (used instead of name since there might be multiple submissions per element)
   */
  window.PLSymbolicInputParseError = function (uuid) {
    const mf = document.getElementById(`symbolic-input-parse-error-${uuid}`);
    if (!mf) {
      throw new Error(
        `Element 'symbolic-input-parse-error-${uuid}' is required but not found in the DOM.`,
      );
    }
    setUpSymbolicInputMacros(mf);
  };

  /**
   * Initialize the <math-field> element used to represent raw parsed submissions.
   * This element is read-only and only needs to be updated with the set of allowed function names for display
   *
   * @param {string} uuid UUID of the element to look up the tag (used instead of name since there might be multiple submissions per element)
   */
  window.PLSymbolicInputPopover = function (uuid) {
    // Wait for popover to appear
    $(document).on('shown.bs.popover', `#pl-symbolic-input-${uuid}-button`, function () {
      const mf = document.getElementById(`symbolic-input-popover-${uuid}`);
      if (!mf) {
        throw new Error(
          `Element 'symbolic-input-popover-${uuid}' is required but not found in the DOM.`,
        );
      }
      setUpSymbolicInputMacros(mf);
    });
  };

  /**
   * Initialize list of allowed function names for a <math-field> element. The list is filled with default
   * functions and those specified in the custom-functions attribute. Each allowed function is added as a
   *  "macro" to automatically replace individual letters with well-formatted, atomic function name blocks.
   *
   * @param {HTMLElement} mf The <math-field> element to initialize
   */
  function setUpSymbolicInputMacros(mf) {
    const additionalFunctions = mf.getAttribute('custom-functions')?.split(',') ?? [];

    const customFunctions = new Set(additionalFunctions.concat(defaultFunctions));

    const macros = {};
    [...customFunctions].map((fun) => (macros[fun] = `\\operatorname{${fun}}`));
    mf.macros = macros;

    mf.onInlineShortcut = (mf, s) => {
      if (customFunctions.has(s)) return `\\${s}({#0})`;
      if (greekLetters.has(s)) return `\\${s}`;
      return '';
    };
  }
})();
