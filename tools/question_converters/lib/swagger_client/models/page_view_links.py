# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PageViewLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'int',
        'context': 'int',
        'asset': 'int',
        'real_user': 'int',
        'account': 'int'
    }

    attribute_map = {
        'user': 'user',
        'context': 'context',
        'asset': 'asset',
        'real_user': 'real_user',
        'account': 'account'
    }

    def __init__(self, user=None, context=None, asset=None, real_user=None, account=None, _configuration=None):  # noqa: E501
        """PageViewLinks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user = None
        self._context = None
        self._asset = None
        self._real_user = None
        self._account = None
        self.discriminator = None

        if user is not None:
            self.user = user
        if context is not None:
            self.context = context
        if asset is not None:
            self.asset = asset
        if real_user is not None:
            self.real_user = real_user
        if account is not None:
            self.account = account

    @property
    def user(self):
        """Gets the user of this PageViewLinks.  # noqa: E501

        The ID of the user for this page view  # noqa: E501

        :return: The user of this PageViewLinks.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PageViewLinks.

        The ID of the user for this page view  # noqa: E501

        :param user: The user of this PageViewLinks.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def context(self):
        """Gets the context of this PageViewLinks.  # noqa: E501

        The ID of the context for the request (course id if context_type is Course, etc)  # noqa: E501

        :return: The context of this PageViewLinks.  # noqa: E501
        :rtype: int
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this PageViewLinks.

        The ID of the context for the request (course id if context_type is Course, etc)  # noqa: E501

        :param context: The context of this PageViewLinks.  # noqa: E501
        :type: int
        """

        self._context = context

    @property
    def asset(self):
        """Gets the asset of this PageViewLinks.  # noqa: E501

        The ID of the asset for the request, if any  # noqa: E501

        :return: The asset of this PageViewLinks.  # noqa: E501
        :rtype: int
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this PageViewLinks.

        The ID of the asset for the request, if any  # noqa: E501

        :param asset: The asset of this PageViewLinks.  # noqa: E501
        :type: int
        """

        self._asset = asset

    @property
    def real_user(self):
        """Gets the real_user of this PageViewLinks.  # noqa: E501

        The ID of the actual user who made this request, if the request was made by a user who was masquerading  # noqa: E501

        :return: The real_user of this PageViewLinks.  # noqa: E501
        :rtype: int
        """
        return self._real_user

    @real_user.setter
    def real_user(self, real_user):
        """Sets the real_user of this PageViewLinks.

        The ID of the actual user who made this request, if the request was made by a user who was masquerading  # noqa: E501

        :param real_user: The real_user of this PageViewLinks.  # noqa: E501
        :type: int
        """

        self._real_user = real_user

    @property
    def account(self):
        """Gets the account of this PageViewLinks.  # noqa: E501

        The ID of the account context for this page view  # noqa: E501

        :return: The account of this PageViewLinks.  # noqa: E501
        :rtype: int
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PageViewLinks.

        The ID of the account context for this page view  # noqa: E501

        :param account: The account of this PageViewLinks.  # noqa: E501
        :type: int
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageViewLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageViewLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PageViewLinks):
            return True

        return self.to_dict() != other.to_dict()
