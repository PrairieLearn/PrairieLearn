# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RubricAssessment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'rubric_id': 'int',
        'rubric_association_id': 'int',
        'score': 'int',
        'artifact_type': 'str',
        'artifact_id': 'int',
        'artifact_attempt': 'int',
        'assessment_type': 'str',
        'assessor_id': 'int',
        'data': 'list[object]',
        'comments': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'rubric_id': 'rubric_id',
        'rubric_association_id': 'rubric_association_id',
        'score': 'score',
        'artifact_type': 'artifact_type',
        'artifact_id': 'artifact_id',
        'artifact_attempt': 'artifact_attempt',
        'assessment_type': 'assessment_type',
        'assessor_id': 'assessor_id',
        'data': 'data',
        'comments': 'comments'
    }

    def __init__(self, id=None, rubric_id=None, rubric_association_id=None, score=None, artifact_type=None, artifact_id=None, artifact_attempt=None, assessment_type=None, assessor_id=None, data=None, comments=None, _configuration=None):  # noqa: E501
        """RubricAssessment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._rubric_id = None
        self._rubric_association_id = None
        self._score = None
        self._artifact_type = None
        self._artifact_id = None
        self._artifact_attempt = None
        self._assessment_type = None
        self._assessor_id = None
        self._data = None
        self._comments = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if rubric_id is not None:
            self.rubric_id = rubric_id
        if rubric_association_id is not None:
            self.rubric_association_id = rubric_association_id
        if score is not None:
            self.score = score
        if artifact_type is not None:
            self.artifact_type = artifact_type
        if artifact_id is not None:
            self.artifact_id = artifact_id
        if artifact_attempt is not None:
            self.artifact_attempt = artifact_attempt
        if assessment_type is not None:
            self.assessment_type = assessment_type
        if assessor_id is not None:
            self.assessor_id = assessor_id
        if data is not None:
            self.data = data
        if comments is not None:
            self.comments = comments

    @property
    def id(self):
        """Gets the id of this RubricAssessment.  # noqa: E501

        the ID of the rubric  # noqa: E501

        :return: The id of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RubricAssessment.

        the ID of the rubric  # noqa: E501

        :param id: The id of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rubric_id(self):
        """Gets the rubric_id of this RubricAssessment.  # noqa: E501

        the rubric the assessment belongs to  # noqa: E501

        :return: The rubric_id of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._rubric_id

    @rubric_id.setter
    def rubric_id(self, rubric_id):
        """Sets the rubric_id of this RubricAssessment.

        the rubric the assessment belongs to  # noqa: E501

        :param rubric_id: The rubric_id of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._rubric_id = rubric_id

    @property
    def rubric_association_id(self):
        """Gets the rubric_association_id of this RubricAssessment.  # noqa: E501


        :return: The rubric_association_id of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._rubric_association_id

    @rubric_association_id.setter
    def rubric_association_id(self, rubric_association_id):
        """Sets the rubric_association_id of this RubricAssessment.


        :param rubric_association_id: The rubric_association_id of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._rubric_association_id = rubric_association_id

    @property
    def score(self):
        """Gets the score of this RubricAssessment.  # noqa: E501


        :return: The score of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RubricAssessment.


        :param score: The score of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def artifact_type(self):
        """Gets the artifact_type of this RubricAssessment.  # noqa: E501

        the object of the assessment  # noqa: E501

        :return: The artifact_type of this RubricAssessment.  # noqa: E501
        :rtype: str
        """
        return self._artifact_type

    @artifact_type.setter
    def artifact_type(self, artifact_type):
        """Sets the artifact_type of this RubricAssessment.

        the object of the assessment  # noqa: E501

        :param artifact_type: The artifact_type of this RubricAssessment.  # noqa: E501
        :type: str
        """

        self._artifact_type = artifact_type

    @property
    def artifact_id(self):
        """Gets the artifact_id of this RubricAssessment.  # noqa: E501

        the id of the object of the assessment  # noqa: E501

        :return: The artifact_id of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this RubricAssessment.

        the id of the object of the assessment  # noqa: E501

        :param artifact_id: The artifact_id of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._artifact_id = artifact_id

    @property
    def artifact_attempt(self):
        """Gets the artifact_attempt of this RubricAssessment.  # noqa: E501

        the current number of attempts made on the object of the assessment  # noqa: E501

        :return: The artifact_attempt of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._artifact_attempt

    @artifact_attempt.setter
    def artifact_attempt(self, artifact_attempt):
        """Sets the artifact_attempt of this RubricAssessment.

        the current number of attempts made on the object of the assessment  # noqa: E501

        :param artifact_attempt: The artifact_attempt of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._artifact_attempt = artifact_attempt

    @property
    def assessment_type(self):
        """Gets the assessment_type of this RubricAssessment.  # noqa: E501

        the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'  # noqa: E501

        :return: The assessment_type of this RubricAssessment.  # noqa: E501
        :rtype: str
        """
        return self._assessment_type

    @assessment_type.setter
    def assessment_type(self, assessment_type):
        """Sets the assessment_type of this RubricAssessment.

        the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'  # noqa: E501

        :param assessment_type: The assessment_type of this RubricAssessment.  # noqa: E501
        :type: str
        """

        self._assessment_type = assessment_type

    @property
    def assessor_id(self):
        """Gets the assessor_id of this RubricAssessment.  # noqa: E501

        user id of the person who made the assessment  # noqa: E501

        :return: The assessor_id of this RubricAssessment.  # noqa: E501
        :rtype: int
        """
        return self._assessor_id

    @assessor_id.setter
    def assessor_id(self, assessor_id):
        """Sets the assessor_id of this RubricAssessment.

        user id of the person who made the assessment  # noqa: E501

        :param assessor_id: The assessor_id of this RubricAssessment.  # noqa: E501
        :type: int
        """

        self._assessor_id = assessor_id

    @property
    def data(self):
        """Gets the data of this RubricAssessment.  # noqa: E501

        (Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.  # noqa: E501

        :return: The data of this RubricAssessment.  # noqa: E501
        :rtype: list[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RubricAssessment.

        (Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.  # noqa: E501

        :param data: The data of this RubricAssessment.  # noqa: E501
        :type: list[object]
        """

        self._data = data

    @property
    def comments(self):
        """Gets the comments of this RubricAssessment.  # noqa: E501

        (Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.  # noqa: E501

        :return: The comments of this RubricAssessment.  # noqa: E501
        :rtype: list[str]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this RubricAssessment.

        (Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.  # noqa: E501

        :param comments: The comments of this RubricAssessment.  # noqa: E501
        :type: list[str]
        """

        self._comments = comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RubricAssessment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RubricAssessment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RubricAssessment):
            return True

        return self.to_dict() != other.to_dict()
