# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Role(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'label': 'str',
        'role': 'str',
        'base_role_type': 'str',
        'is_account_role': 'bool',
        'account': 'object',
        'workflow_state': 'str',
        'created_at': 'ModelDatetime',
        'last_updated_at': 'ModelDatetime',
        'permissions': 'object'
    }

    attribute_map = {
        'id': 'id',
        'label': 'label',
        'role': 'role',
        'base_role_type': 'base_role_type',
        'is_account_role': 'is_account_role',
        'account': 'account',
        'workflow_state': 'workflow_state',
        'created_at': 'created_at',
        'last_updated_at': 'last_updated_at',
        'permissions': 'permissions'
    }

    def __init__(self, id=None, label=None, role=None, base_role_type=None, is_account_role=None, account=None, workflow_state=None, created_at=None, last_updated_at=None, permissions=None, _configuration=None):  # noqa: E501
        """Role - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._label = None
        self._role = None
        self._base_role_type = None
        self._is_account_role = None
        self._account = None
        self._workflow_state = None
        self._created_at = None
        self._last_updated_at = None
        self._permissions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if role is not None:
            self.role = role
        if base_role_type is not None:
            self.base_role_type = base_role_type
        if is_account_role is not None:
            self.is_account_role = is_account_role
        if account is not None:
            self.account = account
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if created_at is not None:
            self.created_at = created_at
        if last_updated_at is not None:
            self.last_updated_at = last_updated_at
        if permissions is not None:
            self.permissions = permissions

    @property
    def id(self):
        """Gets the id of this Role.  # noqa: E501

        The id of the role  # noqa: E501

        :return: The id of this Role.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Role.

        The id of the role  # noqa: E501

        :param id: The id of this Role.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Role.  # noqa: E501

        The label of the role.  # noqa: E501

        :return: The label of this Role.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Role.

        The label of the role.  # noqa: E501

        :param label: The label of this Role.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def role(self):
        """Gets the role of this Role.  # noqa: E501

        The label of the role. (Deprecated alias for 'label')  # noqa: E501

        :return: The role of this Role.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Role.

        The label of the role. (Deprecated alias for 'label')  # noqa: E501

        :param role: The role of this Role.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def base_role_type(self):
        """Gets the base_role_type of this Role.  # noqa: E501

        The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.  # noqa: E501

        :return: The base_role_type of this Role.  # noqa: E501
        :rtype: str
        """
        return self._base_role_type

    @base_role_type.setter
    def base_role_type(self, base_role_type):
        """Sets the base_role_type of this Role.

        The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.  # noqa: E501

        :param base_role_type: The base_role_type of this Role.  # noqa: E501
        :type: str
        """

        self._base_role_type = base_role_type

    @property
    def is_account_role(self):
        """Gets the is_account_role of this Role.  # noqa: E501

        Whether this role applies to account memberships (i.e., not linked to an enrollment in a course).  # noqa: E501

        :return: The is_account_role of this Role.  # noqa: E501
        :rtype: bool
        """
        return self._is_account_role

    @is_account_role.setter
    def is_account_role(self, is_account_role):
        """Sets the is_account_role of this Role.

        Whether this role applies to account memberships (i.e., not linked to an enrollment in a course).  # noqa: E501

        :param is_account_role: The is_account_role of this Role.  # noqa: E501
        :type: bool
        """

        self._is_account_role = is_account_role

    @property
    def account(self):
        """Gets the account of this Role.  # noqa: E501

        JSON representation of the account the role is defined in.  # noqa: E501

        :return: The account of this Role.  # noqa: E501
        :rtype: object
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Role.

        JSON representation of the account the role is defined in.  # noqa: E501

        :param account: The account of this Role.  # noqa: E501
        :type: object
        """

        self._account = account

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Role.  # noqa: E501

        The state of the role: 'active', 'inactive', or 'built_in'  # noqa: E501

        :return: The workflow_state of this Role.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Role.

        The state of the role: 'active', 'inactive', or 'built_in'  # noqa: E501

        :param workflow_state: The workflow_state of this Role.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def created_at(self):
        """Gets the created_at of this Role.  # noqa: E501

        The date and time the role was created.  # noqa: E501

        :return: The created_at of this Role.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Role.

        The date and time the role was created.  # noqa: E501

        :param created_at: The created_at of this Role.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def last_updated_at(self):
        """Gets the last_updated_at of this Role.  # noqa: E501

        The date and time the role was last updated.  # noqa: E501

        :return: The last_updated_at of this Role.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_updated_at

    @last_updated_at.setter
    def last_updated_at(self, last_updated_at):
        """Sets the last_updated_at of this Role.

        The date and time the role was last updated.  # noqa: E501

        :param last_updated_at: The last_updated_at of this Role.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_updated_at = last_updated_at

    @property
    def permissions(self):
        """Gets the permissions of this Role.  # noqa: E501

        A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).  # noqa: E501

        :return: The permissions of this Role.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Role.

        A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).  # noqa: E501

        :param permissions: The permissions of this Role.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Role, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Role):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Role):
            return True

        return self.to_dict() != other.to_dict()
