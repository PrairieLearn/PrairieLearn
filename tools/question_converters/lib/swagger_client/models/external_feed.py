# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ExternalFeed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'display_name': 'str',
        'url': 'str',
        'header_match': 'str',
        'created_at': 'ModelDatetime',
        'verbosity': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'url': 'url',
        'header_match': 'header_match',
        'created_at': 'created_at',
        'verbosity': 'verbosity'
    }

    def __init__(self, id=None, display_name=None, url=None, header_match=None, created_at=None, verbosity=None, _configuration=None):  # noqa: E501
        """ExternalFeed - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._display_name = None
        self._url = None
        self._header_match = None
        self._created_at = None
        self._verbosity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if url is not None:
            self.url = url
        if header_match is not None:
            self.header_match = header_match
        if created_at is not None:
            self.created_at = created_at
        if verbosity is not None:
            self.verbosity = verbosity

    @property
    def id(self):
        """Gets the id of this ExternalFeed.  # noqa: E501

        The ID of the feed  # noqa: E501

        :return: The id of this ExternalFeed.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExternalFeed.

        The ID of the feed  # noqa: E501

        :param id: The id of this ExternalFeed.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this ExternalFeed.  # noqa: E501

        The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL  # noqa: E501

        :return: The display_name of this ExternalFeed.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ExternalFeed.

        The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL  # noqa: E501

        :param display_name: The display_name of this ExternalFeed.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def url(self):
        """Gets the url of this ExternalFeed.  # noqa: E501

        The HTTP/HTTPS URL to the feed  # noqa: E501

        :return: The url of this ExternalFeed.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExternalFeed.

        The HTTP/HTTPS URL to the feed  # noqa: E501

        :param url: The url of this ExternalFeed.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def header_match(self):
        """Gets the header_match of this ExternalFeed.  # noqa: E501

        If not null, only feed entries whose title contains this string will trigger new posts in Canvas  # noqa: E501

        :return: The header_match of this ExternalFeed.  # noqa: E501
        :rtype: str
        """
        return self._header_match

    @header_match.setter
    def header_match(self, header_match):
        """Sets the header_match of this ExternalFeed.

        If not null, only feed entries whose title contains this string will trigger new posts in Canvas  # noqa: E501

        :param header_match: The header_match of this ExternalFeed.  # noqa: E501
        :type: str
        """

        self._header_match = header_match

    @property
    def created_at(self):
        """Gets the created_at of this ExternalFeed.  # noqa: E501

        When this external feed was added to Canvas  # noqa: E501

        :return: The created_at of this ExternalFeed.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExternalFeed.

        When this external feed was added to Canvas  # noqa: E501

        :param created_at: The created_at of this ExternalFeed.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def verbosity(self):
        """Gets the verbosity of this ExternalFeed.  # noqa: E501

        The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.  # noqa: E501

        :return: The verbosity of this ExternalFeed.  # noqa: E501
        :rtype: str
        """
        return self._verbosity

    @verbosity.setter
    def verbosity(self, verbosity):
        """Sets the verbosity of this ExternalFeed.

        The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.  # noqa: E501

        :param verbosity: The verbosity of this ExternalFeed.  # noqa: E501
        :type: str
        """

        self._verbosity = verbosity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalFeed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalFeed):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalFeed):
            return True

        return self.to_dict() != other.to_dict()
