# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MediaObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_add_captions': 'bool',
        'user_entered_title': 'str',
        'title': 'str',
        'media_id': 'str',
        'media_type': 'str',
        'media_tracks': 'str',
        'media_sources': 'str'
    }

    attribute_map = {
        'can_add_captions': 'can_add_captions',
        'user_entered_title': 'user_entered_title',
        'title': 'title',
        'media_id': 'media_id',
        'media_type': 'media_type',
        'media_tracks': 'media_tracks',
        'media_sources': 'media_sources'
    }

    def __init__(self, can_add_captions=None, user_entered_title=None, title=None, media_id=None, media_type=None, media_tracks=None, media_sources=None, _configuration=None):  # noqa: E501
        """MediaObject - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._can_add_captions = None
        self._user_entered_title = None
        self._title = None
        self._media_id = None
        self._media_type = None
        self._media_tracks = None
        self._media_sources = None
        self.discriminator = None

        if can_add_captions is not None:
            self.can_add_captions = can_add_captions
        if user_entered_title is not None:
            self.user_entered_title = user_entered_title
        if title is not None:
            self.title = title
        if media_id is not None:
            self.media_id = media_id
        if media_type is not None:
            self.media_type = media_type
        if media_tracks is not None:
            self.media_tracks = media_tracks
        if media_sources is not None:
            self.media_sources = media_sources

    @property
    def can_add_captions(self):
        """Gets the can_add_captions of this MediaObject.  # noqa: E501


        :return: The can_add_captions of this MediaObject.  # noqa: E501
        :rtype: bool
        """
        return self._can_add_captions

    @can_add_captions.setter
    def can_add_captions(self, can_add_captions):
        """Sets the can_add_captions of this MediaObject.


        :param can_add_captions: The can_add_captions of this MediaObject.  # noqa: E501
        :type: bool
        """

        self._can_add_captions = can_add_captions

    @property
    def user_entered_title(self):
        """Gets the user_entered_title of this MediaObject.  # noqa: E501


        :return: The user_entered_title of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._user_entered_title

    @user_entered_title.setter
    def user_entered_title(self, user_entered_title):
        """Sets the user_entered_title of this MediaObject.


        :param user_entered_title: The user_entered_title of this MediaObject.  # noqa: E501
        :type: str
        """

        self._user_entered_title = user_entered_title

    @property
    def title(self):
        """Gets the title of this MediaObject.  # noqa: E501


        :return: The title of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MediaObject.


        :param title: The title of this MediaObject.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def media_id(self):
        """Gets the media_id of this MediaObject.  # noqa: E501


        :return: The media_id of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._media_id

    @media_id.setter
    def media_id(self, media_id):
        """Sets the media_id of this MediaObject.


        :param media_id: The media_id of this MediaObject.  # noqa: E501
        :type: str
        """

        self._media_id = media_id

    @property
    def media_type(self):
        """Gets the media_type of this MediaObject.  # noqa: E501


        :return: The media_type of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this MediaObject.


        :param media_type: The media_type of this MediaObject.  # noqa: E501
        :type: str
        """

        self._media_type = media_type

    @property
    def media_tracks(self):
        """Gets the media_tracks of this MediaObject.  # noqa: E501


        :return: The media_tracks of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._media_tracks

    @media_tracks.setter
    def media_tracks(self, media_tracks):
        """Sets the media_tracks of this MediaObject.


        :param media_tracks: The media_tracks of this MediaObject.  # noqa: E501
        :type: str
        """

        self._media_tracks = media_tracks

    @property
    def media_sources(self):
        """Gets the media_sources of this MediaObject.  # noqa: E501


        :return: The media_sources of this MediaObject.  # noqa: E501
        :rtype: str
        """
        return self._media_sources

    @media_sources.setter
    def media_sources(self, media_sources):
        """Sets the media_sources of this MediaObject.


        :param media_sources: The media_sources of this MediaObject.  # noqa: E501
        :type: str
        """

        self._media_sources = media_sources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MediaObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MediaObject):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MediaObject):
            return True

        return self.to_dict() != other.to_dict()
