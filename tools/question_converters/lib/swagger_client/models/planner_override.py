# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PlannerOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'plannable_type': 'str',
        'plannable_id': 'int',
        'user_id': 'int',
        'assignment_id': 'int',
        'workflow_state': 'str',
        'marked_complete': 'bool',
        'dismissed': 'bool',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'deleted_at': 'ModelDatetime'
    }

    attribute_map = {
        'id': 'id',
        'plannable_type': 'plannable_type',
        'plannable_id': 'plannable_id',
        'user_id': 'user_id',
        'assignment_id': 'assignment_id',
        'workflow_state': 'workflow_state',
        'marked_complete': 'marked_complete',
        'dismissed': 'dismissed',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, id=None, plannable_type=None, plannable_id=None, user_id=None, assignment_id=None, workflow_state=None, marked_complete=None, dismissed=None, created_at=None, updated_at=None, deleted_at=None, _configuration=None):  # noqa: E501
        """PlannerOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._plannable_type = None
        self._plannable_id = None
        self._user_id = None
        self._assignment_id = None
        self._workflow_state = None
        self._marked_complete = None
        self._dismissed = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if plannable_type is not None:
            self.plannable_type = plannable_type
        if plannable_id is not None:
            self.plannable_id = plannable_id
        if user_id is not None:
            self.user_id = user_id
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if marked_complete is not None:
            self.marked_complete = marked_complete
        if dismissed is not None:
            self.dismissed = dismissed
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this PlannerOverride.  # noqa: E501

        The ID of the planner override  # noqa: E501

        :return: The id of this PlannerOverride.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlannerOverride.

        The ID of the planner override  # noqa: E501

        :param id: The id of this PlannerOverride.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def plannable_type(self):
        """Gets the plannable_type of this PlannerOverride.  # noqa: E501

        The type of the associated object for the planner override  # noqa: E501

        :return: The plannable_type of this PlannerOverride.  # noqa: E501
        :rtype: str
        """
        return self._plannable_type

    @plannable_type.setter
    def plannable_type(self, plannable_type):
        """Sets the plannable_type of this PlannerOverride.

        The type of the associated object for the planner override  # noqa: E501

        :param plannable_type: The plannable_type of this PlannerOverride.  # noqa: E501
        :type: str
        """

        self._plannable_type = plannable_type

    @property
    def plannable_id(self):
        """Gets the plannable_id of this PlannerOverride.  # noqa: E501

        The id of the associated object for the planner override  # noqa: E501

        :return: The plannable_id of this PlannerOverride.  # noqa: E501
        :rtype: int
        """
        return self._plannable_id

    @plannable_id.setter
    def plannable_id(self, plannable_id):
        """Sets the plannable_id of this PlannerOverride.

        The id of the associated object for the planner override  # noqa: E501

        :param plannable_id: The plannable_id of this PlannerOverride.  # noqa: E501
        :type: int
        """

        self._plannable_id = plannable_id

    @property
    def user_id(self):
        """Gets the user_id of this PlannerOverride.  # noqa: E501

        The id of the associated user for the planner override  # noqa: E501

        :return: The user_id of this PlannerOverride.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlannerOverride.

        The id of the associated user for the planner override  # noqa: E501

        :param user_id: The user_id of this PlannerOverride.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this PlannerOverride.  # noqa: E501

        The id of the plannable's associated assignment, if it has one  # noqa: E501

        :return: The assignment_id of this PlannerOverride.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this PlannerOverride.

        The id of the plannable's associated assignment, if it has one  # noqa: E501

        :param assignment_id: The assignment_id of this PlannerOverride.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this PlannerOverride.  # noqa: E501

        The current published state of the item, synced with the associated object  # noqa: E501

        :return: The workflow_state of this PlannerOverride.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this PlannerOverride.

        The current published state of the item, synced with the associated object  # noqa: E501

        :param workflow_state: The workflow_state of this PlannerOverride.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def marked_complete(self):
        """Gets the marked_complete of this PlannerOverride.  # noqa: E501

        Controls whether or not the associated plannable item is marked complete on the planner  # noqa: E501

        :return: The marked_complete of this PlannerOverride.  # noqa: E501
        :rtype: bool
        """
        return self._marked_complete

    @marked_complete.setter
    def marked_complete(self, marked_complete):
        """Sets the marked_complete of this PlannerOverride.

        Controls whether or not the associated plannable item is marked complete on the planner  # noqa: E501

        :param marked_complete: The marked_complete of this PlannerOverride.  # noqa: E501
        :type: bool
        """

        self._marked_complete = marked_complete

    @property
    def dismissed(self):
        """Gets the dismissed of this PlannerOverride.  # noqa: E501

        Controls whether or not the associated plannable item shows up in the opportunities list  # noqa: E501

        :return: The dismissed of this PlannerOverride.  # noqa: E501
        :rtype: bool
        """
        return self._dismissed

    @dismissed.setter
    def dismissed(self, dismissed):
        """Sets the dismissed of this PlannerOverride.

        Controls whether or not the associated plannable item shows up in the opportunities list  # noqa: E501

        :param dismissed: The dismissed of this PlannerOverride.  # noqa: E501
        :type: bool
        """

        self._dismissed = dismissed

    @property
    def created_at(self):
        """Gets the created_at of this PlannerOverride.  # noqa: E501

        The datetime of when the planner override was created  # noqa: E501

        :return: The created_at of this PlannerOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PlannerOverride.

        The datetime of when the planner override was created  # noqa: E501

        :param created_at: The created_at of this PlannerOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this PlannerOverride.  # noqa: E501

        The datetime of when the planner override was updated  # noqa: E501

        :return: The updated_at of this PlannerOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PlannerOverride.

        The datetime of when the planner override was updated  # noqa: E501

        :param updated_at: The updated_at of this PlannerOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this PlannerOverride.  # noqa: E501

        The datetime of when the planner override was deleted, if applicable  # noqa: E501

        :return: The deleted_at of this PlannerOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this PlannerOverride.

        The datetime of when the planner override was deleted, if applicable  # noqa: E501

        :param deleted_at: The deleted_at of this PlannerOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlannerOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlannerOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlannerOverride):
            return True

        return self.to_dict() != other.to_dict()
