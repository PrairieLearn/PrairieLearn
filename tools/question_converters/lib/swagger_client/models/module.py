# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Module(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'workflow_state': 'str',
        'position': 'int',
        'name': 'str',
        'unlock_at': 'ModelDatetime',
        'require_sequential_progress': 'bool',
        'prerequisite_module_ids': 'list[int]',
        'items_count': 'int',
        'items_url': 'str',
        'items': 'list[ModuleItem]',
        'state': 'str',
        'completed_at': 'ModelDatetime',
        'publish_final_grade': 'bool',
        'published': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'workflow_state': 'workflow_state',
        'position': 'position',
        'name': 'name',
        'unlock_at': 'unlock_at',
        'require_sequential_progress': 'require_sequential_progress',
        'prerequisite_module_ids': 'prerequisite_module_ids',
        'items_count': 'items_count',
        'items_url': 'items_url',
        'items': 'items',
        'state': 'state',
        'completed_at': 'completed_at',
        'publish_final_grade': 'publish_final_grade',
        'published': 'published'
    }

    def __init__(self, id=None, workflow_state=None, position=None, name=None, unlock_at=None, require_sequential_progress=None, prerequisite_module_ids=None, items_count=None, items_url=None, items=None, state=None, completed_at=None, publish_final_grade=None, published=None, _configuration=None):  # noqa: E501
        """Module - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._workflow_state = None
        self._position = None
        self._name = None
        self._unlock_at = None
        self._require_sequential_progress = None
        self._prerequisite_module_ids = None
        self._items_count = None
        self._items_url = None
        self._items = None
        self._state = None
        self._completed_at = None
        self._publish_final_grade = None
        self._published = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if position is not None:
            self.position = position
        if name is not None:
            self.name = name
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if require_sequential_progress is not None:
            self.require_sequential_progress = require_sequential_progress
        if prerequisite_module_ids is not None:
            self.prerequisite_module_ids = prerequisite_module_ids
        if items_count is not None:
            self.items_count = items_count
        if items_url is not None:
            self.items_url = items_url
        if items is not None:
            self.items = items
        if state is not None:
            self.state = state
        if completed_at is not None:
            self.completed_at = completed_at
        if publish_final_grade is not None:
            self.publish_final_grade = publish_final_grade
        if published is not None:
            self.published = published

    @property
    def id(self):
        """Gets the id of this Module.  # noqa: E501

        the unique identifier for the module  # noqa: E501

        :return: The id of this Module.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Module.

        the unique identifier for the module  # noqa: E501

        :param id: The id of this Module.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Module.  # noqa: E501

        the state of the module: 'active', 'deleted'  # noqa: E501

        :return: The workflow_state of this Module.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Module.

        the state of the module: 'active', 'deleted'  # noqa: E501

        :param workflow_state: The workflow_state of this Module.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def position(self):
        """Gets the position of this Module.  # noqa: E501

        the position of this module in the course (1-based)  # noqa: E501

        :return: The position of this Module.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Module.

        the position of this module in the course (1-based)  # noqa: E501

        :param position: The position of this Module.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def name(self):
        """Gets the name of this Module.  # noqa: E501

        the name of this module  # noqa: E501

        :return: The name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Module.

        the name of this module  # noqa: E501

        :param name: The name of this Module.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unlock_at(self):
        """Gets the unlock_at of this Module.  # noqa: E501

        (Optional) the date this module will unlock  # noqa: E501

        :return: The unlock_at of this Module.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this Module.

        (Optional) the date this module will unlock  # noqa: E501

        :param unlock_at: The unlock_at of this Module.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def require_sequential_progress(self):
        """Gets the require_sequential_progress of this Module.  # noqa: E501

        Whether module items must be unlocked in order  # noqa: E501

        :return: The require_sequential_progress of this Module.  # noqa: E501
        :rtype: bool
        """
        return self._require_sequential_progress

    @require_sequential_progress.setter
    def require_sequential_progress(self, require_sequential_progress):
        """Sets the require_sequential_progress of this Module.

        Whether module items must be unlocked in order  # noqa: E501

        :param require_sequential_progress: The require_sequential_progress of this Module.  # noqa: E501
        :type: bool
        """

        self._require_sequential_progress = require_sequential_progress

    @property
    def prerequisite_module_ids(self):
        """Gets the prerequisite_module_ids of this Module.  # noqa: E501

        IDs of Modules that must be completed before this one is unlocked  # noqa: E501

        :return: The prerequisite_module_ids of this Module.  # noqa: E501
        :rtype: list[int]
        """
        return self._prerequisite_module_ids

    @prerequisite_module_ids.setter
    def prerequisite_module_ids(self, prerequisite_module_ids):
        """Sets the prerequisite_module_ids of this Module.

        IDs of Modules that must be completed before this one is unlocked  # noqa: E501

        :param prerequisite_module_ids: The prerequisite_module_ids of this Module.  # noqa: E501
        :type: list[int]
        """

        self._prerequisite_module_ids = prerequisite_module_ids

    @property
    def items_count(self):
        """Gets the items_count of this Module.  # noqa: E501

        The number of items in the module  # noqa: E501

        :return: The items_count of this Module.  # noqa: E501
        :rtype: int
        """
        return self._items_count

    @items_count.setter
    def items_count(self, items_count):
        """Sets the items_count of this Module.

        The number of items in the module  # noqa: E501

        :param items_count: The items_count of this Module.  # noqa: E501
        :type: int
        """

        self._items_count = items_count

    @property
    def items_url(self):
        """Gets the items_url of this Module.  # noqa: E501

        The API URL to retrive this module's items  # noqa: E501

        :return: The items_url of this Module.  # noqa: E501
        :rtype: str
        """
        return self._items_url

    @items_url.setter
    def items_url(self, items_url):
        """Sets the items_url of this Module.

        The API URL to retrive this module's items  # noqa: E501

        :param items_url: The items_url of this Module.  # noqa: E501
        :type: str
        """

        self._items_url = items_url

    @property
    def items(self):
        """Gets the items of this Module.  # noqa: E501

        The contents of this module, as an array of Module Items. (Present only if requested via include[]=items AND the module is not deemed too large by Canvas.)  # noqa: E501

        :return: The items of this Module.  # noqa: E501
        :rtype: list[ModuleItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Module.

        The contents of this module, as an array of Module Items. (Present only if requested via include[]=items AND the module is not deemed too large by Canvas.)  # noqa: E501

        :param items: The items of this Module.  # noqa: E501
        :type: list[ModuleItem]
        """

        self._items = items

    @property
    def state(self):
        """Gets the state of this Module.  # noqa: E501

        The state of this Module for the calling user one of 'locked', 'unlocked', 'started', 'completed' (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :return: The state of this Module.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Module.

        The state of this Module for the calling user one of 'locked', 'unlocked', 'started', 'completed' (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :param state: The state of this Module.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def completed_at(self):
        """Gets the completed_at of this Module.  # noqa: E501

        the date the calling user completed the module (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :return: The completed_at of this Module.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Module.

        the date the calling user completed the module (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :param completed_at: The completed_at of this Module.  # noqa: E501
        :type: ModelDatetime
        """

        self._completed_at = completed_at

    @property
    def publish_final_grade(self):
        """Gets the publish_final_grade of this Module.  # noqa: E501

        if the student's final grade for the course should be published to the SIS upon completion of this module  # noqa: E501

        :return: The publish_final_grade of this Module.  # noqa: E501
        :rtype: bool
        """
        return self._publish_final_grade

    @publish_final_grade.setter
    def publish_final_grade(self, publish_final_grade):
        """Sets the publish_final_grade of this Module.

        if the student's final grade for the course should be published to the SIS upon completion of this module  # noqa: E501

        :param publish_final_grade: The publish_final_grade of this Module.  # noqa: E501
        :type: bool
        """

        self._publish_final_grade = publish_final_grade

    @property
    def published(self):
        """Gets the published of this Module.  # noqa: E501

        (Optional) Whether this module is published. This field is present only if the caller has permission to view unpublished modules.  # noqa: E501

        :return: The published of this Module.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Module.

        (Optional) Whether this module is published. This field is present only if the caller has permission to view unpublished modules.  # noqa: E501

        :param published: The published of this Module.  # noqa: E501
        :type: bool
        """

        self._published = published

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Module, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Module):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Module):
            return True

        return self.to_dict() != other.to_dict()
