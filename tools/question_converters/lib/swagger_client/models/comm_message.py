# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CommMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'ModelDatetime',
        'sent_at': 'ModelDatetime',
        'workflow_state': 'str',
        '_from': 'str',
        'from_name': 'str',
        'to': 'str',
        'reply_to': 'str',
        'subject': 'str',
        'body': 'str',
        'html_body': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'sent_at': 'sent_at',
        'workflow_state': 'workflow_state',
        '_from': 'from',
        'from_name': 'from_name',
        'to': 'to',
        'reply_to': 'reply_to',
        'subject': 'subject',
        'body': 'body',
        'html_body': 'html_body'
    }

    def __init__(self, id=None, created_at=None, sent_at=None, workflow_state=None, _from=None, from_name=None, to=None, reply_to=None, subject=None, body=None, html_body=None, _configuration=None):  # noqa: E501
        """CommMessage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._sent_at = None
        self._workflow_state = None
        self.__from = None
        self._from_name = None
        self._to = None
        self._reply_to = None
        self._subject = None
        self._body = None
        self._html_body = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if sent_at is not None:
            self.sent_at = sent_at
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if _from is not None:
            self._from = _from
        if from_name is not None:
            self.from_name = from_name
        if to is not None:
            self.to = to
        if reply_to is not None:
            self.reply_to = reply_to
        if subject is not None:
            self.subject = subject
        if body is not None:
            self.body = body
        if html_body is not None:
            self.html_body = html_body

    @property
    def id(self):
        """Gets the id of this CommMessage.  # noqa: E501

        The ID of the CommMessage.  # noqa: E501

        :return: The id of this CommMessage.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommMessage.

        The ID of the CommMessage.  # noqa: E501

        :param id: The id of this CommMessage.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this CommMessage.  # noqa: E501

        The date and time this message was created  # noqa: E501

        :return: The created_at of this CommMessage.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CommMessage.

        The date and time this message was created  # noqa: E501

        :param created_at: The created_at of this CommMessage.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def sent_at(self):
        """Gets the sent_at of this CommMessage.  # noqa: E501

        The date and time this message was sent  # noqa: E501

        :return: The sent_at of this CommMessage.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this CommMessage.

        The date and time this message was sent  # noqa: E501

        :param sent_at: The sent_at of this CommMessage.  # noqa: E501
        :type: ModelDatetime
        """

        self._sent_at = sent_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this CommMessage.  # noqa: E501

        The workflow state of the message. One of 'created', 'staged', 'sending', 'sent', 'bounced', 'dashboard', 'cancelled', or 'closed'  # noqa: E501

        :return: The workflow_state of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this CommMessage.

        The workflow state of the message. One of 'created', 'staged', 'sending', 'sent', 'bounced', 'dashboard', 'cancelled', or 'closed'  # noqa: E501

        :param workflow_state: The workflow_state of this CommMessage.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def _from(self):
        """Gets the _from of this CommMessage.  # noqa: E501

        The address that was put in the 'from' field of the message  # noqa: E501

        :return: The _from of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this CommMessage.

        The address that was put in the 'from' field of the message  # noqa: E501

        :param _from: The _from of this CommMessage.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def from_name(self):
        """Gets the from_name of this CommMessage.  # noqa: E501

        The display name for the from address  # noqa: E501

        :return: The from_name of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this CommMessage.

        The display name for the from address  # noqa: E501

        :param from_name: The from_name of this CommMessage.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def to(self):
        """Gets the to of this CommMessage.  # noqa: E501

        The address the message was sent to:  # noqa: E501

        :return: The to of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this CommMessage.

        The address the message was sent to:  # noqa: E501

        :param to: The to of this CommMessage.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def reply_to(self):
        """Gets the reply_to of this CommMessage.  # noqa: E501

        The reply_to header of the message  # noqa: E501

        :return: The reply_to of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._reply_to

    @reply_to.setter
    def reply_to(self, reply_to):
        """Sets the reply_to of this CommMessage.

        The reply_to header of the message  # noqa: E501

        :param reply_to: The reply_to of this CommMessage.  # noqa: E501
        :type: str
        """

        self._reply_to = reply_to

    @property
    def subject(self):
        """Gets the subject of this CommMessage.  # noqa: E501

        The message subject  # noqa: E501

        :return: The subject of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CommMessage.

        The message subject  # noqa: E501

        :param subject: The subject of this CommMessage.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this CommMessage.  # noqa: E501

        The plain text body of the message  # noqa: E501

        :return: The body of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CommMessage.

        The plain text body of the message  # noqa: E501

        :param body: The body of this CommMessage.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def html_body(self):
        """Gets the html_body of this CommMessage.  # noqa: E501

        The HTML body of the message.  # noqa: E501

        :return: The html_body of this CommMessage.  # noqa: E501
        :rtype: str
        """
        return self._html_body

    @html_body.setter
    def html_body(self, html_body):
        """Sets the html_body of this CommMessage.

        The HTML body of the message.  # noqa: E501

        :param html_body: The html_body of this CommMessage.  # noqa: E501
        :type: str
        """

        self._html_body = html_body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommMessage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommMessage):
            return True

        return self.to_dict() != other.to_dict()
