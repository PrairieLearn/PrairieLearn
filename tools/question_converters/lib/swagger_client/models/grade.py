# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Grade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'grade': 'float',
        'total': 'float',
        'possible': 'float',
        'dropped': 'list[object]'
    }

    attribute_map = {
        'grade': 'grade',
        'total': 'total',
        'possible': 'possible',
        'dropped': 'dropped'
    }

    def __init__(self, grade=None, total=None, possible=None, dropped=None, _configuration=None):  # noqa: E501
        """Grade - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._grade = None
        self._total = None
        self._possible = None
        self._dropped = None
        self.discriminator = None

        if grade is not None:
            self.grade = grade
        if total is not None:
            self.total = total
        if possible is not None:
            self.possible = possible
        if dropped is not None:
            self.dropped = dropped

    @property
    def grade(self):
        """Gets the grade of this Grade.  # noqa: E501

        The grade for the course  # noqa: E501

        :return: The grade of this Grade.  # noqa: E501
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this Grade.

        The grade for the course  # noqa: E501

        :param grade: The grade of this Grade.  # noqa: E501
        :type: float
        """

        self._grade = grade

    @property
    def total(self):
        """Gets the total of this Grade.  # noqa: E501

        The total points earned in the course  # noqa: E501

        :return: The total of this Grade.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Grade.

        The total points earned in the course  # noqa: E501

        :param total: The total of this Grade.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def possible(self):
        """Gets the possible of this Grade.  # noqa: E501

        The total points possible for the course  # noqa: E501

        :return: The possible of this Grade.  # noqa: E501
        :rtype: float
        """
        return self._possible

    @possible.setter
    def possible(self, possible):
        """Sets the possible of this Grade.

        The total points possible for the course  # noqa: E501

        :param possible: The possible of this Grade.  # noqa: E501
        :type: float
        """

        self._possible = possible

    @property
    def dropped(self):
        """Gets the dropped of this Grade.  # noqa: E501

        The dropped grades for the course  # noqa: E501

        :return: The dropped of this Grade.  # noqa: E501
        :rtype: list[object]
        """
        return self._dropped

    @dropped.setter
    def dropped(self, dropped):
        """Sets the dropped of this Grade.

        The dropped grades for the course  # noqa: E501

        :param dropped: The dropped of this Grade.  # noqa: E501
        :type: list[object]
        """

        self._dropped = dropped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Grade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Grade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Grade):
            return True

        return self.to_dict() != other.to_dict()
