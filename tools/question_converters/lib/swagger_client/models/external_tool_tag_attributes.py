# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ExternalToolTagAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'new_tab': 'bool',
        'resource_link_id': 'str'
    }

    attribute_map = {
        'url': 'url',
        'new_tab': 'new_tab',
        'resource_link_id': 'resource_link_id'
    }

    def __init__(self, url=None, new_tab=None, resource_link_id=None, _configuration=None):  # noqa: E501
        """ExternalToolTagAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._new_tab = None
        self._resource_link_id = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if new_tab is not None:
            self.new_tab = new_tab
        if resource_link_id is not None:
            self.resource_link_id = resource_link_id

    @property
    def url(self):
        """Gets the url of this ExternalToolTagAttributes.  # noqa: E501

        URL to the external tool  # noqa: E501

        :return: The url of this ExternalToolTagAttributes.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ExternalToolTagAttributes.

        URL to the external tool  # noqa: E501

        :param url: The url of this ExternalToolTagAttributes.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def new_tab(self):
        """Gets the new_tab of this ExternalToolTagAttributes.  # noqa: E501

        Whether or not there is a new tab for the external tool  # noqa: E501

        :return: The new_tab of this ExternalToolTagAttributes.  # noqa: E501
        :rtype: bool
        """
        return self._new_tab

    @new_tab.setter
    def new_tab(self, new_tab):
        """Sets the new_tab of this ExternalToolTagAttributes.

        Whether or not there is a new tab for the external tool  # noqa: E501

        :param new_tab: The new_tab of this ExternalToolTagAttributes.  # noqa: E501
        :type: bool
        """

        self._new_tab = new_tab

    @property
    def resource_link_id(self):
        """Gets the resource_link_id of this ExternalToolTagAttributes.  # noqa: E501

        the identifier for this tool_tag  # noqa: E501

        :return: The resource_link_id of this ExternalToolTagAttributes.  # noqa: E501
        :rtype: str
        """
        return self._resource_link_id

    @resource_link_id.setter
    def resource_link_id(self, resource_link_id):
        """Sets the resource_link_id of this ExternalToolTagAttributes.

        the identifier for this tool_tag  # noqa: E501

        :param resource_link_id: The resource_link_id of this ExternalToolTagAttributes.  # noqa: E501
        :type: str
        """

        self._resource_link_id = resource_link_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExternalToolTagAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalToolTagAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalToolTagAttributes):
            return True

        return self.to_dict() != other.to_dict()
