# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Enrollment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'course_id': 'int',
        'sis_course_id': 'str',
        'course_integration_id': 'str',
        'course_section_id': 'int',
        'section_integration_id': 'str',
        'sis_account_id': 'str',
        'sis_section_id': 'str',
        'sis_user_id': 'str',
        'enrollment_state': 'str',
        'limit_privileges_to_course_section': 'bool',
        'sis_import_id': 'int',
        'root_account_id': 'int',
        'type': 'str',
        'user_id': 'int',
        'associated_user_id': 'int',
        'role': 'str',
        'role_id': 'int',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'last_activity_at': 'ModelDatetime',
        'last_attended_at': 'ModelDatetime',
        'total_activity_time': 'int',
        'html_url': 'str',
        'grades': 'Grade',
        'user': 'User',
        'override_grade': 'str',
        'override_score': 'float',
        'unposted_current_grade': 'str',
        'unposted_final_grade': 'str',
        'unposted_current_score': 'str',
        'unposted_final_score': 'str',
        'has_grading_periods': 'bool',
        'totals_for_all_grading_periods_option': 'bool',
        'current_grading_period_title': 'str',
        'current_grading_period_id': 'int',
        'current_period_override_grade': 'str',
        'current_period_override_score': 'float',
        'current_period_unposted_current_score': 'float',
        'current_period_unposted_final_score': 'float',
        'current_period_unposted_current_grade': 'str',
        'current_period_unposted_final_grade': 'str'
    }

    attribute_map = {
        'id': 'id',
        'course_id': 'course_id',
        'sis_course_id': 'sis_course_id',
        'course_integration_id': 'course_integration_id',
        'course_section_id': 'course_section_id',
        'section_integration_id': 'section_integration_id',
        'sis_account_id': 'sis_account_id',
        'sis_section_id': 'sis_section_id',
        'sis_user_id': 'sis_user_id',
        'enrollment_state': 'enrollment_state',
        'limit_privileges_to_course_section': 'limit_privileges_to_course_section',
        'sis_import_id': 'sis_import_id',
        'root_account_id': 'root_account_id',
        'type': 'type',
        'user_id': 'user_id',
        'associated_user_id': 'associated_user_id',
        'role': 'role',
        'role_id': 'role_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'last_activity_at': 'last_activity_at',
        'last_attended_at': 'last_attended_at',
        'total_activity_time': 'total_activity_time',
        'html_url': 'html_url',
        'grades': 'grades',
        'user': 'user',
        'override_grade': 'override_grade',
        'override_score': 'override_score',
        'unposted_current_grade': 'unposted_current_grade',
        'unposted_final_grade': 'unposted_final_grade',
        'unposted_current_score': 'unposted_current_score',
        'unposted_final_score': 'unposted_final_score',
        'has_grading_periods': 'has_grading_periods',
        'totals_for_all_grading_periods_option': 'totals_for_all_grading_periods_option',
        'current_grading_period_title': 'current_grading_period_title',
        'current_grading_period_id': 'current_grading_period_id',
        'current_period_override_grade': 'current_period_override_grade',
        'current_period_override_score': 'current_period_override_score',
        'current_period_unposted_current_score': 'current_period_unposted_current_score',
        'current_period_unposted_final_score': 'current_period_unposted_final_score',
        'current_period_unposted_current_grade': 'current_period_unposted_current_grade',
        'current_period_unposted_final_grade': 'current_period_unposted_final_grade'
    }

    def __init__(self, id=None, course_id=None, sis_course_id=None, course_integration_id=None, course_section_id=None, section_integration_id=None, sis_account_id=None, sis_section_id=None, sis_user_id=None, enrollment_state=None, limit_privileges_to_course_section=None, sis_import_id=None, root_account_id=None, type=None, user_id=None, associated_user_id=None, role=None, role_id=None, created_at=None, updated_at=None, start_at=None, end_at=None, last_activity_at=None, last_attended_at=None, total_activity_time=None, html_url=None, grades=None, user=None, override_grade=None, override_score=None, unposted_current_grade=None, unposted_final_grade=None, unposted_current_score=None, unposted_final_score=None, has_grading_periods=None, totals_for_all_grading_periods_option=None, current_grading_period_title=None, current_grading_period_id=None, current_period_override_grade=None, current_period_override_score=None, current_period_unposted_current_score=None, current_period_unposted_final_score=None, current_period_unposted_current_grade=None, current_period_unposted_final_grade=None, _configuration=None):  # noqa: E501
        """Enrollment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._course_id = None
        self._sis_course_id = None
        self._course_integration_id = None
        self._course_section_id = None
        self._section_integration_id = None
        self._sis_account_id = None
        self._sis_section_id = None
        self._sis_user_id = None
        self._enrollment_state = None
        self._limit_privileges_to_course_section = None
        self._sis_import_id = None
        self._root_account_id = None
        self._type = None
        self._user_id = None
        self._associated_user_id = None
        self._role = None
        self._role_id = None
        self._created_at = None
        self._updated_at = None
        self._start_at = None
        self._end_at = None
        self._last_activity_at = None
        self._last_attended_at = None
        self._total_activity_time = None
        self._html_url = None
        self._grades = None
        self._user = None
        self._override_grade = None
        self._override_score = None
        self._unposted_current_grade = None
        self._unposted_final_grade = None
        self._unposted_current_score = None
        self._unposted_final_score = None
        self._has_grading_periods = None
        self._totals_for_all_grading_periods_option = None
        self._current_grading_period_title = None
        self._current_grading_period_id = None
        self._current_period_override_grade = None
        self._current_period_override_score = None
        self._current_period_unposted_current_score = None
        self._current_period_unposted_final_score = None
        self._current_period_unposted_current_grade = None
        self._current_period_unposted_final_grade = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if course_id is not None:
            self.course_id = course_id
        if sis_course_id is not None:
            self.sis_course_id = sis_course_id
        if course_integration_id is not None:
            self.course_integration_id = course_integration_id
        if course_section_id is not None:
            self.course_section_id = course_section_id
        if section_integration_id is not None:
            self.section_integration_id = section_integration_id
        if sis_account_id is not None:
            self.sis_account_id = sis_account_id
        if sis_section_id is not None:
            self.sis_section_id = sis_section_id
        if sis_user_id is not None:
            self.sis_user_id = sis_user_id
        if enrollment_state is not None:
            self.enrollment_state = enrollment_state
        if limit_privileges_to_course_section is not None:
            self.limit_privileges_to_course_section = limit_privileges_to_course_section
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if root_account_id is not None:
            self.root_account_id = root_account_id
        if type is not None:
            self.type = type
        if user_id is not None:
            self.user_id = user_id
        if associated_user_id is not None:
            self.associated_user_id = associated_user_id
        if role is not None:
            self.role = role
        if role_id is not None:
            self.role_id = role_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if last_activity_at is not None:
            self.last_activity_at = last_activity_at
        if last_attended_at is not None:
            self.last_attended_at = last_attended_at
        if total_activity_time is not None:
            self.total_activity_time = total_activity_time
        if html_url is not None:
            self.html_url = html_url
        if grades is not None:
            self.grades = grades
        if user is not None:
            self.user = user
        if override_grade is not None:
            self.override_grade = override_grade
        if override_score is not None:
            self.override_score = override_score
        if unposted_current_grade is not None:
            self.unposted_current_grade = unposted_current_grade
        if unposted_final_grade is not None:
            self.unposted_final_grade = unposted_final_grade
        if unposted_current_score is not None:
            self.unposted_current_score = unposted_current_score
        if unposted_final_score is not None:
            self.unposted_final_score = unposted_final_score
        if has_grading_periods is not None:
            self.has_grading_periods = has_grading_periods
        if totals_for_all_grading_periods_option is not None:
            self.totals_for_all_grading_periods_option = totals_for_all_grading_periods_option
        if current_grading_period_title is not None:
            self.current_grading_period_title = current_grading_period_title
        if current_grading_period_id is not None:
            self.current_grading_period_id = current_grading_period_id
        if current_period_override_grade is not None:
            self.current_period_override_grade = current_period_override_grade
        if current_period_override_score is not None:
            self.current_period_override_score = current_period_override_score
        if current_period_unposted_current_score is not None:
            self.current_period_unposted_current_score = current_period_unposted_current_score
        if current_period_unposted_final_score is not None:
            self.current_period_unposted_final_score = current_period_unposted_final_score
        if current_period_unposted_current_grade is not None:
            self.current_period_unposted_current_grade = current_period_unposted_current_grade
        if current_period_unposted_final_grade is not None:
            self.current_period_unposted_final_grade = current_period_unposted_final_grade

    @property
    def id(self):
        """Gets the id of this Enrollment.  # noqa: E501

        The ID of the enrollment.  # noqa: E501

        :return: The id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Enrollment.

        The ID of the enrollment.  # noqa: E501

        :param id: The id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def course_id(self):
        """Gets the course_id of this Enrollment.  # noqa: E501

        The unique id of the course.  # noqa: E501

        :return: The course_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Enrollment.

        The unique id of the course.  # noqa: E501

        :param course_id: The course_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def sis_course_id(self):
        """Gets the sis_course_id of this Enrollment.  # noqa: E501

        The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_course_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._sis_course_id

    @sis_course_id.setter
    def sis_course_id(self, sis_course_id):
        """Sets the sis_course_id of this Enrollment.

        The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_course_id: The sis_course_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._sis_course_id = sis_course_id

    @property
    def course_integration_id(self):
        """Gets the course_integration_id of this Enrollment.  # noqa: E501

        The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The course_integration_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._course_integration_id

    @course_integration_id.setter
    def course_integration_id(self, course_integration_id):
        """Sets the course_integration_id of this Enrollment.

        The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param course_integration_id: The course_integration_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._course_integration_id = course_integration_id

    @property
    def course_section_id(self):
        """Gets the course_section_id of this Enrollment.  # noqa: E501

        The unique id of the user's section.  # noqa: E501

        :return: The course_section_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._course_section_id

    @course_section_id.setter
    def course_section_id(self, course_section_id):
        """Sets the course_section_id of this Enrollment.

        The unique id of the user's section.  # noqa: E501

        :param course_section_id: The course_section_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._course_section_id = course_section_id

    @property
    def section_integration_id(self):
        """Gets the section_integration_id of this Enrollment.  # noqa: E501

        The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The section_integration_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._section_integration_id

    @section_integration_id.setter
    def section_integration_id(self, section_integration_id):
        """Sets the section_integration_id of this Enrollment.

        The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param section_integration_id: The section_integration_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._section_integration_id = section_integration_id

    @property
    def sis_account_id(self):
        """Gets the sis_account_id of this Enrollment.  # noqa: E501

        The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_account_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._sis_account_id

    @sis_account_id.setter
    def sis_account_id(self, sis_account_id):
        """Sets the sis_account_id of this Enrollment.

        The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_account_id: The sis_account_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._sis_account_id = sis_account_id

    @property
    def sis_section_id(self):
        """Gets the sis_section_id of this Enrollment.  # noqa: E501

        The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_section_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._sis_section_id

    @sis_section_id.setter
    def sis_section_id(self, sis_section_id):
        """Sets the sis_section_id of this Enrollment.

        The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_section_id: The sis_section_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._sis_section_id = sis_section_id

    @property
    def sis_user_id(self):
        """Gets the sis_user_id of this Enrollment.  # noqa: E501

        The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_user_id of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._sis_user_id

    @sis_user_id.setter
    def sis_user_id(self, sis_user_id):
        """Sets the sis_user_id of this Enrollment.

        The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_user_id: The sis_user_id of this Enrollment.  # noqa: E501
        :type: str
        """

        self._sis_user_id = sis_user_id

    @property
    def enrollment_state(self):
        """Gets the enrollment_state of this Enrollment.  # noqa: E501

        The state of the user's enrollment in the course.  # noqa: E501

        :return: The enrollment_state of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_state

    @enrollment_state.setter
    def enrollment_state(self, enrollment_state):
        """Sets the enrollment_state of this Enrollment.

        The state of the user's enrollment in the course.  # noqa: E501

        :param enrollment_state: The enrollment_state of this Enrollment.  # noqa: E501
        :type: str
        """

        self._enrollment_state = enrollment_state

    @property
    def limit_privileges_to_course_section(self):
        """Gets the limit_privileges_to_course_section of this Enrollment.  # noqa: E501

        User can only access his or her own course section.  # noqa: E501

        :return: The limit_privileges_to_course_section of this Enrollment.  # noqa: E501
        :rtype: bool
        """
        return self._limit_privileges_to_course_section

    @limit_privileges_to_course_section.setter
    def limit_privileges_to_course_section(self, limit_privileges_to_course_section):
        """Sets the limit_privileges_to_course_section of this Enrollment.

        User can only access his or her own course section.  # noqa: E501

        :param limit_privileges_to_course_section: The limit_privileges_to_course_section of this Enrollment.  # noqa: E501
        :type: bool
        """

        self._limit_privileges_to_course_section = limit_privileges_to_course_section

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this Enrollment.  # noqa: E501

        The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this Enrollment.

        The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def root_account_id(self):
        """Gets the root_account_id of this Enrollment.  # noqa: E501

        The unique id of the user's account.  # noqa: E501

        :return: The root_account_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._root_account_id

    @root_account_id.setter
    def root_account_id(self, root_account_id):
        """Sets the root_account_id of this Enrollment.

        The unique id of the user's account.  # noqa: E501

        :param root_account_id: The root_account_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._root_account_id = root_account_id

    @property
    def type(self):
        """Gets the type of this Enrollment.  # noqa: E501

        The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.  # noqa: E501

        :return: The type of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Enrollment.

        The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.  # noqa: E501

        :param type: The type of this Enrollment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this Enrollment.  # noqa: E501

        The unique id of the user.  # noqa: E501

        :return: The user_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Enrollment.

        The unique id of the user.  # noqa: E501

        :param user_id: The user_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def associated_user_id(self):
        """Gets the associated_user_id of this Enrollment.  # noqa: E501

        The unique id of the associated user. Will be null unless type is ObserverEnrollment.  # noqa: E501

        :return: The associated_user_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._associated_user_id

    @associated_user_id.setter
    def associated_user_id(self, associated_user_id):
        """Sets the associated_user_id of this Enrollment.

        The unique id of the associated user. Will be null unless type is ObserverEnrollment.  # noqa: E501

        :param associated_user_id: The associated_user_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._associated_user_id = associated_user_id

    @property
    def role(self):
        """Gets the role of this Enrollment.  # noqa: E501

        The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.  # noqa: E501

        :return: The role of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Enrollment.

        The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.  # noqa: E501

        :param role: The role of this Enrollment.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def role_id(self):
        """Gets the role_id of this Enrollment.  # noqa: E501

        The id of the enrollment role.  # noqa: E501

        :return: The role_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this Enrollment.

        The id of the enrollment role.  # noqa: E501

        :param role_id: The role_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def created_at(self):
        """Gets the created_at of this Enrollment.  # noqa: E501

        The created time of the enrollment, in ISO8601 format.  # noqa: E501

        :return: The created_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Enrollment.

        The created time of the enrollment, in ISO8601 format.  # noqa: E501

        :param created_at: The created_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Enrollment.  # noqa: E501

        The updated time of the enrollment, in ISO8601 format.  # noqa: E501

        :return: The updated_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Enrollment.

        The updated time of the enrollment, in ISO8601 format.  # noqa: E501

        :param updated_at: The updated_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def start_at(self):
        """Gets the start_at of this Enrollment.  # noqa: E501

        The start time of the enrollment, in ISO8601 format.  # noqa: E501

        :return: The start_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Enrollment.

        The start time of the enrollment, in ISO8601 format.  # noqa: E501

        :param start_at: The start_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this Enrollment.  # noqa: E501

        The end time of the enrollment, in ISO8601 format.  # noqa: E501

        :return: The end_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Enrollment.

        The end time of the enrollment, in ISO8601 format.  # noqa: E501

        :param end_at: The end_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this Enrollment.  # noqa: E501

        The last activity time of the user for the enrollment, in ISO8601 format.  # noqa: E501

        :return: The last_activity_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this Enrollment.

        The last activity time of the user for the enrollment, in ISO8601 format.  # noqa: E501

        :param last_activity_at: The last_activity_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_activity_at = last_activity_at

    @property
    def last_attended_at(self):
        """Gets the last_attended_at of this Enrollment.  # noqa: E501

        The last attended date of the user for the enrollment in a course, in ISO8601 format.  # noqa: E501

        :return: The last_attended_at of this Enrollment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_attended_at

    @last_attended_at.setter
    def last_attended_at(self, last_attended_at):
        """Sets the last_attended_at of this Enrollment.

        The last attended date of the user for the enrollment in a course, in ISO8601 format.  # noqa: E501

        :param last_attended_at: The last_attended_at of this Enrollment.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_attended_at = last_attended_at

    @property
    def total_activity_time(self):
        """Gets the total_activity_time of this Enrollment.  # noqa: E501

        The total activity time of the user for the enrollment, in seconds.  # noqa: E501

        :return: The total_activity_time of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._total_activity_time

    @total_activity_time.setter
    def total_activity_time(self, total_activity_time):
        """Sets the total_activity_time of this Enrollment.

        The total activity time of the user for the enrollment, in seconds.  # noqa: E501

        :param total_activity_time: The total_activity_time of this Enrollment.  # noqa: E501
        :type: int
        """

        self._total_activity_time = total_activity_time

    @property
    def html_url(self):
        """Gets the html_url of this Enrollment.  # noqa: E501

        The URL to the Canvas web UI page for this course enrollment.  # noqa: E501

        :return: The html_url of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Enrollment.

        The URL to the Canvas web UI page for this course enrollment.  # noqa: E501

        :param html_url: The html_url of this Enrollment.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def grades(self):
        """Gets the grades of this Enrollment.  # noqa: E501

        The URL to the Canvas web UI page containing the grades associated with this enrollment.  # noqa: E501

        :return: The grades of this Enrollment.  # noqa: E501
        :rtype: Grade
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this Enrollment.

        The URL to the Canvas web UI page containing the grades associated with this enrollment.  # noqa: E501

        :param grades: The grades of this Enrollment.  # noqa: E501
        :type: Grade
        """

        self._grades = grades

    @property
    def user(self):
        """Gets the user of this Enrollment.  # noqa: E501

        A description of the user.  # noqa: E501

        :return: The user of this Enrollment.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Enrollment.

        A description of the user.  # noqa: E501

        :param user: The user of this Enrollment.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def override_grade(self):
        """Gets the override_grade of this Enrollment.  # noqa: E501

        The user's override grade for the course.  # noqa: E501

        :return: The override_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._override_grade

    @override_grade.setter
    def override_grade(self, override_grade):
        """Sets the override_grade of this Enrollment.

        The user's override grade for the course.  # noqa: E501

        :param override_grade: The override_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._override_grade = override_grade

    @property
    def override_score(self):
        """Gets the override_score of this Enrollment.  # noqa: E501

        The user's override score for the course.  # noqa: E501

        :return: The override_score of this Enrollment.  # noqa: E501
        :rtype: float
        """
        return self._override_score

    @override_score.setter
    def override_score(self, override_score):
        """Sets the override_score of this Enrollment.

        The user's override score for the course.  # noqa: E501

        :param override_score: The override_score of this Enrollment.  # noqa: E501
        :type: float
        """

        self._override_score = override_score

    @property
    def unposted_current_grade(self):
        """Gets the unposted_current_grade of this Enrollment.  # noqa: E501

        The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.  # noqa: E501

        :return: The unposted_current_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._unposted_current_grade

    @unposted_current_grade.setter
    def unposted_current_grade(self, unposted_current_grade):
        """Sets the unposted_current_grade of this Enrollment.

        The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.  # noqa: E501

        :param unposted_current_grade: The unposted_current_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._unposted_current_grade = unposted_current_grade

    @property
    def unposted_final_grade(self):
        """Gets the unposted_final_grade of this Enrollment.  # noqa: E501

        The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..  # noqa: E501

        :return: The unposted_final_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._unposted_final_grade

    @unposted_final_grade.setter
    def unposted_final_grade(self, unposted_final_grade):
        """Sets the unposted_final_grade of this Enrollment.

        The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..  # noqa: E501

        :param unposted_final_grade: The unposted_final_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._unposted_final_grade = unposted_final_grade

    @property
    def unposted_current_score(self):
        """Gets the unposted_current_score of this Enrollment.  # noqa: E501

        The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..  # noqa: E501

        :return: The unposted_current_score of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._unposted_current_score

    @unposted_current_score.setter
    def unposted_current_score(self, unposted_current_score):
        """Sets the unposted_current_score of this Enrollment.

        The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..  # noqa: E501

        :param unposted_current_score: The unposted_current_score of this Enrollment.  # noqa: E501
        :type: str
        """

        self._unposted_current_score = unposted_current_score

    @property
    def unposted_final_score(self):
        """Gets the unposted_final_score of this Enrollment.  # noqa: E501

        The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..  # noqa: E501

        :return: The unposted_final_score of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._unposted_final_score

    @unposted_final_score.setter
    def unposted_final_score(self, unposted_final_score):
        """Sets the unposted_final_score of this Enrollment.

        The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..  # noqa: E501

        :param unposted_final_score: The unposted_final_score of this Enrollment.  # noqa: E501
        :type: str
        """

        self._unposted_final_score = unposted_final_score

    @property
    def has_grading_periods(self):
        """Gets the has_grading_periods of this Enrollment.  # noqa: E501

        optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The has_grading_periods of this Enrollment.  # noqa: E501
        :rtype: bool
        """
        return self._has_grading_periods

    @has_grading_periods.setter
    def has_grading_periods(self, has_grading_periods):
        """Sets the has_grading_periods of this Enrollment.

        optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param has_grading_periods: The has_grading_periods of this Enrollment.  # noqa: E501
        :type: bool
        """

        self._has_grading_periods = has_grading_periods

    @property
    def totals_for_all_grading_periods_option(self):
        """Gets the totals_for_all_grading_periods_option of this Enrollment.  # noqa: E501

        optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The totals_for_all_grading_periods_option of this Enrollment.  # noqa: E501
        :rtype: bool
        """
        return self._totals_for_all_grading_periods_option

    @totals_for_all_grading_periods_option.setter
    def totals_for_all_grading_periods_option(self, totals_for_all_grading_periods_option):
        """Sets the totals_for_all_grading_periods_option of this Enrollment.

        optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param totals_for_all_grading_periods_option: The totals_for_all_grading_periods_option of this Enrollment.  # noqa: E501
        :type: bool
        """

        self._totals_for_all_grading_periods_option = totals_for_all_grading_periods_option

    @property
    def current_grading_period_title(self):
        """Gets the current_grading_period_title of this Enrollment.  # noqa: E501

        optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_grading_period_title of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._current_grading_period_title

    @current_grading_period_title.setter
    def current_grading_period_title(self, current_grading_period_title):
        """Sets the current_grading_period_title of this Enrollment.

        optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_grading_period_title: The current_grading_period_title of this Enrollment.  # noqa: E501
        :type: str
        """

        self._current_grading_period_title = current_grading_period_title

    @property
    def current_grading_period_id(self):
        """Gets the current_grading_period_id of this Enrollment.  # noqa: E501

        optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_grading_period_id of this Enrollment.  # noqa: E501
        :rtype: int
        """
        return self._current_grading_period_id

    @current_grading_period_id.setter
    def current_grading_period_id(self, current_grading_period_id):
        """Sets the current_grading_period_id of this Enrollment.

        optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_grading_period_id: The current_grading_period_id of this Enrollment.  # noqa: E501
        :type: int
        """

        self._current_grading_period_id = current_grading_period_id

    @property
    def current_period_override_grade(self):
        """Gets the current_period_override_grade of this Enrollment.  # noqa: E501

        The user's override grade for the current grading period.  # noqa: E501

        :return: The current_period_override_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._current_period_override_grade

    @current_period_override_grade.setter
    def current_period_override_grade(self, current_period_override_grade):
        """Sets the current_period_override_grade of this Enrollment.

        The user's override grade for the current grading period.  # noqa: E501

        :param current_period_override_grade: The current_period_override_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._current_period_override_grade = current_period_override_grade

    @property
    def current_period_override_score(self):
        """Gets the current_period_override_score of this Enrollment.  # noqa: E501

        The user's override score for the current grading period.  # noqa: E501

        :return: The current_period_override_score of this Enrollment.  # noqa: E501
        :rtype: float
        """
        return self._current_period_override_score

    @current_period_override_score.setter
    def current_period_override_score(self, current_period_override_score):
        """Sets the current_period_override_score of this Enrollment.

        The user's override score for the current grading period.  # noqa: E501

        :param current_period_override_score: The current_period_override_score of this Enrollment.  # noqa: E501
        :type: float
        """

        self._current_period_override_score = current_period_override_score

    @property
    def current_period_unposted_current_score(self):
        """Gets the current_period_unposted_current_score of this Enrollment.  # noqa: E501

        optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_period_unposted_current_score of this Enrollment.  # noqa: E501
        :rtype: float
        """
        return self._current_period_unposted_current_score

    @current_period_unposted_current_score.setter
    def current_period_unposted_current_score(self, current_period_unposted_current_score):
        """Sets the current_period_unposted_current_score of this Enrollment.

        optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_period_unposted_current_score: The current_period_unposted_current_score of this Enrollment.  # noqa: E501
        :type: float
        """

        self._current_period_unposted_current_score = current_period_unposted_current_score

    @property
    def current_period_unposted_final_score(self):
        """Gets the current_period_unposted_final_score of this Enrollment.  # noqa: E501

        optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_period_unposted_final_score of this Enrollment.  # noqa: E501
        :rtype: float
        """
        return self._current_period_unposted_final_score

    @current_period_unposted_final_score.setter
    def current_period_unposted_final_score(self, current_period_unposted_final_score):
        """Sets the current_period_unposted_final_score of this Enrollment.

        optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_period_unposted_final_score: The current_period_unposted_final_score of this Enrollment.  # noqa: E501
        :type: float
        """

        self._current_period_unposted_final_score = current_period_unposted_final_score

    @property
    def current_period_unposted_current_grade(self):
        """Gets the current_period_unposted_current_grade of this Enrollment.  # noqa: E501

        optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_period_unposted_current_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._current_period_unposted_current_grade

    @current_period_unposted_current_grade.setter
    def current_period_unposted_current_grade(self, current_period_unposted_current_grade):
        """Sets the current_period_unposted_current_grade of this Enrollment.

        optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_period_unposted_current_grade: The current_period_unposted_current_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._current_period_unposted_current_grade = current_period_unposted_current_grade

    @property
    def current_period_unposted_final_grade(self):
        """Gets the current_period_unposted_final_grade of this Enrollment.  # noqa: E501

        optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :return: The current_period_unposted_final_grade of this Enrollment.  # noqa: E501
        :rtype: str
        """
        return self._current_period_unposted_final_grade

    @current_period_unposted_final_grade.setter
    def current_period_unposted_final_grade(self, current_period_unposted_final_grade):
        """Sets the current_period_unposted_final_grade of this Enrollment.

        optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)  # noqa: E501

        :param current_period_unposted_final_grade: The current_period_unposted_final_grade of this Enrollment.  # noqa: E501
        :type: str
        """

        self._current_period_unposted_final_grade = current_period_unposted_final_grade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Enrollment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Enrollment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Enrollment):
            return True

        return self.to_dict() != other.to_dict()
