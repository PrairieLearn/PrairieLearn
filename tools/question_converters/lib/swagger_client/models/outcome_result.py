# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'score': 'int',
        'submitted_or_assessed_at': 'ModelDatetime',
        'links': 'object',
        'percent': 'float'
    }

    attribute_map = {
        'id': 'id',
        'score': 'score',
        'submitted_or_assessed_at': 'submitted_or_assessed_at',
        'links': 'links',
        'percent': 'percent'
    }

    def __init__(self, id=None, score=None, submitted_or_assessed_at=None, links=None, percent=None, _configuration=None):  # noqa: E501
        """OutcomeResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._score = None
        self._submitted_or_assessed_at = None
        self._links = None
        self._percent = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if score is not None:
            self.score = score
        if submitted_or_assessed_at is not None:
            self.submitted_or_assessed_at = submitted_or_assessed_at
        if links is not None:
            self.links = links
        if percent is not None:
            self.percent = percent

    @property
    def id(self):
        """Gets the id of this OutcomeResult.  # noqa: E501

        A unique identifier for this result  # noqa: E501

        :return: The id of this OutcomeResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutcomeResult.

        A unique identifier for this result  # noqa: E501

        :param id: The id of this OutcomeResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def score(self):
        """Gets the score of this OutcomeResult.  # noqa: E501

        The student's score  # noqa: E501

        :return: The score of this OutcomeResult.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this OutcomeResult.

        The student's score  # noqa: E501

        :param score: The score of this OutcomeResult.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def submitted_or_assessed_at(self):
        """Gets the submitted_or_assessed_at of this OutcomeResult.  # noqa: E501

        The datetime the resulting OutcomeResult was submitted at, or absent that, when it was assessed.  # noqa: E501

        :return: The submitted_or_assessed_at of this OutcomeResult.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._submitted_or_assessed_at

    @submitted_or_assessed_at.setter
    def submitted_or_assessed_at(self, submitted_or_assessed_at):
        """Sets the submitted_or_assessed_at of this OutcomeResult.

        The datetime the resulting OutcomeResult was submitted at, or absent that, when it was assessed.  # noqa: E501

        :param submitted_or_assessed_at: The submitted_or_assessed_at of this OutcomeResult.  # noqa: E501
        :type: ModelDatetime
        """

        self._submitted_or_assessed_at = submitted_or_assessed_at

    @property
    def links(self):
        """Gets the links of this OutcomeResult.  # noqa: E501

        Unique identifiers of objects associated with this result  # noqa: E501

        :return: The links of this OutcomeResult.  # noqa: E501
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OutcomeResult.

        Unique identifiers of objects associated with this result  # noqa: E501

        :param links: The links of this OutcomeResult.  # noqa: E501
        :type: object
        """

        self._links = links

    @property
    def percent(self):
        """Gets the percent of this OutcomeResult.  # noqa: E501

        score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome  # noqa: E501

        :return: The percent of this OutcomeResult.  # noqa: E501
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """Sets the percent of this OutcomeResult.

        score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome  # noqa: E501

        :param percent: The percent of this OutcomeResult.  # noqa: E501
        :type: float
        """

        self._percent = percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeResult):
            return True

        return self.to_dict() != other.to_dict()
