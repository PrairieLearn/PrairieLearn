# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Scope(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource': 'str',
        'resource_name': 'str',
        'controller': 'str',
        'action': 'str',
        'verb': 'str',
        'scope': 'str'
    }

    attribute_map = {
        'resource': 'resource',
        'resource_name': 'resource_name',
        'controller': 'controller',
        'action': 'action',
        'verb': 'verb',
        'scope': 'scope'
    }

    def __init__(self, resource=None, resource_name=None, controller=None, action=None, verb=None, scope=None, _configuration=None):  # noqa: E501
        """Scope - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._resource = None
        self._resource_name = None
        self._controller = None
        self._action = None
        self._verb = None
        self._scope = None
        self.discriminator = None

        if resource is not None:
            self.resource = resource
        if resource_name is not None:
            self.resource_name = resource_name
        if controller is not None:
            self.controller = controller
        if action is not None:
            self.action = action
        if verb is not None:
            self.verb = verb
        if scope is not None:
            self.scope = scope

    @property
    def resource(self):
        """Gets the resource of this Scope.  # noqa: E501

        The resource the scope is associated with  # noqa: E501

        :return: The resource of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Scope.

        The resource the scope is associated with  # noqa: E501

        :param resource: The resource of this Scope.  # noqa: E501
        :type: str
        """

        self._resource = resource

    @property
    def resource_name(self):
        """Gets the resource_name of this Scope.  # noqa: E501

        The localized resource name  # noqa: E501

        :return: The resource_name of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this Scope.

        The localized resource name  # noqa: E501

        :param resource_name: The resource_name of this Scope.  # noqa: E501
        :type: str
        """

        self._resource_name = resource_name

    @property
    def controller(self):
        """Gets the controller of this Scope.  # noqa: E501

        The controller the scope is associated to  # noqa: E501

        :return: The controller of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this Scope.

        The controller the scope is associated to  # noqa: E501

        :param controller: The controller of this Scope.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def action(self):
        """Gets the action of this Scope.  # noqa: E501

        The controller action the scope is associated to  # noqa: E501

        :return: The action of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Scope.

        The controller action the scope is associated to  # noqa: E501

        :param action: The action of this Scope.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def verb(self):
        """Gets the verb of this Scope.  # noqa: E501

        The HTTP verb for the scope  # noqa: E501

        :return: The verb of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this Scope.

        The HTTP verb for the scope  # noqa: E501

        :param verb: The verb of this Scope.  # noqa: E501
        :type: str
        """

        self._verb = verb

    @property
    def scope(self):
        """Gets the scope of this Scope.  # noqa: E501

        The identifier for the scope  # noqa: E501

        :return: The scope of this Scope.  # noqa: E501
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Scope.

        The identifier for the scope  # noqa: E501

        :param scope: The scope of this Scope.  # noqa: E501
        :type: str
        """

        self._scope = scope

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scope, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scope):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Scope):
            return True

        return self.to_dict() != other.to_dict()
