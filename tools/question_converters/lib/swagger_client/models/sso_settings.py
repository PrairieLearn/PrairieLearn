# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SSOSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'login_handle_name': 'str',
        'change_password_url': 'str',
        'auth_discovery_url': 'str',
        'unknown_user_url': 'str'
    }

    attribute_map = {
        'login_handle_name': 'login_handle_name',
        'change_password_url': 'change_password_url',
        'auth_discovery_url': 'auth_discovery_url',
        'unknown_user_url': 'unknown_user_url'
    }

    def __init__(self, login_handle_name=None, change_password_url=None, auth_discovery_url=None, unknown_user_url=None, _configuration=None):  # noqa: E501
        """SSOSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._login_handle_name = None
        self._change_password_url = None
        self._auth_discovery_url = None
        self._unknown_user_url = None
        self.discriminator = None

        if login_handle_name is not None:
            self.login_handle_name = login_handle_name
        if change_password_url is not None:
            self.change_password_url = change_password_url
        if auth_discovery_url is not None:
            self.auth_discovery_url = auth_discovery_url
        if unknown_user_url is not None:
            self.unknown_user_url = unknown_user_url

    @property
    def login_handle_name(self):
        """Gets the login_handle_name of this SSOSettings.  # noqa: E501

        The label used for unique login identifiers.  # noqa: E501

        :return: The login_handle_name of this SSOSettings.  # noqa: E501
        :rtype: str
        """
        return self._login_handle_name

    @login_handle_name.setter
    def login_handle_name(self, login_handle_name):
        """Sets the login_handle_name of this SSOSettings.

        The label used for unique login identifiers.  # noqa: E501

        :param login_handle_name: The login_handle_name of this SSOSettings.  # noqa: E501
        :type: str
        """

        self._login_handle_name = login_handle_name

    @property
    def change_password_url(self):
        """Gets the change_password_url of this SSOSettings.  # noqa: E501

        The url to redirect users to for password resets. Leave blank for default Canvas behavior  # noqa: E501

        :return: The change_password_url of this SSOSettings.  # noqa: E501
        :rtype: str
        """
        return self._change_password_url

    @change_password_url.setter
    def change_password_url(self, change_password_url):
        """Sets the change_password_url of this SSOSettings.

        The url to redirect users to for password resets. Leave blank for default Canvas behavior  # noqa: E501

        :param change_password_url: The change_password_url of this SSOSettings.  # noqa: E501
        :type: str
        """

        self._change_password_url = change_password_url

    @property
    def auth_discovery_url(self):
        """Gets the auth_discovery_url of this SSOSettings.  # noqa: E501

        If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.  # noqa: E501

        :return: The auth_discovery_url of this SSOSettings.  # noqa: E501
        :rtype: str
        """
        return self._auth_discovery_url

    @auth_discovery_url.setter
    def auth_discovery_url(self, auth_discovery_url):
        """Sets the auth_discovery_url of this SSOSettings.

        If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.  # noqa: E501

        :param auth_discovery_url: The auth_discovery_url of this SSOSettings.  # noqa: E501
        :type: str
        """

        self._auth_discovery_url = auth_discovery_url

    @property
    def unknown_user_url(self):
        """Gets the unknown_user_url of this SSOSettings.  # noqa: E501

        If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.  # noqa: E501

        :return: The unknown_user_url of this SSOSettings.  # noqa: E501
        :rtype: str
        """
        return self._unknown_user_url

    @unknown_user_url.setter
    def unknown_user_url(self, unknown_user_url):
        """Sets the unknown_user_url of this SSOSettings.

        If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.  # noqa: E501

        :param unknown_user_url: The unknown_user_url of this SSOSettings.  # noqa: E501
        :type: str
        """

        self._unknown_user_url = unknown_user_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SSOSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSOSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSOSettings):
            return True

        return self.to_dict() != other.to_dict()
