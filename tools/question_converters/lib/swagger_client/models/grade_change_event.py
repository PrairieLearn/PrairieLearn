# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GradeChangeEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_at': 'ModelDatetime',
        'event_type': 'str',
        'excused_after': 'bool',
        'excused_before': 'bool',
        'grade_after': 'str',
        'grade_before': 'str',
        'graded_anonymously': 'bool',
        'version_number': 'str',
        'request_id': 'str',
        'links': 'GradeChangeEventLinks'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'event_type': 'event_type',
        'excused_after': 'excused_after',
        'excused_before': 'excused_before',
        'grade_after': 'grade_after',
        'grade_before': 'grade_before',
        'graded_anonymously': 'graded_anonymously',
        'version_number': 'version_number',
        'request_id': 'request_id',
        'links': 'links'
    }

    def __init__(self, id=None, created_at=None, event_type=None, excused_after=None, excused_before=None, grade_after=None, grade_before=None, graded_anonymously=None, version_number=None, request_id=None, links=None, _configuration=None):  # noqa: E501
        """GradeChangeEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._event_type = None
        self._excused_after = None
        self._excused_before = None
        self._grade_after = None
        self._grade_before = None
        self._graded_anonymously = None
        self._version_number = None
        self._request_id = None
        self._links = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if event_type is not None:
            self.event_type = event_type
        if excused_after is not None:
            self.excused_after = excused_after
        if excused_before is not None:
            self.excused_before = excused_before
        if grade_after is not None:
            self.grade_after = grade_after
        if grade_before is not None:
            self.grade_before = grade_before
        if graded_anonymously is not None:
            self.graded_anonymously = graded_anonymously
        if version_number is not None:
            self.version_number = version_number
        if request_id is not None:
            self.request_id = request_id
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this GradeChangeEvent.  # noqa: E501

        ID of the event.  # noqa: E501

        :return: The id of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GradeChangeEvent.

        ID of the event.  # noqa: E501

        :param id: The id of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this GradeChangeEvent.  # noqa: E501

        timestamp of the event  # noqa: E501

        :return: The created_at of this GradeChangeEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GradeChangeEvent.

        timestamp of the event  # noqa: E501

        :param created_at: The created_at of this GradeChangeEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this GradeChangeEvent.  # noqa: E501

        GradeChange event type  # noqa: E501

        :return: The event_type of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this GradeChangeEvent.

        GradeChange event type  # noqa: E501

        :param event_type: The event_type of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def excused_after(self):
        """Gets the excused_after of this GradeChangeEvent.  # noqa: E501

        Boolean indicating whether the submission was excused after the change.  # noqa: E501

        :return: The excused_after of this GradeChangeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._excused_after

    @excused_after.setter
    def excused_after(self, excused_after):
        """Sets the excused_after of this GradeChangeEvent.

        Boolean indicating whether the submission was excused after the change.  # noqa: E501

        :param excused_after: The excused_after of this GradeChangeEvent.  # noqa: E501
        :type: bool
        """

        self._excused_after = excused_after

    @property
    def excused_before(self):
        """Gets the excused_before of this GradeChangeEvent.  # noqa: E501

        Boolean indicating whether the submission was excused before the change.  # noqa: E501

        :return: The excused_before of this GradeChangeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._excused_before

    @excused_before.setter
    def excused_before(self, excused_before):
        """Sets the excused_before of this GradeChangeEvent.

        Boolean indicating whether the submission was excused before the change.  # noqa: E501

        :param excused_before: The excused_before of this GradeChangeEvent.  # noqa: E501
        :type: bool
        """

        self._excused_before = excused_before

    @property
    def grade_after(self):
        """Gets the grade_after of this GradeChangeEvent.  # noqa: E501

        The grade after the change.  # noqa: E501

        :return: The grade_after of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._grade_after

    @grade_after.setter
    def grade_after(self, grade_after):
        """Sets the grade_after of this GradeChangeEvent.

        The grade after the change.  # noqa: E501

        :param grade_after: The grade_after of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._grade_after = grade_after

    @property
    def grade_before(self):
        """Gets the grade_before of this GradeChangeEvent.  # noqa: E501

        The grade before the change.  # noqa: E501

        :return: The grade_before of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._grade_before

    @grade_before.setter
    def grade_before(self, grade_before):
        """Sets the grade_before of this GradeChangeEvent.

        The grade before the change.  # noqa: E501

        :param grade_before: The grade_before of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._grade_before = grade_before

    @property
    def graded_anonymously(self):
        """Gets the graded_anonymously of this GradeChangeEvent.  # noqa: E501

        Boolean indicating whether the student name was visible when the grade was given. Could be null if the grade change record was created before this feature existed.  # noqa: E501

        :return: The graded_anonymously of this GradeChangeEvent.  # noqa: E501
        :rtype: bool
        """
        return self._graded_anonymously

    @graded_anonymously.setter
    def graded_anonymously(self, graded_anonymously):
        """Sets the graded_anonymously of this GradeChangeEvent.

        Boolean indicating whether the student name was visible when the grade was given. Could be null if the grade change record was created before this feature existed.  # noqa: E501

        :param graded_anonymously: The graded_anonymously of this GradeChangeEvent.  # noqa: E501
        :type: bool
        """

        self._graded_anonymously = graded_anonymously

    @property
    def version_number(self):
        """Gets the version_number of this GradeChangeEvent.  # noqa: E501

        Version Number of the grade change submission.  # noqa: E501

        :return: The version_number of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this GradeChangeEvent.

        Version Number of the grade change submission.  # noqa: E501

        :param version_number: The version_number of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._version_number = version_number

    @property
    def request_id(self):
        """Gets the request_id of this GradeChangeEvent.  # noqa: E501

        The unique request id of the request during the grade change.  # noqa: E501

        :return: The request_id of this GradeChangeEvent.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GradeChangeEvent.

        The unique request id of the request during the grade change.  # noqa: E501

        :param request_id: The request_id of this GradeChangeEvent.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def links(self):
        """Gets the links of this GradeChangeEvent.  # noqa: E501


        :return: The links of this GradeChangeEvent.  # noqa: E501
        :rtype: GradeChangeEventLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GradeChangeEvent.


        :param links: The links of this GradeChangeEvent.  # noqa: E501
        :type: GradeChangeEventLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GradeChangeEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GradeChangeEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GradeChangeEvent):
            return True

        return self.to_dict() != other.to_dict()
