# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisImport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'ModelDatetime',
        'ended_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'workflow_state': 'str',
        'data': 'SisImportData',
        'statistics': 'SisImportStatistics',
        'progress': 'str',
        'errors_attachment': 'File',
        'user': 'User',
        'processing_warnings': 'list[list[Object]]',
        'processing_errors': 'list[list[Object]]',
        'batch_mode': 'bool',
        'batch_mode_term_id': 'str',
        'multi_term_batch_mode': 'bool',
        'skip_deletes': 'bool',
        'override_sis_stickiness': 'bool',
        'add_sis_stickiness': 'bool',
        'clear_sis_stickiness': 'bool',
        'diffing_threshold_exceeded': 'bool',
        'diffing_data_set_identifier': 'str',
        'diffing_remaster': 'bool',
        'diffed_against_import_id': 'int',
        'csv_attachments': 'list[list[Object]]'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'ended_at': 'ended_at',
        'updated_at': 'updated_at',
        'workflow_state': 'workflow_state',
        'data': 'data',
        'statistics': 'statistics',
        'progress': 'progress',
        'errors_attachment': 'errors_attachment',
        'user': 'user',
        'processing_warnings': 'processing_warnings',
        'processing_errors': 'processing_errors',
        'batch_mode': 'batch_mode',
        'batch_mode_term_id': 'batch_mode_term_id',
        'multi_term_batch_mode': 'multi_term_batch_mode',
        'skip_deletes': 'skip_deletes',
        'override_sis_stickiness': 'override_sis_stickiness',
        'add_sis_stickiness': 'add_sis_stickiness',
        'clear_sis_stickiness': 'clear_sis_stickiness',
        'diffing_threshold_exceeded': 'diffing_threshold_exceeded',
        'diffing_data_set_identifier': 'diffing_data_set_identifier',
        'diffing_remaster': 'diffing_remaster',
        'diffed_against_import_id': 'diffed_against_import_id',
        'csv_attachments': 'csv_attachments'
    }

    def __init__(self, id=None, created_at=None, ended_at=None, updated_at=None, workflow_state=None, data=None, statistics=None, progress=None, errors_attachment=None, user=None, processing_warnings=None, processing_errors=None, batch_mode=None, batch_mode_term_id=None, multi_term_batch_mode=None, skip_deletes=None, override_sis_stickiness=None, add_sis_stickiness=None, clear_sis_stickiness=None, diffing_threshold_exceeded=None, diffing_data_set_identifier=None, diffing_remaster=None, diffed_against_import_id=None, csv_attachments=None, _configuration=None):  # noqa: E501
        """SisImport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._ended_at = None
        self._updated_at = None
        self._workflow_state = None
        self._data = None
        self._statistics = None
        self._progress = None
        self._errors_attachment = None
        self._user = None
        self._processing_warnings = None
        self._processing_errors = None
        self._batch_mode = None
        self._batch_mode_term_id = None
        self._multi_term_batch_mode = None
        self._skip_deletes = None
        self._override_sis_stickiness = None
        self._add_sis_stickiness = None
        self._clear_sis_stickiness = None
        self._diffing_threshold_exceeded = None
        self._diffing_data_set_identifier = None
        self._diffing_remaster = None
        self._diffed_against_import_id = None
        self._csv_attachments = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if ended_at is not None:
            self.ended_at = ended_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if data is not None:
            self.data = data
        if statistics is not None:
            self.statistics = statistics
        if progress is not None:
            self.progress = progress
        if errors_attachment is not None:
            self.errors_attachment = errors_attachment
        if user is not None:
            self.user = user
        if processing_warnings is not None:
            self.processing_warnings = processing_warnings
        if processing_errors is not None:
            self.processing_errors = processing_errors
        if batch_mode is not None:
            self.batch_mode = batch_mode
        if batch_mode_term_id is not None:
            self.batch_mode_term_id = batch_mode_term_id
        if multi_term_batch_mode is not None:
            self.multi_term_batch_mode = multi_term_batch_mode
        if skip_deletes is not None:
            self.skip_deletes = skip_deletes
        if override_sis_stickiness is not None:
            self.override_sis_stickiness = override_sis_stickiness
        if add_sis_stickiness is not None:
            self.add_sis_stickiness = add_sis_stickiness
        if clear_sis_stickiness is not None:
            self.clear_sis_stickiness = clear_sis_stickiness
        if diffing_threshold_exceeded is not None:
            self.diffing_threshold_exceeded = diffing_threshold_exceeded
        if diffing_data_set_identifier is not None:
            self.diffing_data_set_identifier = diffing_data_set_identifier
        if diffing_remaster is not None:
            self.diffing_remaster = diffing_remaster
        if diffed_against_import_id is not None:
            self.diffed_against_import_id = diffed_against_import_id
        if csv_attachments is not None:
            self.csv_attachments = csv_attachments

    @property
    def id(self):
        """Gets the id of this SisImport.  # noqa: E501

        The unique identifier for the SIS import.  # noqa: E501

        :return: The id of this SisImport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SisImport.

        The unique identifier for the SIS import.  # noqa: E501

        :param id: The id of this SisImport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this SisImport.  # noqa: E501

        The date the SIS import was created.  # noqa: E501

        :return: The created_at of this SisImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SisImport.

        The date the SIS import was created.  # noqa: E501

        :param created_at: The created_at of this SisImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this SisImport.  # noqa: E501

        The date the SIS import finished. Returns null if not finished.  # noqa: E501

        :return: The ended_at of this SisImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this SisImport.

        The date the SIS import finished. Returns null if not finished.  # noqa: E501

        :param ended_at: The ended_at of this SisImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._ended_at = ended_at

    @property
    def updated_at(self):
        """Gets the updated_at of this SisImport.  # noqa: E501

        The date the SIS import was last updated.  # noqa: E501

        :return: The updated_at of this SisImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this SisImport.

        The date the SIS import was last updated.  # noqa: E501

        :param updated_at: The updated_at of this SisImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this SisImport.  # noqa: E501

        The current state of the SIS import.  - 'initializing': The SIS import is being created, if this gets stuck in initializing, it will not import and will continue on to next import.  - 'created': The SIS import has been created.  - 'importing': The SIS import is currently processing.  - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.  - 'imported': The SIS import has completed successfully.  - 'imported_with_messages': The SIS import completed with errors or warnings.  - 'aborted': The SIS import was aborted.  - 'failed_with_messages': The SIS import failed with errors.  - 'failed': The SIS import failed.  - 'restoring': The SIS import is restoring states of imported items.  - 'partially_restored': The SIS import is restored some of the states of imported items. This is generally due to passing a param like undelete only.  - 'restored': The SIS import is restored all of the states of imported items.  # noqa: E501

        :return: The workflow_state of this SisImport.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this SisImport.

        The current state of the SIS import.  - 'initializing': The SIS import is being created, if this gets stuck in initializing, it will not import and will continue on to next import.  - 'created': The SIS import has been created.  - 'importing': The SIS import is currently processing.  - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.  - 'imported': The SIS import has completed successfully.  - 'imported_with_messages': The SIS import completed with errors or warnings.  - 'aborted': The SIS import was aborted.  - 'failed_with_messages': The SIS import failed with errors.  - 'failed': The SIS import failed.  - 'restoring': The SIS import is restoring states of imported items.  - 'partially_restored': The SIS import is restored some of the states of imported items. This is generally due to passing a param like undelete only.  - 'restored': The SIS import is restored all of the states of imported items.  # noqa: E501

        :param workflow_state: The workflow_state of this SisImport.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def data(self):
        """Gets the data of this SisImport.  # noqa: E501

        data  # noqa: E501

        :return: The data of this SisImport.  # noqa: E501
        :rtype: SisImportData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SisImport.

        data  # noqa: E501

        :param data: The data of this SisImport.  # noqa: E501
        :type: SisImportData
        """

        self._data = data

    @property
    def statistics(self):
        """Gets the statistics of this SisImport.  # noqa: E501

        statistics  # noqa: E501

        :return: The statistics of this SisImport.  # noqa: E501
        :rtype: SisImportStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this SisImport.

        statistics  # noqa: E501

        :param statistics: The statistics of this SisImport.  # noqa: E501
        :type: SisImportStatistics
        """

        self._statistics = statistics

    @property
    def progress(self):
        """Gets the progress of this SisImport.  # noqa: E501

        The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage  # noqa: E501

        :return: The progress of this SisImport.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this SisImport.

        The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage  # noqa: E501

        :param progress: The progress of this SisImport.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def errors_attachment(self):
        """Gets the errors_attachment of this SisImport.  # noqa: E501

        The errors_attachment api object of the SIS import. Only available if there are errors or warning and import has completed.  # noqa: E501

        :return: The errors_attachment of this SisImport.  # noqa: E501
        :rtype: File
        """
        return self._errors_attachment

    @errors_attachment.setter
    def errors_attachment(self, errors_attachment):
        """Sets the errors_attachment of this SisImport.

        The errors_attachment api object of the SIS import. Only available if there are errors or warning and import has completed.  # noqa: E501

        :param errors_attachment: The errors_attachment of this SisImport.  # noqa: E501
        :type: File
        """

        self._errors_attachment = errors_attachment

    @property
    def user(self):
        """Gets the user of this SisImport.  # noqa: E501

        The user that initiated the sis_batch. See the Users API for details.  # noqa: E501

        :return: The user of this SisImport.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SisImport.

        The user that initiated the sis_batch. See the Users API for details.  # noqa: E501

        :param user: The user of this SisImport.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def processing_warnings(self):
        """Gets the processing_warnings of this SisImport.  # noqa: E501

        Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.  # noqa: E501

        :return: The processing_warnings of this SisImport.  # noqa: E501
        :rtype: list[list[Object]]
        """
        return self._processing_warnings

    @processing_warnings.setter
    def processing_warnings(self, processing_warnings):
        """Sets the processing_warnings of this SisImport.

        Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.  # noqa: E501

        :param processing_warnings: The processing_warnings of this SisImport.  # noqa: E501
        :type: list[list[Object]]
        """

        self._processing_warnings = processing_warnings

    @property
    def processing_errors(self):
        """Gets the processing_errors of this SisImport.  # noqa: E501

        An array of CSV_file/error_message pairs.  # noqa: E501

        :return: The processing_errors of this SisImport.  # noqa: E501
        :rtype: list[list[Object]]
        """
        return self._processing_errors

    @processing_errors.setter
    def processing_errors(self, processing_errors):
        """Sets the processing_errors of this SisImport.

        An array of CSV_file/error_message pairs.  # noqa: E501

        :param processing_errors: The processing_errors of this SisImport.  # noqa: E501
        :type: list[list[Object]]
        """

        self._processing_errors = processing_errors

    @property
    def batch_mode(self):
        """Gets the batch_mode of this SisImport.  # noqa: E501

        Whether the import was run in batch mode.  # noqa: E501

        :return: The batch_mode of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._batch_mode

    @batch_mode.setter
    def batch_mode(self, batch_mode):
        """Sets the batch_mode of this SisImport.

        Whether the import was run in batch mode.  # noqa: E501

        :param batch_mode: The batch_mode of this SisImport.  # noqa: E501
        :type: bool
        """

        self._batch_mode = batch_mode

    @property
    def batch_mode_term_id(self):
        """Gets the batch_mode_term_id of this SisImport.  # noqa: E501

        The term the batch was limited to.  # noqa: E501

        :return: The batch_mode_term_id of this SisImport.  # noqa: E501
        :rtype: str
        """
        return self._batch_mode_term_id

    @batch_mode_term_id.setter
    def batch_mode_term_id(self, batch_mode_term_id):
        """Sets the batch_mode_term_id of this SisImport.

        The term the batch was limited to.  # noqa: E501

        :param batch_mode_term_id: The batch_mode_term_id of this SisImport.  # noqa: E501
        :type: str
        """

        self._batch_mode_term_id = batch_mode_term_id

    @property
    def multi_term_batch_mode(self):
        """Gets the multi_term_batch_mode of this SisImport.  # noqa: E501

        Enables batch mode against all terms in term file. Requires change_threshold to be set.  # noqa: E501

        :return: The multi_term_batch_mode of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._multi_term_batch_mode

    @multi_term_batch_mode.setter
    def multi_term_batch_mode(self, multi_term_batch_mode):
        """Sets the multi_term_batch_mode of this SisImport.

        Enables batch mode against all terms in term file. Requires change_threshold to be set.  # noqa: E501

        :param multi_term_batch_mode: The multi_term_batch_mode of this SisImport.  # noqa: E501
        :type: bool
        """

        self._multi_term_batch_mode = multi_term_batch_mode

    @property
    def skip_deletes(self):
        """Gets the skip_deletes of this SisImport.  # noqa: E501

        When set the import will skip any deletes.  # noqa: E501

        :return: The skip_deletes of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._skip_deletes

    @skip_deletes.setter
    def skip_deletes(self, skip_deletes):
        """Sets the skip_deletes of this SisImport.

        When set the import will skip any deletes.  # noqa: E501

        :param skip_deletes: The skip_deletes of this SisImport.  # noqa: E501
        :type: bool
        """

        self._skip_deletes = skip_deletes

    @property
    def override_sis_stickiness(self):
        """Gets the override_sis_stickiness of this SisImport.  # noqa: E501

        Whether UI changes were overridden.  # noqa: E501

        :return: The override_sis_stickiness of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._override_sis_stickiness

    @override_sis_stickiness.setter
    def override_sis_stickiness(self, override_sis_stickiness):
        """Sets the override_sis_stickiness of this SisImport.

        Whether UI changes were overridden.  # noqa: E501

        :param override_sis_stickiness: The override_sis_stickiness of this SisImport.  # noqa: E501
        :type: bool
        """

        self._override_sis_stickiness = override_sis_stickiness

    @property
    def add_sis_stickiness(self):
        """Gets the add_sis_stickiness of this SisImport.  # noqa: E501

        Whether stickiness was added to the batch changes.  # noqa: E501

        :return: The add_sis_stickiness of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._add_sis_stickiness

    @add_sis_stickiness.setter
    def add_sis_stickiness(self, add_sis_stickiness):
        """Sets the add_sis_stickiness of this SisImport.

        Whether stickiness was added to the batch changes.  # noqa: E501

        :param add_sis_stickiness: The add_sis_stickiness of this SisImport.  # noqa: E501
        :type: bool
        """

        self._add_sis_stickiness = add_sis_stickiness

    @property
    def clear_sis_stickiness(self):
        """Gets the clear_sis_stickiness of this SisImport.  # noqa: E501

        Whether stickiness was cleared.  # noqa: E501

        :return: The clear_sis_stickiness of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._clear_sis_stickiness

    @clear_sis_stickiness.setter
    def clear_sis_stickiness(self, clear_sis_stickiness):
        """Sets the clear_sis_stickiness of this SisImport.

        Whether stickiness was cleared.  # noqa: E501

        :param clear_sis_stickiness: The clear_sis_stickiness of this SisImport.  # noqa: E501
        :type: bool
        """

        self._clear_sis_stickiness = clear_sis_stickiness

    @property
    def diffing_threshold_exceeded(self):
        """Gets the diffing_threshold_exceeded of this SisImport.  # noqa: E501

        Whether a diffing job failed because the threshold limit got exceeded.  # noqa: E501

        :return: The diffing_threshold_exceeded of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._diffing_threshold_exceeded

    @diffing_threshold_exceeded.setter
    def diffing_threshold_exceeded(self, diffing_threshold_exceeded):
        """Sets the diffing_threshold_exceeded of this SisImport.

        Whether a diffing job failed because the threshold limit got exceeded.  # noqa: E501

        :param diffing_threshold_exceeded: The diffing_threshold_exceeded of this SisImport.  # noqa: E501
        :type: bool
        """

        self._diffing_threshold_exceeded = diffing_threshold_exceeded

    @property
    def diffing_data_set_identifier(self):
        """Gets the diffing_data_set_identifier of this SisImport.  # noqa: E501

        The identifier of the data set that this SIS batch diffs against  # noqa: E501

        :return: The diffing_data_set_identifier of this SisImport.  # noqa: E501
        :rtype: str
        """
        return self._diffing_data_set_identifier

    @diffing_data_set_identifier.setter
    def diffing_data_set_identifier(self, diffing_data_set_identifier):
        """Sets the diffing_data_set_identifier of this SisImport.

        The identifier of the data set that this SIS batch diffs against  # noqa: E501

        :param diffing_data_set_identifier: The diffing_data_set_identifier of this SisImport.  # noqa: E501
        :type: str
        """

        self._diffing_data_set_identifier = diffing_data_set_identifier

    @property
    def diffing_remaster(self):
        """Gets the diffing_remaster of this SisImport.  # noqa: E501

        Whether diffing remaster data was enabled.  # noqa: E501

        :return: The diffing_remaster of this SisImport.  # noqa: E501
        :rtype: bool
        """
        return self._diffing_remaster

    @diffing_remaster.setter
    def diffing_remaster(self, diffing_remaster):
        """Sets the diffing_remaster of this SisImport.

        Whether diffing remaster data was enabled.  # noqa: E501

        :param diffing_remaster: The diffing_remaster of this SisImport.  # noqa: E501
        :type: bool
        """

        self._diffing_remaster = diffing_remaster

    @property
    def diffed_against_import_id(self):
        """Gets the diffed_against_import_id of this SisImport.  # noqa: E501

        The ID of the SIS Import that this import was diffed against  # noqa: E501

        :return: The diffed_against_import_id of this SisImport.  # noqa: E501
        :rtype: int
        """
        return self._diffed_against_import_id

    @diffed_against_import_id.setter
    def diffed_against_import_id(self, diffed_against_import_id):
        """Sets the diffed_against_import_id of this SisImport.

        The ID of the SIS Import that this import was diffed against  # noqa: E501

        :param diffed_against_import_id: The diffed_against_import_id of this SisImport.  # noqa: E501
        :type: int
        """

        self._diffed_against_import_id = diffed_against_import_id

    @property
    def csv_attachments(self):
        """Gets the csv_attachments of this SisImport.  # noqa: E501

        An array of CSV files for processing  # noqa: E501

        :return: The csv_attachments of this SisImport.  # noqa: E501
        :rtype: list[list[Object]]
        """
        return self._csv_attachments

    @csv_attachments.setter
    def csv_attachments(self, csv_attachments):
        """Sets the csv_attachments of this SisImport.

        An array of CSV files for processing  # noqa: E501

        :param csv_attachments: The csv_attachments of this SisImport.  # noqa: E501
        :type: list[list[Object]]
        """

        self._csv_attachments = csv_attachments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisImport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisImport):
            return True

        return self.to_dict() != other.to_dict()
