# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LearningObjectDates(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'due_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'only_visible_to_overrides': 'bool',
        'graded': 'bool',
        'blueprint_date_locks': 'list[str]',
        'visible_to_everyone': 'bool',
        'overrides': 'list[AssignmentOverride]'
    }

    attribute_map = {
        'id': 'id',
        'due_at': 'due_at',
        'lock_at': 'lock_at',
        'unlock_at': 'unlock_at',
        'only_visible_to_overrides': 'only_visible_to_overrides',
        'graded': 'graded',
        'blueprint_date_locks': 'blueprint_date_locks',
        'visible_to_everyone': 'visible_to_everyone',
        'overrides': 'overrides'
    }

    def __init__(self, id=None, due_at=None, lock_at=None, unlock_at=None, only_visible_to_overrides=None, graded=None, blueprint_date_locks=None, visible_to_everyone=None, overrides=None, _configuration=None):  # noqa: E501
        """LearningObjectDates - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._due_at = None
        self._lock_at = None
        self._unlock_at = None
        self._only_visible_to_overrides = None
        self._graded = None
        self._blueprint_date_locks = None
        self._visible_to_everyone = None
        self._overrides = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if due_at is not None:
            self.due_at = due_at
        if lock_at is not None:
            self.lock_at = lock_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if only_visible_to_overrides is not None:
            self.only_visible_to_overrides = only_visible_to_overrides
        if graded is not None:
            self.graded = graded
        if blueprint_date_locks is not None:
            self.blueprint_date_locks = blueprint_date_locks
        if visible_to_everyone is not None:
            self.visible_to_everyone = visible_to_everyone
        if overrides is not None:
            self.overrides = overrides

    @property
    def id(self):
        """Gets the id of this LearningObjectDates.  # noqa: E501

        the ID of the learning object  # noqa: E501

        :return: The id of this LearningObjectDates.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LearningObjectDates.

        the ID of the learning object  # noqa: E501

        :param id: The id of this LearningObjectDates.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def due_at(self):
        """Gets the due_at of this LearningObjectDates.  # noqa: E501

        the due date for the learning object. returns null if not present or applicable. never applicable for ungraded discussions, pages, and files  # noqa: E501

        :return: The due_at of this LearningObjectDates.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this LearningObjectDates.

        the due date for the learning object. returns null if not present or applicable. never applicable for ungraded discussions, pages, and files  # noqa: E501

        :param due_at: The due_at of this LearningObjectDates.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def lock_at(self):
        """Gets the lock_at of this LearningObjectDates.  # noqa: E501

        the lock date (learning object is locked after this date). returns null if not present  # noqa: E501

        :return: The lock_at of this LearningObjectDates.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this LearningObjectDates.

        the lock date (learning object is locked after this date). returns null if not present  # noqa: E501

        :param lock_at: The lock_at of this LearningObjectDates.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this LearningObjectDates.  # noqa: E501

        the unlock date (learning object is unlocked after this date). returns null if not present  # noqa: E501

        :return: The unlock_at of this LearningObjectDates.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this LearningObjectDates.

        the unlock date (learning object is unlocked after this date). returns null if not present  # noqa: E501

        :param unlock_at: The unlock_at of this LearningObjectDates.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def only_visible_to_overrides(self):
        """Gets the only_visible_to_overrides of this LearningObjectDates.  # noqa: E501

        whether the learning object is only visible to overrides  # noqa: E501

        :return: The only_visible_to_overrides of this LearningObjectDates.  # noqa: E501
        :rtype: bool
        """
        return self._only_visible_to_overrides

    @only_visible_to_overrides.setter
    def only_visible_to_overrides(self, only_visible_to_overrides):
        """Sets the only_visible_to_overrides of this LearningObjectDates.

        whether the learning object is only visible to overrides  # noqa: E501

        :param only_visible_to_overrides: The only_visible_to_overrides of this LearningObjectDates.  # noqa: E501
        :type: bool
        """

        self._only_visible_to_overrides = only_visible_to_overrides

    @property
    def graded(self):
        """Gets the graded of this LearningObjectDates.  # noqa: E501

        whether the learning object is graded (and thus has a due date)  # noqa: E501

        :return: The graded of this LearningObjectDates.  # noqa: E501
        :rtype: bool
        """
        return self._graded

    @graded.setter
    def graded(self, graded):
        """Sets the graded of this LearningObjectDates.

        whether the learning object is graded (and thus has a due date)  # noqa: E501

        :param graded: The graded of this LearningObjectDates.  # noqa: E501
        :type: bool
        """

        self._graded = graded

    @property
    def blueprint_date_locks(self):
        """Gets the blueprint_date_locks of this LearningObjectDates.  # noqa: E501

        [exclusive to blueprint child content only] list of lock types  # noqa: E501

        :return: The blueprint_date_locks of this LearningObjectDates.  # noqa: E501
        :rtype: list[str]
        """
        return self._blueprint_date_locks

    @blueprint_date_locks.setter
    def blueprint_date_locks(self, blueprint_date_locks):
        """Sets the blueprint_date_locks of this LearningObjectDates.

        [exclusive to blueprint child content only] list of lock types  # noqa: E501

        :param blueprint_date_locks: The blueprint_date_locks of this LearningObjectDates.  # noqa: E501
        :type: list[str]
        """

        self._blueprint_date_locks = blueprint_date_locks

    @property
    def visible_to_everyone(self):
        """Gets the visible_to_everyone of this LearningObjectDates.  # noqa: E501

        whether the learning object is visible to everyone  # noqa: E501

        :return: The visible_to_everyone of this LearningObjectDates.  # noqa: E501
        :rtype: bool
        """
        return self._visible_to_everyone

    @visible_to_everyone.setter
    def visible_to_everyone(self, visible_to_everyone):
        """Sets the visible_to_everyone of this LearningObjectDates.

        whether the learning object is visible to everyone  # noqa: E501

        :param visible_to_everyone: The visible_to_everyone of this LearningObjectDates.  # noqa: E501
        :type: bool
        """

        self._visible_to_everyone = visible_to_everyone

    @property
    def overrides(self):
        """Gets the overrides of this LearningObjectDates.  # noqa: E501

        paginated list of AssignmentOverride objects  # noqa: E501

        :return: The overrides of this LearningObjectDates.  # noqa: E501
        :rtype: list[AssignmentOverride]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this LearningObjectDates.

        paginated list of AssignmentOverride objects  # noqa: E501

        :param overrides: The overrides of this LearningObjectDates.  # noqa: E501
        :type: list[AssignmentOverride]
        """

        self._overrides = overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LearningObjectDates, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LearningObjectDates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LearningObjectDates):
            return True

        return self.to_dict() != other.to_dict()
