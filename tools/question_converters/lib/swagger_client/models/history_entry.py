# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HistoryEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_code': 'str',
        'asset_name': 'str',
        'asset_icon': 'str',
        'asset_readable_category': 'str',
        'context_type': 'str',
        'context_id': 'int',
        'context_name': 'str',
        'visited_url': 'str',
        'visited_at': 'ModelDatetime',
        'interaction_seconds': 'int'
    }

    attribute_map = {
        'asset_code': 'asset_code',
        'asset_name': 'asset_name',
        'asset_icon': 'asset_icon',
        'asset_readable_category': 'asset_readable_category',
        'context_type': 'context_type',
        'context_id': 'context_id',
        'context_name': 'context_name',
        'visited_url': 'visited_url',
        'visited_at': 'visited_at',
        'interaction_seconds': 'interaction_seconds'
    }

    def __init__(self, asset_code=None, asset_name=None, asset_icon=None, asset_readable_category=None, context_type=None, context_id=None, context_name=None, visited_url=None, visited_at=None, interaction_seconds=None, _configuration=None):  # noqa: E501
        """HistoryEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_code = None
        self._asset_name = None
        self._asset_icon = None
        self._asset_readable_category = None
        self._context_type = None
        self._context_id = None
        self._context_name = None
        self._visited_url = None
        self._visited_at = None
        self._interaction_seconds = None
        self.discriminator = None

        self.asset_code = asset_code
        self.asset_name = asset_name
        if asset_icon is not None:
            self.asset_icon = asset_icon
        if asset_readable_category is not None:
            self.asset_readable_category = asset_readable_category
        if context_type is not None:
            self.context_type = context_type
        if context_id is not None:
            self.context_id = context_id
        if context_name is not None:
            self.context_name = context_name
        self.visited_url = visited_url
        self.visited_at = visited_at
        if interaction_seconds is not None:
            self.interaction_seconds = interaction_seconds

    @property
    def asset_code(self):
        """Gets the asset_code of this HistoryEntry.  # noqa: E501

        The asset string for the item viewed  # noqa: E501

        :return: The asset_code of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._asset_code

    @asset_code.setter
    def asset_code(self, asset_code):
        """Sets the asset_code of this HistoryEntry.

        The asset string for the item viewed  # noqa: E501

        :param asset_code: The asset_code of this HistoryEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asset_code is None:
            raise ValueError("Invalid value for `asset_code`, must not be `None`")  # noqa: E501

        self._asset_code = asset_code

    @property
    def asset_name(self):
        """Gets the asset_name of this HistoryEntry.  # noqa: E501

        The name of the item  # noqa: E501

        :return: The asset_name of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this HistoryEntry.

        The name of the item  # noqa: E501

        :param asset_name: The asset_name of this HistoryEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and asset_name is None:
            raise ValueError("Invalid value for `asset_name`, must not be `None`")  # noqa: E501

        self._asset_name = asset_name

    @property
    def asset_icon(self):
        """Gets the asset_icon of this HistoryEntry.  # noqa: E501

        The icon type shown for the item. One of 'icon-announcement', 'icon-assignment', 'icon-calendar-month', 'icon-discussion', 'icon-document', 'icon-download', 'icon-gradebook', 'icon-home', 'icon-message', 'icon-module', 'icon-outcomes', 'icon-quiz', 'icon-user', 'icon-syllabus'  # noqa: E501

        :return: The asset_icon of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._asset_icon

    @asset_icon.setter
    def asset_icon(self, asset_icon):
        """Sets the asset_icon of this HistoryEntry.

        The icon type shown for the item. One of 'icon-announcement', 'icon-assignment', 'icon-calendar-month', 'icon-discussion', 'icon-document', 'icon-download', 'icon-gradebook', 'icon-home', 'icon-message', 'icon-module', 'icon-outcomes', 'icon-quiz', 'icon-user', 'icon-syllabus'  # noqa: E501

        :param asset_icon: The asset_icon of this HistoryEntry.  # noqa: E501
        :type: str
        """

        self._asset_icon = asset_icon

    @property
    def asset_readable_category(self):
        """Gets the asset_readable_category of this HistoryEntry.  # noqa: E501

        The associated category describing the asset_icon  # noqa: E501

        :return: The asset_readable_category of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._asset_readable_category

    @asset_readable_category.setter
    def asset_readable_category(self, asset_readable_category):
        """Sets the asset_readable_category of this HistoryEntry.

        The associated category describing the asset_icon  # noqa: E501

        :param asset_readable_category: The asset_readable_category of this HistoryEntry.  # noqa: E501
        :type: str
        """

        self._asset_readable_category = asset_readable_category

    @property
    def context_type(self):
        """Gets the context_type of this HistoryEntry.  # noqa: E501

        The type of context of the item visited. One of 'Course', 'Group', 'User', or 'Account'  # noqa: E501

        :return: The context_type of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this HistoryEntry.

        The type of context of the item visited. One of 'Course', 'Group', 'User', or 'Account'  # noqa: E501

        :param context_type: The context_type of this HistoryEntry.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def context_id(self):
        """Gets the context_id of this HistoryEntry.  # noqa: E501

        The id of the context, if applicable  # noqa: E501

        :return: The context_id of this HistoryEntry.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this HistoryEntry.

        The id of the context, if applicable  # noqa: E501

        :param context_id: The context_id of this HistoryEntry.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_name(self):
        """Gets the context_name of this HistoryEntry.  # noqa: E501

        The name of the context  # noqa: E501

        :return: The context_name of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this HistoryEntry.

        The name of the context  # noqa: E501

        :param context_name: The context_name of this HistoryEntry.  # noqa: E501
        :type: str
        """

        self._context_name = context_name

    @property
    def visited_url(self):
        """Gets the visited_url of this HistoryEntry.  # noqa: E501

        The URL of the item  # noqa: E501

        :return: The visited_url of this HistoryEntry.  # noqa: E501
        :rtype: str
        """
        return self._visited_url

    @visited_url.setter
    def visited_url(self, visited_url):
        """Sets the visited_url of this HistoryEntry.

        The URL of the item  # noqa: E501

        :param visited_url: The visited_url of this HistoryEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and visited_url is None:
            raise ValueError("Invalid value for `visited_url`, must not be `None`")  # noqa: E501

        self._visited_url = visited_url

    @property
    def visited_at(self):
        """Gets the visited_at of this HistoryEntry.  # noqa: E501

        When the page was visited  # noqa: E501

        :return: The visited_at of this HistoryEntry.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._visited_at

    @visited_at.setter
    def visited_at(self, visited_at):
        """Sets the visited_at of this HistoryEntry.

        When the page was visited  # noqa: E501

        :param visited_at: The visited_at of this HistoryEntry.  # noqa: E501
        :type: ModelDatetime
        """
        if self._configuration.client_side_validation and visited_at is None:
            raise ValueError("Invalid value for `visited_at`, must not be `None`")  # noqa: E501

        self._visited_at = visited_at

    @property
    def interaction_seconds(self):
        """Gets the interaction_seconds of this HistoryEntry.  # noqa: E501

        The estimated time spent on the page in seconds  # noqa: E501

        :return: The interaction_seconds of this HistoryEntry.  # noqa: E501
        :rtype: int
        """
        return self._interaction_seconds

    @interaction_seconds.setter
    def interaction_seconds(self, interaction_seconds):
        """Sets the interaction_seconds of this HistoryEntry.

        The estimated time spent on the page in seconds  # noqa: E501

        :param interaction_seconds: The interaction_seconds of this HistoryEntry.  # noqa: E501
        :type: int
        """

        self._interaction_seconds = interaction_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HistoryEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoryEntry):
            return True

        return self.to_dict() != other.to_dict()
