# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CoursePace(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'course_id': 'int',
        'user_id': 'int',
        'workflow_state': 'str',
        'exclude_weekends': 'bool',
        'hard_end_dates': 'bool',
        'created_at': 'ModelDatetime',
        'end_date': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'published_at': 'ModelDatetime',
        'root_account_id': 'int',
        'start_date': 'ModelDatetime',
        'modules': 'list[object]',
        'progress': 'Progress'
    }

    attribute_map = {
        'id': 'id',
        'course_id': 'course_id',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state',
        'exclude_weekends': 'exclude_weekends',
        'hard_end_dates': 'hard_end_dates',
        'created_at': 'created_at',
        'end_date': 'end_date',
        'updated_at': 'updated_at',
        'published_at': 'published_at',
        'root_account_id': 'root_account_id',
        'start_date': 'start_date',
        'modules': 'modules',
        'progress': 'progress'
    }

    def __init__(self, id=None, course_id=None, user_id=None, workflow_state=None, exclude_weekends=None, hard_end_dates=None, created_at=None, end_date=None, updated_at=None, published_at=None, root_account_id=None, start_date=None, modules=None, progress=None, _configuration=None):  # noqa: E501
        """CoursePace - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._course_id = None
        self._user_id = None
        self._workflow_state = None
        self._exclude_weekends = None
        self._hard_end_dates = None
        self._created_at = None
        self._end_date = None
        self._updated_at = None
        self._published_at = None
        self._root_account_id = None
        self._start_date = None
        self._modules = None
        self._progress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if course_id is not None:
            self.course_id = course_id
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if exclude_weekends is not None:
            self.exclude_weekends = exclude_weekends
        if hard_end_dates is not None:
            self.hard_end_dates = hard_end_dates
        if created_at is not None:
            self.created_at = created_at
        if end_date is not None:
            self.end_date = end_date
        if updated_at is not None:
            self.updated_at = updated_at
        if published_at is not None:
            self.published_at = published_at
        if root_account_id is not None:
            self.root_account_id = root_account_id
        if start_date is not None:
            self.start_date = start_date
        if modules is not None:
            self.modules = modules
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this CoursePace.  # noqa: E501

        the ID of the course pace  # noqa: E501

        :return: The id of this CoursePace.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CoursePace.

        the ID of the course pace  # noqa: E501

        :param id: The id of this CoursePace.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def course_id(self):
        """Gets the course_id of this CoursePace.  # noqa: E501

        the ID of the course  # noqa: E501

        :return: The course_id of this CoursePace.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this CoursePace.

        the ID of the course  # noqa: E501

        :param course_id: The course_id of this CoursePace.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def user_id(self):
        """Gets the user_id of this CoursePace.  # noqa: E501

        the ID of the user for this course pace  # noqa: E501

        :return: The user_id of this CoursePace.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CoursePace.

        the ID of the user for this course pace  # noqa: E501

        :param user_id: The user_id of this CoursePace.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this CoursePace.  # noqa: E501

        the state of the course pace  # noqa: E501

        :return: The workflow_state of this CoursePace.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this CoursePace.

        the state of the course pace  # noqa: E501

        :param workflow_state: The workflow_state of this CoursePace.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def exclude_weekends(self):
        """Gets the exclude_weekends of this CoursePace.  # noqa: E501

        boolean value depending on exclude weekends setting  # noqa: E501

        :return: The exclude_weekends of this CoursePace.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_weekends

    @exclude_weekends.setter
    def exclude_weekends(self, exclude_weekends):
        """Sets the exclude_weekends of this CoursePace.

        boolean value depending on exclude weekends setting  # noqa: E501

        :param exclude_weekends: The exclude_weekends of this CoursePace.  # noqa: E501
        :type: bool
        """

        self._exclude_weekends = exclude_weekends

    @property
    def hard_end_dates(self):
        """Gets the hard_end_dates of this CoursePace.  # noqa: E501

        set if the end date is set from course  # noqa: E501

        :return: The hard_end_dates of this CoursePace.  # noqa: E501
        :rtype: bool
        """
        return self._hard_end_dates

    @hard_end_dates.setter
    def hard_end_dates(self, hard_end_dates):
        """Sets the hard_end_dates of this CoursePace.

        set if the end date is set from course  # noqa: E501

        :param hard_end_dates: The hard_end_dates of this CoursePace.  # noqa: E501
        :type: bool
        """

        self._hard_end_dates = hard_end_dates

    @property
    def created_at(self):
        """Gets the created_at of this CoursePace.  # noqa: E501

        date when course pace is created  # noqa: E501

        :return: The created_at of this CoursePace.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CoursePace.

        date when course pace is created  # noqa: E501

        :param created_at: The created_at of this CoursePace.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def end_date(self):
        """Gets the end_date of this CoursePace.  # noqa: E501

        course end date  # noqa: E501

        :return: The end_date of this CoursePace.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CoursePace.

        course end date  # noqa: E501

        :param end_date: The end_date of this CoursePace.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_date = end_date

    @property
    def updated_at(self):
        """Gets the updated_at of this CoursePace.  # noqa: E501

        date when course pace is updated  # noqa: E501

        :return: The updated_at of this CoursePace.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CoursePace.

        date when course pace is updated  # noqa: E501

        :param updated_at: The updated_at of this CoursePace.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def published_at(self):
        """Gets the published_at of this CoursePace.  # noqa: E501

        date when course pace is published  # noqa: E501

        :return: The published_at of this CoursePace.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this CoursePace.

        date when course pace is published  # noqa: E501

        :param published_at: The published_at of this CoursePace.  # noqa: E501
        :type: ModelDatetime
        """

        self._published_at = published_at

    @property
    def root_account_id(self):
        """Gets the root_account_id of this CoursePace.  # noqa: E501

        the root account ID for this course pace  # noqa: E501

        :return: The root_account_id of this CoursePace.  # noqa: E501
        :rtype: int
        """
        return self._root_account_id

    @root_account_id.setter
    def root_account_id(self, root_account_id):
        """Sets the root_account_id of this CoursePace.

        the root account ID for this course pace  # noqa: E501

        :param root_account_id: The root_account_id of this CoursePace.  # noqa: E501
        :type: int
        """

        self._root_account_id = root_account_id

    @property
    def start_date(self):
        """Gets the start_date of this CoursePace.  # noqa: E501

        course start date  # noqa: E501

        :return: The start_date of this CoursePace.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CoursePace.

        course start date  # noqa: E501

        :param start_date: The start_date of this CoursePace.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_date = start_date

    @property
    def modules(self):
        """Gets the modules of this CoursePace.  # noqa: E501

        list of modules and items for this course pace  # noqa: E501

        :return: The modules of this CoursePace.  # noqa: E501
        :rtype: list[object]
        """
        return self._modules

    @modules.setter
    def modules(self, modules):
        """Sets the modules of this CoursePace.

        list of modules and items for this course pace  # noqa: E501

        :param modules: The modules of this CoursePace.  # noqa: E501
        :type: list[object]
        """

        self._modules = modules

    @property
    def progress(self):
        """Gets the progress of this CoursePace.  # noqa: E501

        progress of pace publishing  # noqa: E501

        :return: The progress of this CoursePace.  # noqa: E501
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CoursePace.

        progress of pace publishing  # noqa: E501

        :param progress: The progress of this CoursePace.  # noqa: E501
        :type: Progress
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoursePace, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoursePace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CoursePace):
            return True

        return self.to_dict() != other.to_dict()
