# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SubmissionComment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'author_id': 'int',
        'author_name': 'str',
        'author': 'str',
        'comment': 'str',
        'created_at': 'ModelDatetime',
        'edited_at': 'ModelDatetime',
        'media_comment': 'MediaComment'
    }

    attribute_map = {
        'id': 'id',
        'author_id': 'author_id',
        'author_name': 'author_name',
        'author': 'author',
        'comment': 'comment',
        'created_at': 'created_at',
        'edited_at': 'edited_at',
        'media_comment': 'media_comment'
    }

    def __init__(self, id=None, author_id=None, author_name=None, author=None, comment=None, created_at=None, edited_at=None, media_comment=None, _configuration=None):  # noqa: E501
        """SubmissionComment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._author_id = None
        self._author_name = None
        self._author = None
        self._comment = None
        self._created_at = None
        self._edited_at = None
        self._media_comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if author_id is not None:
            self.author_id = author_id
        if author_name is not None:
            self.author_name = author_name
        if author is not None:
            self.author = author
        if comment is not None:
            self.comment = comment
        if created_at is not None:
            self.created_at = created_at
        if edited_at is not None:
            self.edited_at = edited_at
        if media_comment is not None:
            self.media_comment = media_comment

    @property
    def id(self):
        """Gets the id of this SubmissionComment.  # noqa: E501


        :return: The id of this SubmissionComment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionComment.


        :param id: The id of this SubmissionComment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author_id(self):
        """Gets the author_id of this SubmissionComment.  # noqa: E501


        :return: The author_id of this SubmissionComment.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this SubmissionComment.


        :param author_id: The author_id of this SubmissionComment.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def author_name(self):
        """Gets the author_name of this SubmissionComment.  # noqa: E501


        :return: The author_name of this SubmissionComment.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this SubmissionComment.


        :param author_name: The author_name of this SubmissionComment.  # noqa: E501
        :type: str
        """

        self._author_name = author_name

    @property
    def author(self):
        """Gets the author of this SubmissionComment.  # noqa: E501

        Abbreviated user object UserDisplay (see users API).  # noqa: E501

        :return: The author of this SubmissionComment.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this SubmissionComment.

        Abbreviated user object UserDisplay (see users API).  # noqa: E501

        :param author: The author of this SubmissionComment.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def comment(self):
        """Gets the comment of this SubmissionComment.  # noqa: E501


        :return: The comment of this SubmissionComment.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SubmissionComment.


        :param comment: The comment of this SubmissionComment.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_at(self):
        """Gets the created_at of this SubmissionComment.  # noqa: E501


        :return: The created_at of this SubmissionComment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SubmissionComment.


        :param created_at: The created_at of this SubmissionComment.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def edited_at(self):
        """Gets the edited_at of this SubmissionComment.  # noqa: E501


        :return: The edited_at of this SubmissionComment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._edited_at

    @edited_at.setter
    def edited_at(self, edited_at):
        """Sets the edited_at of this SubmissionComment.


        :param edited_at: The edited_at of this SubmissionComment.  # noqa: E501
        :type: ModelDatetime
        """

        self._edited_at = edited_at

    @property
    def media_comment(self):
        """Gets the media_comment of this SubmissionComment.  # noqa: E501


        :return: The media_comment of this SubmissionComment.  # noqa: E501
        :rtype: MediaComment
        """
        return self._media_comment

    @media_comment.setter
    def media_comment(self, media_comment):
        """Sets the media_comment of this SubmissionComment.


        :param media_comment: The media_comment of this SubmissionComment.  # noqa: E501
        :type: MediaComment
        """

        self._media_comment = media_comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmissionComment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionComment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionComment):
            return True

        return self.to_dict() != other.to_dict()
