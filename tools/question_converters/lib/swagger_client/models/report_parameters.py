# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReportParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enrollment_term_id': 'int',
        'include_deleted': 'bool',
        'course_id': 'int',
        'order': 'str',
        'users': 'bool',
        'accounts': 'bool',
        'terms': 'bool',
        'courses': 'bool',
        'sections': 'bool',
        'enrollments': 'bool',
        'groups': 'bool',
        'xlist': 'bool',
        'sis_terms_csv': 'int',
        'sis_accounts_csv': 'int',
        'include_enrollment_state': 'bool',
        'enrollment_state': 'list[str]',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime'
    }

    attribute_map = {
        'enrollment_term_id': 'enrollment_term_id',
        'include_deleted': 'include_deleted',
        'course_id': 'course_id',
        'order': 'order',
        'users': 'users',
        'accounts': 'accounts',
        'terms': 'terms',
        'courses': 'courses',
        'sections': 'sections',
        'enrollments': 'enrollments',
        'groups': 'groups',
        'xlist': 'xlist',
        'sis_terms_csv': 'sis_terms_csv',
        'sis_accounts_csv': 'sis_accounts_csv',
        'include_enrollment_state': 'include_enrollment_state',
        'enrollment_state': 'enrollment_state',
        'start_at': 'start_at',
        'end_at': 'end_at'
    }

    def __init__(self, enrollment_term_id=None, include_deleted=None, course_id=None, order=None, users=None, accounts=None, terms=None, courses=None, sections=None, enrollments=None, groups=None, xlist=None, sis_terms_csv=None, sis_accounts_csv=None, include_enrollment_state=None, enrollment_state=None, start_at=None, end_at=None, _configuration=None):  # noqa: E501
        """ReportParameters - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enrollment_term_id = None
        self._include_deleted = None
        self._course_id = None
        self._order = None
        self._users = None
        self._accounts = None
        self._terms = None
        self._courses = None
        self._sections = None
        self._enrollments = None
        self._groups = None
        self._xlist = None
        self._sis_terms_csv = None
        self._sis_accounts_csv = None
        self._include_enrollment_state = None
        self._enrollment_state = None
        self._start_at = None
        self._end_at = None
        self.discriminator = None

        if enrollment_term_id is not None:
            self.enrollment_term_id = enrollment_term_id
        if include_deleted is not None:
            self.include_deleted = include_deleted
        if course_id is not None:
            self.course_id = course_id
        if order is not None:
            self.order = order
        if users is not None:
            self.users = users
        if accounts is not None:
            self.accounts = accounts
        if terms is not None:
            self.terms = terms
        if courses is not None:
            self.courses = courses
        if sections is not None:
            self.sections = sections
        if enrollments is not None:
            self.enrollments = enrollments
        if groups is not None:
            self.groups = groups
        if xlist is not None:
            self.xlist = xlist
        if sis_terms_csv is not None:
            self.sis_terms_csv = sis_terms_csv
        if sis_accounts_csv is not None:
            self.sis_accounts_csv = sis_accounts_csv
        if include_enrollment_state is not None:
            self.include_enrollment_state = include_enrollment_state
        if enrollment_state is not None:
            self.enrollment_state = enrollment_state
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at

    @property
    def enrollment_term_id(self):
        """Gets the enrollment_term_id of this ReportParameters.  # noqa: E501

        The canvas id of the term to get grades from  # noqa: E501

        :return: The enrollment_term_id of this ReportParameters.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_term_id

    @enrollment_term_id.setter
    def enrollment_term_id(self, enrollment_term_id):
        """Sets the enrollment_term_id of this ReportParameters.

        The canvas id of the term to get grades from  # noqa: E501

        :param enrollment_term_id: The enrollment_term_id of this ReportParameters.  # noqa: E501
        :type: int
        """

        self._enrollment_term_id = enrollment_term_id

    @property
    def include_deleted(self):
        """Gets the include_deleted of this ReportParameters.  # noqa: E501

        If true, deleted objects will be included. If false, deleted objects will be omitted.  # noqa: E501

        :return: The include_deleted of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_deleted

    @include_deleted.setter
    def include_deleted(self, include_deleted):
        """Sets the include_deleted of this ReportParameters.

        If true, deleted objects will be included. If false, deleted objects will be omitted.  # noqa: E501

        :param include_deleted: The include_deleted of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._include_deleted = include_deleted

    @property
    def course_id(self):
        """Gets the course_id of this ReportParameters.  # noqa: E501

        The id of the course to report on  # noqa: E501

        :return: The course_id of this ReportParameters.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this ReportParameters.

        The id of the course to report on  # noqa: E501

        :param course_id: The course_id of this ReportParameters.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def order(self):
        """Gets the order of this ReportParameters.  # noqa: E501

        The sort order for the csv, Options: 'users', 'courses', 'outcomes'.  # noqa: E501

        :return: The order of this ReportParameters.  # noqa: E501
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this ReportParameters.

        The sort order for the csv, Options: 'users', 'courses', 'outcomes'.  # noqa: E501

        :param order: The order of this ReportParameters.  # noqa: E501
        :type: str
        """

        self._order = order

    @property
    def users(self):
        """Gets the users of this ReportParameters.  # noqa: E501

        If true, user data will be included. If false, user data will be omitted.  # noqa: E501

        :return: The users of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ReportParameters.

        If true, user data will be included. If false, user data will be omitted.  # noqa: E501

        :param users: The users of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._users = users

    @property
    def accounts(self):
        """Gets the accounts of this ReportParameters.  # noqa: E501

        If true, account data will be included. If false, account data will be omitted.  # noqa: E501

        :return: The accounts of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this ReportParameters.

        If true, account data will be included. If false, account data will be omitted.  # noqa: E501

        :param accounts: The accounts of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._accounts = accounts

    @property
    def terms(self):
        """Gets the terms of this ReportParameters.  # noqa: E501

        If true, term data will be included. If false, term data will be omitted.  # noqa: E501

        :return: The terms of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ReportParameters.

        If true, term data will be included. If false, term data will be omitted.  # noqa: E501

        :param terms: The terms of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._terms = terms

    @property
    def courses(self):
        """Gets the courses of this ReportParameters.  # noqa: E501

        If true, course data will be included. If false, course data will be omitted.  # noqa: E501

        :return: The courses of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """Sets the courses of this ReportParameters.

        If true, course data will be included. If false, course data will be omitted.  # noqa: E501

        :param courses: The courses of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._courses = courses

    @property
    def sections(self):
        """Gets the sections of this ReportParameters.  # noqa: E501

        If true, section data will be included. If false, section data will be omitted.  # noqa: E501

        :return: The sections of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this ReportParameters.

        If true, section data will be included. If false, section data will be omitted.  # noqa: E501

        :param sections: The sections of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._sections = sections

    @property
    def enrollments(self):
        """Gets the enrollments of this ReportParameters.  # noqa: E501

        If true, enrollment data will be included. If false, enrollment data will be omitted.  # noqa: E501

        :return: The enrollments of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """Sets the enrollments of this ReportParameters.

        If true, enrollment data will be included. If false, enrollment data will be omitted.  # noqa: E501

        :param enrollments: The enrollments of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._enrollments = enrollments

    @property
    def groups(self):
        """Gets the groups of this ReportParameters.  # noqa: E501

        If true, group data will be included. If false, group data will be omitted.  # noqa: E501

        :return: The groups of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ReportParameters.

        If true, group data will be included. If false, group data will be omitted.  # noqa: E501

        :param groups: The groups of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._groups = groups

    @property
    def xlist(self):
        """Gets the xlist of this ReportParameters.  # noqa: E501

        If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.  # noqa: E501

        :return: The xlist of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._xlist

    @xlist.setter
    def xlist(self, xlist):
        """Sets the xlist of this ReportParameters.

        If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.  # noqa: E501

        :param xlist: The xlist of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._xlist = xlist

    @property
    def sis_terms_csv(self):
        """Gets the sis_terms_csv of this ReportParameters.  # noqa: E501


        :return: The sis_terms_csv of this ReportParameters.  # noqa: E501
        :rtype: int
        """
        return self._sis_terms_csv

    @sis_terms_csv.setter
    def sis_terms_csv(self, sis_terms_csv):
        """Sets the sis_terms_csv of this ReportParameters.


        :param sis_terms_csv: The sis_terms_csv of this ReportParameters.  # noqa: E501
        :type: int
        """

        self._sis_terms_csv = sis_terms_csv

    @property
    def sis_accounts_csv(self):
        """Gets the sis_accounts_csv of this ReportParameters.  # noqa: E501


        :return: The sis_accounts_csv of this ReportParameters.  # noqa: E501
        :rtype: int
        """
        return self._sis_accounts_csv

    @sis_accounts_csv.setter
    def sis_accounts_csv(self, sis_accounts_csv):
        """Sets the sis_accounts_csv of this ReportParameters.


        :param sis_accounts_csv: The sis_accounts_csv of this ReportParameters.  # noqa: E501
        :type: int
        """

        self._sis_accounts_csv = sis_accounts_csv

    @property
    def include_enrollment_state(self):
        """Gets the include_enrollment_state of this ReportParameters.  # noqa: E501

        If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.  # noqa: E501

        :return: The include_enrollment_state of this ReportParameters.  # noqa: E501
        :rtype: bool
        """
        return self._include_enrollment_state

    @include_enrollment_state.setter
    def include_enrollment_state(self, include_enrollment_state):
        """Sets the include_enrollment_state of this ReportParameters.

        If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.  # noqa: E501

        :param include_enrollment_state: The include_enrollment_state of this ReportParameters.  # noqa: E501
        :type: bool
        """

        self._include_enrollment_state = include_enrollment_state

    @property
    def enrollment_state(self):
        """Gets the enrollment_state of this ReportParameters.  # noqa: E501

        Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']  # noqa: E501

        :return: The enrollment_state of this ReportParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._enrollment_state

    @enrollment_state.setter
    def enrollment_state(self, enrollment_state):
        """Sets the enrollment_state of this ReportParameters.

        Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']  # noqa: E501

        :param enrollment_state: The enrollment_state of this ReportParameters.  # noqa: E501
        :type: list[str]
        """

        self._enrollment_state = enrollment_state

    @property
    def start_at(self):
        """Gets the start_at of this ReportParameters.  # noqa: E501

        The beginning date for submissions. Max time range is 2 weeks.  # noqa: E501

        :return: The start_at of this ReportParameters.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this ReportParameters.

        The beginning date for submissions. Max time range is 2 weeks.  # noqa: E501

        :param start_at: The start_at of this ReportParameters.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this ReportParameters.  # noqa: E501

        The end date for submissions. Max time range is 2 weeks.  # noqa: E501

        :return: The end_at of this ReportParameters.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this ReportParameters.

        The end date for submissions. Max time range is 2 weeks.  # noqa: E501

        :param end_at: The end_at of this ReportParameters.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReportParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportParameters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReportParameters):
            return True

        return self.to_dict() != other.to_dict()
