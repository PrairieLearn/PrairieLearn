# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EnrollmentTerm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sis_term_id': 'str',
        'sis_import_id': 'int',
        'name': 'str',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'workflow_state': 'str',
        'overrides': 'object',
        'course_count': 'int'
    }

    attribute_map = {
        'id': 'id',
        'sis_term_id': 'sis_term_id',
        'sis_import_id': 'sis_import_id',
        'name': 'name',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'workflow_state': 'workflow_state',
        'overrides': 'overrides',
        'course_count': 'course_count'
    }

    def __init__(self, id=None, sis_term_id=None, sis_import_id=None, name=None, start_at=None, end_at=None, workflow_state=None, overrides=None, course_count=None, _configuration=None):  # noqa: E501
        """EnrollmentTerm - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._sis_term_id = None
        self._sis_import_id = None
        self._name = None
        self._start_at = None
        self._end_at = None
        self._workflow_state = None
        self._overrides = None
        self._course_count = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sis_term_id is not None:
            self.sis_term_id = sis_term_id
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if name is not None:
            self.name = name
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if overrides is not None:
            self.overrides = overrides
        if course_count is not None:
            self.course_count = course_count

    @property
    def id(self):
        """Gets the id of this EnrollmentTerm.  # noqa: E501

        The unique identifier for the enrollment term.  # noqa: E501

        :return: The id of this EnrollmentTerm.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EnrollmentTerm.

        The unique identifier for the enrollment term.  # noqa: E501

        :param id: The id of this EnrollmentTerm.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sis_term_id(self):
        """Gets the sis_term_id of this EnrollmentTerm.  # noqa: E501

        The SIS id of the term. Only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_term_id of this EnrollmentTerm.  # noqa: E501
        :rtype: str
        """
        return self._sis_term_id

    @sis_term_id.setter
    def sis_term_id(self, sis_term_id):
        """Sets the sis_term_id of this EnrollmentTerm.

        The SIS id of the term. Only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_term_id: The sis_term_id of this EnrollmentTerm.  # noqa: E501
        :type: str
        """

        self._sis_term_id = sis_term_id

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this EnrollmentTerm.  # noqa: E501

        the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this EnrollmentTerm.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this EnrollmentTerm.

        the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this EnrollmentTerm.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def name(self):
        """Gets the name of this EnrollmentTerm.  # noqa: E501

        The name of the term.  # noqa: E501

        :return: The name of this EnrollmentTerm.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EnrollmentTerm.

        The name of the term.  # noqa: E501

        :param name: The name of this EnrollmentTerm.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def start_at(self):
        """Gets the start_at of this EnrollmentTerm.  # noqa: E501

        The datetime of the start of the term.  # noqa: E501

        :return: The start_at of this EnrollmentTerm.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this EnrollmentTerm.

        The datetime of the start of the term.  # noqa: E501

        :param start_at: The start_at of this EnrollmentTerm.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this EnrollmentTerm.  # noqa: E501

        The datetime of the end of the term.  # noqa: E501

        :return: The end_at of this EnrollmentTerm.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this EnrollmentTerm.

        The datetime of the end of the term.  # noqa: E501

        :param end_at: The end_at of this EnrollmentTerm.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this EnrollmentTerm.  # noqa: E501

        The state of the term. Can be 'active' or 'deleted'.  # noqa: E501

        :return: The workflow_state of this EnrollmentTerm.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this EnrollmentTerm.

        The state of the term. Can be 'active' or 'deleted'.  # noqa: E501

        :param workflow_state: The workflow_state of this EnrollmentTerm.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def overrides(self):
        """Gets the overrides of this EnrollmentTerm.  # noqa: E501

        Term date overrides for specific enrollment types  # noqa: E501

        :return: The overrides of this EnrollmentTerm.  # noqa: E501
        :rtype: object
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this EnrollmentTerm.

        Term date overrides for specific enrollment types  # noqa: E501

        :param overrides: The overrides of this EnrollmentTerm.  # noqa: E501
        :type: object
        """

        self._overrides = overrides

    @property
    def course_count(self):
        """Gets the course_count of this EnrollmentTerm.  # noqa: E501

        The number of courses in the term (available via include)  # noqa: E501

        :return: The course_count of this EnrollmentTerm.  # noqa: E501
        :rtype: int
        """
        return self._course_count

    @course_count.setter
    def course_count(self, course_count):
        """Sets the course_count of this EnrollmentTerm.

        The number of courses in the term (available via include)  # noqa: E501

        :param course_count: The course_count of this EnrollmentTerm.  # noqa: E501
        :type: int
        """

        self._course_count = course_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EnrollmentTerm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EnrollmentTerm):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EnrollmentTerm):
            return True

        return self.to_dict() != other.to_dict()
