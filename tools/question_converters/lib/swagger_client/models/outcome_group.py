# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'url': 'str',
        'parent_outcome_group': 'OutcomeGroup',
        'context_id': 'int',
        'context_type': 'str',
        'title': 'str',
        'description': 'str',
        'vendor_guid': 'str',
        'subgroups_url': 'str',
        'outcomes_url': 'str',
        'import_url': 'str',
        'can_edit': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'parent_outcome_group': 'parent_outcome_group',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'title': 'title',
        'description': 'description',
        'vendor_guid': 'vendor_guid',
        'subgroups_url': 'subgroups_url',
        'outcomes_url': 'outcomes_url',
        'import_url': 'import_url',
        'can_edit': 'can_edit'
    }

    def __init__(self, id=None, url=None, parent_outcome_group=None, context_id=None, context_type=None, title=None, description=None, vendor_guid=None, subgroups_url=None, outcomes_url=None, import_url=None, can_edit=None, _configuration=None):  # noqa: E501
        """OutcomeGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._url = None
        self._parent_outcome_group = None
        self._context_id = None
        self._context_type = None
        self._title = None
        self._description = None
        self._vendor_guid = None
        self._subgroups_url = None
        self._outcomes_url = None
        self._import_url = None
        self._can_edit = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if parent_outcome_group is not None:
            self.parent_outcome_group = parent_outcome_group
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if vendor_guid is not None:
            self.vendor_guid = vendor_guid
        if subgroups_url is not None:
            self.subgroups_url = subgroups_url
        if outcomes_url is not None:
            self.outcomes_url = outcomes_url
        if import_url is not None:
            self.import_url = import_url
        if can_edit is not None:
            self.can_edit = can_edit

    @property
    def id(self):
        """Gets the id of this OutcomeGroup.  # noqa: E501

        the ID of the outcome group  # noqa: E501

        :return: The id of this OutcomeGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutcomeGroup.

        the ID of the outcome group  # noqa: E501

        :param id: The id of this OutcomeGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this OutcomeGroup.  # noqa: E501

        the URL for fetching/updating the outcome group. should be treated as opaque  # noqa: E501

        :return: The url of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OutcomeGroup.

        the URL for fetching/updating the outcome group. should be treated as opaque  # noqa: E501

        :param url: The url of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def parent_outcome_group(self):
        """Gets the parent_outcome_group of this OutcomeGroup.  # noqa: E501

        an abbreviated OutcomeGroup object representing the parent group of this outcome group, if any. omitted in the abbreviated form.  # noqa: E501

        :return: The parent_outcome_group of this OutcomeGroup.  # noqa: E501
        :rtype: OutcomeGroup
        """
        return self._parent_outcome_group

    @parent_outcome_group.setter
    def parent_outcome_group(self, parent_outcome_group):
        """Sets the parent_outcome_group of this OutcomeGroup.

        an abbreviated OutcomeGroup object representing the parent group of this outcome group, if any. omitted in the abbreviated form.  # noqa: E501

        :param parent_outcome_group: The parent_outcome_group of this OutcomeGroup.  # noqa: E501
        :type: OutcomeGroup
        """

        self._parent_outcome_group = parent_outcome_group

    @property
    def context_id(self):
        """Gets the context_id of this OutcomeGroup.  # noqa: E501

        the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.  # noqa: E501

        :return: The context_id of this OutcomeGroup.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this OutcomeGroup.

        the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.  # noqa: E501

        :param context_id: The context_id of this OutcomeGroup.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this OutcomeGroup.  # noqa: E501


        :return: The context_type of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this OutcomeGroup.


        :param context_type: The context_type of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def title(self):
        """Gets the title of this OutcomeGroup.  # noqa: E501

        title of the outcome group  # noqa: E501

        :return: The title of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OutcomeGroup.

        title of the outcome group  # noqa: E501

        :param title: The title of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this OutcomeGroup.  # noqa: E501

        description of the outcome group. omitted in the abbreviated form.  # noqa: E501

        :return: The description of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OutcomeGroup.

        description of the outcome group. omitted in the abbreviated form.  # noqa: E501

        :param description: The description of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vendor_guid(self):
        """Gets the vendor_guid of this OutcomeGroup.  # noqa: E501

        A custom GUID for the learning standard.  # noqa: E501

        :return: The vendor_guid of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._vendor_guid

    @vendor_guid.setter
    def vendor_guid(self, vendor_guid):
        """Sets the vendor_guid of this OutcomeGroup.

        A custom GUID for the learning standard.  # noqa: E501

        :param vendor_guid: The vendor_guid of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._vendor_guid = vendor_guid

    @property
    def subgroups_url(self):
        """Gets the subgroups_url of this OutcomeGroup.  # noqa: E501

        the URL for listing/creating subgroups under the outcome group. should be treated as opaque  # noqa: E501

        :return: The subgroups_url of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._subgroups_url

    @subgroups_url.setter
    def subgroups_url(self, subgroups_url):
        """Sets the subgroups_url of this OutcomeGroup.

        the URL for listing/creating subgroups under the outcome group. should be treated as opaque  # noqa: E501

        :param subgroups_url: The subgroups_url of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._subgroups_url = subgroups_url

    @property
    def outcomes_url(self):
        """Gets the outcomes_url of this OutcomeGroup.  # noqa: E501

        the URL for listing/creating outcome links under the outcome group. should be treated as opaque  # noqa: E501

        :return: The outcomes_url of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._outcomes_url

    @outcomes_url.setter
    def outcomes_url(self, outcomes_url):
        """Sets the outcomes_url of this OutcomeGroup.

        the URL for listing/creating outcome links under the outcome group. should be treated as opaque  # noqa: E501

        :param outcomes_url: The outcomes_url of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._outcomes_url = outcomes_url

    @property
    def import_url(self):
        """Gets the import_url of this OutcomeGroup.  # noqa: E501

        the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.  # noqa: E501

        :return: The import_url of this OutcomeGroup.  # noqa: E501
        :rtype: str
        """
        return self._import_url

    @import_url.setter
    def import_url(self, import_url):
        """Sets the import_url of this OutcomeGroup.

        the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.  # noqa: E501

        :param import_url: The import_url of this OutcomeGroup.  # noqa: E501
        :type: str
        """

        self._import_url = import_url

    @property
    def can_edit(self):
        """Gets the can_edit of this OutcomeGroup.  # noqa: E501

        whether the current user can update the outcome group  # noqa: E501

        :return: The can_edit of this OutcomeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this OutcomeGroup.

        whether the current user can update the outcome group  # noqa: E501

        :param can_edit: The can_edit of this OutcomeGroup.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeGroup):
            return True

        return self.to_dict() != other.to_dict()
