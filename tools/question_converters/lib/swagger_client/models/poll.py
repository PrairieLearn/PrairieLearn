# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Poll(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'question': 'str',
        'description': 'str',
        'created_at': 'datetime',
        'user_id': 'int',
        'total_results': 'object'
    }

    attribute_map = {
        'id': 'id',
        'question': 'question',
        'description': 'description',
        'created_at': 'created_at',
        'user_id': 'user_id',
        'total_results': 'total_results'
    }

    def __init__(self, id=None, question=None, description=None, created_at=None, user_id=None, total_results=None, _configuration=None):  # noqa: E501
        """Poll - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._question = None
        self._description = None
        self._created_at = None
        self._user_id = None
        self._total_results = None
        self.discriminator = None

        self.id = id
        self.question = question
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if user_id is not None:
            self.user_id = user_id
        if total_results is not None:
            self.total_results = total_results

    @property
    def id(self):
        """Gets the id of this Poll.  # noqa: E501

        The unique identifier for the poll.  # noqa: E501

        :return: The id of this Poll.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Poll.

        The unique identifier for the poll.  # noqa: E501

        :param id: The id of this Poll.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def question(self):
        """Gets the question of this Poll.  # noqa: E501

        The question/title of the poll.  # noqa: E501

        :return: The question of this Poll.  # noqa: E501
        :rtype: str
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this Poll.

        The question/title of the poll.  # noqa: E501

        :param question: The question of this Poll.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and question is None:
            raise ValueError("Invalid value for `question`, must not be `None`")  # noqa: E501

        self._question = question

    @property
    def description(self):
        """Gets the description of this Poll.  # noqa: E501

        A short description of the poll.  # noqa: E501

        :return: The description of this Poll.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Poll.

        A short description of the poll.  # noqa: E501

        :param description: The description of this Poll.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Poll.  # noqa: E501

        The time at which the poll was created.  # noqa: E501

        :return: The created_at of this Poll.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Poll.

        The time at which the poll was created.  # noqa: E501

        :param created_at: The created_at of this Poll.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this Poll.  # noqa: E501

        The unique identifier for the user that created the poll.  # noqa: E501

        :return: The user_id of this Poll.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Poll.

        The unique identifier for the user that created the poll.  # noqa: E501

        :param user_id: The user_id of this Poll.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def total_results(self):
        """Gets the total_results of this Poll.  # noqa: E501

        An aggregate of the results of all associated poll sessions, with the poll choice id as the key, and the aggregated submission count as the value.  # noqa: E501

        :return: The total_results of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this Poll.

        An aggregate of the results of all associated poll sessions, with the poll choice id as the key, and the aggregated submission count as the value.  # noqa: E501

        :param total_results: The total_results of this Poll.  # noqa: E501
        :type: object
        """

        self._total_results = total_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Poll, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Poll):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Poll):
            return True

        return self.to_dict() != other.to_dict()
