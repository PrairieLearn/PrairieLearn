# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GroupCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'role': 'str',
        'self_signup': 'str',
        'auto_leader': 'str',
        'context_type': 'str',
        'account_id': 'int',
        'group_limit': 'int',
        'sis_group_category_id': 'str',
        'sis_import_id': 'int',
        'progress': 'Progress'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'role': 'role',
        'self_signup': 'self_signup',
        'auto_leader': 'auto_leader',
        'context_type': 'context_type',
        'account_id': 'account_id',
        'group_limit': 'group_limit',
        'sis_group_category_id': 'sis_group_category_id',
        'sis_import_id': 'sis_import_id',
        'progress': 'progress'
    }

    def __init__(self, id=None, name=None, role=None, self_signup=None, auto_leader=None, context_type=None, account_id=None, group_limit=None, sis_group_category_id=None, sis_import_id=None, progress=None, _configuration=None):  # noqa: E501
        """GroupCategory - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._role = None
        self._self_signup = None
        self._auto_leader = None
        self._context_type = None
        self._account_id = None
        self._group_limit = None
        self._sis_group_category_id = None
        self._sis_import_id = None
        self._progress = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if role is not None:
            self.role = role
        if self_signup is not None:
            self.self_signup = self_signup
        if auto_leader is not None:
            self.auto_leader = auto_leader
        if context_type is not None:
            self.context_type = context_type
        if account_id is not None:
            self.account_id = account_id
        if group_limit is not None:
            self.group_limit = group_limit
        if sis_group_category_id is not None:
            self.sis_group_category_id = sis_group_category_id
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this GroupCategory.  # noqa: E501

        The ID of the group category.  # noqa: E501

        :return: The id of this GroupCategory.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupCategory.

        The ID of the group category.  # noqa: E501

        :param id: The id of this GroupCategory.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GroupCategory.  # noqa: E501

        The display name of the group category.  # noqa: E501

        :return: The name of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GroupCategory.

        The display name of the group category.  # noqa: E501

        :param name: The name of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this GroupCategory.  # noqa: E501

        Certain types of group categories have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account group categories have a role of null.  # noqa: E501

        :return: The role of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GroupCategory.

        Certain types of group categories have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account group categories have a role of null.  # noqa: E501

        :param role: The role of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def self_signup(self):
        """Gets the self_signup of this GroupCategory.  # noqa: E501

        If the group category allows users to join a group themselves, thought they may only be a member of one group per group category at a time. Values include 'restricted', 'enabled', and null 'enabled' allows students to assign themselves to a group 'restricted' restricts them to only joining a group in their section null disallows students from joining groups  # noqa: E501

        :return: The self_signup of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._self_signup

    @self_signup.setter
    def self_signup(self, self_signup):
        """Sets the self_signup of this GroupCategory.

        If the group category allows users to join a group themselves, thought they may only be a member of one group per group category at a time. Values include 'restricted', 'enabled', and null 'enabled' allows students to assign themselves to a group 'restricted' restricts them to only joining a group in their section null disallows students from joining groups  # noqa: E501

        :param self_signup: The self_signup of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._self_signup = self_signup

    @property
    def auto_leader(self):
        """Gets the auto_leader of this GroupCategory.  # noqa: E501

        Gives instructors the ability to automatically have group leaders assigned.  Values include 'random', 'first', and null; 'random' picks a student from the group at random as the leader, 'first' sets the first student to be assigned to the group as the leader  # noqa: E501

        :return: The auto_leader of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._auto_leader

    @auto_leader.setter
    def auto_leader(self, auto_leader):
        """Sets the auto_leader of this GroupCategory.

        Gives instructors the ability to automatically have group leaders assigned.  Values include 'random', 'first', and null; 'random' picks a student from the group at random as the leader, 'first' sets the first student to be assigned to the group as the leader  # noqa: E501

        :param auto_leader: The auto_leader of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._auto_leader = auto_leader

    @property
    def context_type(self):
        """Gets the context_type of this GroupCategory.  # noqa: E501

        The course or account that the category group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'Course', the course_id field would be replaced by an course_id field.  # noqa: E501

        :return: The context_type of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this GroupCategory.

        The course or account that the category group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'Course', the course_id field would be replaced by an course_id field.  # noqa: E501

        :param context_type: The context_type of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def account_id(self):
        """Gets the account_id of this GroupCategory.  # noqa: E501


        :return: The account_id of this GroupCategory.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GroupCategory.


        :param account_id: The account_id of this GroupCategory.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def group_limit(self):
        """Gets the group_limit of this GroupCategory.  # noqa: E501

        If self-signup is enabled, group_limit can be set to cap the number of users in each group. If null, there is no limit.  # noqa: E501

        :return: The group_limit of this GroupCategory.  # noqa: E501
        :rtype: int
        """
        return self._group_limit

    @group_limit.setter
    def group_limit(self, group_limit):
        """Sets the group_limit of this GroupCategory.

        If self-signup is enabled, group_limit can be set to cap the number of users in each group. If null, there is no limit.  # noqa: E501

        :param group_limit: The group_limit of this GroupCategory.  # noqa: E501
        :type: int
        """

        self._group_limit = group_limit

    @property
    def sis_group_category_id(self):
        """Gets the sis_group_category_id of this GroupCategory.  # noqa: E501

        The SIS identifier for the group category. This field is only included if the user has permission to manage or view SIS information.  # noqa: E501

        :return: The sis_group_category_id of this GroupCategory.  # noqa: E501
        :rtype: str
        """
        return self._sis_group_category_id

    @sis_group_category_id.setter
    def sis_group_category_id(self, sis_group_category_id):
        """Sets the sis_group_category_id of this GroupCategory.

        The SIS identifier for the group category. This field is only included if the user has permission to manage or view SIS information.  # noqa: E501

        :param sis_group_category_id: The sis_group_category_id of this GroupCategory.  # noqa: E501
        :type: str
        """

        self._sis_group_category_id = sis_group_category_id

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this GroupCategory.  # noqa: E501

        The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this GroupCategory.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this GroupCategory.

        The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this GroupCategory.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def progress(self):
        """Gets the progress of this GroupCategory.  # noqa: E501

        If the group category has not yet finished a randomly student assignment request, a progress object will be attached, which will contain information related to the progress of the assignment request. Refer to the Progress API for more information  # noqa: E501

        :return: The progress of this GroupCategory.  # noqa: E501
        :rtype: Progress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this GroupCategory.

        If the group category has not yet finished a randomly student assignment request, a progress object will be attached, which will contain information related to the progress of the assignment request. Refer to the Progress API for more information  # noqa: E501

        :param progress: The progress of this GroupCategory.  # noqa: E501
        :type: Progress
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupCategory):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupCategory):
            return True

        return self.to_dict() != other.to_dict()
