# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calculator_type': 'str',
        'filter_ip_address': 'bool',
        'filters': 'object',
        'one_at_a_time_type': 'str',
        'allow_backtracking': 'bool',
        'shuffle_answers': 'bool',
        'shuffle_questions': 'bool',
        'require_student_access_code': 'bool',
        'student_access_code': 'str',
        'has_time_limit': 'bool',
        'session_time_limit_in_seconds': 'int',
        'multiple_attempts': 'MultipleAttemptsSettings',
        'result_view_settings': 'ResultViewSettings'
    }

    attribute_map = {
        'calculator_type': 'calculator_type',
        'filter_ip_address': 'filter_ip_address',
        'filters': 'filters',
        'one_at_a_time_type': 'one_at_a_time_type',
        'allow_backtracking': 'allow_backtracking',
        'shuffle_answers': 'shuffle_answers',
        'shuffle_questions': 'shuffle_questions',
        'require_student_access_code': 'require_student_access_code',
        'student_access_code': 'student_access_code',
        'has_time_limit': 'has_time_limit',
        'session_time_limit_in_seconds': 'session_time_limit_in_seconds',
        'multiple_attempts': 'multiple_attempts',
        'result_view_settings': 'result_view_settings'
    }

    def __init__(self, calculator_type=None, filter_ip_address=None, filters=None, one_at_a_time_type=None, allow_backtracking=None, shuffle_answers=None, shuffle_questions=None, require_student_access_code=None, student_access_code=None, has_time_limit=None, session_time_limit_in_seconds=None, multiple_attempts=None, result_view_settings=None, _configuration=None):  # noqa: E501
        """QuizSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._calculator_type = None
        self._filter_ip_address = None
        self._filters = None
        self._one_at_a_time_type = None
        self._allow_backtracking = None
        self._shuffle_answers = None
        self._shuffle_questions = None
        self._require_student_access_code = None
        self._student_access_code = None
        self._has_time_limit = None
        self._session_time_limit_in_seconds = None
        self._multiple_attempts = None
        self._result_view_settings = None
        self.discriminator = None

        if calculator_type is not None:
            self.calculator_type = calculator_type
        if filter_ip_address is not None:
            self.filter_ip_address = filter_ip_address
        if filters is not None:
            self.filters = filters
        if one_at_a_time_type is not None:
            self.one_at_a_time_type = one_at_a_time_type
        if allow_backtracking is not None:
            self.allow_backtracking = allow_backtracking
        if shuffle_answers is not None:
            self.shuffle_answers = shuffle_answers
        if shuffle_questions is not None:
            self.shuffle_questions = shuffle_questions
        if require_student_access_code is not None:
            self.require_student_access_code = require_student_access_code
        if student_access_code is not None:
            self.student_access_code = student_access_code
        if has_time_limit is not None:
            self.has_time_limit = has_time_limit
        if session_time_limit_in_seconds is not None:
            self.session_time_limit_in_seconds = session_time_limit_in_seconds
        if multiple_attempts is not None:
            self.multiple_attempts = multiple_attempts
        if result_view_settings is not None:
            self.result_view_settings = result_view_settings

    @property
    def calculator_type(self):
        """Gets the calculator_type of this QuizSettings.  # noqa: E501

        type of calculator the user will have access to during the quiz ('none', basic' or 'scientific')  # noqa: E501

        :return: The calculator_type of this QuizSettings.  # noqa: E501
        :rtype: str
        """
        return self._calculator_type

    @calculator_type.setter
    def calculator_type(self, calculator_type):
        """Sets the calculator_type of this QuizSettings.

        type of calculator the user will have access to during the quiz ('none', basic' or 'scientific')  # noqa: E501

        :param calculator_type: The calculator_type of this QuizSettings.  # noqa: E501
        :type: str
        """

        self._calculator_type = calculator_type

    @property
    def filter_ip_address(self):
        """Gets the filter_ip_address of this QuizSettings.  # noqa: E501

        whether access to the quiz should be restricted to the IP address ranges described in 'filters'  # noqa: E501

        :return: The filter_ip_address of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._filter_ip_address

    @filter_ip_address.setter
    def filter_ip_address(self, filter_ip_address):
        """Sets the filter_ip_address of this QuizSettings.

        whether access to the quiz should be restricted to the IP address ranges described in 'filters'  # noqa: E501

        :param filter_ip_address: The filter_ip_address of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._filter_ip_address = filter_ip_address

    @property
    def filters(self):
        """Gets the filters of this QuizSettings.  # noqa: E501

        IP address ranges from which users can take the quiz, if 'filter_ip_address' is true  # noqa: E501

        :return: The filters of this QuizSettings.  # noqa: E501
        :rtype: object
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this QuizSettings.

        IP address ranges from which users can take the quiz, if 'filter_ip_address' is true  # noqa: E501

        :param filters: The filters of this QuizSettings.  # noqa: E501
        :type: object
        """

        self._filters = filters

    @property
    def one_at_a_time_type(self):
        """Gets the one_at_a_time_type of this QuizSettings.  # noqa: E501

        whether questions should be shown all at once ('none') or one-at-a-time ('question')  # noqa: E501

        :return: The one_at_a_time_type of this QuizSettings.  # noqa: E501
        :rtype: str
        """
        return self._one_at_a_time_type

    @one_at_a_time_type.setter
    def one_at_a_time_type(self, one_at_a_time_type):
        """Sets the one_at_a_time_type of this QuizSettings.

        whether questions should be shown all at once ('none') or one-at-a-time ('question')  # noqa: E501

        :param one_at_a_time_type: The one_at_a_time_type of this QuizSettings.  # noqa: E501
        :type: str
        """

        self._one_at_a_time_type = one_at_a_time_type

    @property
    def allow_backtracking(self):
        """Gets the allow_backtracking of this QuizSettings.  # noqa: E501

        whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'  # noqa: E501

        :return: The allow_backtracking of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._allow_backtracking

    @allow_backtracking.setter
    def allow_backtracking(self, allow_backtracking):
        """Sets the allow_backtracking of this QuizSettings.

        whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'  # noqa: E501

        :param allow_backtracking: The allow_backtracking of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._allow_backtracking = allow_backtracking

    @property
    def shuffle_answers(self):
        """Gets the shuffle_answers of this QuizSettings.  # noqa: E501

        whether answers should be shuffled during quiz  # noqa: E501

        :return: The shuffle_answers of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._shuffle_answers

    @shuffle_answers.setter
    def shuffle_answers(self, shuffle_answers):
        """Sets the shuffle_answers of this QuizSettings.

        whether answers should be shuffled during quiz  # noqa: E501

        :param shuffle_answers: The shuffle_answers of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._shuffle_answers = shuffle_answers

    @property
    def shuffle_questions(self):
        """Gets the shuffle_questions of this QuizSettings.  # noqa: E501

        whether questions should be shuffled during quiz  # noqa: E501

        :return: The shuffle_questions of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._shuffle_questions

    @shuffle_questions.setter
    def shuffle_questions(self, shuffle_questions):
        """Sets the shuffle_questions of this QuizSettings.

        whether questions should be shuffled during quiz  # noqa: E501

        :param shuffle_questions: The shuffle_questions of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._shuffle_questions = shuffle_questions

    @property
    def require_student_access_code(self):
        """Gets the require_student_access_code of this QuizSettings.  # noqa: E501

        whether to require an access code to take the quiz (set as 'student_access_code')  # noqa: E501

        :return: The require_student_access_code of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._require_student_access_code

    @require_student_access_code.setter
    def require_student_access_code(self, require_student_access_code):
        """Sets the require_student_access_code of this QuizSettings.

        whether to require an access code to take the quiz (set as 'student_access_code')  # noqa: E501

        :param require_student_access_code: The require_student_access_code of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._require_student_access_code = require_student_access_code

    @property
    def student_access_code(self):
        """Gets the student_access_code of this QuizSettings.  # noqa: E501

        access code that is required to take the quiz if 'require_student_access_code' is true  # noqa: E501

        :return: The student_access_code of this QuizSettings.  # noqa: E501
        :rtype: str
        """
        return self._student_access_code

    @student_access_code.setter
    def student_access_code(self, student_access_code):
        """Sets the student_access_code of this QuizSettings.

        access code that is required to take the quiz if 'require_student_access_code' is true  # noqa: E501

        :param student_access_code: The student_access_code of this QuizSettings.  # noqa: E501
        :type: str
        """

        self._student_access_code = student_access_code

    @property
    def has_time_limit(self):
        """Gets the has_time_limit of this QuizSettings.  # noqa: E501

        whether the quiz has a time limit (set as 'session_time_limit_in_seconds')  # noqa: E501

        :return: The has_time_limit of this QuizSettings.  # noqa: E501
        :rtype: bool
        """
        return self._has_time_limit

    @has_time_limit.setter
    def has_time_limit(self, has_time_limit):
        """Sets the has_time_limit of this QuizSettings.

        whether the quiz has a time limit (set as 'session_time_limit_in_seconds')  # noqa: E501

        :param has_time_limit: The has_time_limit of this QuizSettings.  # noqa: E501
        :type: bool
        """

        self._has_time_limit = has_time_limit

    @property
    def session_time_limit_in_seconds(self):
        """Gets the session_time_limit_in_seconds of this QuizSettings.  # noqa: E501

        time limit during the quiz (in seconds)  # noqa: E501

        :return: The session_time_limit_in_seconds of this QuizSettings.  # noqa: E501
        :rtype: int
        """
        return self._session_time_limit_in_seconds

    @session_time_limit_in_seconds.setter
    def session_time_limit_in_seconds(self, session_time_limit_in_seconds):
        """Sets the session_time_limit_in_seconds of this QuizSettings.

        time limit during the quiz (in seconds)  # noqa: E501

        :param session_time_limit_in_seconds: The session_time_limit_in_seconds of this QuizSettings.  # noqa: E501
        :type: int
        """

        self._session_time_limit_in_seconds = session_time_limit_in_seconds

    @property
    def multiple_attempts(self):
        """Gets the multiple_attempts of this QuizSettings.  # noqa: E501

        settings to configure multiple quiz attempts (see MultipleAttemptsSettings)  # noqa: E501

        :return: The multiple_attempts of this QuizSettings.  # noqa: E501
        :rtype: MultipleAttemptsSettings
        """
        return self._multiple_attempts

    @multiple_attempts.setter
    def multiple_attempts(self, multiple_attempts):
        """Sets the multiple_attempts of this QuizSettings.

        settings to configure multiple quiz attempts (see MultipleAttemptsSettings)  # noqa: E501

        :param multiple_attempts: The multiple_attempts of this QuizSettings.  # noqa: E501
        :type: MultipleAttemptsSettings
        """

        self._multiple_attempts = multiple_attempts

    @property
    def result_view_settings(self):
        """Gets the result_view_settings of this QuizSettings.  # noqa: E501

        settings to restrict student result view (see ResultViewSettings)  # noqa: E501

        :return: The result_view_settings of this QuizSettings.  # noqa: E501
        :rtype: ResultViewSettings
        """
        return self._result_view_settings

    @result_view_settings.setter
    def result_view_settings(self, result_view_settings):
        """Sets the result_view_settings of this QuizSettings.

        settings to restrict student result view (see ResultViewSettings)  # noqa: E501

        :param result_view_settings: The result_view_settings of this QuizSettings.  # noqa: E501
        :type: ResultViewSettings
        """

        self._result_view_settings = result_view_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizSettings):
            return True

        return self.to_dict() != other.to_dict()
