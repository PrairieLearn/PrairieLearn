# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CourseProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requirement_count': 'int',
        'requirement_completed_count': 'int',
        'next_requirement_url': 'str',
        'completed_at': 'ModelDatetime'
    }

    attribute_map = {
        'requirement_count': 'requirement_count',
        'requirement_completed_count': 'requirement_completed_count',
        'next_requirement_url': 'next_requirement_url',
        'completed_at': 'completed_at'
    }

    def __init__(self, requirement_count=None, requirement_completed_count=None, next_requirement_url=None, completed_at=None, _configuration=None):  # noqa: E501
        """CourseProgress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._requirement_count = None
        self._requirement_completed_count = None
        self._next_requirement_url = None
        self._completed_at = None
        self.discriminator = None

        if requirement_count is not None:
            self.requirement_count = requirement_count
        if requirement_completed_count is not None:
            self.requirement_completed_count = requirement_completed_count
        if next_requirement_url is not None:
            self.next_requirement_url = next_requirement_url
        if completed_at is not None:
            self.completed_at = completed_at

    @property
    def requirement_count(self):
        """Gets the requirement_count of this CourseProgress.  # noqa: E501

        total number of requirements from all modules  # noqa: E501

        :return: The requirement_count of this CourseProgress.  # noqa: E501
        :rtype: int
        """
        return self._requirement_count

    @requirement_count.setter
    def requirement_count(self, requirement_count):
        """Sets the requirement_count of this CourseProgress.

        total number of requirements from all modules  # noqa: E501

        :param requirement_count: The requirement_count of this CourseProgress.  # noqa: E501
        :type: int
        """

        self._requirement_count = requirement_count

    @property
    def requirement_completed_count(self):
        """Gets the requirement_completed_count of this CourseProgress.  # noqa: E501

        total number of requirements the user has completed from all modules  # noqa: E501

        :return: The requirement_completed_count of this CourseProgress.  # noqa: E501
        :rtype: int
        """
        return self._requirement_completed_count

    @requirement_completed_count.setter
    def requirement_completed_count(self, requirement_completed_count):
        """Sets the requirement_completed_count of this CourseProgress.

        total number of requirements the user has completed from all modules  # noqa: E501

        :param requirement_completed_count: The requirement_completed_count of this CourseProgress.  # noqa: E501
        :type: int
        """

        self._requirement_completed_count = requirement_completed_count

    @property
    def next_requirement_url(self):
        """Gets the next_requirement_url of this CourseProgress.  # noqa: E501

        url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress  # noqa: E501

        :return: The next_requirement_url of this CourseProgress.  # noqa: E501
        :rtype: str
        """
        return self._next_requirement_url

    @next_requirement_url.setter
    def next_requirement_url(self, next_requirement_url):
        """Sets the next_requirement_url of this CourseProgress.

        url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress  # noqa: E501

        :param next_requirement_url: The next_requirement_url of this CourseProgress.  # noqa: E501
        :type: str
        """

        self._next_requirement_url = next_requirement_url

    @property
    def completed_at(self):
        """Gets the completed_at of this CourseProgress.  # noqa: E501

        date the course was completed. null if the course has not been completed by this user  # noqa: E501

        :return: The completed_at of this CourseProgress.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CourseProgress.

        date the course was completed. null if the course has not been completed by this user  # noqa: E501

        :param completed_at: The completed_at of this CourseProgress.  # noqa: E501
        :type: ModelDatetime
        """

        self._completed_at = completed_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseProgress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CourseProgress):
            return True

        return self.to_dict() != other.to_dict()
