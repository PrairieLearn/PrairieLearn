# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PageRevision(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revision_id': 'int',
        'updated_at': 'ModelDatetime',
        'latest': 'bool',
        'edited_by': 'User',
        'url': 'str',
        'title': 'str',
        'body': 'str'
    }

    attribute_map = {
        'revision_id': 'revision_id',
        'updated_at': 'updated_at',
        'latest': 'latest',
        'edited_by': 'edited_by',
        'url': 'url',
        'title': 'title',
        'body': 'body'
    }

    def __init__(self, revision_id=None, updated_at=None, latest=None, edited_by=None, url=None, title=None, body=None, _configuration=None):  # noqa: E501
        """PageRevision - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._revision_id = None
        self._updated_at = None
        self._latest = None
        self._edited_by = None
        self._url = None
        self._title = None
        self._body = None
        self.discriminator = None

        if revision_id is not None:
            self.revision_id = revision_id
        if updated_at is not None:
            self.updated_at = updated_at
        if latest is not None:
            self.latest = latest
        if edited_by is not None:
            self.edited_by = edited_by
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title
        if body is not None:
            self.body = body

    @property
    def revision_id(self):
        """Gets the revision_id of this PageRevision.  # noqa: E501

        an identifier for this revision of the page  # noqa: E501

        :return: The revision_id of this PageRevision.  # noqa: E501
        :rtype: int
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this PageRevision.

        an identifier for this revision of the page  # noqa: E501

        :param revision_id: The revision_id of this PageRevision.  # noqa: E501
        :type: int
        """

        self._revision_id = revision_id

    @property
    def updated_at(self):
        """Gets the updated_at of this PageRevision.  # noqa: E501

        the time when this revision was saved  # noqa: E501

        :return: The updated_at of this PageRevision.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PageRevision.

        the time when this revision was saved  # noqa: E501

        :param updated_at: The updated_at of this PageRevision.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def latest(self):
        """Gets the latest of this PageRevision.  # noqa: E501

        whether this is the latest revision or not  # noqa: E501

        :return: The latest of this PageRevision.  # noqa: E501
        :rtype: bool
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this PageRevision.

        whether this is the latest revision or not  # noqa: E501

        :param latest: The latest of this PageRevision.  # noqa: E501
        :type: bool
        """

        self._latest = latest

    @property
    def edited_by(self):
        """Gets the edited_by of this PageRevision.  # noqa: E501

        the User who saved this revision, if applicable (this may not be present if the page was imported from another system)  # noqa: E501

        :return: The edited_by of this PageRevision.  # noqa: E501
        :rtype: User
        """
        return self._edited_by

    @edited_by.setter
    def edited_by(self, edited_by):
        """Sets the edited_by of this PageRevision.

        the User who saved this revision, if applicable (this may not be present if the page was imported from another system)  # noqa: E501

        :param edited_by: The edited_by of this PageRevision.  # noqa: E501
        :type: User
        """

        self._edited_by = edited_by

    @property
    def url(self):
        """Gets the url of this PageRevision.  # noqa: E501

        the following fields are not included in the index action and may be omitted from the show action via summary=1 the historic url of the page  # noqa: E501

        :return: The url of this PageRevision.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PageRevision.

        the following fields are not included in the index action and may be omitted from the show action via summary=1 the historic url of the page  # noqa: E501

        :param url: The url of this PageRevision.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def title(self):
        """Gets the title of this PageRevision.  # noqa: E501

        the historic page title  # noqa: E501

        :return: The title of this PageRevision.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PageRevision.

        the historic page title  # noqa: E501

        :param title: The title of this PageRevision.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this PageRevision.  # noqa: E501

        the historic page contents  # noqa: E501

        :return: The body of this PageRevision.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this PageRevision.

        the historic page contents  # noqa: E501

        :param body: The body of this PageRevision.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageRevision, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageRevision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PageRevision):
            return True

        return self.to_dict() != other.to_dict()
