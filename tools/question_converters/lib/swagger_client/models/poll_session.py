# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PollSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'poll_id': 'int',
        'course_id': 'int',
        'course_section_id': 'int',
        'is_published': 'bool',
        'has_public_results': 'bool',
        'created_at': 'datetime',
        'results': 'object',
        'poll_submissions': 'PollSubmission'
    }

    attribute_map = {
        'id': 'id',
        'poll_id': 'poll_id',
        'course_id': 'course_id',
        'course_section_id': 'course_section_id',
        'is_published': 'is_published',
        'has_public_results': 'has_public_results',
        'created_at': 'created_at',
        'results': 'results',
        'poll_submissions': 'poll_submissions'
    }

    def __init__(self, id=None, poll_id=None, course_id=None, course_section_id=None, is_published=None, has_public_results=None, created_at=None, results=None, poll_submissions=None, _configuration=None):  # noqa: E501
        """PollSession - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._poll_id = None
        self._course_id = None
        self._course_section_id = None
        self._is_published = None
        self._has_public_results = None
        self._created_at = None
        self._results = None
        self._poll_submissions = None
        self.discriminator = None

        self.id = id
        self.poll_id = poll_id
        self.course_id = course_id
        if course_section_id is not None:
            self.course_section_id = course_section_id
        if is_published is not None:
            self.is_published = is_published
        if has_public_results is not None:
            self.has_public_results = has_public_results
        if created_at is not None:
            self.created_at = created_at
        if results is not None:
            self.results = results
        if poll_submissions is not None:
            self.poll_submissions = poll_submissions

    @property
    def id(self):
        """Gets the id of this PollSession.  # noqa: E501

        The unique identifier for the poll session.  # noqa: E501

        :return: The id of this PollSession.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PollSession.

        The unique identifier for the poll session.  # noqa: E501

        :param id: The id of this PollSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def poll_id(self):
        """Gets the poll_id of this PollSession.  # noqa: E501

        The id of the Poll this poll session is associated with  # noqa: E501

        :return: The poll_id of this PollSession.  # noqa: E501
        :rtype: int
        """
        return self._poll_id

    @poll_id.setter
    def poll_id(self, poll_id):
        """Sets the poll_id of this PollSession.

        The id of the Poll this poll session is associated with  # noqa: E501

        :param poll_id: The poll_id of this PollSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and poll_id is None:
            raise ValueError("Invalid value for `poll_id`, must not be `None`")  # noqa: E501

        self._poll_id = poll_id

    @property
    def course_id(self):
        """Gets the course_id of this PollSession.  # noqa: E501

        The id of the Course this poll session is associated with  # noqa: E501

        :return: The course_id of this PollSession.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this PollSession.

        The id of the Course this poll session is associated with  # noqa: E501

        :param course_id: The course_id of this PollSession.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and course_id is None:
            raise ValueError("Invalid value for `course_id`, must not be `None`")  # noqa: E501

        self._course_id = course_id

    @property
    def course_section_id(self):
        """Gets the course_section_id of this PollSession.  # noqa: E501

        The id of the Course Section this poll session is associated with  # noqa: E501

        :return: The course_section_id of this PollSession.  # noqa: E501
        :rtype: int
        """
        return self._course_section_id

    @course_section_id.setter
    def course_section_id(self, course_section_id):
        """Sets the course_section_id of this PollSession.

        The id of the Course Section this poll session is associated with  # noqa: E501

        :param course_section_id: The course_section_id of this PollSession.  # noqa: E501
        :type: int
        """

        self._course_section_id = course_section_id

    @property
    def is_published(self):
        """Gets the is_published of this PollSession.  # noqa: E501

        Specifies whether or not this poll session has been published for students to participate in.  # noqa: E501

        :return: The is_published of this PollSession.  # noqa: E501
        :rtype: bool
        """
        return self._is_published

    @is_published.setter
    def is_published(self, is_published):
        """Sets the is_published of this PollSession.

        Specifies whether or not this poll session has been published for students to participate in.  # noqa: E501

        :param is_published: The is_published of this PollSession.  # noqa: E501
        :type: bool
        """

        self._is_published = is_published

    @property
    def has_public_results(self):
        """Gets the has_public_results of this PollSession.  # noqa: E501

        Specifies whether the results are viewable by students.  # noqa: E501

        :return: The has_public_results of this PollSession.  # noqa: E501
        :rtype: bool
        """
        return self._has_public_results

    @has_public_results.setter
    def has_public_results(self, has_public_results):
        """Sets the has_public_results of this PollSession.

        Specifies whether the results are viewable by students.  # noqa: E501

        :param has_public_results: The has_public_results of this PollSession.  # noqa: E501
        :type: bool
        """

        self._has_public_results = has_public_results

    @property
    def created_at(self):
        """Gets the created_at of this PollSession.  # noqa: E501

        The time at which the poll session was created.  # noqa: E501

        :return: The created_at of this PollSession.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PollSession.

        The time at which the poll session was created.  # noqa: E501

        :param created_at: The created_at of this PollSession.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def results(self):
        """Gets the results of this PollSession.  # noqa: E501

        The results of the submissions of the poll. Each key is the poll choice id, and the value is the count of submissions.  # noqa: E501

        :return: The results of this PollSession.  # noqa: E501
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this PollSession.

        The results of the submissions of the poll. Each key is the poll choice id, and the value is the count of submissions.  # noqa: E501

        :param results: The results of this PollSession.  # noqa: E501
        :type: object
        """

        self._results = results

    @property
    def poll_submissions(self):
        """Gets the poll_submissions of this PollSession.  # noqa: E501

        If the poll session has public results, this will return an array of all submissions, viewable by both students and teachers. If the results are not public, for students it will return their submission only.  # noqa: E501

        :return: The poll_submissions of this PollSession.  # noqa: E501
        :rtype: PollSubmission
        """
        return self._poll_submissions

    @poll_submissions.setter
    def poll_submissions(self, poll_submissions):
        """Sets the poll_submissions of this PollSession.

        If the poll session has public results, this will return an array of all submissions, viewable by both students and teachers. If the results are not public, for students it will return their submission only.  # noqa: E501

        :param poll_submissions: The poll_submissions of this PollSession.  # noqa: E501
        :type: PollSubmission
        """

        self._poll_submissions = poll_submissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollSession):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PollSession):
            return True

        return self.to_dict() != other.to_dict()
