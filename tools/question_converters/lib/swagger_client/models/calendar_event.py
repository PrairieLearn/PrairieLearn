# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CalendarEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'description': 'str',
        'location_name': 'str',
        'location_address': 'str',
        'context_code': 'str',
        'effective_context_code': 'str',
        'context_name': 'str',
        'all_context_codes': 'str',
        'workflow_state': 'str',
        'hidden': 'bool',
        'parent_event_id': 'int',
        'child_events_count': 'int',
        'child_events': 'list[int]',
        'url': 'str',
        'html_url': 'str',
        'all_day_date': 'ModelDatetime',
        'all_day': 'bool',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'appointment_group_id': 'int',
        'appointment_group_url': 'str',
        'own_reservation': 'bool',
        'reserve_url': 'str',
        'reserved': 'bool',
        'participant_type': 'str',
        'participants_per_appointment': 'int',
        'available_slots': 'int',
        'user': 'str',
        'group': 'str',
        'important_dates': 'bool',
        'series_uuid': 'Uuid',
        'rrule': 'str',
        'series_head': 'bool',
        'series_natural_language': 'str',
        'blackout_date': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'description': 'description',
        'location_name': 'location_name',
        'location_address': 'location_address',
        'context_code': 'context_code',
        'effective_context_code': 'effective_context_code',
        'context_name': 'context_name',
        'all_context_codes': 'all_context_codes',
        'workflow_state': 'workflow_state',
        'hidden': 'hidden',
        'parent_event_id': 'parent_event_id',
        'child_events_count': 'child_events_count',
        'child_events': 'child_events',
        'url': 'url',
        'html_url': 'html_url',
        'all_day_date': 'all_day_date',
        'all_day': 'all_day',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'appointment_group_id': 'appointment_group_id',
        'appointment_group_url': 'appointment_group_url',
        'own_reservation': 'own_reservation',
        'reserve_url': 'reserve_url',
        'reserved': 'reserved',
        'participant_type': 'participant_type',
        'participants_per_appointment': 'participants_per_appointment',
        'available_slots': 'available_slots',
        'user': 'user',
        'group': 'group',
        'important_dates': 'important_dates',
        'series_uuid': 'series_uuid',
        'rrule': 'rrule',
        'series_head': 'series_head',
        'series_natural_language': 'series_natural_language',
        'blackout_date': 'blackout_date'
    }

    def __init__(self, id=None, title=None, start_at=None, end_at=None, description=None, location_name=None, location_address=None, context_code=None, effective_context_code=None, context_name=None, all_context_codes=None, workflow_state=None, hidden=None, parent_event_id=None, child_events_count=None, child_events=None, url=None, html_url=None, all_day_date=None, all_day=None, created_at=None, updated_at=None, appointment_group_id=None, appointment_group_url=None, own_reservation=None, reserve_url=None, reserved=None, participant_type=None, participants_per_appointment=None, available_slots=None, user=None, group=None, important_dates=None, series_uuid=None, rrule=None, series_head=None, series_natural_language=None, blackout_date=None, _configuration=None):  # noqa: E501
        """CalendarEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._start_at = None
        self._end_at = None
        self._description = None
        self._location_name = None
        self._location_address = None
        self._context_code = None
        self._effective_context_code = None
        self._context_name = None
        self._all_context_codes = None
        self._workflow_state = None
        self._hidden = None
        self._parent_event_id = None
        self._child_events_count = None
        self._child_events = None
        self._url = None
        self._html_url = None
        self._all_day_date = None
        self._all_day = None
        self._created_at = None
        self._updated_at = None
        self._appointment_group_id = None
        self._appointment_group_url = None
        self._own_reservation = None
        self._reserve_url = None
        self._reserved = None
        self._participant_type = None
        self._participants_per_appointment = None
        self._available_slots = None
        self._user = None
        self._group = None
        self._important_dates = None
        self._series_uuid = None
        self._rrule = None
        self._series_head = None
        self._series_natural_language = None
        self._blackout_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if description is not None:
            self.description = description
        if location_name is not None:
            self.location_name = location_name
        if location_address is not None:
            self.location_address = location_address
        if context_code is not None:
            self.context_code = context_code
        if effective_context_code is not None:
            self.effective_context_code = effective_context_code
        if context_name is not None:
            self.context_name = context_name
        if all_context_codes is not None:
            self.all_context_codes = all_context_codes
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if hidden is not None:
            self.hidden = hidden
        if parent_event_id is not None:
            self.parent_event_id = parent_event_id
        if child_events_count is not None:
            self.child_events_count = child_events_count
        if child_events is not None:
            self.child_events = child_events
        if url is not None:
            self.url = url
        if html_url is not None:
            self.html_url = html_url
        if all_day_date is not None:
            self.all_day_date = all_day_date
        if all_day is not None:
            self.all_day = all_day
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if appointment_group_id is not None:
            self.appointment_group_id = appointment_group_id
        if appointment_group_url is not None:
            self.appointment_group_url = appointment_group_url
        if own_reservation is not None:
            self.own_reservation = own_reservation
        if reserve_url is not None:
            self.reserve_url = reserve_url
        if reserved is not None:
            self.reserved = reserved
        if participant_type is not None:
            self.participant_type = participant_type
        if participants_per_appointment is not None:
            self.participants_per_appointment = participants_per_appointment
        if available_slots is not None:
            self.available_slots = available_slots
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if important_dates is not None:
            self.important_dates = important_dates
        if series_uuid is not None:
            self.series_uuid = series_uuid
        if rrule is not None:
            self.rrule = rrule
        if series_head is not None:
            self.series_head = series_head
        if series_natural_language is not None:
            self.series_natural_language = series_natural_language
        if blackout_date is not None:
            self.blackout_date = blackout_date

    @property
    def id(self):
        """Gets the id of this CalendarEvent.  # noqa: E501

        The ID of the calendar event  # noqa: E501

        :return: The id of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalendarEvent.

        The ID of the calendar event  # noqa: E501

        :param id: The id of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this CalendarEvent.  # noqa: E501

        The title of the calendar event  # noqa: E501

        :return: The title of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CalendarEvent.

        The title of the calendar event  # noqa: E501

        :param title: The title of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def start_at(self):
        """Gets the start_at of this CalendarEvent.  # noqa: E501

        The start timestamp of the event  # noqa: E501

        :return: The start_at of this CalendarEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CalendarEvent.

        The start timestamp of the event  # noqa: E501

        :param start_at: The start_at of this CalendarEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this CalendarEvent.  # noqa: E501

        The end timestamp of the event  # noqa: E501

        :return: The end_at of this CalendarEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this CalendarEvent.

        The end timestamp of the event  # noqa: E501

        :param end_at: The end_at of this CalendarEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def description(self):
        """Gets the description of this CalendarEvent.  # noqa: E501

        The HTML description of the event  # noqa: E501

        :return: The description of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEvent.

        The HTML description of the event  # noqa: E501

        :param description: The description of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def location_name(self):
        """Gets the location_name of this CalendarEvent.  # noqa: E501

        The location name of the event  # noqa: E501

        :return: The location_name of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._location_name

    @location_name.setter
    def location_name(self, location_name):
        """Sets the location_name of this CalendarEvent.

        The location name of the event  # noqa: E501

        :param location_name: The location_name of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._location_name = location_name

    @property
    def location_address(self):
        """Gets the location_address of this CalendarEvent.  # noqa: E501

        The address where the event is taking place  # noqa: E501

        :return: The location_address of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._location_address

    @location_address.setter
    def location_address(self, location_address):
        """Sets the location_address of this CalendarEvent.

        The address where the event is taking place  # noqa: E501

        :param location_address: The location_address of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._location_address = location_address

    @property
    def context_code(self):
        """Gets the context_code of this CalendarEvent.  # noqa: E501

        the context code of the calendar this event belongs to (course, group, user, or account)  # noqa: E501

        :return: The context_code of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._context_code

    @context_code.setter
    def context_code(self, context_code):
        """Sets the context_code of this CalendarEvent.

        the context code of the calendar this event belongs to (course, group, user, or account)  # noqa: E501

        :param context_code: The context_code of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._context_code = context_code

    @property
    def effective_context_code(self):
        """Gets the effective_context_code of this CalendarEvent.  # noqa: E501

        if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)  # noqa: E501

        :return: The effective_context_code of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._effective_context_code

    @effective_context_code.setter
    def effective_context_code(self, effective_context_code):
        """Sets the effective_context_code of this CalendarEvent.

        if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)  # noqa: E501

        :param effective_context_code: The effective_context_code of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._effective_context_code = effective_context_code

    @property
    def context_name(self):
        """Gets the context_name of this CalendarEvent.  # noqa: E501

        the context name of the calendar this event belongs to (course, user or group)  # noqa: E501

        :return: The context_name of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this CalendarEvent.

        the context name of the calendar this event belongs to (course, user or group)  # noqa: E501

        :param context_name: The context_name of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._context_name = context_name

    @property
    def all_context_codes(self):
        """Gets the all_context_codes of this CalendarEvent.  # noqa: E501

        a comma-separated list of all calendar contexts this event is part of  # noqa: E501

        :return: The all_context_codes of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._all_context_codes

    @all_context_codes.setter
    def all_context_codes(self, all_context_codes):
        """Sets the all_context_codes of this CalendarEvent.

        a comma-separated list of all calendar contexts this event is part of  # noqa: E501

        :param all_context_codes: The all_context_codes of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._all_context_codes = all_context_codes

    @property
    def workflow_state(self):
        """Gets the workflow_state of this CalendarEvent.  # noqa: E501

        Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)  # noqa: E501

        :return: The workflow_state of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this CalendarEvent.

        Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)  # noqa: E501

        :param workflow_state: The workflow_state of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def hidden(self):
        """Gets the hidden of this CalendarEvent.  # noqa: E501

        Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.  # noqa: E501

        :return: The hidden of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CalendarEvent.

        Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.  # noqa: E501

        :param hidden: The hidden of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def parent_event_id(self):
        """Gets the parent_event_id of this CalendarEvent.  # noqa: E501

        Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.  # noqa: E501

        :return: The parent_event_id of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._parent_event_id

    @parent_event_id.setter
    def parent_event_id(self, parent_event_id):
        """Sets the parent_event_id of this CalendarEvent.

        Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.  # noqa: E501

        :param parent_event_id: The parent_event_id of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._parent_event_id = parent_event_id

    @property
    def child_events_count(self):
        """Gets the child_events_count of this CalendarEvent.  # noqa: E501

        The number of child_events. See child_events (and parent_event_id)  # noqa: E501

        :return: The child_events_count of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._child_events_count

    @child_events_count.setter
    def child_events_count(self, child_events_count):
        """Sets the child_events_count of this CalendarEvent.

        The number of child_events. See child_events (and parent_event_id)  # noqa: E501

        :param child_events_count: The child_events_count of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._child_events_count = child_events_count

    @property
    def child_events(self):
        """Gets the child_events of this CalendarEvent.  # noqa: E501

        Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)  # noqa: E501

        :return: The child_events of this CalendarEvent.  # noqa: E501
        :rtype: list[int]
        """
        return self._child_events

    @child_events.setter
    def child_events(self, child_events):
        """Sets the child_events of this CalendarEvent.

        Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)  # noqa: E501

        :param child_events: The child_events of this CalendarEvent.  # noqa: E501
        :type: list[int]
        """

        self._child_events = child_events

    @property
    def url(self):
        """Gets the url of this CalendarEvent.  # noqa: E501

        URL for this calendar event (to update, delete, etc.)  # noqa: E501

        :return: The url of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CalendarEvent.

        URL for this calendar event (to update, delete, etc.)  # noqa: E501

        :param url: The url of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def html_url(self):
        """Gets the html_url of this CalendarEvent.  # noqa: E501

        URL for a user to view this event  # noqa: E501

        :return: The html_url of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this CalendarEvent.

        URL for a user to view this event  # noqa: E501

        :param html_url: The html_url of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def all_day_date(self):
        """Gets the all_day_date of this CalendarEvent.  # noqa: E501

        The date of this event  # noqa: E501

        :return: The all_day_date of this CalendarEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._all_day_date

    @all_day_date.setter
    def all_day_date(self, all_day_date):
        """Sets the all_day_date of this CalendarEvent.

        The date of this event  # noqa: E501

        :param all_day_date: The all_day_date of this CalendarEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._all_day_date = all_day_date

    @property
    def all_day(self):
        """Gets the all_day of this CalendarEvent.  # noqa: E501

        Boolean indicating whether this is an all-day event (midnight to midnight)  # noqa: E501

        :return: The all_day of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarEvent.

        Boolean indicating whether this is an all-day event (midnight to midnight)  # noqa: E501

        :param all_day: The all_day of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._all_day = all_day

    @property
    def created_at(self):
        """Gets the created_at of this CalendarEvent.  # noqa: E501

        When the calendar event was created  # noqa: E501

        :return: The created_at of this CalendarEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CalendarEvent.

        When the calendar event was created  # noqa: E501

        :param created_at: The created_at of this CalendarEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CalendarEvent.  # noqa: E501

        When the calendar event was last updated  # noqa: E501

        :return: The updated_at of this CalendarEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CalendarEvent.

        When the calendar event was last updated  # noqa: E501

        :param updated_at: The updated_at of this CalendarEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def appointment_group_id(self):
        """Gets the appointment_group_id of this CalendarEvent.  # noqa: E501

        Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group  # noqa: E501

        :return: The appointment_group_id of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._appointment_group_id

    @appointment_group_id.setter
    def appointment_group_id(self, appointment_group_id):
        """Sets the appointment_group_id of this CalendarEvent.

        Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group  # noqa: E501

        :param appointment_group_id: The appointment_group_id of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._appointment_group_id = appointment_group_id

    @property
    def appointment_group_url(self):
        """Gets the appointment_group_url of this CalendarEvent.  # noqa: E501

        The API URL of the appointment group  # noqa: E501

        :return: The appointment_group_url of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._appointment_group_url

    @appointment_group_url.setter
    def appointment_group_url(self, appointment_group_url):
        """Sets the appointment_group_url of this CalendarEvent.

        The API URL of the appointment group  # noqa: E501

        :param appointment_group_url: The appointment_group_url of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._appointment_group_url = appointment_group_url

    @property
    def own_reservation(self):
        """Gets the own_reservation of this CalendarEvent.  # noqa: E501

        If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's  # noqa: E501

        :return: The own_reservation of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._own_reservation

    @own_reservation.setter
    def own_reservation(self, own_reservation):
        """Sets the own_reservation of this CalendarEvent.

        If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's  # noqa: E501

        :param own_reservation: The own_reservation of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._own_reservation = own_reservation

    @property
    def reserve_url(self):
        """Gets the reserve_url of this CalendarEvent.  # noqa: E501

        If the event is a time slot, the API URL for reserving it  # noqa: E501

        :return: The reserve_url of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._reserve_url

    @reserve_url.setter
    def reserve_url(self, reserve_url):
        """Sets the reserve_url of this CalendarEvent.

        If the event is a time slot, the API URL for reserving it  # noqa: E501

        :param reserve_url: The reserve_url of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._reserve_url = reserve_url

    @property
    def reserved(self):
        """Gets the reserved of this CalendarEvent.  # noqa: E501

        If the event is a time slot, a boolean indicating whether the user has already made a reservation for it  # noqa: E501

        :return: The reserved of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._reserved

    @reserved.setter
    def reserved(self, reserved):
        """Sets the reserved of this CalendarEvent.

        If the event is a time slot, a boolean indicating whether the user has already made a reservation for it  # noqa: E501

        :param reserved: The reserved of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._reserved = reserved

    @property
    def participant_type(self):
        """Gets the participant_type of this CalendarEvent.  # noqa: E501

        The type of participant to sign up for a slot: 'User' or 'Group'  # noqa: E501

        :return: The participant_type of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._participant_type

    @participant_type.setter
    def participant_type(self, participant_type):
        """Sets the participant_type of this CalendarEvent.

        The type of participant to sign up for a slot: 'User' or 'Group'  # noqa: E501

        :param participant_type: The participant_type of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._participant_type = participant_type

    @property
    def participants_per_appointment(self):
        """Gets the participants_per_appointment of this CalendarEvent.  # noqa: E501

        If the event is a time slot, this is the participant limit  # noqa: E501

        :return: The participants_per_appointment of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._participants_per_appointment

    @participants_per_appointment.setter
    def participants_per_appointment(self, participants_per_appointment):
        """Sets the participants_per_appointment of this CalendarEvent.

        If the event is a time slot, this is the participant limit  # noqa: E501

        :param participants_per_appointment: The participants_per_appointment of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._participants_per_appointment = participants_per_appointment

    @property
    def available_slots(self):
        """Gets the available_slots of this CalendarEvent.  # noqa: E501

        If the event is a time slot and it has a participant limit, an integer indicating how many slots are available  # noqa: E501

        :return: The available_slots of this CalendarEvent.  # noqa: E501
        :rtype: int
        """
        return self._available_slots

    @available_slots.setter
    def available_slots(self, available_slots):
        """Sets the available_slots of this CalendarEvent.

        If the event is a time slot and it has a participant limit, an integer indicating how many slots are available  # noqa: E501

        :param available_slots: The available_slots of this CalendarEvent.  # noqa: E501
        :type: int
        """

        self._available_slots = available_slots

    @property
    def user(self):
        """Gets the user of this CalendarEvent.  # noqa: E501

        If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).  # noqa: E501

        :return: The user of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CalendarEvent.

        If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).  # noqa: E501

        :param user: The user of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this CalendarEvent.  # noqa: E501

        If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).  # noqa: E501

        :return: The group of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this CalendarEvent.

        If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).  # noqa: E501

        :param group: The group of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def important_dates(self):
        """Gets the important_dates of this CalendarEvent.  # noqa: E501

        Boolean indicating whether this has important dates.  # noqa: E501

        :return: The important_dates of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._important_dates

    @important_dates.setter
    def important_dates(self, important_dates):
        """Sets the important_dates of this CalendarEvent.

        Boolean indicating whether this has important dates.  # noqa: E501

        :param important_dates: The important_dates of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._important_dates = important_dates

    @property
    def series_uuid(self):
        """Gets the series_uuid of this CalendarEvent.  # noqa: E501

        Identifies the recurring event series this event may belong to.  # noqa: E501

        :return: The series_uuid of this CalendarEvent.  # noqa: E501
        :rtype: Uuid
        """
        return self._series_uuid

    @series_uuid.setter
    def series_uuid(self, series_uuid):
        """Sets the series_uuid of this CalendarEvent.

        Identifies the recurring event series this event may belong to.  # noqa: E501

        :param series_uuid: The series_uuid of this CalendarEvent.  # noqa: E501
        :type: Uuid
        """

        self._series_uuid = series_uuid

    @property
    def rrule(self):
        """Gets the rrule of this CalendarEvent.  # noqa: E501

        An iCalendar RRULE for defining how events in a recurring event series repeat.  # noqa: E501

        :return: The rrule of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._rrule

    @rrule.setter
    def rrule(self, rrule):
        """Sets the rrule of this CalendarEvent.

        An iCalendar RRULE for defining how events in a recurring event series repeat.  # noqa: E501

        :param rrule: The rrule of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._rrule = rrule

    @property
    def series_head(self):
        """Gets the series_head of this CalendarEvent.  # noqa: E501

        Boolean indicating if is the first event in the series of recurring events.  # noqa: E501

        :return: The series_head of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._series_head

    @series_head.setter
    def series_head(self, series_head):
        """Sets the series_head of this CalendarEvent.

        Boolean indicating if is the first event in the series of recurring events.  # noqa: E501

        :param series_head: The series_head of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._series_head = series_head

    @property
    def series_natural_language(self):
        """Gets the series_natural_language of this CalendarEvent.  # noqa: E501

        A natural language expression of how events occur in the series.  # noqa: E501

        :return: The series_natural_language of this CalendarEvent.  # noqa: E501
        :rtype: str
        """
        return self._series_natural_language

    @series_natural_language.setter
    def series_natural_language(self, series_natural_language):
        """Sets the series_natural_language of this CalendarEvent.

        A natural language expression of how events occur in the series.  # noqa: E501

        :param series_natural_language: The series_natural_language of this CalendarEvent.  # noqa: E501
        :type: str
        """

        self._series_natural_language = series_natural_language

    @property
    def blackout_date(self):
        """Gets the blackout_date of this CalendarEvent.  # noqa: E501

        Boolean indicating whether this has blackout date.  # noqa: E501

        :return: The blackout_date of this CalendarEvent.  # noqa: E501
        :rtype: bool
        """
        return self._blackout_date

    @blackout_date.setter
    def blackout_date(self, blackout_date):
        """Sets the blackout_date of this CalendarEvent.

        Boolean indicating whether this has blackout date.  # noqa: E501

        :param blackout_date: The blackout_date of this CalendarEvent.  # noqa: E501
        :type: bool
        """

        self._blackout_date = blackout_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalendarEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalendarEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CalendarEvent):
            return True

        return self.to_dict() != other.to_dict()
