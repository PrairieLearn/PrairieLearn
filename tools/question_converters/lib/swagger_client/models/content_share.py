# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContentShare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'content_type': 'str',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'user_id': 'int',
        'sender': 'object',
        'receivers': 'list[object]',
        'source_course': 'object',
        'read_state': 'str',
        'content_export': 'ContentExport'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'content_type': 'content_type',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'user_id': 'user_id',
        'sender': 'sender',
        'receivers': 'receivers',
        'source_course': 'source_course',
        'read_state': 'read_state',
        'content_export': 'content_export'
    }

    def __init__(self, id=None, name=None, content_type=None, created_at=None, updated_at=None, user_id=None, sender=None, receivers=None, source_course=None, read_state=None, content_export=None, _configuration=None):  # noqa: E501
        """ContentShare - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._content_type = None
        self._created_at = None
        self._updated_at = None
        self._user_id = None
        self._sender = None
        self._receivers = None
        self._source_course = None
        self._read_state = None
        self._content_export = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if content_type is not None:
            self.content_type = content_type
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id
        if sender is not None:
            self.sender = sender
        if receivers is not None:
            self.receivers = receivers
        if source_course is not None:
            self.source_course = source_course
        if read_state is not None:
            self.read_state = read_state
        if content_export is not None:
            self.content_export = content_export

    @property
    def id(self):
        """Gets the id of this ContentShare.  # noqa: E501

        The id of the content share for the current user  # noqa: E501

        :return: The id of this ContentShare.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentShare.

        The id of the content share for the current user  # noqa: E501

        :param id: The id of this ContentShare.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ContentShare.  # noqa: E501

        The name of the shared content  # noqa: E501

        :return: The name of this ContentShare.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentShare.

        The name of the shared content  # noqa: E501

        :param name: The name of this ContentShare.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def content_type(self):
        """Gets the content_type of this ContentShare.  # noqa: E501

        The type of content that was shared. Can be assignment, discussion_topic, page, quiz, module, or module_item.  # noqa: E501

        :return: The content_type of this ContentShare.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ContentShare.

        The type of content that was shared. Can be assignment, discussion_topic, page, quiz, module, or module_item.  # noqa: E501

        :param content_type: The content_type of this ContentShare.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def created_at(self):
        """Gets the created_at of this ContentShare.  # noqa: E501

        The datetime the content was shared with this user.  # noqa: E501

        :return: The created_at of this ContentShare.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ContentShare.

        The datetime the content was shared with this user.  # noqa: E501

        :param created_at: The created_at of this ContentShare.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ContentShare.  # noqa: E501

        The datetime the content was updated.  # noqa: E501

        :return: The updated_at of this ContentShare.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ContentShare.

        The datetime the content was updated.  # noqa: E501

        :param updated_at: The updated_at of this ContentShare.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this ContentShare.  # noqa: E501

        The id of the user who sent or received the content share.  # noqa: E501

        :return: The user_id of this ContentShare.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ContentShare.

        The id of the user who sent or received the content share.  # noqa: E501

        :param user_id: The user_id of this ContentShare.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def sender(self):
        """Gets the sender of this ContentShare.  # noqa: E501

        The user who shared the content. This field is provided only to receivers; it is not populated in the sender's list of sent content shares.  # noqa: E501

        :return: The sender of this ContentShare.  # noqa: E501
        :rtype: object
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this ContentShare.

        The user who shared the content. This field is provided only to receivers; it is not populated in the sender's list of sent content shares.  # noqa: E501

        :param sender: The sender of this ContentShare.  # noqa: E501
        :type: object
        """

        self._sender = sender

    @property
    def receivers(self):
        """Gets the receivers of this ContentShare.  # noqa: E501

        An Array of users the content is shared with.  This field is provided only to senders; an empty array will be returned for the receiving users.  # noqa: E501

        :return: The receivers of this ContentShare.  # noqa: E501
        :rtype: list[object]
        """
        return self._receivers

    @receivers.setter
    def receivers(self, receivers):
        """Sets the receivers of this ContentShare.

        An Array of users the content is shared with.  This field is provided only to senders; an empty array will be returned for the receiving users.  # noqa: E501

        :param receivers: The receivers of this ContentShare.  # noqa: E501
        :type: list[object]
        """

        self._receivers = receivers

    @property
    def source_course(self):
        """Gets the source_course of this ContentShare.  # noqa: E501

        The course the content was originally shared from.  # noqa: E501

        :return: The source_course of this ContentShare.  # noqa: E501
        :rtype: object
        """
        return self._source_course

    @source_course.setter
    def source_course(self, source_course):
        """Sets the source_course of this ContentShare.

        The course the content was originally shared from.  # noqa: E501

        :param source_course: The source_course of this ContentShare.  # noqa: E501
        :type: object
        """

        self._source_course = source_course

    @property
    def read_state(self):
        """Gets the read_state of this ContentShare.  # noqa: E501

        Whether the recipient has viewed the content share.  # noqa: E501

        :return: The read_state of this ContentShare.  # noqa: E501
        :rtype: str
        """
        return self._read_state

    @read_state.setter
    def read_state(self, read_state):
        """Sets the read_state of this ContentShare.

        Whether the recipient has viewed the content share.  # noqa: E501

        :param read_state: The read_state of this ContentShare.  # noqa: E501
        :type: str
        """

        self._read_state = read_state

    @property
    def content_export(self):
        """Gets the content_export of this ContentShare.  # noqa: E501

        The content export record associated with this content share  # noqa: E501

        :return: The content_export of this ContentShare.  # noqa: E501
        :rtype: ContentExport
        """
        return self._content_export

    @content_export.setter
    def content_export(self, content_export):
        """Sets the content_export of this ContentShare.

        The content export record associated with this content share  # noqa: E501

        :param content_export: The content_export of this ContentShare.  # noqa: E501
        :type: ContentExport
        """

        self._content_export = content_export

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentShare, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentShare):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentShare):
            return True

        return self.to_dict() != other.to_dict()
