# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Folder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_type': 'str',
        'context_id': 'int',
        'files_count': 'int',
        'position': 'int',
        'updated_at': 'ModelDatetime',
        'folders_url': 'str',
        'files_url': 'str',
        'full_name': 'str',
        'lock_at': 'ModelDatetime',
        'id': 'int',
        'folders_count': 'int',
        'name': 'str',
        'parent_folder_id': 'int',
        'created_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'hidden': 'bool',
        'hidden_for_user': 'bool',
        'locked': 'bool',
        'locked_for_user': 'bool',
        'for_submissions': 'bool'
    }

    attribute_map = {
        'context_type': 'context_type',
        'context_id': 'context_id',
        'files_count': 'files_count',
        'position': 'position',
        'updated_at': 'updated_at',
        'folders_url': 'folders_url',
        'files_url': 'files_url',
        'full_name': 'full_name',
        'lock_at': 'lock_at',
        'id': 'id',
        'folders_count': 'folders_count',
        'name': 'name',
        'parent_folder_id': 'parent_folder_id',
        'created_at': 'created_at',
        'unlock_at': 'unlock_at',
        'hidden': 'hidden',
        'hidden_for_user': 'hidden_for_user',
        'locked': 'locked',
        'locked_for_user': 'locked_for_user',
        'for_submissions': 'for_submissions'
    }

    def __init__(self, context_type=None, context_id=None, files_count=None, position=None, updated_at=None, folders_url=None, files_url=None, full_name=None, lock_at=None, id=None, folders_count=None, name=None, parent_folder_id=None, created_at=None, unlock_at=None, hidden=None, hidden_for_user=None, locked=None, locked_for_user=None, for_submissions=None, _configuration=None):  # noqa: E501
        """Folder - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context_type = None
        self._context_id = None
        self._files_count = None
        self._position = None
        self._updated_at = None
        self._folders_url = None
        self._files_url = None
        self._full_name = None
        self._lock_at = None
        self._id = None
        self._folders_count = None
        self._name = None
        self._parent_folder_id = None
        self._created_at = None
        self._unlock_at = None
        self._hidden = None
        self._hidden_for_user = None
        self._locked = None
        self._locked_for_user = None
        self._for_submissions = None
        self.discriminator = None

        if context_type is not None:
            self.context_type = context_type
        if context_id is not None:
            self.context_id = context_id
        if files_count is not None:
            self.files_count = files_count
        if position is not None:
            self.position = position
        if updated_at is not None:
            self.updated_at = updated_at
        if folders_url is not None:
            self.folders_url = folders_url
        if files_url is not None:
            self.files_url = files_url
        if full_name is not None:
            self.full_name = full_name
        if lock_at is not None:
            self.lock_at = lock_at
        if id is not None:
            self.id = id
        if folders_count is not None:
            self.folders_count = folders_count
        if name is not None:
            self.name = name
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if created_at is not None:
            self.created_at = created_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if hidden is not None:
            self.hidden = hidden
        if hidden_for_user is not None:
            self.hidden_for_user = hidden_for_user
        if locked is not None:
            self.locked = locked
        if locked_for_user is not None:
            self.locked_for_user = locked_for_user
        if for_submissions is not None:
            self.for_submissions = for_submissions

    @property
    def context_type(self):
        """Gets the context_type of this Folder.  # noqa: E501


        :return: The context_type of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this Folder.


        :param context_type: The context_type of this Folder.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def context_id(self):
        """Gets the context_id of this Folder.  # noqa: E501


        :return: The context_id of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this Folder.


        :param context_id: The context_id of this Folder.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def files_count(self):
        """Gets the files_count of this Folder.  # noqa: E501


        :return: The files_count of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._files_count

    @files_count.setter
    def files_count(self, files_count):
        """Sets the files_count of this Folder.


        :param files_count: The files_count of this Folder.  # noqa: E501
        :type: int
        """

        self._files_count = files_count

    @property
    def position(self):
        """Gets the position of this Folder.  # noqa: E501


        :return: The position of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Folder.


        :param position: The position of this Folder.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def updated_at(self):
        """Gets the updated_at of this Folder.  # noqa: E501


        :return: The updated_at of this Folder.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Folder.


        :param updated_at: The updated_at of this Folder.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def folders_url(self):
        """Gets the folders_url of this Folder.  # noqa: E501


        :return: The folders_url of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._folders_url

    @folders_url.setter
    def folders_url(self, folders_url):
        """Sets the folders_url of this Folder.


        :param folders_url: The folders_url of this Folder.  # noqa: E501
        :type: str
        """

        self._folders_url = folders_url

    @property
    def files_url(self):
        """Gets the files_url of this Folder.  # noqa: E501


        :return: The files_url of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._files_url

    @files_url.setter
    def files_url(self, files_url):
        """Sets the files_url of this Folder.


        :param files_url: The files_url of this Folder.  # noqa: E501
        :type: str
        """

        self._files_url = files_url

    @property
    def full_name(self):
        """Gets the full_name of this Folder.  # noqa: E501


        :return: The full_name of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this Folder.


        :param full_name: The full_name of this Folder.  # noqa: E501
        :type: str
        """

        self._full_name = full_name

    @property
    def lock_at(self):
        """Gets the lock_at of this Folder.  # noqa: E501


        :return: The lock_at of this Folder.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this Folder.


        :param lock_at: The lock_at of this Folder.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def id(self):
        """Gets the id of this Folder.  # noqa: E501


        :return: The id of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Folder.


        :param id: The id of this Folder.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def folders_count(self):
        """Gets the folders_count of this Folder.  # noqa: E501


        :return: The folders_count of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._folders_count

    @folders_count.setter
    def folders_count(self, folders_count):
        """Sets the folders_count of this Folder.


        :param folders_count: The folders_count of this Folder.  # noqa: E501
        :type: int
        """

        self._folders_count = folders_count

    @property
    def name(self):
        """Gets the name of this Folder.  # noqa: E501


        :return: The name of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.


        :param name: The name of this Folder.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Folder.  # noqa: E501


        :return: The parent_folder_id of this Folder.  # noqa: E501
        :rtype: int
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Folder.


        :param parent_folder_id: The parent_folder_id of this Folder.  # noqa: E501
        :type: int
        """

        self._parent_folder_id = parent_folder_id

    @property
    def created_at(self):
        """Gets the created_at of this Folder.  # noqa: E501


        :return: The created_at of this Folder.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Folder.


        :param created_at: The created_at of this Folder.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this Folder.  # noqa: E501


        :return: The unlock_at of this Folder.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this Folder.


        :param unlock_at: The unlock_at of this Folder.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def hidden(self):
        """Gets the hidden of this Folder.  # noqa: E501


        :return: The hidden of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Folder.


        :param hidden: The hidden of this Folder.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def hidden_for_user(self):
        """Gets the hidden_for_user of this Folder.  # noqa: E501


        :return: The hidden_for_user of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._hidden_for_user

    @hidden_for_user.setter
    def hidden_for_user(self, hidden_for_user):
        """Sets the hidden_for_user of this Folder.


        :param hidden_for_user: The hidden_for_user of this Folder.  # noqa: E501
        :type: bool
        """

        self._hidden_for_user = hidden_for_user

    @property
    def locked(self):
        """Gets the locked of this Folder.  # noqa: E501


        :return: The locked of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this Folder.


        :param locked: The locked of this Folder.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def locked_for_user(self):
        """Gets the locked_for_user of this Folder.  # noqa: E501


        :return: The locked_for_user of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._locked_for_user

    @locked_for_user.setter
    def locked_for_user(self, locked_for_user):
        """Sets the locked_for_user of this Folder.


        :param locked_for_user: The locked_for_user of this Folder.  # noqa: E501
        :type: bool
        """

        self._locked_for_user = locked_for_user

    @property
    def for_submissions(self):
        """Gets the for_submissions of this Folder.  # noqa: E501

        If true, indicates this is a read-only folder containing files submitted to assignments  # noqa: E501

        :return: The for_submissions of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._for_submissions

    @for_submissions.setter
    def for_submissions(self, for_submissions):
        """Sets the for_submissions of this Folder.

        If true, indicates this is a read-only folder containing files submitted to assignments  # noqa: E501

        :param for_submissions: The for_submissions of this Folder.  # noqa: E501
        :type: bool
        """

        self._for_submissions = for_submissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Folder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Folder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Folder):
            return True

        return self.to_dict() != other.to_dict()
