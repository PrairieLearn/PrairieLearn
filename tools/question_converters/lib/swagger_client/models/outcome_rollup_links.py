# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeRollupLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'course': 'int',
        'user': 'int',
        'section': 'int'
    }

    attribute_map = {
        'course': 'course',
        'user': 'user',
        'section': 'section'
    }

    def __init__(self, course=None, user=None, section=None, _configuration=None):  # noqa: E501
        """OutcomeRollupLinks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._course = None
        self._user = None
        self._section = None
        self.discriminator = None

        if course is not None:
            self.course = course
        if user is not None:
            self.user = user
        if section is not None:
            self.section = section

    @property
    def course(self):
        """Gets the course of this OutcomeRollupLinks.  # noqa: E501

        If an aggregate result was requested, the course field will be present. Otherwise, the user and section field will be present (Optional) The id of the course that this rollup applies to  # noqa: E501

        :return: The course of this OutcomeRollupLinks.  # noqa: E501
        :rtype: int
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this OutcomeRollupLinks.

        If an aggregate result was requested, the course field will be present. Otherwise, the user and section field will be present (Optional) The id of the course that this rollup applies to  # noqa: E501

        :param course: The course of this OutcomeRollupLinks.  # noqa: E501
        :type: int
        """

        self._course = course

    @property
    def user(self):
        """Gets the user of this OutcomeRollupLinks.  # noqa: E501

        (Optional) The id of the user that this rollup applies to  # noqa: E501

        :return: The user of this OutcomeRollupLinks.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OutcomeRollupLinks.

        (Optional) The id of the user that this rollup applies to  # noqa: E501

        :param user: The user of this OutcomeRollupLinks.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def section(self):
        """Gets the section of this OutcomeRollupLinks.  # noqa: E501

        (Optional) The id of the section the user is in  # noqa: E501

        :return: The section of this OutcomeRollupLinks.  # noqa: E501
        :rtype: int
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this OutcomeRollupLinks.

        (Optional) The id of the section the user is in  # noqa: E501

        :param section: The section of this OutcomeRollupLinks.  # noqa: E501
        :type: int
        """

        self._section = section

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeRollupLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeRollupLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeRollupLinks):
            return True

        return self.to_dict() != other.to_dict()
