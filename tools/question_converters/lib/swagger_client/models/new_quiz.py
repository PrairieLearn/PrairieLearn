# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NewQuiz(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'instructions': 'str',
        'assignment_group_id': 'str',
        'points_possible': 'int',
        'due_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'published': 'bool',
        'grading_type': 'str',
        'quiz_settings': 'QuizSettings'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'instructions': 'instructions',
        'assignment_group_id': 'assignment_group_id',
        'points_possible': 'points_possible',
        'due_at': 'due_at',
        'lock_at': 'lock_at',
        'unlock_at': 'unlock_at',
        'published': 'published',
        'grading_type': 'grading_type',
        'quiz_settings': 'quiz_settings'
    }

    def __init__(self, id=None, title=None, instructions=None, assignment_group_id=None, points_possible=None, due_at=None, lock_at=None, unlock_at=None, published=None, grading_type=None, quiz_settings=None, _configuration=None):  # noqa: E501
        """NewQuiz - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._instructions = None
        self._assignment_group_id = None
        self._points_possible = None
        self._due_at = None
        self._lock_at = None
        self._unlock_at = None
        self._published = None
        self._grading_type = None
        self._quiz_settings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if instructions is not None:
            self.instructions = instructions
        if assignment_group_id is not None:
            self.assignment_group_id = assignment_group_id
        if points_possible is not None:
            self.points_possible = points_possible
        if due_at is not None:
            self.due_at = due_at
        if lock_at is not None:
            self.lock_at = lock_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if published is not None:
            self.published = published
        if grading_type is not None:
            self.grading_type = grading_type
        if quiz_settings is not None:
            self.quiz_settings = quiz_settings

    @property
    def id(self):
        """Gets the id of this NewQuiz.  # noqa: E501

        the ID of the quiz  # noqa: E501

        :return: The id of this NewQuiz.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NewQuiz.

        the ID of the quiz  # noqa: E501

        :param id: The id of this NewQuiz.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this NewQuiz.  # noqa: E501

        the title of the quiz  # noqa: E501

        :return: The title of this NewQuiz.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this NewQuiz.

        the title of the quiz  # noqa: E501

        :param title: The title of this NewQuiz.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def instructions(self):
        """Gets the instructions of this NewQuiz.  # noqa: E501

        the quiz's instructions  # noqa: E501

        :return: The instructions of this NewQuiz.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this NewQuiz.

        the quiz's instructions  # noqa: E501

        :param instructions: The instructions of this NewQuiz.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def assignment_group_id(self):
        """Gets the assignment_group_id of this NewQuiz.  # noqa: E501

        the ID of the quiz's assignment group  # noqa: E501

        :return: The assignment_group_id of this NewQuiz.  # noqa: E501
        :rtype: str
        """
        return self._assignment_group_id

    @assignment_group_id.setter
    def assignment_group_id(self, assignment_group_id):
        """Sets the assignment_group_id of this NewQuiz.

        the ID of the quiz's assignment group  # noqa: E501

        :param assignment_group_id: The assignment_group_id of this NewQuiz.  # noqa: E501
        :type: str
        """

        self._assignment_group_id = assignment_group_id

    @property
    def points_possible(self):
        """Gets the points_possible of this NewQuiz.  # noqa: E501

        The total point value given to the quiz  # noqa: E501

        :return: The points_possible of this NewQuiz.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this NewQuiz.

        The total point value given to the quiz  # noqa: E501

        :param points_possible: The points_possible of this NewQuiz.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def due_at(self):
        """Gets the due_at of this NewQuiz.  # noqa: E501

        when the quiz is due  # noqa: E501

        :return: The due_at of this NewQuiz.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this NewQuiz.

        when the quiz is due  # noqa: E501

        :param due_at: The due_at of this NewQuiz.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def lock_at(self):
        """Gets the lock_at of this NewQuiz.  # noqa: E501

        when to lock the quiz  # noqa: E501

        :return: The lock_at of this NewQuiz.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this NewQuiz.

        when to lock the quiz  # noqa: E501

        :param lock_at: The lock_at of this NewQuiz.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this NewQuiz.  # noqa: E501

        when to unlock the quiz  # noqa: E501

        :return: The unlock_at of this NewQuiz.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this NewQuiz.

        when to unlock the quiz  # noqa: E501

        :param unlock_at: The unlock_at of this NewQuiz.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def published(self):
        """Gets the published of this NewQuiz.  # noqa: E501

        whether the quiz has a published or unpublished draft state  # noqa: E501

        :return: The published of this NewQuiz.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this NewQuiz.

        whether the quiz has a published or unpublished draft state  # noqa: E501

        :param published: The published of this NewQuiz.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def grading_type(self):
        """Gets the grading_type of this NewQuiz.  # noqa: E501

        the type of grading the assignment receives ('pass_fail', 'percent', 'letter_grade', 'gpa_scale', or 'points')  # noqa: E501

        :return: The grading_type of this NewQuiz.  # noqa: E501
        :rtype: str
        """
        return self._grading_type

    @grading_type.setter
    def grading_type(self, grading_type):
        """Sets the grading_type of this NewQuiz.

        the type of grading the assignment receives ('pass_fail', 'percent', 'letter_grade', 'gpa_scale', or 'points')  # noqa: E501

        :param grading_type: The grading_type of this NewQuiz.  # noqa: E501
        :type: str
        """

        self._grading_type = grading_type

    @property
    def quiz_settings(self):
        """Gets the quiz_settings of this NewQuiz.  # noqa: E501

        additional quiz settings (see QuizSettings)  # noqa: E501

        :return: The quiz_settings of this NewQuiz.  # noqa: E501
        :rtype: QuizSettings
        """
        return self._quiz_settings

    @quiz_settings.setter
    def quiz_settings(self, quiz_settings):
        """Sets the quiz_settings of this NewQuiz.

        additional quiz settings (see QuizSettings)  # noqa: E501

        :param quiz_settings: The quiz_settings of this NewQuiz.  # noqa: E501
        :type: QuizSettings
        """

        self._quiz_settings = quiz_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NewQuiz, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NewQuiz):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NewQuiz):
            return True

        return self.to_dict() != other.to_dict()
