# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CourseEventLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'course': 'int',
        'user': 'int',
        'page_view': 'str',
        'copied_from': 'int',
        'copied_to': 'int',
        'sis_batch': 'int'
    }

    attribute_map = {
        'course': 'course',
        'user': 'user',
        'page_view': 'page_view',
        'copied_from': 'copied_from',
        'copied_to': 'copied_to',
        'sis_batch': 'sis_batch'
    }

    def __init__(self, course=None, user=None, page_view=None, copied_from=None, copied_to=None, sis_batch=None, _configuration=None):  # noqa: E501
        """CourseEventLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._course = None
        self._user = None
        self._page_view = None
        self._copied_from = None
        self._copied_to = None
        self._sis_batch = None
        self.discriminator = None

        if course is not None:
            self.course = course
        if user is not None:
            self.user = user
        if page_view is not None:
            self.page_view = page_view
        if copied_from is not None:
            self.copied_from = copied_from
        if copied_to is not None:
            self.copied_to = copied_to
        if sis_batch is not None:
            self.sis_batch = sis_batch

    @property
    def course(self):
        """Gets the course of this CourseEventLink.  # noqa: E501

        ID of the course for the event.  # noqa: E501

        :return: The course of this CourseEventLink.  # noqa: E501
        :rtype: int
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this CourseEventLink.

        ID of the course for the event.  # noqa: E501

        :param course: The course of this CourseEventLink.  # noqa: E501
        :type: int
        """

        self._course = course

    @property
    def user(self):
        """Gets the user of this CourseEventLink.  # noqa: E501

        ID of the user for the event (who made the change).  # noqa: E501

        :return: The user of this CourseEventLink.  # noqa: E501
        :rtype: int
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CourseEventLink.

        ID of the user for the event (who made the change).  # noqa: E501

        :param user: The user of this CourseEventLink.  # noqa: E501
        :type: int
        """

        self._user = user

    @property
    def page_view(self):
        """Gets the page_view of this CourseEventLink.  # noqa: E501

        ID of the page view during the event if it exists.  # noqa: E501

        :return: The page_view of this CourseEventLink.  # noqa: E501
        :rtype: str
        """
        return self._page_view

    @page_view.setter
    def page_view(self, page_view):
        """Sets the page_view of this CourseEventLink.

        ID of the page view during the event if it exists.  # noqa: E501

        :param page_view: The page_view of this CourseEventLink.  # noqa: E501
        :type: str
        """

        self._page_view = page_view

    @property
    def copied_from(self):
        """Gets the copied_from of this CourseEventLink.  # noqa: E501

        ID of the course that this course was copied from. This is only included if the event_type is copied_from.  # noqa: E501

        :return: The copied_from of this CourseEventLink.  # noqa: E501
        :rtype: int
        """
        return self._copied_from

    @copied_from.setter
    def copied_from(self, copied_from):
        """Sets the copied_from of this CourseEventLink.

        ID of the course that this course was copied from. This is only included if the event_type is copied_from.  # noqa: E501

        :param copied_from: The copied_from of this CourseEventLink.  # noqa: E501
        :type: int
        """

        self._copied_from = copied_from

    @property
    def copied_to(self):
        """Gets the copied_to of this CourseEventLink.  # noqa: E501

        ID of the course that this course was copied to. This is only included if the event_type is copied_to.  # noqa: E501

        :return: The copied_to of this CourseEventLink.  # noqa: E501
        :rtype: int
        """
        return self._copied_to

    @copied_to.setter
    def copied_to(self, copied_to):
        """Sets the copied_to of this CourseEventLink.

        ID of the course that this course was copied to. This is only included if the event_type is copied_to.  # noqa: E501

        :param copied_to: The copied_to of this CourseEventLink.  # noqa: E501
        :type: int
        """

        self._copied_to = copied_to

    @property
    def sis_batch(self):
        """Gets the sis_batch of this CourseEventLink.  # noqa: E501

        ID of the SIS batch that triggered the event.  # noqa: E501

        :return: The sis_batch of this CourseEventLink.  # noqa: E501
        :rtype: int
        """
        return self._sis_batch

    @sis_batch.setter
    def sis_batch(self, sis_batch):
        """Sets the sis_batch of this CourseEventLink.

        ID of the SIS batch that triggered the event.  # noqa: E501

        :param sis_batch: The sis_batch of this CourseEventLink.  # noqa: E501
        :type: int
        """

        self._sis_batch = sis_batch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseEventLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseEventLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CourseEventLink):
            return True

        return self.to_dict() != other.to_dict()
