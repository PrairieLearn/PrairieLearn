# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LtiResourceLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'context_id': 'int',
        'context_type': 'str',
        'context_external_tool_id': 'int',
        'resource_type': 'str',
        'resource_link_uuid': 'str',
        'lookup_uuid': 'str',
        'title': 'str',
        'url': 'str',
        'lti_1_1_id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'workflow_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'context_external_tool_id': 'context_external_tool_id',
        'resource_type': 'resource_type',
        'resource_link_uuid': 'resource_link_uuid',
        'lookup_uuid': 'lookup_uuid',
        'title': 'title',
        'url': 'url',
        'lti_1_1_id': 'lti_1_1_id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, id=None, context_id=None, context_type=None, context_external_tool_id=None, resource_type=None, resource_link_uuid=None, lookup_uuid=None, title=None, url=None, lti_1_1_id=None, created_at=None, updated_at=None, workflow_state=None, _configuration=None):  # noqa: E501
        """LtiResourceLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._context_id = None
        self._context_type = None
        self._context_external_tool_id = None
        self._resource_type = None
        self._resource_link_uuid = None
        self._lookup_uuid = None
        self._title = None
        self._url = None
        self._lti_1_1_id = None
        self._created_at = None
        self._updated_at = None
        self._workflow_state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if context_external_tool_id is not None:
            self.context_external_tool_id = context_external_tool_id
        if resource_type is not None:
            self.resource_type = resource_type
        if resource_link_uuid is not None:
            self.resource_link_uuid = resource_link_uuid
        if lookup_uuid is not None:
            self.lookup_uuid = lookup_uuid
        if title is not None:
            self.title = title
        if url is not None:
            self.url = url
        if lti_1_1_id is not None:
            self.lti_1_1_id = lti_1_1_id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def id(self):
        """Gets the id of this LtiResourceLink.  # noqa: E501

        The Canvas identifier for the LTI Resource Link.  # noqa: E501

        :return: The id of this LtiResourceLink.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LtiResourceLink.

        The Canvas identifier for the LTI Resource Link.  # noqa: E501

        :param id: The id of this LtiResourceLink.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def context_id(self):
        """Gets the context_id of this LtiResourceLink.  # noqa: E501

        The Canvas identifier for the context that the LTI Resource Link is associated with.  # noqa: E501

        :return: The context_id of this LtiResourceLink.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this LtiResourceLink.

        The Canvas identifier for the context that the LTI Resource Link is associated with.  # noqa: E501

        :param context_id: The context_id of this LtiResourceLink.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this LtiResourceLink.  # noqa: E501

        The type of the context that the LTI Resource Link is associated with.  # noqa: E501

        :return: The context_type of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this LtiResourceLink.

        The type of the context that the LTI Resource Link is associated with.  # noqa: E501

        :param context_type: The context_type of this LtiResourceLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["Course", "Assignment", "Collaboration"]  # noqa: E501
        if (self._configuration.client_side_validation and
                context_type not in allowed_values):
            raise ValueError(
                "Invalid value for `context_type` ({0}), must be one of {1}"  # noqa: E501
                .format(context_type, allowed_values)
            )

        self._context_type = context_type

    @property
    def context_external_tool_id(self):
        """Gets the context_external_tool_id of this LtiResourceLink.  # noqa: E501

        The Canvas identifier for the LTI 1.3 External Tool that the LTI Resource Link was originally installed from. Note that this tool may have been deleted or reinstalled and may not be the tool that would be launched for this url.  # noqa: E501

        :return: The context_external_tool_id of this LtiResourceLink.  # noqa: E501
        :rtype: int
        """
        return self._context_external_tool_id

    @context_external_tool_id.setter
    def context_external_tool_id(self, context_external_tool_id):
        """Sets the context_external_tool_id of this LtiResourceLink.

        The Canvas identifier for the LTI 1.3 External Tool that the LTI Resource Link was originally installed from. Note that this tool may have been deleted or reinstalled and may not be the tool that would be launched for this url.  # noqa: E501

        :param context_external_tool_id: The context_external_tool_id of this LtiResourceLink.  # noqa: E501
        :type: int
        """

        self._context_external_tool_id = context_external_tool_id

    @property
    def resource_type(self):
        """Gets the resource_type of this LtiResourceLink.  # noqa: E501

        The type of Canvas content for the resource link. Included for convenience.  # noqa: E501

        :return: The resource_type of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this LtiResourceLink.

        The type of Canvas content for the resource link. Included for convenience.  # noqa: E501

        :param resource_type: The resource_type of this LtiResourceLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["assignment", "module_item", "collaboration", "rich_content"]  # noqa: E501
        if (self._configuration.client_side_validation and
                resource_type not in allowed_values):
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"  # noqa: E501
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def resource_link_uuid(self):
        """Gets the resource_link_uuid of this LtiResourceLink.  # noqa: E501

        The LTI identifier for the LTI Resource Link, included as the resource_link_id when this link is launched  # noqa: E501

        :return: The resource_link_uuid of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._resource_link_uuid

    @resource_link_uuid.setter
    def resource_link_uuid(self, resource_link_uuid):
        """Sets the resource_link_uuid of this LtiResourceLink.

        The LTI identifier for the LTI Resource Link, included as the resource_link_id when this link is launched  # noqa: E501

        :param resource_link_uuid: The resource_link_uuid of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._resource_link_uuid = resource_link_uuid

    @property
    def lookup_uuid(self):
        """Gets the lookup_uuid of this LtiResourceLink.  # noqa: E501

        A unique identifier for the LTI Resource Link, present in the rich content representation. Remains the same across content migration.  # noqa: E501

        :return: The lookup_uuid of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._lookup_uuid

    @lookup_uuid.setter
    def lookup_uuid(self, lookup_uuid):
        """Sets the lookup_uuid of this LtiResourceLink.

        A unique identifier for the LTI Resource Link, present in the rich content representation. Remains the same across content migration.  # noqa: E501

        :param lookup_uuid: The lookup_uuid of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._lookup_uuid = lookup_uuid

    @property
    def title(self):
        """Gets the title of this LtiResourceLink.  # noqa: E501

        The title of the LTI Resource Link. Usually tool-provided, or matches the assignment name  # noqa: E501

        :return: The title of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this LtiResourceLink.

        The title of the LTI Resource Link. Usually tool-provided, or matches the assignment name  # noqa: E501

        :param title: The title of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def url(self):
        """Gets the url of this LtiResourceLink.  # noqa: E501

        The tool URL to which the LTI Resource Link will launch  # noqa: E501

        :return: The url of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LtiResourceLink.

        The tool URL to which the LTI Resource Link will launch  # noqa: E501

        :param url: The url of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def lti_1_1_id(self):
        """Gets the lti_1_1_id of this LtiResourceLink.  # noqa: E501

        The LTI 1.1 identifier for the LTI Resource Link, included in lti1p1 migration claim when launched. Only present if tool was migrated from 1.1 to 1.3.  # noqa: E501

        :return: The lti_1_1_id of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._lti_1_1_id

    @lti_1_1_id.setter
    def lti_1_1_id(self, lti_1_1_id):
        """Sets the lti_1_1_id of this LtiResourceLink.

        The LTI 1.1 identifier for the LTI Resource Link, included in lti1p1 migration claim when launched. Only present if tool was migrated from 1.1 to 1.3.  # noqa: E501

        :param lti_1_1_id: The lti_1_1_id of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._lti_1_1_id = lti_1_1_id

    @property
    def created_at(self):
        """Gets the created_at of this LtiResourceLink.  # noqa: E501

        Timestamp of the resource link's creation  # noqa: E501

        :return: The created_at of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LtiResourceLink.

        Timestamp of the resource link's creation  # noqa: E501

        :param created_at: The created_at of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this LtiResourceLink.  # noqa: E501

        Timestamp of the resource link's last update  # noqa: E501

        :return: The updated_at of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LtiResourceLink.

        Timestamp of the resource link's last update  # noqa: E501

        :param updated_at: The updated_at of this LtiResourceLink.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this LtiResourceLink.  # noqa: E501

        The state of the resource link  # noqa: E501

        :return: The workflow_state of this LtiResourceLink.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this LtiResourceLink.

        The state of the resource link  # noqa: E501

        :param workflow_state: The workflow_state of this LtiResourceLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "deleted"]  # noqa: E501
        if (self._configuration.client_side_validation and
                workflow_state not in allowed_values):
            raise ValueError(
                "Invalid value for `workflow_state` ({0}), must be one of {1}"  # noqa: E501
                .format(workflow_state, allowed_values)
            )

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LtiResourceLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LtiResourceLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LtiResourceLink):
            return True

        return self.to_dict() != other.to_dict()
