# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GradeChangeEventLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment': 'int',
        'course': 'int',
        'student': 'int',
        'grader': 'int',
        'page_view': 'str'
    }

    attribute_map = {
        'assignment': 'assignment',
        'course': 'course',
        'student': 'student',
        'grader': 'grader',
        'page_view': 'page_view'
    }

    def __init__(self, assignment=None, course=None, student=None, grader=None, page_view=None, _configuration=None):  # noqa: E501
        """GradeChangeEventLinks - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment = None
        self._course = None
        self._student = None
        self._grader = None
        self._page_view = None
        self.discriminator = None

        if assignment is not None:
            self.assignment = assignment
        if course is not None:
            self.course = course
        if student is not None:
            self.student = student
        if grader is not None:
            self.grader = grader
        if page_view is not None:
            self.page_view = page_view

    @property
    def assignment(self):
        """Gets the assignment of this GradeChangeEventLinks.  # noqa: E501

        ID of the assignment associated with the event  # noqa: E501

        :return: The assignment of this GradeChangeEventLinks.  # noqa: E501
        :rtype: int
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this GradeChangeEventLinks.

        ID of the assignment associated with the event  # noqa: E501

        :param assignment: The assignment of this GradeChangeEventLinks.  # noqa: E501
        :type: int
        """

        self._assignment = assignment

    @property
    def course(self):
        """Gets the course of this GradeChangeEventLinks.  # noqa: E501

        ID of the course associated with the event. will match the context_id in the associated assignment if the context type for the assignment is a course  # noqa: E501

        :return: The course of this GradeChangeEventLinks.  # noqa: E501
        :rtype: int
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this GradeChangeEventLinks.

        ID of the course associated with the event. will match the context_id in the associated assignment if the context type for the assignment is a course  # noqa: E501

        :param course: The course of this GradeChangeEventLinks.  # noqa: E501
        :type: int
        """

        self._course = course

    @property
    def student(self):
        """Gets the student of this GradeChangeEventLinks.  # noqa: E501

        ID of the student associated with the event. will match the user_id in the associated submission.  # noqa: E501

        :return: The student of this GradeChangeEventLinks.  # noqa: E501
        :rtype: int
        """
        return self._student

    @student.setter
    def student(self, student):
        """Sets the student of this GradeChangeEventLinks.

        ID of the student associated with the event. will match the user_id in the associated submission.  # noqa: E501

        :param student: The student of this GradeChangeEventLinks.  # noqa: E501
        :type: int
        """

        self._student = student

    @property
    def grader(self):
        """Gets the grader of this GradeChangeEventLinks.  # noqa: E501

        ID of the grader associated with the event. will match the grader_id in the associated submission.  # noqa: E501

        :return: The grader of this GradeChangeEventLinks.  # noqa: E501
        :rtype: int
        """
        return self._grader

    @grader.setter
    def grader(self, grader):
        """Sets the grader of this GradeChangeEventLinks.

        ID of the grader associated with the event. will match the grader_id in the associated submission.  # noqa: E501

        :param grader: The grader of this GradeChangeEventLinks.  # noqa: E501
        :type: int
        """

        self._grader = grader

    @property
    def page_view(self):
        """Gets the page_view of this GradeChangeEventLinks.  # noqa: E501

        ID of the page view during the event if it exists.  # noqa: E501

        :return: The page_view of this GradeChangeEventLinks.  # noqa: E501
        :rtype: str
        """
        return self._page_view

    @page_view.setter
    def page_view(self, page_view):
        """Sets the page_view of this GradeChangeEventLinks.

        ID of the page view during the event if it exists.  # noqa: E501

        :param page_view: The page_view of this GradeChangeEventLinks.  # noqa: E501
        :type: str
        """

        self._page_view = page_view

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GradeChangeEventLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GradeChangeEventLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GradeChangeEventLinks):
            return True

        return self.to_dict() != other.to_dict()
