# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MigrationIssue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content_migration_url': 'str',
        'description': 'str',
        'workflow_state': 'str',
        'fix_issue_html_url': 'str',
        'issue_type': 'str',
        'error_report_html_url': 'str',
        'error_message': 'str',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime'
    }

    attribute_map = {
        'id': 'id',
        'content_migration_url': 'content_migration_url',
        'description': 'description',
        'workflow_state': 'workflow_state',
        'fix_issue_html_url': 'fix_issue_html_url',
        'issue_type': 'issue_type',
        'error_report_html_url': 'error_report_html_url',
        'error_message': 'error_message',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, content_migration_url=None, description=None, workflow_state=None, fix_issue_html_url=None, issue_type=None, error_report_html_url=None, error_message=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """MigrationIssue - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._content_migration_url = None
        self._description = None
        self._workflow_state = None
        self._fix_issue_html_url = None
        self._issue_type = None
        self._error_report_html_url = None
        self._error_message = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if content_migration_url is not None:
            self.content_migration_url = content_migration_url
        if description is not None:
            self.description = description
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if fix_issue_html_url is not None:
            self.fix_issue_html_url = fix_issue_html_url
        if issue_type is not None:
            self.issue_type = issue_type
        if error_report_html_url is not None:
            self.error_report_html_url = error_report_html_url
        if error_message is not None:
            self.error_message = error_message
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this MigrationIssue.  # noqa: E501

        the unique identifier for the issue  # noqa: E501

        :return: The id of this MigrationIssue.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationIssue.

        the unique identifier for the issue  # noqa: E501

        :param id: The id of this MigrationIssue.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content_migration_url(self):
        """Gets the content_migration_url of this MigrationIssue.  # noqa: E501

        API url to the content migration  # noqa: E501

        :return: The content_migration_url of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._content_migration_url

    @content_migration_url.setter
    def content_migration_url(self, content_migration_url):
        """Sets the content_migration_url of this MigrationIssue.

        API url to the content migration  # noqa: E501

        :param content_migration_url: The content_migration_url of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._content_migration_url = content_migration_url

    @property
    def description(self):
        """Gets the description of this MigrationIssue.  # noqa: E501

        Description of the issue for the end-user  # noqa: E501

        :return: The description of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MigrationIssue.

        Description of the issue for the end-user  # noqa: E501

        :param description: The description of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def workflow_state(self):
        """Gets the workflow_state of this MigrationIssue.  # noqa: E501

        Current state of the issue: active, resolved  # noqa: E501

        :return: The workflow_state of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this MigrationIssue.

        Current state of the issue: active, resolved  # noqa: E501

        :param workflow_state: The workflow_state of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def fix_issue_html_url(self):
        """Gets the fix_issue_html_url of this MigrationIssue.  # noqa: E501

        HTML Url to the Canvas page to investigate the issue  # noqa: E501

        :return: The fix_issue_html_url of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._fix_issue_html_url

    @fix_issue_html_url.setter
    def fix_issue_html_url(self, fix_issue_html_url):
        """Sets the fix_issue_html_url of this MigrationIssue.

        HTML Url to the Canvas page to investigate the issue  # noqa: E501

        :param fix_issue_html_url: The fix_issue_html_url of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._fix_issue_html_url = fix_issue_html_url

    @property
    def issue_type(self):
        """Gets the issue_type of this MigrationIssue.  # noqa: E501

        Severity of the issue: todo, warning, error  # noqa: E501

        :return: The issue_type of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type):
        """Sets the issue_type of this MigrationIssue.

        Severity of the issue: todo, warning, error  # noqa: E501

        :param issue_type: The issue_type of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._issue_type = issue_type

    @property
    def error_report_html_url(self):
        """Gets the error_report_html_url of this MigrationIssue.  # noqa: E501

        Link to a Canvas error report if present (If the requesting user has permissions)  # noqa: E501

        :return: The error_report_html_url of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._error_report_html_url

    @error_report_html_url.setter
    def error_report_html_url(self, error_report_html_url):
        """Sets the error_report_html_url of this MigrationIssue.

        Link to a Canvas error report if present (If the requesting user has permissions)  # noqa: E501

        :param error_report_html_url: The error_report_html_url of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._error_report_html_url = error_report_html_url

    @property
    def error_message(self):
        """Gets the error_message of this MigrationIssue.  # noqa: E501

        Site administrator error message (If the requesting user has permissions)  # noqa: E501

        :return: The error_message of this MigrationIssue.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MigrationIssue.

        Site administrator error message (If the requesting user has permissions)  # noqa: E501

        :param error_message: The error_message of this MigrationIssue.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def created_at(self):
        """Gets the created_at of this MigrationIssue.  # noqa: E501

        timestamp  # noqa: E501

        :return: The created_at of this MigrationIssue.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MigrationIssue.

        timestamp  # noqa: E501

        :param created_at: The created_at of this MigrationIssue.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this MigrationIssue.  # noqa: E501

        timestamp  # noqa: E501

        :return: The updated_at of this MigrationIssue.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MigrationIssue.

        timestamp  # noqa: E501

        :param updated_at: The updated_at of this MigrationIssue.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationIssue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationIssue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationIssue):
            return True

        return self.to_dict() != other.to_dict()
