# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'int',
        'content_type': 'str',
        'url': 'str',
        'id': 'int',
        'display_name': 'str',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime'
    }

    attribute_map = {
        'size': 'size',
        'content_type': 'content-type',
        'url': 'url',
        'id': 'id',
        'display_name': 'display_name',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, size=None, content_type=None, url=None, id=None, display_name=None, created_at=None, updated_at=None, _configuration=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._size = None
        self._content_type = None
        self._url = None
        self._id = None
        self._display_name = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if size is not None:
            self.size = size
        if content_type is not None:
            self.content_type = content_type
        if url is not None:
            self.url = url
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def size(self):
        """Gets the size of this File.  # noqa: E501


        :return: The size of this File.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.


        :param size: The size of this File.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def content_type(self):
        """Gets the content_type of this File.  # noqa: E501


        :return: The content_type of this File.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this File.


        :param content_type: The content_type of this File.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def url(self):
        """Gets the url of this File.  # noqa: E501


        :return: The url of this File.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.


        :param url: The url of this File.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def id(self):
        """Gets the id of this File.  # noqa: E501


        :return: The id of this File.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.


        :param id: The id of this File.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this File.  # noqa: E501


        :return: The display_name of this File.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this File.


        :param display_name: The display_name of this File.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def created_at(self):
        """Gets the created_at of this File.  # noqa: E501


        :return: The created_at of this File.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.


        :param created_at: The created_at of this File.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this File.  # noqa: E501


        :return: The updated_at of this File.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this File.


        :param updated_at: The updated_at of this File.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, File):
            return True

        return self.to_dict() != other.to_dict()
