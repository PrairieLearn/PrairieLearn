# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Profile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'short_name': 'str',
        'sortable_name': 'str',
        'title': 'str',
        'bio': 'str',
        'pronunciation': 'str',
        'primary_email': 'str',
        'login_id': 'str',
        'sis_user_id': 'str',
        'lti_user_id': 'str',
        'avatar_url': 'str',
        'calendar': 'CalendarLink',
        'time_zone': 'str',
        'locale': 'str',
        'k5_user': 'bool',
        'use_classic_font_in_k5': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'short_name': 'short_name',
        'sortable_name': 'sortable_name',
        'title': 'title',
        'bio': 'bio',
        'pronunciation': 'pronunciation',
        'primary_email': 'primary_email',
        'login_id': 'login_id',
        'sis_user_id': 'sis_user_id',
        'lti_user_id': 'lti_user_id',
        'avatar_url': 'avatar_url',
        'calendar': 'calendar',
        'time_zone': 'time_zone',
        'locale': 'locale',
        'k5_user': 'k5_user',
        'use_classic_font_in_k5': 'use_classic_font_in_k5'
    }

    def __init__(self, id=None, name=None, short_name=None, sortable_name=None, title=None, bio=None, pronunciation=None, primary_email=None, login_id=None, sis_user_id=None, lti_user_id=None, avatar_url=None, calendar=None, time_zone=None, locale=None, k5_user=None, use_classic_font_in_k5=None, _configuration=None):  # noqa: E501
        """Profile - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._short_name = None
        self._sortable_name = None
        self._title = None
        self._bio = None
        self._pronunciation = None
        self._primary_email = None
        self._login_id = None
        self._sis_user_id = None
        self._lti_user_id = None
        self._avatar_url = None
        self._calendar = None
        self._time_zone = None
        self._locale = None
        self._k5_user = None
        self._use_classic_font_in_k5 = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if short_name is not None:
            self.short_name = short_name
        if sortable_name is not None:
            self.sortable_name = sortable_name
        if title is not None:
            self.title = title
        if bio is not None:
            self.bio = bio
        if pronunciation is not None:
            self.pronunciation = pronunciation
        if primary_email is not None:
            self.primary_email = primary_email
        if login_id is not None:
            self.login_id = login_id
        if sis_user_id is not None:
            self.sis_user_id = sis_user_id
        if lti_user_id is not None:
            self.lti_user_id = lti_user_id
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if calendar is not None:
            self.calendar = calendar
        if time_zone is not None:
            self.time_zone = time_zone
        if locale is not None:
            self.locale = locale
        if k5_user is not None:
            self.k5_user = k5_user
        if use_classic_font_in_k5 is not None:
            self.use_classic_font_in_k5 = use_classic_font_in_k5

    @property
    def id(self):
        """Gets the id of this Profile.  # noqa: E501

        The ID of the user.  # noqa: E501

        :return: The id of this Profile.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Profile.

        The ID of the user.  # noqa: E501

        :param id: The id of this Profile.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Profile.  # noqa: E501

        Sample User  # noqa: E501

        :return: The name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.

        Sample User  # noqa: E501

        :param name: The name of this Profile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_name(self):
        """Gets the short_name of this Profile.  # noqa: E501

        Sample User  # noqa: E501

        :return: The short_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Profile.

        Sample User  # noqa: E501

        :param short_name: The short_name of this Profile.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def sortable_name(self):
        """Gets the sortable_name of this Profile.  # noqa: E501

        user, sample  # noqa: E501

        :return: The sortable_name of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._sortable_name

    @sortable_name.setter
    def sortable_name(self, sortable_name):
        """Sets the sortable_name of this Profile.

        user, sample  # noqa: E501

        :param sortable_name: The sortable_name of this Profile.  # noqa: E501
        :type: str
        """

        self._sortable_name = sortable_name

    @property
    def title(self):
        """Gets the title of this Profile.  # noqa: E501


        :return: The title of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Profile.


        :param title: The title of this Profile.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def bio(self):
        """Gets the bio of this Profile.  # noqa: E501


        :return: The bio of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Profile.


        :param bio: The bio of this Profile.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def pronunciation(self):
        """Gets the pronunciation of this Profile.  # noqa: E501

        Name pronunciation  # noqa: E501

        :return: The pronunciation of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._pronunciation

    @pronunciation.setter
    def pronunciation(self, pronunciation):
        """Sets the pronunciation of this Profile.

        Name pronunciation  # noqa: E501

        :param pronunciation: The pronunciation of this Profile.  # noqa: E501
        :type: str
        """

        self._pronunciation = pronunciation

    @property
    def primary_email(self):
        """Gets the primary_email of this Profile.  # noqa: E501

        sample_user@example.com  # noqa: E501

        :return: The primary_email of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this Profile.

        sample_user@example.com  # noqa: E501

        :param primary_email: The primary_email of this Profile.  # noqa: E501
        :type: str
        """

        self._primary_email = primary_email

    @property
    def login_id(self):
        """Gets the login_id of this Profile.  # noqa: E501

        sample_user@example.com  # noqa: E501

        :return: The login_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this Profile.

        sample_user@example.com  # noqa: E501

        :param login_id: The login_id of this Profile.  # noqa: E501
        :type: str
        """

        self._login_id = login_id

    @property
    def sis_user_id(self):
        """Gets the sis_user_id of this Profile.  # noqa: E501

        sis1  # noqa: E501

        :return: The sis_user_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._sis_user_id

    @sis_user_id.setter
    def sis_user_id(self, sis_user_id):
        """Sets the sis_user_id of this Profile.

        sis1  # noqa: E501

        :param sis_user_id: The sis_user_id of this Profile.  # noqa: E501
        :type: str
        """

        self._sis_user_id = sis_user_id

    @property
    def lti_user_id(self):
        """Gets the lti_user_id of this Profile.  # noqa: E501


        :return: The lti_user_id of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._lti_user_id

    @lti_user_id.setter
    def lti_user_id(self, lti_user_id):
        """Sets the lti_user_id of this Profile.


        :param lti_user_id: The lti_user_id of this Profile.  # noqa: E501
        :type: str
        """

        self._lti_user_id = lti_user_id

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Profile.  # noqa: E501

        The avatar_url can change over time, so we recommend not caching it for more than a few hours  # noqa: E501

        :return: The avatar_url of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Profile.

        The avatar_url can change over time, so we recommend not caching it for more than a few hours  # noqa: E501

        :param avatar_url: The avatar_url of this Profile.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def calendar(self):
        """Gets the calendar of this Profile.  # noqa: E501


        :return: The calendar of this Profile.  # noqa: E501
        :rtype: CalendarLink
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this Profile.


        :param calendar: The calendar of this Profile.  # noqa: E501
        :type: CalendarLink
        """

        self._calendar = calendar

    @property
    def time_zone(self):
        """Gets the time_zone of this Profile.  # noqa: E501

        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.  # noqa: E501

        :return: The time_zone of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Profile.

        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.  # noqa: E501

        :param time_zone: The time_zone of this Profile.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def locale(self):
        """Gets the locale of this Profile.  # noqa: E501

        The users locale.  # noqa: E501

        :return: The locale of this Profile.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Profile.

        The users locale.  # noqa: E501

        :param locale: The locale of this Profile.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def k5_user(self):
        """Gets the k5_user of this Profile.  # noqa: E501

        Optional: Whether or not the user is a K5 user. This field is nil if the user settings are not for the user making the request.  # noqa: E501

        :return: The k5_user of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._k5_user

    @k5_user.setter
    def k5_user(self, k5_user):
        """Sets the k5_user of this Profile.

        Optional: Whether or not the user is a K5 user. This field is nil if the user settings are not for the user making the request.  # noqa: E501

        :param k5_user: The k5_user of this Profile.  # noqa: E501
        :type: bool
        """

        self._k5_user = k5_user

    @property
    def use_classic_font_in_k5(self):
        """Gets the use_classic_font_in_k5 of this Profile.  # noqa: E501

        Optional: Whether or not the user should see the classic font on the dashboard. Only applies if k5_user is true. This field is nil if the user settings are not for the user making the request.  # noqa: E501

        :return: The use_classic_font_in_k5 of this Profile.  # noqa: E501
        :rtype: bool
        """
        return self._use_classic_font_in_k5

    @use_classic_font_in_k5.setter
    def use_classic_font_in_k5(self, use_classic_font_in_k5):
        """Sets the use_classic_font_in_k5 of this Profile.

        Optional: Whether or not the user should see the classic font on the dashboard. Only applies if k5_user is true. This field is nil if the user settings are not for the user making the request.  # noqa: E501

        :param use_classic_font_in_k5: The use_classic_font_in_k5 of this Profile.  # noqa: E501
        :type: bool
        """

        self._use_classic_font_in_k5 = use_classic_font_in_k5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Profile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Profile):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Profile):
            return True

        return self.to_dict() != other.to_dict()
