# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier_format': 'str',
        'auth_type': 'str',
        'id': 'int',
        'log_out_url': 'str',
        'log_in_url': 'str',
        'certificate_fingerprint': 'str',
        'requested_authn_context': 'str',
        'auth_host': 'str',
        'auth_filter': 'str',
        'auth_over_tls': 'int',
        'auth_base': 'str',
        'auth_username': 'str',
        'auth_port': 'int',
        'position': 'int',
        'idp_entity_id': 'str',
        'login_attribute': 'str',
        'sig_alg': 'str',
        'jit_provisioning': 'bool',
        'federated_attributes': 'FederatedAttributesConfig',
        'mfa_required': 'bool'
    }

    attribute_map = {
        'identifier_format': 'identifier_format',
        'auth_type': 'auth_type',
        'id': 'id',
        'log_out_url': 'log_out_url',
        'log_in_url': 'log_in_url',
        'certificate_fingerprint': 'certificate_fingerprint',
        'requested_authn_context': 'requested_authn_context',
        'auth_host': 'auth_host',
        'auth_filter': 'auth_filter',
        'auth_over_tls': 'auth_over_tls',
        'auth_base': 'auth_base',
        'auth_username': 'auth_username',
        'auth_port': 'auth_port',
        'position': 'position',
        'idp_entity_id': 'idp_entity_id',
        'login_attribute': 'login_attribute',
        'sig_alg': 'sig_alg',
        'jit_provisioning': 'jit_provisioning',
        'federated_attributes': 'federated_attributes',
        'mfa_required': 'mfa_required'
    }

    def __init__(self, identifier_format=None, auth_type=None, id=None, log_out_url=None, log_in_url=None, certificate_fingerprint=None, requested_authn_context=None, auth_host=None, auth_filter=None, auth_over_tls=None, auth_base=None, auth_username=None, auth_port=None, position=None, idp_entity_id=None, login_attribute=None, sig_alg=None, jit_provisioning=None, federated_attributes=None, mfa_required=None, _configuration=None):  # noqa: E501
        """AuthenticationProvider - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._identifier_format = None
        self._auth_type = None
        self._id = None
        self._log_out_url = None
        self._log_in_url = None
        self._certificate_fingerprint = None
        self._requested_authn_context = None
        self._auth_host = None
        self._auth_filter = None
        self._auth_over_tls = None
        self._auth_base = None
        self._auth_username = None
        self._auth_port = None
        self._position = None
        self._idp_entity_id = None
        self._login_attribute = None
        self._sig_alg = None
        self._jit_provisioning = None
        self._federated_attributes = None
        self._mfa_required = None
        self.discriminator = None

        if identifier_format is not None:
            self.identifier_format = identifier_format
        if auth_type is not None:
            self.auth_type = auth_type
        if id is not None:
            self.id = id
        if log_out_url is not None:
            self.log_out_url = log_out_url
        if log_in_url is not None:
            self.log_in_url = log_in_url
        if certificate_fingerprint is not None:
            self.certificate_fingerprint = certificate_fingerprint
        if requested_authn_context is not None:
            self.requested_authn_context = requested_authn_context
        if auth_host is not None:
            self.auth_host = auth_host
        if auth_filter is not None:
            self.auth_filter = auth_filter
        if auth_over_tls is not None:
            self.auth_over_tls = auth_over_tls
        if auth_base is not None:
            self.auth_base = auth_base
        if auth_username is not None:
            self.auth_username = auth_username
        if auth_port is not None:
            self.auth_port = auth_port
        if position is not None:
            self.position = position
        if idp_entity_id is not None:
            self.idp_entity_id = idp_entity_id
        if login_attribute is not None:
            self.login_attribute = login_attribute
        if sig_alg is not None:
            self.sig_alg = sig_alg
        if jit_provisioning is not None:
            self.jit_provisioning = jit_provisioning
        if federated_attributes is not None:
            self.federated_attributes = federated_attributes
        if mfa_required is not None:
            self.mfa_required = mfa_required

    @property
    def identifier_format(self):
        """Gets the identifier_format of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The identifier_format of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._identifier_format

    @identifier_format.setter
    def identifier_format(self, identifier_format):
        """Sets the identifier_format of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param identifier_format: The identifier_format of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._identifier_format = identifier_format

    @property
    def auth_type(self):
        """Gets the auth_type of this AuthenticationProvider.  # noqa: E501

        Valid for all providers.  # noqa: E501

        :return: The auth_type of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this AuthenticationProvider.

        Valid for all providers.  # noqa: E501

        :param auth_type: The auth_type of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._auth_type = auth_type

    @property
    def id(self):
        """Gets the id of this AuthenticationProvider.  # noqa: E501

        Valid for all providers.  # noqa: E501

        :return: The id of this AuthenticationProvider.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuthenticationProvider.

        Valid for all providers.  # noqa: E501

        :param id: The id of this AuthenticationProvider.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def log_out_url(self):
        """Gets the log_out_url of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The log_out_url of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._log_out_url

    @log_out_url.setter
    def log_out_url(self, log_out_url):
        """Sets the log_out_url of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param log_out_url: The log_out_url of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._log_out_url = log_out_url

    @property
    def log_in_url(self):
        """Gets the log_in_url of this AuthenticationProvider.  # noqa: E501

        Valid for SAML and CAS providers.  # noqa: E501

        :return: The log_in_url of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._log_in_url

    @log_in_url.setter
    def log_in_url(self, log_in_url):
        """Sets the log_in_url of this AuthenticationProvider.

        Valid for SAML and CAS providers.  # noqa: E501

        :param log_in_url: The log_in_url of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._log_in_url = log_in_url

    @property
    def certificate_fingerprint(self):
        """Gets the certificate_fingerprint of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The certificate_fingerprint of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._certificate_fingerprint

    @certificate_fingerprint.setter
    def certificate_fingerprint(self, certificate_fingerprint):
        """Sets the certificate_fingerprint of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param certificate_fingerprint: The certificate_fingerprint of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._certificate_fingerprint = certificate_fingerprint

    @property
    def requested_authn_context(self):
        """Gets the requested_authn_context of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The requested_authn_context of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._requested_authn_context

    @requested_authn_context.setter
    def requested_authn_context(self, requested_authn_context):
        """Sets the requested_authn_context of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param requested_authn_context: The requested_authn_context of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._requested_authn_context = requested_authn_context

    @property
    def auth_host(self):
        """Gets the auth_host of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP providers.  # noqa: E501

        :return: The auth_host of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._auth_host

    @auth_host.setter
    def auth_host(self, auth_host):
        """Sets the auth_host of this AuthenticationProvider.

        Valid for LDAP providers.  # noqa: E501

        :param auth_host: The auth_host of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._auth_host = auth_host

    @property
    def auth_filter(self):
        """Gets the auth_filter of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP providers.  # noqa: E501

        :return: The auth_filter of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._auth_filter

    @auth_filter.setter
    def auth_filter(self, auth_filter):
        """Sets the auth_filter of this AuthenticationProvider.

        Valid for LDAP providers.  # noqa: E501

        :param auth_filter: The auth_filter of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._auth_filter = auth_filter

    @property
    def auth_over_tls(self):
        """Gets the auth_over_tls of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP providers.  # noqa: E501

        :return: The auth_over_tls of this AuthenticationProvider.  # noqa: E501
        :rtype: int
        """
        return self._auth_over_tls

    @auth_over_tls.setter
    def auth_over_tls(self, auth_over_tls):
        """Sets the auth_over_tls of this AuthenticationProvider.

        Valid for LDAP providers.  # noqa: E501

        :param auth_over_tls: The auth_over_tls of this AuthenticationProvider.  # noqa: E501
        :type: int
        """

        self._auth_over_tls = auth_over_tls

    @property
    def auth_base(self):
        """Gets the auth_base of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP and CAS providers.  # noqa: E501

        :return: The auth_base of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._auth_base

    @auth_base.setter
    def auth_base(self, auth_base):
        """Sets the auth_base of this AuthenticationProvider.

        Valid for LDAP and CAS providers.  # noqa: E501

        :param auth_base: The auth_base of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._auth_base = auth_base

    @property
    def auth_username(self):
        """Gets the auth_username of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP providers.  # noqa: E501

        :return: The auth_username of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._auth_username

    @auth_username.setter
    def auth_username(self, auth_username):
        """Sets the auth_username of this AuthenticationProvider.

        Valid for LDAP providers.  # noqa: E501

        :param auth_username: The auth_username of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._auth_username = auth_username

    @property
    def auth_port(self):
        """Gets the auth_port of this AuthenticationProvider.  # noqa: E501

        Valid for LDAP providers.  # noqa: E501

        :return: The auth_port of this AuthenticationProvider.  # noqa: E501
        :rtype: int
        """
        return self._auth_port

    @auth_port.setter
    def auth_port(self, auth_port):
        """Sets the auth_port of this AuthenticationProvider.

        Valid for LDAP providers.  # noqa: E501

        :param auth_port: The auth_port of this AuthenticationProvider.  # noqa: E501
        :type: int
        """

        self._auth_port = auth_port

    @property
    def position(self):
        """Gets the position of this AuthenticationProvider.  # noqa: E501

        Valid for all providers.  # noqa: E501

        :return: The position of this AuthenticationProvider.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AuthenticationProvider.

        Valid for all providers.  # noqa: E501

        :param position: The position of this AuthenticationProvider.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def idp_entity_id(self):
        """Gets the idp_entity_id of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The idp_entity_id of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._idp_entity_id

    @idp_entity_id.setter
    def idp_entity_id(self, idp_entity_id):
        """Sets the idp_entity_id of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param idp_entity_id: The idp_entity_id of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._idp_entity_id = idp_entity_id

    @property
    def login_attribute(self):
        """Gets the login_attribute of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The login_attribute of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._login_attribute

    @login_attribute.setter
    def login_attribute(self, login_attribute):
        """Sets the login_attribute of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param login_attribute: The login_attribute of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._login_attribute = login_attribute

    @property
    def sig_alg(self):
        """Gets the sig_alg of this AuthenticationProvider.  # noqa: E501

        Valid for SAML providers.  # noqa: E501

        :return: The sig_alg of this AuthenticationProvider.  # noqa: E501
        :rtype: str
        """
        return self._sig_alg

    @sig_alg.setter
    def sig_alg(self, sig_alg):
        """Sets the sig_alg of this AuthenticationProvider.

        Valid for SAML providers.  # noqa: E501

        :param sig_alg: The sig_alg of this AuthenticationProvider.  # noqa: E501
        :type: str
        """

        self._sig_alg = sig_alg

    @property
    def jit_provisioning(self):
        """Gets the jit_provisioning of this AuthenticationProvider.  # noqa: E501

        Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).  # noqa: E501

        :return: The jit_provisioning of this AuthenticationProvider.  # noqa: E501
        :rtype: bool
        """
        return self._jit_provisioning

    @jit_provisioning.setter
    def jit_provisioning(self, jit_provisioning):
        """Sets the jit_provisioning of this AuthenticationProvider.

        Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).  # noqa: E501

        :param jit_provisioning: The jit_provisioning of this AuthenticationProvider.  # noqa: E501
        :type: bool
        """

        self._jit_provisioning = jit_provisioning

    @property
    def federated_attributes(self):
        """Gets the federated_attributes of this AuthenticationProvider.  # noqa: E501


        :return: The federated_attributes of this AuthenticationProvider.  # noqa: E501
        :rtype: FederatedAttributesConfig
        """
        return self._federated_attributes

    @federated_attributes.setter
    def federated_attributes(self, federated_attributes):
        """Sets the federated_attributes of this AuthenticationProvider.


        :param federated_attributes: The federated_attributes of this AuthenticationProvider.  # noqa: E501
        :type: FederatedAttributesConfig
        """

        self._federated_attributes = federated_attributes

    @property
    def mfa_required(self):
        """Gets the mfa_required of this AuthenticationProvider.  # noqa: E501

        If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.  # noqa: E501

        :return: The mfa_required of this AuthenticationProvider.  # noqa: E501
        :rtype: bool
        """
        return self._mfa_required

    @mfa_required.setter
    def mfa_required(self, mfa_required):
        """Sets the mfa_required of this AuthenticationProvider.

        If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.  # noqa: E501

        :param mfa_required: The mfa_required of this AuthenticationProvider.  # noqa: E501
        :type: bool
        """

        self._mfa_required = mfa_required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationProvider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationProvider):
            return True

        return self.to_dict() != other.to_dict()
