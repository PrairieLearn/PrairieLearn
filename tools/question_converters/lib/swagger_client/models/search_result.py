# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_id': 'int',
        'content_type': 'str',
        'title': 'str',
        'body': 'str',
        'html_url': 'str',
        'distance': 'float'
    }

    attribute_map = {
        'content_id': 'content_id',
        'content_type': 'content_type',
        'title': 'title',
        'body': 'body',
        'html_url': 'html_url',
        'distance': 'distance'
    }

    def __init__(self, content_id=None, content_type=None, title=None, body=None, html_url=None, distance=None, _configuration=None):  # noqa: E501
        """SearchResult - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content_id = None
        self._content_type = None
        self._title = None
        self._body = None
        self._html_url = None
        self._distance = None
        self.discriminator = None

        if content_id is not None:
            self.content_id = content_id
        if content_type is not None:
            self.content_type = content_type
        if title is not None:
            self.title = title
        if body is not None:
            self.body = body
        if html_url is not None:
            self.html_url = html_url
        if distance is not None:
            self.distance = distance

    @property
    def content_id(self):
        """Gets the content_id of this SearchResult.  # noqa: E501

        The ID of the matching object.  # noqa: E501

        :return: The content_id of this SearchResult.  # noqa: E501
        :rtype: int
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this SearchResult.

        The ID of the matching object.  # noqa: E501

        :param content_id: The content_id of this SearchResult.  # noqa: E501
        :type: int
        """

        self._content_id = content_id

    @property
    def content_type(self):
        """Gets the content_type of this SearchResult.  # noqa: E501

        The type of the matching object.  # noqa: E501

        :return: The content_type of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this SearchResult.

        The type of the matching object.  # noqa: E501

        :param content_type: The content_type of this SearchResult.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def title(self):
        """Gets the title of this SearchResult.  # noqa: E501

        The title of the matching object.  # noqa: E501

        :return: The title of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SearchResult.

        The title of the matching object.  # noqa: E501

        :param title: The title of this SearchResult.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def body(self):
        """Gets the body of this SearchResult.  # noqa: E501

        The body of the matching object.  # noqa: E501

        :return: The body of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SearchResult.

        The body of the matching object.  # noqa: E501

        :param body: The body of this SearchResult.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def html_url(self):
        """Gets the html_url of this SearchResult.  # noqa: E501

        The Canvas URL of the matching object.  # noqa: E501

        :return: The html_url of this SearchResult.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this SearchResult.

        The Canvas URL of the matching object.  # noqa: E501

        :param html_url: The html_url of this SearchResult.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def distance(self):
        """Gets the distance of this SearchResult.  # noqa: E501

        The distance between the search query and the result. Smaller numbers indicate closer matches.  # noqa: E501

        :return: The distance of this SearchResult.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this SearchResult.

        The distance between the search query and the result. Smaller numbers indicate closer matches.  # noqa: E501

        :param distance: The distance of this SearchResult.  # noqa: E501
        :type: float
        """

        self._distance = distance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchResult):
            return True

        return self.to_dict() != other.to_dict()
