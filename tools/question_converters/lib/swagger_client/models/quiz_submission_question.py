# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizSubmissionQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'flagged': 'bool',
        'answer': 'str',
        'answers': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'flagged': 'flagged',
        'answer': 'answer',
        'answers': 'answers'
    }

    def __init__(self, id=None, flagged=None, answer=None, answers=None, _configuration=None):  # noqa: E501
        """QuizSubmissionQuestion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._flagged = None
        self._answer = None
        self._answers = None
        self.discriminator = None

        self.id = id
        if flagged is not None:
            self.flagged = flagged
        if answer is not None:
            self.answer = answer
        if answers is not None:
            self.answers = answers

    @property
    def id(self):
        """Gets the id of this QuizSubmissionQuestion.  # noqa: E501

        The ID of the QuizQuestion this answer is for.  # noqa: E501

        :return: The id of this QuizSubmissionQuestion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuizSubmissionQuestion.

        The ID of the QuizQuestion this answer is for.  # noqa: E501

        :param id: The id of this QuizSubmissionQuestion.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def flagged(self):
        """Gets the flagged of this QuizSubmissionQuestion.  # noqa: E501

        Whether this question is flagged.  # noqa: E501

        :return: The flagged of this QuizSubmissionQuestion.  # noqa: E501
        :rtype: bool
        """
        return self._flagged

    @flagged.setter
    def flagged(self, flagged):
        """Sets the flagged of this QuizSubmissionQuestion.

        Whether this question is flagged.  # noqa: E501

        :param flagged: The flagged of this QuizSubmissionQuestion.  # noqa: E501
        :type: bool
        """

        self._flagged = flagged

    @property
    def answer(self):
        """Gets the answer of this QuizSubmissionQuestion.  # noqa: E501

        The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.  # noqa: E501

        :return: The answer of this QuizSubmissionQuestion.  # noqa: E501
        :rtype: str
        """
        return self._answer

    @answer.setter
    def answer(self, answer):
        """Sets the answer of this QuizSubmissionQuestion.

        The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.  # noqa: E501

        :param answer: The answer of this QuizSubmissionQuestion.  # noqa: E501
        :type: str
        """

        self._answer = answer

    @property
    def answers(self):
        """Gets the answers of this QuizSubmissionQuestion.  # noqa: E501

        The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.  # noqa: E501

        :return: The answers of this QuizSubmissionQuestion.  # noqa: E501
        :rtype: list[str]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this QuizSubmissionQuestion.

        The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.  # noqa: E501

        :param answers: The answers of this QuizSubmissionQuestion.  # noqa: E501
        :type: list[str]
        """

        self._answers = answers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizSubmissionQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizSubmissionQuestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizSubmissionQuestion):
            return True

        return self.to_dict() != other.to_dict()
