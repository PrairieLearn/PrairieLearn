# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PeerReview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assessor_id': 'int',
        'asset_id': 'int',
        'asset_type': 'str',
        'id': 'int',
        'user_id': 'int',
        'workflow_state': 'str',
        'user': 'str',
        'assessor': 'str',
        'submission_comments': 'str'
    }

    attribute_map = {
        'assessor_id': 'assessor_id',
        'asset_id': 'asset_id',
        'asset_type': 'asset_type',
        'id': 'id',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state',
        'user': 'user',
        'assessor': 'assessor',
        'submission_comments': 'submission_comments'
    }

    def __init__(self, assessor_id=None, asset_id=None, asset_type=None, id=None, user_id=None, workflow_state=None, user=None, assessor=None, submission_comments=None, _configuration=None):  # noqa: E501
        """PeerReview - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assessor_id = None
        self._asset_id = None
        self._asset_type = None
        self._id = None
        self._user_id = None
        self._workflow_state = None
        self._user = None
        self._assessor = None
        self._submission_comments = None
        self.discriminator = None

        if assessor_id is not None:
            self.assessor_id = assessor_id
        if asset_id is not None:
            self.asset_id = asset_id
        if asset_type is not None:
            self.asset_type = asset_type
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if user is not None:
            self.user = user
        if assessor is not None:
            self.assessor = assessor
        if submission_comments is not None:
            self.submission_comments = submission_comments

    @property
    def assessor_id(self):
        """Gets the assessor_id of this PeerReview.  # noqa: E501

        The assessors user id  # noqa: E501

        :return: The assessor_id of this PeerReview.  # noqa: E501
        :rtype: int
        """
        return self._assessor_id

    @assessor_id.setter
    def assessor_id(self, assessor_id):
        """Sets the assessor_id of this PeerReview.

        The assessors user id  # noqa: E501

        :param assessor_id: The assessor_id of this PeerReview.  # noqa: E501
        :type: int
        """

        self._assessor_id = assessor_id

    @property
    def asset_id(self):
        """Gets the asset_id of this PeerReview.  # noqa: E501

        The id for the asset associated with this Peer Review  # noqa: E501

        :return: The asset_id of this PeerReview.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this PeerReview.

        The id for the asset associated with this Peer Review  # noqa: E501

        :param asset_id: The asset_id of this PeerReview.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def asset_type(self):
        """Gets the asset_type of this PeerReview.  # noqa: E501

        The type of the asset  # noqa: E501

        :return: The asset_type of this PeerReview.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this PeerReview.

        The type of the asset  # noqa: E501

        :param asset_type: The asset_type of this PeerReview.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def id(self):
        """Gets the id of this PeerReview.  # noqa: E501

        The id of the Peer Review  # noqa: E501

        :return: The id of this PeerReview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PeerReview.

        The id of the Peer Review  # noqa: E501

        :param id: The id of this PeerReview.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this PeerReview.  # noqa: E501

        The user id for the owner of the asset  # noqa: E501

        :return: The user_id of this PeerReview.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PeerReview.

        The user id for the owner of the asset  # noqa: E501

        :param user_id: The user_id of this PeerReview.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this PeerReview.  # noqa: E501

        The state of the Peer Review, either 'assigned' or 'completed'  # noqa: E501

        :return: The workflow_state of this PeerReview.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this PeerReview.

        The state of the Peer Review, either 'assigned' or 'completed'  # noqa: E501

        :param workflow_state: The workflow_state of this PeerReview.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def user(self):
        """Gets the user of this PeerReview.  # noqa: E501

        the User object for the owner of the asset if the user include parameter is provided (see user API) (optional)  # noqa: E501

        :return: The user of this PeerReview.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PeerReview.

        the User object for the owner of the asset if the user include parameter is provided (see user API) (optional)  # noqa: E501

        :param user: The user of this PeerReview.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def assessor(self):
        """Gets the assessor of this PeerReview.  # noqa: E501

        The User object for the assessor if the user include parameter is provided (see user API) (optional)  # noqa: E501

        :return: The assessor of this PeerReview.  # noqa: E501
        :rtype: str
        """
        return self._assessor

    @assessor.setter
    def assessor(self, assessor):
        """Sets the assessor of this PeerReview.

        The User object for the assessor if the user include parameter is provided (see user API) (optional)  # noqa: E501

        :param assessor: The assessor of this PeerReview.  # noqa: E501
        :type: str
        """

        self._assessor = assessor

    @property
    def submission_comments(self):
        """Gets the submission_comments of this PeerReview.  # noqa: E501

        The submission comments associated with this Peer Review if the submission_comment include parameter is provided (see submissions API) (optional)  # noqa: E501

        :return: The submission_comments of this PeerReview.  # noqa: E501
        :rtype: str
        """
        return self._submission_comments

    @submission_comments.setter
    def submission_comments(self, submission_comments):
        """Sets the submission_comments of this PeerReview.

        The submission comments associated with this Peer Review if the submission_comment include parameter is provided (see submissions API) (optional)  # noqa: E501

        :param submission_comments: The submission_comments of this PeerReview.  # noqa: E501
        :type: str
        """

        self._submission_comments = submission_comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeerReview, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeerReview):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PeerReview):
            return True

        return self.to_dict() != other.to_dict()
