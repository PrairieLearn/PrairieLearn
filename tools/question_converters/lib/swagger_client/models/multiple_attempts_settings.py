# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class MultipleAttemptsSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'multiple_attempts_enabled': 'bool',
        'attempt_limit': 'bool',
        'max_attempts': 'int',
        'score_to_keep': 'str',
        'cooling_period': 'bool',
        'cooling_period_seconds': 'int'
    }

    attribute_map = {
        'multiple_attempts_enabled': 'multiple_attempts_enabled',
        'attempt_limit': 'attempt_limit',
        'max_attempts': 'max_attempts',
        'score_to_keep': 'score_to_keep',
        'cooling_period': 'cooling_period',
        'cooling_period_seconds': 'cooling_period_seconds'
    }

    def __init__(self, multiple_attempts_enabled=None, attempt_limit=None, max_attempts=None, score_to_keep=None, cooling_period=None, cooling_period_seconds=None, _configuration=None):  # noqa: E501
        """MultipleAttemptsSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._multiple_attempts_enabled = None
        self._attempt_limit = None
        self._max_attempts = None
        self._score_to_keep = None
        self._cooling_period = None
        self._cooling_period_seconds = None
        self.discriminator = None

        if multiple_attempts_enabled is not None:
            self.multiple_attempts_enabled = multiple_attempts_enabled
        if attempt_limit is not None:
            self.attempt_limit = attempt_limit
        if max_attempts is not None:
            self.max_attempts = max_attempts
        if score_to_keep is not None:
            self.score_to_keep = score_to_keep
        if cooling_period is not None:
            self.cooling_period = cooling_period
        if cooling_period_seconds is not None:
            self.cooling_period_seconds = cooling_period_seconds

    @property
    def multiple_attempts_enabled(self):
        """Gets the multiple_attempts_enabled of this MultipleAttemptsSettings.  # noqa: E501

        whether to allow multiple attempts  # noqa: E501

        :return: The multiple_attempts_enabled of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_attempts_enabled

    @multiple_attempts_enabled.setter
    def multiple_attempts_enabled(self, multiple_attempts_enabled):
        """Sets the multiple_attempts_enabled of this MultipleAttemptsSettings.

        whether to allow multiple attempts  # noqa: E501

        :param multiple_attempts_enabled: The multiple_attempts_enabled of this MultipleAttemptsSettings.  # noqa: E501
        :type: bool
        """

        self._multiple_attempts_enabled = multiple_attempts_enabled

    @property
    def attempt_limit(self):
        """Gets the attempt_limit of this MultipleAttemptsSettings.  # noqa: E501

        whether to limit the number of attempts if 'multiple_attempts_enabled' is true. Unlimited attempts if false.  # noqa: E501

        :return: The attempt_limit of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._attempt_limit

    @attempt_limit.setter
    def attempt_limit(self, attempt_limit):
        """Sets the attempt_limit of this MultipleAttemptsSettings.

        whether to limit the number of attempts if 'multiple_attempts_enabled' is true. Unlimited attempts if false.  # noqa: E501

        :param attempt_limit: The attempt_limit of this MultipleAttemptsSettings.  # noqa: E501
        :type: bool
        """

        self._attempt_limit = attempt_limit

    @property
    def max_attempts(self):
        """Gets the max_attempts of this MultipleAttemptsSettings.  # noqa: E501

        number of attempts to allow if 'multiple_attempts_enabled' and 'attempt_limit' are true  # noqa: E501

        :return: The max_attempts of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this MultipleAttemptsSettings.

        number of attempts to allow if 'multiple_attempts_enabled' and 'attempt_limit' are true  # noqa: E501

        :param max_attempts: The max_attempts of this MultipleAttemptsSettings.  # noqa: E501
        :type: int
        """

        self._max_attempts = max_attempts

    @property
    def score_to_keep(self):
        """Gets the score_to_keep of this MultipleAttemptsSettings.  # noqa: E501

        specifies which score to keep after attempts ('average', 'first', 'highest', or 'latest')  # noqa: E501

        :return: The score_to_keep of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: str
        """
        return self._score_to_keep

    @score_to_keep.setter
    def score_to_keep(self, score_to_keep):
        """Sets the score_to_keep of this MultipleAttemptsSettings.

        specifies which score to keep after attempts ('average', 'first', 'highest', or 'latest')  # noqa: E501

        :param score_to_keep: The score_to_keep of this MultipleAttemptsSettings.  # noqa: E501
        :type: str
        """

        self._score_to_keep = score_to_keep

    @property
    def cooling_period(self):
        """Gets the cooling_period of this MultipleAttemptsSettings.  # noqa: E501

        whether to enforce a waiting period after an attempt (set as 'cooling_period_seconds')  # noqa: E501

        :return: The cooling_period of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: bool
        """
        return self._cooling_period

    @cooling_period.setter
    def cooling_period(self, cooling_period):
        """Sets the cooling_period of this MultipleAttemptsSettings.

        whether to enforce a waiting period after an attempt (set as 'cooling_period_seconds')  # noqa: E501

        :param cooling_period: The cooling_period of this MultipleAttemptsSettings.  # noqa: E501
        :type: bool
        """

        self._cooling_period = cooling_period

    @property
    def cooling_period_seconds(self):
        """Gets the cooling_period_seconds of this MultipleAttemptsSettings.  # noqa: E501

        required waiting period (in seconds) between attempts. Enforced if 'cooling_period' is true.  # noqa: E501

        :return: The cooling_period_seconds of this MultipleAttemptsSettings.  # noqa: E501
        :rtype: int
        """
        return self._cooling_period_seconds

    @cooling_period_seconds.setter
    def cooling_period_seconds(self, cooling_period_seconds):
        """Sets the cooling_period_seconds of this MultipleAttemptsSettings.

        required waiting period (in seconds) between attempts. Enforced if 'cooling_period' is true.  # noqa: E501

        :param cooling_period_seconds: The cooling_period_seconds of this MultipleAttemptsSettings.  # noqa: E501
        :type: int
        """

        self._cooling_period_seconds = cooling_period_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MultipleAttemptsSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MultipleAttemptsSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MultipleAttemptsSettings):
            return True

        return self.to_dict() != other.to_dict()
