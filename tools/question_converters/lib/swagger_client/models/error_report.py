# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ErrorReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'comments': 'str',
        'user_perceived_severity': 'str',
        'email': 'str',
        'url': 'str',
        'context_asset_string': 'str',
        'user_roles': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'comments': 'comments',
        'user_perceived_severity': 'user_perceived_severity',
        'email': 'email',
        'url': 'url',
        'context_asset_string': 'context_asset_string',
        'user_roles': 'user_roles'
    }

    def __init__(self, subject=None, comments=None, user_perceived_severity=None, email=None, url=None, context_asset_string=None, user_roles=None, _configuration=None):  # noqa: E501
        """ErrorReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subject = None
        self._comments = None
        self._user_perceived_severity = None
        self._email = None
        self._url = None
        self._context_asset_string = None
        self._user_roles = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if comments is not None:
            self.comments = comments
        if user_perceived_severity is not None:
            self.user_perceived_severity = user_perceived_severity
        if email is not None:
            self.email = email
        if url is not None:
            self.url = url
        if context_asset_string is not None:
            self.context_asset_string = context_asset_string
        if user_roles is not None:
            self.user_roles = user_roles

    @property
    def subject(self):
        """Gets the subject of this ErrorReport.  # noqa: E501

        The users problem summary, like an email subject line  # noqa: E501

        :return: The subject of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ErrorReport.

        The users problem summary, like an email subject line  # noqa: E501

        :param subject: The subject of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def comments(self):
        """Gets the comments of this ErrorReport.  # noqa: E501

        long form documentation of what was witnessed  # noqa: E501

        :return: The comments of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ErrorReport.

        long form documentation of what was witnessed  # noqa: E501

        :param comments: The comments of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def user_perceived_severity(self):
        """Gets the user_perceived_severity of this ErrorReport.  # noqa: E501

        categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency].  # noqa: E501

        :return: The user_perceived_severity of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._user_perceived_severity

    @user_perceived_severity.setter
    def user_perceived_severity(self, user_perceived_severity):
        """Sets the user_perceived_severity of this ErrorReport.

        categorization of how bad the user thinks the problem is.  Should be one of [just_a_comment, not_urgent, workaround_possible, blocks_what_i_need_to_do, extreme_critical_emergency].  # noqa: E501

        :param user_perceived_severity: The user_perceived_severity of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._user_perceived_severity = user_perceived_severity

    @property
    def email(self):
        """Gets the email of this ErrorReport.  # noqa: E501

        the email address of the reporting user  # noqa: E501

        :return: The email of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ErrorReport.

        the email address of the reporting user  # noqa: E501

        :param email: The email of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def url(self):
        """Gets the url of this ErrorReport.  # noqa: E501

        URL of the page on which the error was reported  # noqa: E501

        :return: The url of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ErrorReport.

        URL of the page on which the error was reported  # noqa: E501

        :param url: The url of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def context_asset_string(self):
        """Gets the context_asset_string of this ErrorReport.  # noqa: E501

        string describing the asset being interacted with at the time of error.  Formatted '[type]_[id]'  # noqa: E501

        :return: The context_asset_string of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._context_asset_string

    @context_asset_string.setter
    def context_asset_string(self, context_asset_string):
        """Sets the context_asset_string of this ErrorReport.

        string describing the asset being interacted with at the time of error.  Formatted '[type]_[id]'  # noqa: E501

        :param context_asset_string: The context_asset_string of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._context_asset_string = context_asset_string

    @property
    def user_roles(self):
        """Gets the user_roles of this ErrorReport.  # noqa: E501

        comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]  # noqa: E501

        :return: The user_roles of this ErrorReport.  # noqa: E501
        :rtype: str
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this ErrorReport.

        comma seperated list of roles the reporting user holds.  Can be one [student], or many [teacher,admin]  # noqa: E501

        :param user_roles: The user_roles of this ErrorReport.  # noqa: E501
        :type: str
        """

        self._user_roles = user_roles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErrorReport):
            return True

        return self.to_dict() != other.to_dict()
