# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EpubExport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_at': 'ModelDatetime',
        'attachment': 'File',
        'progress_url': 'str',
        'user_id': 'int',
        'workflow_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'created_at',
        'attachment': 'attachment',
        'progress_url': 'progress_url',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, id=None, created_at=None, attachment=None, progress_url=None, user_id=None, workflow_state=None, _configuration=None):  # noqa: E501
        """EpubExport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._created_at = None
        self._attachment = None
        self._progress_url = None
        self._user_id = None
        self._workflow_state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if attachment is not None:
            self.attachment = attachment
        if progress_url is not None:
            self.progress_url = progress_url
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def id(self):
        """Gets the id of this EpubExport.  # noqa: E501

        the unique identifier for the export  # noqa: E501

        :return: The id of this EpubExport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EpubExport.

        the unique identifier for the export  # noqa: E501

        :param id: The id of this EpubExport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this EpubExport.  # noqa: E501

        the date and time this export was requested  # noqa: E501

        :return: The created_at of this EpubExport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EpubExport.

        the date and time this export was requested  # noqa: E501

        :param created_at: The created_at of this EpubExport.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def attachment(self):
        """Gets the attachment of this EpubExport.  # noqa: E501

        attachment api object for the export ePub (not present until the export completes)  # noqa: E501

        :return: The attachment of this EpubExport.  # noqa: E501
        :rtype: File
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this EpubExport.

        attachment api object for the export ePub (not present until the export completes)  # noqa: E501

        :param attachment: The attachment of this EpubExport.  # noqa: E501
        :type: File
        """

        self._attachment = attachment

    @property
    def progress_url(self):
        """Gets the progress_url of this EpubExport.  # noqa: E501

        The api endpoint for polling the current progress  # noqa: E501

        :return: The progress_url of this EpubExport.  # noqa: E501
        :rtype: str
        """
        return self._progress_url

    @progress_url.setter
    def progress_url(self, progress_url):
        """Sets the progress_url of this EpubExport.

        The api endpoint for polling the current progress  # noqa: E501

        :param progress_url: The progress_url of this EpubExport.  # noqa: E501
        :type: str
        """

        self._progress_url = progress_url

    @property
    def user_id(self):
        """Gets the user_id of this EpubExport.  # noqa: E501

        The ID of the user who started the export  # noqa: E501

        :return: The user_id of this EpubExport.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EpubExport.

        The ID of the user who started the export  # noqa: E501

        :param user_id: The user_id of this EpubExport.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this EpubExport.  # noqa: E501

        Current state of the ePub export: created exporting exported generating generated failed  # noqa: E501

        :return: The workflow_state of this EpubExport.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this EpubExport.

        Current state of the ePub export: created exporting exported generating generated failed  # noqa: E501

        :param workflow_state: The workflow_state of this EpubExport.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EpubExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EpubExport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EpubExport):
            return True

        return self.to_dict() != other.to_dict()
