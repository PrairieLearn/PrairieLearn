# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OriginalityReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'file_id': 'int',
        'originality_score': 'float',
        'originality_report_file_id': 'int',
        'originality_report_url': 'str',
        'tool_setting': 'ToolSetting',
        'error_report': 'str',
        'submission_time': 'ModelDatetime',
        'root_account_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'file_id': 'file_id',
        'originality_score': 'originality_score',
        'originality_report_file_id': 'originality_report_file_id',
        'originality_report_url': 'originality_report_url',
        'tool_setting': 'tool_setting',
        'error_report': 'error_report',
        'submission_time': 'submission_time',
        'root_account_id': 'root_account_id'
    }

    def __init__(self, id=None, file_id=None, originality_score=None, originality_report_file_id=None, originality_report_url=None, tool_setting=None, error_report=None, submission_time=None, root_account_id=None, _configuration=None):  # noqa: E501
        """OriginalityReport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._file_id = None
        self._originality_score = None
        self._originality_report_file_id = None
        self._originality_report_url = None
        self._tool_setting = None
        self._error_report = None
        self._submission_time = None
        self._root_account_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if file_id is not None:
            self.file_id = file_id
        if originality_score is not None:
            self.originality_score = originality_score
        if originality_report_file_id is not None:
            self.originality_report_file_id = originality_report_file_id
        if originality_report_url is not None:
            self.originality_report_url = originality_report_url
        if tool_setting is not None:
            self.tool_setting = tool_setting
        if error_report is not None:
            self.error_report = error_report
        if submission_time is not None:
            self.submission_time = submission_time
        if root_account_id is not None:
            self.root_account_id = root_account_id

    @property
    def id(self):
        """Gets the id of this OriginalityReport.  # noqa: E501

        The id of the OriginalityReport  # noqa: E501

        :return: The id of this OriginalityReport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OriginalityReport.

        The id of the OriginalityReport  # noqa: E501

        :param id: The id of this OriginalityReport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def file_id(self):
        """Gets the file_id of this OriginalityReport.  # noqa: E501

        The id of the file receiving the originality score  # noqa: E501

        :return: The file_id of this OriginalityReport.  # noqa: E501
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this OriginalityReport.

        The id of the file receiving the originality score  # noqa: E501

        :param file_id: The file_id of this OriginalityReport.  # noqa: E501
        :type: int
        """

        self._file_id = file_id

    @property
    def originality_score(self):
        """Gets the originality_score of this OriginalityReport.  # noqa: E501

        A number between 0 and 100 representing the originality score  # noqa: E501

        :return: The originality_score of this OriginalityReport.  # noqa: E501
        :rtype: float
        """
        return self._originality_score

    @originality_score.setter
    def originality_score(self, originality_score):
        """Sets the originality_score of this OriginalityReport.

        A number between 0 and 100 representing the originality score  # noqa: E501

        :param originality_score: The originality_score of this OriginalityReport.  # noqa: E501
        :type: float
        """

        self._originality_score = originality_score

    @property
    def originality_report_file_id(self):
        """Gets the originality_report_file_id of this OriginalityReport.  # noqa: E501

        The ID of the file within Canvas containing the originality report document (if provided)  # noqa: E501

        :return: The originality_report_file_id of this OriginalityReport.  # noqa: E501
        :rtype: int
        """
        return self._originality_report_file_id

    @originality_report_file_id.setter
    def originality_report_file_id(self, originality_report_file_id):
        """Sets the originality_report_file_id of this OriginalityReport.

        The ID of the file within Canvas containing the originality report document (if provided)  # noqa: E501

        :param originality_report_file_id: The originality_report_file_id of this OriginalityReport.  # noqa: E501
        :type: int
        """

        self._originality_report_file_id = originality_report_file_id

    @property
    def originality_report_url(self):
        """Gets the originality_report_url of this OriginalityReport.  # noqa: E501

        A non-LTI launch URL where the originality score of the file may be found.  # noqa: E501

        :return: The originality_report_url of this OriginalityReport.  # noqa: E501
        :rtype: str
        """
        return self._originality_report_url

    @originality_report_url.setter
    def originality_report_url(self, originality_report_url):
        """Sets the originality_report_url of this OriginalityReport.

        A non-LTI launch URL where the originality score of the file may be found.  # noqa: E501

        :param originality_report_url: The originality_report_url of this OriginalityReport.  # noqa: E501
        :type: str
        """

        self._originality_report_url = originality_report_url

    @property
    def tool_setting(self):
        """Gets the tool_setting of this OriginalityReport.  # noqa: E501

        A ToolSetting object containing optional 'resource_type_code' and 'resource_url'  # noqa: E501

        :return: The tool_setting of this OriginalityReport.  # noqa: E501
        :rtype: ToolSetting
        """
        return self._tool_setting

    @tool_setting.setter
    def tool_setting(self, tool_setting):
        """Sets the tool_setting of this OriginalityReport.

        A ToolSetting object containing optional 'resource_type_code' and 'resource_url'  # noqa: E501

        :param tool_setting: The tool_setting of this OriginalityReport.  # noqa: E501
        :type: ToolSetting
        """

        self._tool_setting = tool_setting

    @property
    def error_report(self):
        """Gets the error_report of this OriginalityReport.  # noqa: E501

        A message describing the error. If set, the workflow_state will become 'error.'  # noqa: E501

        :return: The error_report of this OriginalityReport.  # noqa: E501
        :rtype: str
        """
        return self._error_report

    @error_report.setter
    def error_report(self, error_report):
        """Sets the error_report of this OriginalityReport.

        A message describing the error. If set, the workflow_state will become 'error.'  # noqa: E501

        :param error_report: The error_report of this OriginalityReport.  # noqa: E501
        :type: str
        """

        self._error_report = error_report

    @property
    def submission_time(self):
        """Gets the submission_time of this OriginalityReport.  # noqa: E501

        The submitted_at date time of the submission.  # noqa: E501

        :return: The submission_time of this OriginalityReport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._submission_time

    @submission_time.setter
    def submission_time(self, submission_time):
        """Sets the submission_time of this OriginalityReport.

        The submitted_at date time of the submission.  # noqa: E501

        :param submission_time: The submission_time of this OriginalityReport.  # noqa: E501
        :type: ModelDatetime
        """

        self._submission_time = submission_time

    @property
    def root_account_id(self):
        """Gets the root_account_id of this OriginalityReport.  # noqa: E501

        The id of the root Account associated with the OriginalityReport  # noqa: E501

        :return: The root_account_id of this OriginalityReport.  # noqa: E501
        :rtype: int
        """
        return self._root_account_id

    @root_account_id.setter
    def root_account_id(self, root_account_id):
        """Sets the root_account_id of this OriginalityReport.

        The id of the root Account associated with the OriginalityReport  # noqa: E501

        :param root_account_id: The root_account_id of this OriginalityReport.  # noqa: E501
        :type: int
        """

        self._root_account_id = root_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OriginalityReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OriginalityReport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OriginalityReport):
            return True

        return self.to_dict() != other.to_dict()
