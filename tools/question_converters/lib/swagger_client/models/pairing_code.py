# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PairingCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'int',
        'code': 'str',
        'expires_at': 'datetime',
        'workflow_state': 'str'
    }

    attribute_map = {
        'user_id': 'user_id',
        'code': 'code',
        'expires_at': 'expires_at',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, user_id=None, code=None, expires_at=None, workflow_state=None, _configuration=None):  # noqa: E501
        """PairingCode - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._code = None
        self._expires_at = None
        self._workflow_state = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if code is not None:
            self.code = code
        if expires_at is not None:
            self.expires_at = expires_at
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def user_id(self):
        """Gets the user_id of this PairingCode.  # noqa: E501

        The ID of the user.  # noqa: E501

        :return: The user_id of this PairingCode.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PairingCode.

        The ID of the user.  # noqa: E501

        :param user_id: The user_id of this PairingCode.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def code(self):
        """Gets the code of this PairingCode.  # noqa: E501

        The actual code to be sent to other APIs  # noqa: E501

        :return: The code of this PairingCode.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PairingCode.

        The actual code to be sent to other APIs  # noqa: E501

        :param code: The code of this PairingCode.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def expires_at(self):
        """Gets the expires_at of this PairingCode.  # noqa: E501

        When the code expires  # noqa: E501

        :return: The expires_at of this PairingCode.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PairingCode.

        When the code expires  # noqa: E501

        :param expires_at: The expires_at of this PairingCode.  # noqa: E501
        :type: datetime
        """

        self._expires_at = expires_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this PairingCode.  # noqa: E501

        The current status of the code  # noqa: E501

        :return: The workflow_state of this PairingCode.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this PairingCode.

        The current status of the code  # noqa: E501

        :param workflow_state: The workflow_state of this PairingCode.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PairingCode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PairingCode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PairingCode):
            return True

        return self.to_dict() != other.to_dict()
