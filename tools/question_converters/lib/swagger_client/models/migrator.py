# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Migrator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'requires_file_upload': 'bool',
        'name': 'str',
        'required_settings': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'requires_file_upload': 'requires_file_upload',
        'name': 'name',
        'required_settings': 'required_settings'
    }

    def __init__(self, type=None, requires_file_upload=None, name=None, required_settings=None, _configuration=None):  # noqa: E501
        """Migrator - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._requires_file_upload = None
        self._name = None
        self._required_settings = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if requires_file_upload is not None:
            self.requires_file_upload = requires_file_upload
        if name is not None:
            self.name = name
        if required_settings is not None:
            self.required_settings = required_settings

    @property
    def type(self):
        """Gets the type of this Migrator.  # noqa: E501

        The value to pass to the create endpoint  # noqa: E501

        :return: The type of this Migrator.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Migrator.

        The value to pass to the create endpoint  # noqa: E501

        :param type: The type of this Migrator.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def requires_file_upload(self):
        """Gets the requires_file_upload of this Migrator.  # noqa: E501

        Whether this endpoint requires a file upload  # noqa: E501

        :return: The requires_file_upload of this Migrator.  # noqa: E501
        :rtype: bool
        """
        return self._requires_file_upload

    @requires_file_upload.setter
    def requires_file_upload(self, requires_file_upload):
        """Sets the requires_file_upload of this Migrator.

        Whether this endpoint requires a file upload  # noqa: E501

        :param requires_file_upload: The requires_file_upload of this Migrator.  # noqa: E501
        :type: bool
        """

        self._requires_file_upload = requires_file_upload

    @property
    def name(self):
        """Gets the name of this Migrator.  # noqa: E501

        Description of the package type expected  # noqa: E501

        :return: The name of this Migrator.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Migrator.

        Description of the package type expected  # noqa: E501

        :param name: The name of this Migrator.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required_settings(self):
        """Gets the required_settings of this Migrator.  # noqa: E501

        A list of fields this system requires  # noqa: E501

        :return: The required_settings of this Migrator.  # noqa: E501
        :rtype: list[str]
        """
        return self._required_settings

    @required_settings.setter
    def required_settings(self, required_settings):
        """Sets the required_settings of this Migrator.

        A list of fields this system requires  # noqa: E501

        :param required_settings: The required_settings of this Migrator.  # noqa: E501
        :type: list[str]
        """

        self._required_settings = required_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Migrator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Migrator):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Migrator):
            return True

        return self.to_dict() != other.to_dict()
