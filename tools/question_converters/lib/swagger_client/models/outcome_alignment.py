# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeAlignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'assignment_id': 'int',
        'assessment_id': 'int',
        'submission_types': 'str',
        'url': 'str',
        'title': 'str'
    }

    attribute_map = {
        'id': 'id',
        'assignment_id': 'assignment_id',
        'assessment_id': 'assessment_id',
        'submission_types': 'submission_types',
        'url': 'url',
        'title': 'title'
    }

    def __init__(self, id=None, assignment_id=None, assessment_id=None, submission_types=None, url=None, title=None, _configuration=None):  # noqa: E501
        """OutcomeAlignment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._assignment_id = None
        self._assessment_id = None
        self._submission_types = None
        self._url = None
        self._title = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if assessment_id is not None:
            self.assessment_id = assessment_id
        if submission_types is not None:
            self.submission_types = submission_types
        if url is not None:
            self.url = url
        if title is not None:
            self.title = title

    @property
    def id(self):
        """Gets the id of this OutcomeAlignment.  # noqa: E501

        the id of the aligned learning outcome.  # noqa: E501

        :return: The id of this OutcomeAlignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutcomeAlignment.

        the id of the aligned learning outcome.  # noqa: E501

        :param id: The id of this OutcomeAlignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this OutcomeAlignment.  # noqa: E501

        the id of the aligned assignment (null for live assessments).  # noqa: E501

        :return: The assignment_id of this OutcomeAlignment.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this OutcomeAlignment.

        the id of the aligned assignment (null for live assessments).  # noqa: E501

        :param assignment_id: The assignment_id of this OutcomeAlignment.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def assessment_id(self):
        """Gets the assessment_id of this OutcomeAlignment.  # noqa: E501

        the id of the aligned live assessment (null for assignments).  # noqa: E501

        :return: The assessment_id of this OutcomeAlignment.  # noqa: E501
        :rtype: int
        """
        return self._assessment_id

    @assessment_id.setter
    def assessment_id(self, assessment_id):
        """Sets the assessment_id of this OutcomeAlignment.

        the id of the aligned live assessment (null for assignments).  # noqa: E501

        :param assessment_id: The assessment_id of this OutcomeAlignment.  # noqa: E501
        :type: int
        """

        self._assessment_id = assessment_id

    @property
    def submission_types(self):
        """Gets the submission_types of this OutcomeAlignment.  # noqa: E501

        a string representing the different submission types of an aligned assignment.  # noqa: E501

        :return: The submission_types of this OutcomeAlignment.  # noqa: E501
        :rtype: str
        """
        return self._submission_types

    @submission_types.setter
    def submission_types(self, submission_types):
        """Sets the submission_types of this OutcomeAlignment.

        a string representing the different submission types of an aligned assignment.  # noqa: E501

        :param submission_types: The submission_types of this OutcomeAlignment.  # noqa: E501
        :type: str
        """

        self._submission_types = submission_types

    @property
    def url(self):
        """Gets the url of this OutcomeAlignment.  # noqa: E501

        the URL for the aligned assignment.  # noqa: E501

        :return: The url of this OutcomeAlignment.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OutcomeAlignment.

        the URL for the aligned assignment.  # noqa: E501

        :param url: The url of this OutcomeAlignment.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def title(self):
        """Gets the title of this OutcomeAlignment.  # noqa: E501

        the title of the aligned assignment.  # noqa: E501

        :return: The title of this OutcomeAlignment.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OutcomeAlignment.

        the title of the aligned assignment.  # noqa: E501

        :param title: The title of this OutcomeAlignment.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeAlignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeAlignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeAlignment):
            return True

        return self.to_dict() != other.to_dict()
