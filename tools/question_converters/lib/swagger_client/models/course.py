# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Course(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sis_course_id': 'str',
        'uuid': 'str',
        'integration_id': 'str',
        'sis_import_id': 'int',
        'name': 'str',
        'course_code': 'str',
        'original_name': 'str',
        'workflow_state': 'str',
        'account_id': 'int',
        'root_account_id': 'int',
        'enrollment_term_id': 'int',
        'grading_periods': 'list[GradingPeriod]',
        'grading_standard_id': 'int',
        'grade_passback_setting': 'str',
        'created_at': 'ModelDatetime',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'locale': 'str',
        'enrollments': 'list[Enrollment]',
        'total_students': 'int',
        'calendar': 'CalendarLink',
        'default_view': 'str',
        'syllabus_body': 'str',
        'needs_grading_count': 'int',
        'term': 'Term',
        'course_progress': 'CourseProgress',
        'apply_assignment_group_weights': 'bool',
        'permissions': 'object',
        'is_public': 'bool',
        'is_public_to_auth_users': 'bool',
        'public_syllabus': 'bool',
        'public_syllabus_to_auth': 'bool',
        'public_description': 'str',
        'storage_quota_mb': 'int',
        'storage_quota_used_mb': 'float',
        'hide_final_grades': 'bool',
        'license': 'str',
        'allow_student_assignment_edits': 'bool',
        'allow_wiki_comments': 'bool',
        'allow_student_forum_attachments': 'bool',
        'open_enrollment': 'bool',
        'self_enrollment': 'bool',
        'restrict_enrollments_to_course_dates': 'bool',
        'course_format': 'str',
        'access_restricted_by_date': 'bool',
        'time_zone': 'str',
        'blueprint': 'bool',
        'blueprint_restrictions': 'object',
        'blueprint_restrictions_by_object_type': 'object',
        'template': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'sis_course_id': 'sis_course_id',
        'uuid': 'uuid',
        'integration_id': 'integration_id',
        'sis_import_id': 'sis_import_id',
        'name': 'name',
        'course_code': 'course_code',
        'original_name': 'original_name',
        'workflow_state': 'workflow_state',
        'account_id': 'account_id',
        'root_account_id': 'root_account_id',
        'enrollment_term_id': 'enrollment_term_id',
        'grading_periods': 'grading_periods',
        'grading_standard_id': 'grading_standard_id',
        'grade_passback_setting': 'grade_passback_setting',
        'created_at': 'created_at',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'locale': 'locale',
        'enrollments': 'enrollments',
        'total_students': 'total_students',
        'calendar': 'calendar',
        'default_view': 'default_view',
        'syllabus_body': 'syllabus_body',
        'needs_grading_count': 'needs_grading_count',
        'term': 'term',
        'course_progress': 'course_progress',
        'apply_assignment_group_weights': 'apply_assignment_group_weights',
        'permissions': 'permissions',
        'is_public': 'is_public',
        'is_public_to_auth_users': 'is_public_to_auth_users',
        'public_syllabus': 'public_syllabus',
        'public_syllabus_to_auth': 'public_syllabus_to_auth',
        'public_description': 'public_description',
        'storage_quota_mb': 'storage_quota_mb',
        'storage_quota_used_mb': 'storage_quota_used_mb',
        'hide_final_grades': 'hide_final_grades',
        'license': 'license',
        'allow_student_assignment_edits': 'allow_student_assignment_edits',
        'allow_wiki_comments': 'allow_wiki_comments',
        'allow_student_forum_attachments': 'allow_student_forum_attachments',
        'open_enrollment': 'open_enrollment',
        'self_enrollment': 'self_enrollment',
        'restrict_enrollments_to_course_dates': 'restrict_enrollments_to_course_dates',
        'course_format': 'course_format',
        'access_restricted_by_date': 'access_restricted_by_date',
        'time_zone': 'time_zone',
        'blueprint': 'blueprint',
        'blueprint_restrictions': 'blueprint_restrictions',
        'blueprint_restrictions_by_object_type': 'blueprint_restrictions_by_object_type',
        'template': 'template'
    }

    def __init__(self, id=None, sis_course_id=None, uuid=None, integration_id=None, sis_import_id=None, name=None, course_code=None, original_name=None, workflow_state=None, account_id=None, root_account_id=None, enrollment_term_id=None, grading_periods=None, grading_standard_id=None, grade_passback_setting=None, created_at=None, start_at=None, end_at=None, locale=None, enrollments=None, total_students=None, calendar=None, default_view=None, syllabus_body=None, needs_grading_count=None, term=None, course_progress=None, apply_assignment_group_weights=None, permissions=None, is_public=None, is_public_to_auth_users=None, public_syllabus=None, public_syllabus_to_auth=None, public_description=None, storage_quota_mb=None, storage_quota_used_mb=None, hide_final_grades=None, license=None, allow_student_assignment_edits=None, allow_wiki_comments=None, allow_student_forum_attachments=None, open_enrollment=None, self_enrollment=None, restrict_enrollments_to_course_dates=None, course_format=None, access_restricted_by_date=None, time_zone=None, blueprint=None, blueprint_restrictions=None, blueprint_restrictions_by_object_type=None, template=None, _configuration=None):  # noqa: E501
        """Course - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._sis_course_id = None
        self._uuid = None
        self._integration_id = None
        self._sis_import_id = None
        self._name = None
        self._course_code = None
        self._original_name = None
        self._workflow_state = None
        self._account_id = None
        self._root_account_id = None
        self._enrollment_term_id = None
        self._grading_periods = None
        self._grading_standard_id = None
        self._grade_passback_setting = None
        self._created_at = None
        self._start_at = None
        self._end_at = None
        self._locale = None
        self._enrollments = None
        self._total_students = None
        self._calendar = None
        self._default_view = None
        self._syllabus_body = None
        self._needs_grading_count = None
        self._term = None
        self._course_progress = None
        self._apply_assignment_group_weights = None
        self._permissions = None
        self._is_public = None
        self._is_public_to_auth_users = None
        self._public_syllabus = None
        self._public_syllabus_to_auth = None
        self._public_description = None
        self._storage_quota_mb = None
        self._storage_quota_used_mb = None
        self._hide_final_grades = None
        self._license = None
        self._allow_student_assignment_edits = None
        self._allow_wiki_comments = None
        self._allow_student_forum_attachments = None
        self._open_enrollment = None
        self._self_enrollment = None
        self._restrict_enrollments_to_course_dates = None
        self._course_format = None
        self._access_restricted_by_date = None
        self._time_zone = None
        self._blueprint = None
        self._blueprint_restrictions = None
        self._blueprint_restrictions_by_object_type = None
        self._template = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sis_course_id is not None:
            self.sis_course_id = sis_course_id
        if uuid is not None:
            self.uuid = uuid
        if integration_id is not None:
            self.integration_id = integration_id
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if name is not None:
            self.name = name
        if course_code is not None:
            self.course_code = course_code
        if original_name is not None:
            self.original_name = original_name
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if account_id is not None:
            self.account_id = account_id
        if root_account_id is not None:
            self.root_account_id = root_account_id
        if enrollment_term_id is not None:
            self.enrollment_term_id = enrollment_term_id
        if grading_periods is not None:
            self.grading_periods = grading_periods
        if grading_standard_id is not None:
            self.grading_standard_id = grading_standard_id
        if grade_passback_setting is not None:
            self.grade_passback_setting = grade_passback_setting
        if created_at is not None:
            self.created_at = created_at
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if locale is not None:
            self.locale = locale
        if enrollments is not None:
            self.enrollments = enrollments
        if total_students is not None:
            self.total_students = total_students
        if calendar is not None:
            self.calendar = calendar
        if default_view is not None:
            self.default_view = default_view
        if syllabus_body is not None:
            self.syllabus_body = syllabus_body
        if needs_grading_count is not None:
            self.needs_grading_count = needs_grading_count
        if term is not None:
            self.term = term
        if course_progress is not None:
            self.course_progress = course_progress
        if apply_assignment_group_weights is not None:
            self.apply_assignment_group_weights = apply_assignment_group_weights
        if permissions is not None:
            self.permissions = permissions
        if is_public is not None:
            self.is_public = is_public
        if is_public_to_auth_users is not None:
            self.is_public_to_auth_users = is_public_to_auth_users
        if public_syllabus is not None:
            self.public_syllabus = public_syllabus
        if public_syllabus_to_auth is not None:
            self.public_syllabus_to_auth = public_syllabus_to_auth
        if public_description is not None:
            self.public_description = public_description
        if storage_quota_mb is not None:
            self.storage_quota_mb = storage_quota_mb
        if storage_quota_used_mb is not None:
            self.storage_quota_used_mb = storage_quota_used_mb
        if hide_final_grades is not None:
            self.hide_final_grades = hide_final_grades
        if license is not None:
            self.license = license
        if allow_student_assignment_edits is not None:
            self.allow_student_assignment_edits = allow_student_assignment_edits
        if allow_wiki_comments is not None:
            self.allow_wiki_comments = allow_wiki_comments
        if allow_student_forum_attachments is not None:
            self.allow_student_forum_attachments = allow_student_forum_attachments
        if open_enrollment is not None:
            self.open_enrollment = open_enrollment
        if self_enrollment is not None:
            self.self_enrollment = self_enrollment
        if restrict_enrollments_to_course_dates is not None:
            self.restrict_enrollments_to_course_dates = restrict_enrollments_to_course_dates
        if course_format is not None:
            self.course_format = course_format
        if access_restricted_by_date is not None:
            self.access_restricted_by_date = access_restricted_by_date
        if time_zone is not None:
            self.time_zone = time_zone
        if blueprint is not None:
            self.blueprint = blueprint
        if blueprint_restrictions is not None:
            self.blueprint_restrictions = blueprint_restrictions
        if blueprint_restrictions_by_object_type is not None:
            self.blueprint_restrictions_by_object_type = blueprint_restrictions_by_object_type
        if template is not None:
            self.template = template

    @property
    def id(self):
        """Gets the id of this Course.  # noqa: E501

        the unique identifier for the course  # noqa: E501

        :return: The id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Course.

        the unique identifier for the course  # noqa: E501

        :param id: The id of this Course.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sis_course_id(self):
        """Gets the sis_course_id of this Course.  # noqa: E501

        the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_course_id of this Course.  # noqa: E501
        :rtype: str
        """
        return self._sis_course_id

    @sis_course_id.setter
    def sis_course_id(self, sis_course_id):
        """Sets the sis_course_id of this Course.

        the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_course_id: The sis_course_id of this Course.  # noqa: E501
        :type: str
        """

        self._sis_course_id = sis_course_id

    @property
    def uuid(self):
        """Gets the uuid of this Course.  # noqa: E501

        the UUID of the course  # noqa: E501

        :return: The uuid of this Course.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Course.

        the UUID of the course  # noqa: E501

        :param uuid: The uuid of this Course.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def integration_id(self):
        """Gets the integration_id of this Course.  # noqa: E501

        the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The integration_id of this Course.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Course.

        the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param integration_id: The integration_id of this Course.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this Course.  # noqa: E501

        the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this Course.

        the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this Course.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def name(self):
        """Gets the name of this Course.  # noqa: E501

        the full name of the course. If the requesting user has set a nickname for the course, the nickname will be shown here.  # noqa: E501

        :return: The name of this Course.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Course.

        the full name of the course. If the requesting user has set a nickname for the course, the nickname will be shown here.  # noqa: E501

        :param name: The name of this Course.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def course_code(self):
        """Gets the course_code of this Course.  # noqa: E501

        the course code  # noqa: E501

        :return: The course_code of this Course.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this Course.

        the course code  # noqa: E501

        :param course_code: The course_code of this Course.  # noqa: E501
        :type: str
        """

        self._course_code = course_code

    @property
    def original_name(self):
        """Gets the original_name of this Course.  # noqa: E501

        the actual course name. This field is returned only if the requesting user has set a nickname for the course.  # noqa: E501

        :return: The original_name of this Course.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this Course.

        the actual course name. This field is returned only if the requesting user has set a nickname for the course.  # noqa: E501

        :param original_name: The original_name of this Course.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Course.  # noqa: E501

        the current state of the course, also known as ‘status’.  The value will be one of the following values: 'unpublished', 'available', 'completed', or 'deleted'.  NOTE: When fetching a singular course that has a 'deleted' workflow state value, an error will be returned with a message of 'The specified resource does not exist.'  # noqa: E501

        :return: The workflow_state of this Course.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Course.

        the current state of the course, also known as ‘status’.  The value will be one of the following values: 'unpublished', 'available', 'completed', or 'deleted'.  NOTE: When fetching a singular course that has a 'deleted' workflow state value, an error will be returned with a message of 'The specified resource does not exist.'  # noqa: E501

        :param workflow_state: The workflow_state of this Course.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def account_id(self):
        """Gets the account_id of this Course.  # noqa: E501

        the account associated with the course  # noqa: E501

        :return: The account_id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Course.

        the account associated with the course  # noqa: E501

        :param account_id: The account_id of this Course.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def root_account_id(self):
        """Gets the root_account_id of this Course.  # noqa: E501

        the root account associated with the course  # noqa: E501

        :return: The root_account_id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._root_account_id

    @root_account_id.setter
    def root_account_id(self, root_account_id):
        """Sets the root_account_id of this Course.

        the root account associated with the course  # noqa: E501

        :param root_account_id: The root_account_id of this Course.  # noqa: E501
        :type: int
        """

        self._root_account_id = root_account_id

    @property
    def enrollment_term_id(self):
        """Gets the enrollment_term_id of this Course.  # noqa: E501

        the enrollment term associated with the course  # noqa: E501

        :return: The enrollment_term_id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._enrollment_term_id

    @enrollment_term_id.setter
    def enrollment_term_id(self, enrollment_term_id):
        """Sets the enrollment_term_id of this Course.

        the enrollment term associated with the course  # noqa: E501

        :param enrollment_term_id: The enrollment_term_id of this Course.  # noqa: E501
        :type: int
        """

        self._enrollment_term_id = enrollment_term_id

    @property
    def grading_periods(self):
        """Gets the grading_periods of this Course.  # noqa: E501

        A list of grading periods associated with the course  # noqa: E501

        :return: The grading_periods of this Course.  # noqa: E501
        :rtype: list[GradingPeriod]
        """
        return self._grading_periods

    @grading_periods.setter
    def grading_periods(self, grading_periods):
        """Sets the grading_periods of this Course.

        A list of grading periods associated with the course  # noqa: E501

        :param grading_periods: The grading_periods of this Course.  # noqa: E501
        :type: list[GradingPeriod]
        """

        self._grading_periods = grading_periods

    @property
    def grading_standard_id(self):
        """Gets the grading_standard_id of this Course.  # noqa: E501

        the grading standard associated with the course  # noqa: E501

        :return: The grading_standard_id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._grading_standard_id

    @grading_standard_id.setter
    def grading_standard_id(self, grading_standard_id):
        """Sets the grading_standard_id of this Course.

        the grading standard associated with the course  # noqa: E501

        :param grading_standard_id: The grading_standard_id of this Course.  # noqa: E501
        :type: int
        """

        self._grading_standard_id = grading_standard_id

    @property
    def grade_passback_setting(self):
        """Gets the grade_passback_setting of this Course.  # noqa: E501

        the grade_passback_setting set on the course  # noqa: E501

        :return: The grade_passback_setting of this Course.  # noqa: E501
        :rtype: str
        """
        return self._grade_passback_setting

    @grade_passback_setting.setter
    def grade_passback_setting(self, grade_passback_setting):
        """Sets the grade_passback_setting of this Course.

        the grade_passback_setting set on the course  # noqa: E501

        :param grade_passback_setting: The grade_passback_setting of this Course.  # noqa: E501
        :type: str
        """

        self._grade_passback_setting = grade_passback_setting

    @property
    def created_at(self):
        """Gets the created_at of this Course.  # noqa: E501

        the date the course was created.  # noqa: E501

        :return: The created_at of this Course.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Course.

        the date the course was created.  # noqa: E501

        :param created_at: The created_at of this Course.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def start_at(self):
        """Gets the start_at of this Course.  # noqa: E501

        the start date for the course, if applicable  # noqa: E501

        :return: The start_at of this Course.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Course.

        the start date for the course, if applicable  # noqa: E501

        :param start_at: The start_at of this Course.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this Course.  # noqa: E501

        the end date for the course, if applicable  # noqa: E501

        :return: The end_at of this Course.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Course.

        the end date for the course, if applicable  # noqa: E501

        :param end_at: The end_at of this Course.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def locale(self):
        """Gets the locale of this Course.  # noqa: E501

        the course-set locale, if applicable  # noqa: E501

        :return: The locale of this Course.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Course.

        the course-set locale, if applicable  # noqa: E501

        :param locale: The locale of this Course.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def enrollments(self):
        """Gets the enrollments of this Course.  # noqa: E501

        A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores  # noqa: E501

        :return: The enrollments of this Course.  # noqa: E501
        :rtype: list[Enrollment]
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """Sets the enrollments of this Course.

        A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores  # noqa: E501

        :param enrollments: The enrollments of this Course.  # noqa: E501
        :type: list[Enrollment]
        """

        self._enrollments = enrollments

    @property
    def total_students(self):
        """Gets the total_students of this Course.  # noqa: E501

        optional: the total number of active and invited students in the course  # noqa: E501

        :return: The total_students of this Course.  # noqa: E501
        :rtype: int
        """
        return self._total_students

    @total_students.setter
    def total_students(self, total_students):
        """Sets the total_students of this Course.

        optional: the total number of active and invited students in the course  # noqa: E501

        :param total_students: The total_students of this Course.  # noqa: E501
        :type: int
        """

        self._total_students = total_students

    @property
    def calendar(self):
        """Gets the calendar of this Course.  # noqa: E501

        course calendar  # noqa: E501

        :return: The calendar of this Course.  # noqa: E501
        :rtype: CalendarLink
        """
        return self._calendar

    @calendar.setter
    def calendar(self, calendar):
        """Sets the calendar of this Course.

        course calendar  # noqa: E501

        :param calendar: The calendar of this Course.  # noqa: E501
        :type: CalendarLink
        """

        self._calendar = calendar

    @property
    def default_view(self):
        """Gets the default_view of this Course.  # noqa: E501

        the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future  # noqa: E501

        :return: The default_view of this Course.  # noqa: E501
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view):
        """Sets the default_view of this Course.

        the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future  # noqa: E501

        :param default_view: The default_view of this Course.  # noqa: E501
        :type: str
        """

        self._default_view = default_view

    @property
    def syllabus_body(self):
        """Gets the syllabus_body of this Course.  # noqa: E501

        optional: user-generated HTML for the course syllabus  # noqa: E501

        :return: The syllabus_body of this Course.  # noqa: E501
        :rtype: str
        """
        return self._syllabus_body

    @syllabus_body.setter
    def syllabus_body(self, syllabus_body):
        """Sets the syllabus_body of this Course.

        optional: user-generated HTML for the course syllabus  # noqa: E501

        :param syllabus_body: The syllabus_body of this Course.  # noqa: E501
        :type: str
        """

        self._syllabus_body = syllabus_body

    @property
    def needs_grading_count(self):
        """Gets the needs_grading_count of this Course.  # noqa: E501

        optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count  # noqa: E501

        :return: The needs_grading_count of this Course.  # noqa: E501
        :rtype: int
        """
        return self._needs_grading_count

    @needs_grading_count.setter
    def needs_grading_count(self, needs_grading_count):
        """Sets the needs_grading_count of this Course.

        optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count  # noqa: E501

        :param needs_grading_count: The needs_grading_count of this Course.  # noqa: E501
        :type: int
        """

        self._needs_grading_count = needs_grading_count

    @property
    def term(self):
        """Gets the term of this Course.  # noqa: E501

        optional: the enrollment term object for the course returned only if include[]=term  # noqa: E501

        :return: The term of this Course.  # noqa: E501
        :rtype: Term
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Course.

        optional: the enrollment term object for the course returned only if include[]=term  # noqa: E501

        :param term: The term of this Course.  # noqa: E501
        :type: Term
        """

        self._term = term

    @property
    def course_progress(self):
        """Gets the course_progress of this Course.  # noqa: E501

        optional: information on progress through the course returned only if include[]=course_progress  # noqa: E501

        :return: The course_progress of this Course.  # noqa: E501
        :rtype: CourseProgress
        """
        return self._course_progress

    @course_progress.setter
    def course_progress(self, course_progress):
        """Sets the course_progress of this Course.

        optional: information on progress through the course returned only if include[]=course_progress  # noqa: E501

        :param course_progress: The course_progress of this Course.  # noqa: E501
        :type: CourseProgress
        """

        self._course_progress = course_progress

    @property
    def apply_assignment_group_weights(self):
        """Gets the apply_assignment_group_weights of this Course.  # noqa: E501

        weight final grade based on assignment group percentages  # noqa: E501

        :return: The apply_assignment_group_weights of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._apply_assignment_group_weights

    @apply_assignment_group_weights.setter
    def apply_assignment_group_weights(self, apply_assignment_group_weights):
        """Sets the apply_assignment_group_weights of this Course.

        weight final grade based on assignment group percentages  # noqa: E501

        :param apply_assignment_group_weights: The apply_assignment_group_weights of this Course.  # noqa: E501
        :type: bool
        """

        self._apply_assignment_group_weights = apply_assignment_group_weights

    @property
    def permissions(self):
        """Gets the permissions of this Course.  # noqa: E501

        optional: the permissions the user has for the course. returned only for a single course and include[]=permissions  # noqa: E501

        :return: The permissions of this Course.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Course.

        optional: the permissions the user has for the course. returned only for a single course and include[]=permissions  # noqa: E501

        :param permissions: The permissions of this Course.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def is_public(self):
        """Gets the is_public of this Course.  # noqa: E501


        :return: The is_public of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this Course.


        :param is_public: The is_public of this Course.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_public_to_auth_users(self):
        """Gets the is_public_to_auth_users of this Course.  # noqa: E501


        :return: The is_public_to_auth_users of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._is_public_to_auth_users

    @is_public_to_auth_users.setter
    def is_public_to_auth_users(self, is_public_to_auth_users):
        """Sets the is_public_to_auth_users of this Course.


        :param is_public_to_auth_users: The is_public_to_auth_users of this Course.  # noqa: E501
        :type: bool
        """

        self._is_public_to_auth_users = is_public_to_auth_users

    @property
    def public_syllabus(self):
        """Gets the public_syllabus of this Course.  # noqa: E501


        :return: The public_syllabus of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._public_syllabus

    @public_syllabus.setter
    def public_syllabus(self, public_syllabus):
        """Sets the public_syllabus of this Course.


        :param public_syllabus: The public_syllabus of this Course.  # noqa: E501
        :type: bool
        """

        self._public_syllabus = public_syllabus

    @property
    def public_syllabus_to_auth(self):
        """Gets the public_syllabus_to_auth of this Course.  # noqa: E501


        :return: The public_syllabus_to_auth of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._public_syllabus_to_auth

    @public_syllabus_to_auth.setter
    def public_syllabus_to_auth(self, public_syllabus_to_auth):
        """Sets the public_syllabus_to_auth of this Course.


        :param public_syllabus_to_auth: The public_syllabus_to_auth of this Course.  # noqa: E501
        :type: bool
        """

        self._public_syllabus_to_auth = public_syllabus_to_auth

    @property
    def public_description(self):
        """Gets the public_description of this Course.  # noqa: E501

        optional: the public description of the course  # noqa: E501

        :return: The public_description of this Course.  # noqa: E501
        :rtype: str
        """
        return self._public_description

    @public_description.setter
    def public_description(self, public_description):
        """Sets the public_description of this Course.

        optional: the public description of the course  # noqa: E501

        :param public_description: The public_description of this Course.  # noqa: E501
        :type: str
        """

        self._public_description = public_description

    @property
    def storage_quota_mb(self):
        """Gets the storage_quota_mb of this Course.  # noqa: E501


        :return: The storage_quota_mb of this Course.  # noqa: E501
        :rtype: int
        """
        return self._storage_quota_mb

    @storage_quota_mb.setter
    def storage_quota_mb(self, storage_quota_mb):
        """Sets the storage_quota_mb of this Course.


        :param storage_quota_mb: The storage_quota_mb of this Course.  # noqa: E501
        :type: int
        """

        self._storage_quota_mb = storage_quota_mb

    @property
    def storage_quota_used_mb(self):
        """Gets the storage_quota_used_mb of this Course.  # noqa: E501


        :return: The storage_quota_used_mb of this Course.  # noqa: E501
        :rtype: float
        """
        return self._storage_quota_used_mb

    @storage_quota_used_mb.setter
    def storage_quota_used_mb(self, storage_quota_used_mb):
        """Sets the storage_quota_used_mb of this Course.


        :param storage_quota_used_mb: The storage_quota_used_mb of this Course.  # noqa: E501
        :type: float
        """

        self._storage_quota_used_mb = storage_quota_used_mb

    @property
    def hide_final_grades(self):
        """Gets the hide_final_grades of this Course.  # noqa: E501


        :return: The hide_final_grades of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._hide_final_grades

    @hide_final_grades.setter
    def hide_final_grades(self, hide_final_grades):
        """Sets the hide_final_grades of this Course.


        :param hide_final_grades: The hide_final_grades of this Course.  # noqa: E501
        :type: bool
        """

        self._hide_final_grades = hide_final_grades

    @property
    def license(self):
        """Gets the license of this Course.  # noqa: E501


        :return: The license of this Course.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Course.


        :param license: The license of this Course.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def allow_student_assignment_edits(self):
        """Gets the allow_student_assignment_edits of this Course.  # noqa: E501


        :return: The allow_student_assignment_edits of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._allow_student_assignment_edits

    @allow_student_assignment_edits.setter
    def allow_student_assignment_edits(self, allow_student_assignment_edits):
        """Sets the allow_student_assignment_edits of this Course.


        :param allow_student_assignment_edits: The allow_student_assignment_edits of this Course.  # noqa: E501
        :type: bool
        """

        self._allow_student_assignment_edits = allow_student_assignment_edits

    @property
    def allow_wiki_comments(self):
        """Gets the allow_wiki_comments of this Course.  # noqa: E501


        :return: The allow_wiki_comments of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._allow_wiki_comments

    @allow_wiki_comments.setter
    def allow_wiki_comments(self, allow_wiki_comments):
        """Sets the allow_wiki_comments of this Course.


        :param allow_wiki_comments: The allow_wiki_comments of this Course.  # noqa: E501
        :type: bool
        """

        self._allow_wiki_comments = allow_wiki_comments

    @property
    def allow_student_forum_attachments(self):
        """Gets the allow_student_forum_attachments of this Course.  # noqa: E501


        :return: The allow_student_forum_attachments of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._allow_student_forum_attachments

    @allow_student_forum_attachments.setter
    def allow_student_forum_attachments(self, allow_student_forum_attachments):
        """Sets the allow_student_forum_attachments of this Course.


        :param allow_student_forum_attachments: The allow_student_forum_attachments of this Course.  # noqa: E501
        :type: bool
        """

        self._allow_student_forum_attachments = allow_student_forum_attachments

    @property
    def open_enrollment(self):
        """Gets the open_enrollment of this Course.  # noqa: E501


        :return: The open_enrollment of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._open_enrollment

    @open_enrollment.setter
    def open_enrollment(self, open_enrollment):
        """Sets the open_enrollment of this Course.


        :param open_enrollment: The open_enrollment of this Course.  # noqa: E501
        :type: bool
        """

        self._open_enrollment = open_enrollment

    @property
    def self_enrollment(self):
        """Gets the self_enrollment of this Course.  # noqa: E501


        :return: The self_enrollment of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._self_enrollment

    @self_enrollment.setter
    def self_enrollment(self, self_enrollment):
        """Sets the self_enrollment of this Course.


        :param self_enrollment: The self_enrollment of this Course.  # noqa: E501
        :type: bool
        """

        self._self_enrollment = self_enrollment

    @property
    def restrict_enrollments_to_course_dates(self):
        """Gets the restrict_enrollments_to_course_dates of this Course.  # noqa: E501


        :return: The restrict_enrollments_to_course_dates of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_enrollments_to_course_dates

    @restrict_enrollments_to_course_dates.setter
    def restrict_enrollments_to_course_dates(self, restrict_enrollments_to_course_dates):
        """Sets the restrict_enrollments_to_course_dates of this Course.


        :param restrict_enrollments_to_course_dates: The restrict_enrollments_to_course_dates of this Course.  # noqa: E501
        :type: bool
        """

        self._restrict_enrollments_to_course_dates = restrict_enrollments_to_course_dates

    @property
    def course_format(self):
        """Gets the course_format of this Course.  # noqa: E501


        :return: The course_format of this Course.  # noqa: E501
        :rtype: str
        """
        return self._course_format

    @course_format.setter
    def course_format(self, course_format):
        """Sets the course_format of this Course.


        :param course_format: The course_format of this Course.  # noqa: E501
        :type: str
        """

        self._course_format = course_format

    @property
    def access_restricted_by_date(self):
        """Gets the access_restricted_by_date of this Course.  # noqa: E501

        optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings  # noqa: E501

        :return: The access_restricted_by_date of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._access_restricted_by_date

    @access_restricted_by_date.setter
    def access_restricted_by_date(self, access_restricted_by_date):
        """Sets the access_restricted_by_date of this Course.

        optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings  # noqa: E501

        :param access_restricted_by_date: The access_restricted_by_date of this Course.  # noqa: E501
        :type: bool
        """

        self._access_restricted_by_date = access_restricted_by_date

    @property
    def time_zone(self):
        """Gets the time_zone of this Course.  # noqa: E501

        The course's IANA time zone name.  # noqa: E501

        :return: The time_zone of this Course.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Course.

        The course's IANA time zone name.  # noqa: E501

        :param time_zone: The time_zone of this Course.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def blueprint(self):
        """Gets the blueprint of this Course.  # noqa: E501

        optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)  # noqa: E501

        :return: The blueprint of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._blueprint

    @blueprint.setter
    def blueprint(self, blueprint):
        """Sets the blueprint of this Course.

        optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)  # noqa: E501

        :param blueprint: The blueprint of this Course.  # noqa: E501
        :type: bool
        """

        self._blueprint = blueprint

    @property
    def blueprint_restrictions(self):
        """Gets the blueprint_restrictions of this Course.  # noqa: E501

        optional: Set of restrictions applied to all locked course objects  # noqa: E501

        :return: The blueprint_restrictions of this Course.  # noqa: E501
        :rtype: object
        """
        return self._blueprint_restrictions

    @blueprint_restrictions.setter
    def blueprint_restrictions(self, blueprint_restrictions):
        """Sets the blueprint_restrictions of this Course.

        optional: Set of restrictions applied to all locked course objects  # noqa: E501

        :param blueprint_restrictions: The blueprint_restrictions of this Course.  # noqa: E501
        :type: object
        """

        self._blueprint_restrictions = blueprint_restrictions

    @property
    def blueprint_restrictions_by_object_type(self):
        """Gets the blueprint_restrictions_by_object_type of this Course.  # noqa: E501

        optional: Sets of restrictions differentiated by object type applied to locked course objects  # noqa: E501

        :return: The blueprint_restrictions_by_object_type of this Course.  # noqa: E501
        :rtype: object
        """
        return self._blueprint_restrictions_by_object_type

    @blueprint_restrictions_by_object_type.setter
    def blueprint_restrictions_by_object_type(self, blueprint_restrictions_by_object_type):
        """Sets the blueprint_restrictions_by_object_type of this Course.

        optional: Sets of restrictions differentiated by object type applied to locked course objects  # noqa: E501

        :param blueprint_restrictions_by_object_type: The blueprint_restrictions_by_object_type of this Course.  # noqa: E501
        :type: object
        """

        self._blueprint_restrictions_by_object_type = blueprint_restrictions_by_object_type

    @property
    def template(self):
        """Gets the template of this Course.  # noqa: E501

        optional: whether the course is set as a template (requires the Course Templates feature)  # noqa: E501

        :return: The template of this Course.  # noqa: E501
        :rtype: bool
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this Course.

        optional: whether the course is set as a template (requires the Course Templates feature)  # noqa: E501

        :param template: The template of this Course.  # noqa: E501
        :type: bool
        """

        self._template = template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Course, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Course):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Course):
            return True

        return self.to_dict() != other.to_dict()
