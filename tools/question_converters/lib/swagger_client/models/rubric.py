# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Rubric(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'context_id': 'int',
        'context_type': 'str',
        'points_possible': 'int',
        'reusable': 'bool',
        'read_only': 'bool',
        'free_form_criterion_comments': 'bool',
        'hide_score_total': 'bool',
        'data': 'list[RubricCriterion]',
        'assessments': 'list[RubricAssessment]',
        'associations': 'list[RubricAssociation]'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'points_possible': 'points_possible',
        'reusable': 'reusable',
        'read_only': 'read_only',
        'free_form_criterion_comments': 'free_form_criterion_comments',
        'hide_score_total': 'hide_score_total',
        'data': 'data',
        'assessments': 'assessments',
        'associations': 'associations'
    }

    def __init__(self, id=None, title=None, context_id=None, context_type=None, points_possible=None, reusable=None, read_only=None, free_form_criterion_comments=None, hide_score_total=None, data=None, assessments=None, associations=None, _configuration=None):  # noqa: E501
        """Rubric - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._context_id = None
        self._context_type = None
        self._points_possible = None
        self._reusable = None
        self._read_only = None
        self._free_form_criterion_comments = None
        self._hide_score_total = None
        self._data = None
        self._assessments = None
        self._associations = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if points_possible is not None:
            self.points_possible = points_possible
        if reusable is not None:
            self.reusable = reusable
        if read_only is not None:
            self.read_only = read_only
        if free_form_criterion_comments is not None:
            self.free_form_criterion_comments = free_form_criterion_comments
        if hide_score_total is not None:
            self.hide_score_total = hide_score_total
        if data is not None:
            self.data = data
        if assessments is not None:
            self.assessments = assessments
        if associations is not None:
            self.associations = associations

    @property
    def id(self):
        """Gets the id of this Rubric.  # noqa: E501

        the ID of the rubric  # noqa: E501

        :return: The id of this Rubric.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rubric.

        the ID of the rubric  # noqa: E501

        :param id: The id of this Rubric.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this Rubric.  # noqa: E501

        title of the rubric  # noqa: E501

        :return: The title of this Rubric.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Rubric.

        title of the rubric  # noqa: E501

        :param title: The title of this Rubric.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def context_id(self):
        """Gets the context_id of this Rubric.  # noqa: E501

        the context owning the rubric  # noqa: E501

        :return: The context_id of this Rubric.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this Rubric.

        the context owning the rubric  # noqa: E501

        :param context_id: The context_id of this Rubric.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this Rubric.  # noqa: E501


        :return: The context_type of this Rubric.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this Rubric.


        :param context_type: The context_type of this Rubric.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def points_possible(self):
        """Gets the points_possible of this Rubric.  # noqa: E501


        :return: The points_possible of this Rubric.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this Rubric.


        :param points_possible: The points_possible of this Rubric.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def reusable(self):
        """Gets the reusable of this Rubric.  # noqa: E501


        :return: The reusable of this Rubric.  # noqa: E501
        :rtype: bool
        """
        return self._reusable

    @reusable.setter
    def reusable(self, reusable):
        """Sets the reusable of this Rubric.


        :param reusable: The reusable of this Rubric.  # noqa: E501
        :type: bool
        """

        self._reusable = reusable

    @property
    def read_only(self):
        """Gets the read_only of this Rubric.  # noqa: E501


        :return: The read_only of this Rubric.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this Rubric.


        :param read_only: The read_only of this Rubric.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def free_form_criterion_comments(self):
        """Gets the free_form_criterion_comments of this Rubric.  # noqa: E501

        whether or not free-form comments are used  # noqa: E501

        :return: The free_form_criterion_comments of this Rubric.  # noqa: E501
        :rtype: bool
        """
        return self._free_form_criterion_comments

    @free_form_criterion_comments.setter
    def free_form_criterion_comments(self, free_form_criterion_comments):
        """Sets the free_form_criterion_comments of this Rubric.

        whether or not free-form comments are used  # noqa: E501

        :param free_form_criterion_comments: The free_form_criterion_comments of this Rubric.  # noqa: E501
        :type: bool
        """

        self._free_form_criterion_comments = free_form_criterion_comments

    @property
    def hide_score_total(self):
        """Gets the hide_score_total of this Rubric.  # noqa: E501


        :return: The hide_score_total of this Rubric.  # noqa: E501
        :rtype: bool
        """
        return self._hide_score_total

    @hide_score_total.setter
    def hide_score_total(self, hide_score_total):
        """Sets the hide_score_total of this Rubric.


        :param hide_score_total: The hide_score_total of this Rubric.  # noqa: E501
        :type: bool
        """

        self._hide_score_total = hide_score_total

    @property
    def data(self):
        """Gets the data of this Rubric.  # noqa: E501

        An array with all of this Rubric's grading Criteria  # noqa: E501

        :return: The data of this Rubric.  # noqa: E501
        :rtype: list[RubricCriterion]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Rubric.

        An array with all of this Rubric's grading Criteria  # noqa: E501

        :param data: The data of this Rubric.  # noqa: E501
        :type: list[RubricCriterion]
        """

        self._data = data

    @property
    def assessments(self):
        """Gets the assessments of this Rubric.  # noqa: E501

        If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.  # noqa: E501

        :return: The assessments of this Rubric.  # noqa: E501
        :rtype: list[RubricAssessment]
        """
        return self._assessments

    @assessments.setter
    def assessments(self, assessments):
        """Sets the assessments of this Rubric.

        If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.  # noqa: E501

        :param assessments: The assessments of this Rubric.  # noqa: E501
        :type: list[RubricAssessment]
        """

        self._assessments = assessments

    @property
    def associations(self):
        """Gets the associations of this Rubric.  # noqa: E501

        If an association type is included in the 'include' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.  # noqa: E501

        :return: The associations of this Rubric.  # noqa: E501
        :rtype: list[RubricAssociation]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this Rubric.

        If an association type is included in the 'include' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.  # noqa: E501

        :param associations: The associations of this Rubric.  # noqa: E501
        :type: list[RubricAssociation]
        """

        self._associations = associations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rubric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rubric):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rubric):
            return True

        return self.to_dict() != other.to_dict()
