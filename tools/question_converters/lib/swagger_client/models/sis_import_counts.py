# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisImportCounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'int',
        'terms': 'int',
        'abstract_courses': 'int',
        'courses': 'int',
        'sections': 'int',
        'xlists': 'int',
        'users': 'int',
        'enrollments': 'int',
        'groups': 'int',
        'group_memberships': 'int',
        'grade_publishing_results': 'int',
        'batch_courses_deleted': 'int',
        'batch_sections_deleted': 'int',
        'batch_enrollments_deleted': 'int',
        'error_count': 'int',
        'warning_count': 'int'
    }

    attribute_map = {
        'accounts': 'accounts',
        'terms': 'terms',
        'abstract_courses': 'abstract_courses',
        'courses': 'courses',
        'sections': 'sections',
        'xlists': 'xlists',
        'users': 'users',
        'enrollments': 'enrollments',
        'groups': 'groups',
        'group_memberships': 'group_memberships',
        'grade_publishing_results': 'grade_publishing_results',
        'batch_courses_deleted': 'batch_courses_deleted',
        'batch_sections_deleted': 'batch_sections_deleted',
        'batch_enrollments_deleted': 'batch_enrollments_deleted',
        'error_count': 'error_count',
        'warning_count': 'warning_count'
    }

    def __init__(self, accounts=None, terms=None, abstract_courses=None, courses=None, sections=None, xlists=None, users=None, enrollments=None, groups=None, group_memberships=None, grade_publishing_results=None, batch_courses_deleted=None, batch_sections_deleted=None, batch_enrollments_deleted=None, error_count=None, warning_count=None, _configuration=None):  # noqa: E501
        """SisImportCounts - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._accounts = None
        self._terms = None
        self._abstract_courses = None
        self._courses = None
        self._sections = None
        self._xlists = None
        self._users = None
        self._enrollments = None
        self._groups = None
        self._group_memberships = None
        self._grade_publishing_results = None
        self._batch_courses_deleted = None
        self._batch_sections_deleted = None
        self._batch_enrollments_deleted = None
        self._error_count = None
        self._warning_count = None
        self.discriminator = None

        if accounts is not None:
            self.accounts = accounts
        if terms is not None:
            self.terms = terms
        if abstract_courses is not None:
            self.abstract_courses = abstract_courses
        if courses is not None:
            self.courses = courses
        if sections is not None:
            self.sections = sections
        if xlists is not None:
            self.xlists = xlists
        if users is not None:
            self.users = users
        if enrollments is not None:
            self.enrollments = enrollments
        if groups is not None:
            self.groups = groups
        if group_memberships is not None:
            self.group_memberships = group_memberships
        if grade_publishing_results is not None:
            self.grade_publishing_results = grade_publishing_results
        if batch_courses_deleted is not None:
            self.batch_courses_deleted = batch_courses_deleted
        if batch_sections_deleted is not None:
            self.batch_sections_deleted = batch_sections_deleted
        if batch_enrollments_deleted is not None:
            self.batch_enrollments_deleted = batch_enrollments_deleted
        if error_count is not None:
            self.error_count = error_count
        if warning_count is not None:
            self.warning_count = warning_count

    @property
    def accounts(self):
        """Gets the accounts of this SisImportCounts.  # noqa: E501


        :return: The accounts of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this SisImportCounts.


        :param accounts: The accounts of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._accounts = accounts

    @property
    def terms(self):
        """Gets the terms of this SisImportCounts.  # noqa: E501


        :return: The terms of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this SisImportCounts.


        :param terms: The terms of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._terms = terms

    @property
    def abstract_courses(self):
        """Gets the abstract_courses of this SisImportCounts.  # noqa: E501


        :return: The abstract_courses of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._abstract_courses

    @abstract_courses.setter
    def abstract_courses(self, abstract_courses):
        """Sets the abstract_courses of this SisImportCounts.


        :param abstract_courses: The abstract_courses of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._abstract_courses = abstract_courses

    @property
    def courses(self):
        """Gets the courses of this SisImportCounts.  # noqa: E501


        :return: The courses of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """Sets the courses of this SisImportCounts.


        :param courses: The courses of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._courses = courses

    @property
    def sections(self):
        """Gets the sections of this SisImportCounts.  # noqa: E501


        :return: The sections of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this SisImportCounts.


        :param sections: The sections of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._sections = sections

    @property
    def xlists(self):
        """Gets the xlists of this SisImportCounts.  # noqa: E501


        :return: The xlists of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._xlists

    @xlists.setter
    def xlists(self, xlists):
        """Sets the xlists of this SisImportCounts.


        :param xlists: The xlists of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._xlists = xlists

    @property
    def users(self):
        """Gets the users of this SisImportCounts.  # noqa: E501


        :return: The users of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this SisImportCounts.


        :param users: The users of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._users = users

    @property
    def enrollments(self):
        """Gets the enrollments of this SisImportCounts.  # noqa: E501


        :return: The enrollments of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """Sets the enrollments of this SisImportCounts.


        :param enrollments: The enrollments of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._enrollments = enrollments

    @property
    def groups(self):
        """Gets the groups of this SisImportCounts.  # noqa: E501


        :return: The groups of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this SisImportCounts.


        :param groups: The groups of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._groups = groups

    @property
    def group_memberships(self):
        """Gets the group_memberships of this SisImportCounts.  # noqa: E501


        :return: The group_memberships of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._group_memberships

    @group_memberships.setter
    def group_memberships(self, group_memberships):
        """Sets the group_memberships of this SisImportCounts.


        :param group_memberships: The group_memberships of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._group_memberships = group_memberships

    @property
    def grade_publishing_results(self):
        """Gets the grade_publishing_results of this SisImportCounts.  # noqa: E501


        :return: The grade_publishing_results of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._grade_publishing_results

    @grade_publishing_results.setter
    def grade_publishing_results(self, grade_publishing_results):
        """Sets the grade_publishing_results of this SisImportCounts.


        :param grade_publishing_results: The grade_publishing_results of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._grade_publishing_results = grade_publishing_results

    @property
    def batch_courses_deleted(self):
        """Gets the batch_courses_deleted of this SisImportCounts.  # noqa: E501

        the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted  # noqa: E501

        :return: The batch_courses_deleted of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._batch_courses_deleted

    @batch_courses_deleted.setter
    def batch_courses_deleted(self, batch_courses_deleted):
        """Sets the batch_courses_deleted of this SisImportCounts.

        the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted  # noqa: E501

        :param batch_courses_deleted: The batch_courses_deleted of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._batch_courses_deleted = batch_courses_deleted

    @property
    def batch_sections_deleted(self):
        """Gets the batch_sections_deleted of this SisImportCounts.  # noqa: E501

        the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted  # noqa: E501

        :return: The batch_sections_deleted of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._batch_sections_deleted

    @batch_sections_deleted.setter
    def batch_sections_deleted(self, batch_sections_deleted):
        """Sets the batch_sections_deleted of this SisImportCounts.

        the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted  # noqa: E501

        :param batch_sections_deleted: The batch_sections_deleted of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._batch_sections_deleted = batch_sections_deleted

    @property
    def batch_enrollments_deleted(self):
        """Gets the batch_enrollments_deleted of this SisImportCounts.  # noqa: E501

        the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted  # noqa: E501

        :return: The batch_enrollments_deleted of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._batch_enrollments_deleted

    @batch_enrollments_deleted.setter
    def batch_enrollments_deleted(self, batch_enrollments_deleted):
        """Sets the batch_enrollments_deleted of this SisImportCounts.

        the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted  # noqa: E501

        :param batch_enrollments_deleted: The batch_enrollments_deleted of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._batch_enrollments_deleted = batch_enrollments_deleted

    @property
    def error_count(self):
        """Gets the error_count of this SisImportCounts.  # noqa: E501


        :return: The error_count of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this SisImportCounts.


        :param error_count: The error_count of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def warning_count(self):
        """Gets the warning_count of this SisImportCounts.  # noqa: E501


        :return: The warning_count of this SisImportCounts.  # noqa: E501
        :rtype: int
        """
        return self._warning_count

    @warning_count.setter
    def warning_count(self, warning_count):
        """Sets the warning_count of this SisImportCounts.


        :param warning_count: The warning_count of this SisImportCounts.  # noqa: E501
        :type: int
        """

        self._warning_count = warning_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisImportCounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisImportCounts):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisImportCounts):
            return True

        return self.to_dict() != other.to_dict()
