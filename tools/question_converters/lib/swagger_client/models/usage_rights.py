# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UsageRights(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'legal_copyright': 'str',
        'use_justification': 'str',
        'license': 'str',
        'license_name': 'str',
        'message': 'str',
        'file_ids': 'list[int]'
    }

    attribute_map = {
        'legal_copyright': 'legal_copyright',
        'use_justification': 'use_justification',
        'license': 'license',
        'license_name': 'license_name',
        'message': 'message',
        'file_ids': 'file_ids'
    }

    def __init__(self, legal_copyright=None, use_justification=None, license=None, license_name=None, message=None, file_ids=None, _configuration=None):  # noqa: E501
        """UsageRights - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._legal_copyright = None
        self._use_justification = None
        self._license = None
        self._license_name = None
        self._message = None
        self._file_ids = None
        self.discriminator = None

        if legal_copyright is not None:
            self.legal_copyright = legal_copyright
        if use_justification is not None:
            self.use_justification = use_justification
        if license is not None:
            self.license = license
        if license_name is not None:
            self.license_name = license_name
        if message is not None:
            self.message = message
        if file_ids is not None:
            self.file_ids = file_ids

    @property
    def legal_copyright(self):
        """Gets the legal_copyright of this UsageRights.  # noqa: E501

        Copyright line for the file  # noqa: E501

        :return: The legal_copyright of this UsageRights.  # noqa: E501
        :rtype: str
        """
        return self._legal_copyright

    @legal_copyright.setter
    def legal_copyright(self, legal_copyright):
        """Sets the legal_copyright of this UsageRights.

        Copyright line for the file  # noqa: E501

        :param legal_copyright: The legal_copyright of this UsageRights.  # noqa: E501
        :type: str
        """

        self._legal_copyright = legal_copyright

    @property
    def use_justification(self):
        """Gets the use_justification of this UsageRights.  # noqa: E501

        Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'  # noqa: E501

        :return: The use_justification of this UsageRights.  # noqa: E501
        :rtype: str
        """
        return self._use_justification

    @use_justification.setter
    def use_justification(self, use_justification):
        """Sets the use_justification of this UsageRights.

        Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'  # noqa: E501

        :param use_justification: The use_justification of this UsageRights.  # noqa: E501
        :type: str
        """

        self._use_justification = use_justification

    @property
    def license(self):
        """Gets the license of this UsageRights.  # noqa: E501

        License identifier for the file.  # noqa: E501

        :return: The license of this UsageRights.  # noqa: E501
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this UsageRights.

        License identifier for the file.  # noqa: E501

        :param license: The license of this UsageRights.  # noqa: E501
        :type: str
        """

        self._license = license

    @property
    def license_name(self):
        """Gets the license_name of this UsageRights.  # noqa: E501

        Readable license name  # noqa: E501

        :return: The license_name of this UsageRights.  # noqa: E501
        :rtype: str
        """
        return self._license_name

    @license_name.setter
    def license_name(self, license_name):
        """Sets the license_name of this UsageRights.

        Readable license name  # noqa: E501

        :param license_name: The license_name of this UsageRights.  # noqa: E501
        :type: str
        """

        self._license_name = license_name

    @property
    def message(self):
        """Gets the message of this UsageRights.  # noqa: E501

        Explanation of the action performed  # noqa: E501

        :return: The message of this UsageRights.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UsageRights.

        Explanation of the action performed  # noqa: E501

        :param message: The message of this UsageRights.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def file_ids(self):
        """Gets the file_ids of this UsageRights.  # noqa: E501

        List of ids of files that were updated  # noqa: E501

        :return: The file_ids of this UsageRights.  # noqa: E501
        :rtype: list[int]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this UsageRights.

        List of ids of files that were updated  # noqa: E501

        :param file_ids: The file_ids of this UsageRights.  # noqa: E501
        :type: list[int]
        """

        self._file_ids = file_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsageRights, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageRights):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageRights):
            return True

        return self.to_dict() != other.to_dict()
