# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CommunicationChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'address': 'str',
        'type': 'str',
        'position': 'int',
        'user_id': 'int',
        'bounce_count': 'int',
        'last_bounce_at': 'ModelDatetime',
        'workflow_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'address': 'address',
        'type': 'type',
        'position': 'position',
        'user_id': 'user_id',
        'bounce_count': 'bounce_count',
        'last_bounce_at': 'last_bounce_at',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, id=None, address=None, type=None, position=None, user_id=None, bounce_count=None, last_bounce_at=None, workflow_state=None, _configuration=None):  # noqa: E501
        """CommunicationChannel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._address = None
        self._type = None
        self._position = None
        self._user_id = None
        self._bounce_count = None
        self._last_bounce_at = None
        self._workflow_state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if address is not None:
            self.address = address
        if type is not None:
            self.type = type
        if position is not None:
            self.position = position
        if user_id is not None:
            self.user_id = user_id
        if bounce_count is not None:
            self.bounce_count = bounce_count
        if last_bounce_at is not None:
            self.last_bounce_at = last_bounce_at
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def id(self):
        """Gets the id of this CommunicationChannel.  # noqa: E501

        The ID of the communication channel.  # noqa: E501

        :return: The id of this CommunicationChannel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommunicationChannel.

        The ID of the communication channel.  # noqa: E501

        :param id: The id of this CommunicationChannel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def address(self):
        """Gets the address of this CommunicationChannel.  # noqa: E501

        The address, or path, of the communication channel.  # noqa: E501

        :return: The address of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CommunicationChannel.

        The address, or path, of the communication channel.  # noqa: E501

        :param address: The address of this CommunicationChannel.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def type(self):
        """Gets the type of this CommunicationChannel.  # noqa: E501

        The type of communcation channel being described. Possible values are: 'email', 'push', 'sms', or 'twitter'. This field determines the type of value seen in 'address'.  # noqa: E501

        :return: The type of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunicationChannel.

        The type of communcation channel being described. Possible values are: 'email', 'push', 'sms', or 'twitter'. This field determines the type of value seen in 'address'.  # noqa: E501

        :param type: The type of this CommunicationChannel.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def position(self):
        """Gets the position of this CommunicationChannel.  # noqa: E501

        The position of this communication channel relative to the user's other channels when they are ordered.  # noqa: E501

        :return: The position of this CommunicationChannel.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this CommunicationChannel.

        The position of this communication channel relative to the user's other channels when they are ordered.  # noqa: E501

        :param position: The position of this CommunicationChannel.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def user_id(self):
        """Gets the user_id of this CommunicationChannel.  # noqa: E501

        The ID of the user that owns this communication channel.  # noqa: E501

        :return: The user_id of this CommunicationChannel.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CommunicationChannel.

        The ID of the user that owns this communication channel.  # noqa: E501

        :param user_id: The user_id of this CommunicationChannel.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def bounce_count(self):
        """Gets the bounce_count of this CommunicationChannel.  # noqa: E501

        The number of bounces the channel has experienced. This is reset if the channel sends successfully.  # noqa: E501

        :return: The bounce_count of this CommunicationChannel.  # noqa: E501
        :rtype: int
        """
        return self._bounce_count

    @bounce_count.setter
    def bounce_count(self, bounce_count):
        """Sets the bounce_count of this CommunicationChannel.

        The number of bounces the channel has experienced. This is reset if the channel sends successfully.  # noqa: E501

        :param bounce_count: The bounce_count of this CommunicationChannel.  # noqa: E501
        :type: int
        """

        self._bounce_count = bounce_count

    @property
    def last_bounce_at(self):
        """Gets the last_bounce_at of this CommunicationChannel.  # noqa: E501

        The time the last bounce occurred.  # noqa: E501

        :return: The last_bounce_at of this CommunicationChannel.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_bounce_at

    @last_bounce_at.setter
    def last_bounce_at(self, last_bounce_at):
        """Sets the last_bounce_at of this CommunicationChannel.

        The time the last bounce occurred.  # noqa: E501

        :param last_bounce_at: The last_bounce_at of this CommunicationChannel.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_bounce_at = last_bounce_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this CommunicationChannel.  # noqa: E501

        The current state of the communication channel. Possible values are: 'unconfirmed' or 'active'.  # noqa: E501

        :return: The workflow_state of this CommunicationChannel.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this CommunicationChannel.

        The current state of the communication channel. Possible values are: 'unconfirmed' or 'active'.  # noqa: E501

        :param workflow_state: The workflow_state of this CommunicationChannel.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommunicationChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunicationChannel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CommunicationChannel):
            return True

        return self.to_dict() != other.to_dict()
