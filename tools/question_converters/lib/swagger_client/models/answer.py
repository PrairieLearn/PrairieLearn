# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Answer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'answer_text': 'str',
        'answer_weight': 'int',
        'answer_comments': 'str',
        'text_after_answers': 'str',
        'answer_match_left': 'str',
        'answer_match_right': 'str',
        'matching_answer_incorrect_matches': 'str',
        'numerical_answer_type': 'str',
        'exact': 'int',
        'margin': 'int',
        'approximate': 'float',
        'precision': 'int',
        'start': 'int',
        'end': 'int',
        'blank_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'answer_text': 'answer_text',
        'answer_weight': 'answer_weight',
        'answer_comments': 'answer_comments',
        'text_after_answers': 'text_after_answers',
        'answer_match_left': 'answer_match_left',
        'answer_match_right': 'answer_match_right',
        'matching_answer_incorrect_matches': 'matching_answer_incorrect_matches',
        'numerical_answer_type': 'numerical_answer_type',
        'exact': 'exact',
        'margin': 'margin',
        'approximate': 'approximate',
        'precision': 'precision',
        'start': 'start',
        'end': 'end',
        'blank_id': 'blank_id'
    }

    def __init__(self, id=None, answer_text=None, answer_weight=None, answer_comments=None, text_after_answers=None, answer_match_left=None, answer_match_right=None, matching_answer_incorrect_matches=None, numerical_answer_type=None, exact=None, margin=None, approximate=None, precision=None, start=None, end=None, blank_id=None, _configuration=None):  # noqa: E501
        """Answer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._answer_text = None
        self._answer_weight = None
        self._answer_comments = None
        self._text_after_answers = None
        self._answer_match_left = None
        self._answer_match_right = None
        self._matching_answer_incorrect_matches = None
        self._numerical_answer_type = None
        self._exact = None
        self._margin = None
        self._approximate = None
        self._precision = None
        self._start = None
        self._end = None
        self._blank_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.answer_text = answer_text
        self.answer_weight = answer_weight
        if answer_comments is not None:
            self.answer_comments = answer_comments
        if text_after_answers is not None:
            self.text_after_answers = text_after_answers
        if answer_match_left is not None:
            self.answer_match_left = answer_match_left
        if answer_match_right is not None:
            self.answer_match_right = answer_match_right
        if matching_answer_incorrect_matches is not None:
            self.matching_answer_incorrect_matches = matching_answer_incorrect_matches
        if numerical_answer_type is not None:
            self.numerical_answer_type = numerical_answer_type
        if exact is not None:
            self.exact = exact
        if margin is not None:
            self.margin = margin
        if approximate is not None:
            self.approximate = approximate
        if precision is not None:
            self.precision = precision
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if blank_id is not None:
            self.blank_id = blank_id

    @property
    def id(self):
        """Gets the id of this Answer.  # noqa: E501

        The unique identifier for the answer.  Do not supply if this answer is part of a new question  # noqa: E501

        :return: The id of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Answer.

        The unique identifier for the answer.  Do not supply if this answer is part of a new question  # noqa: E501

        :param id: The id of this Answer.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def answer_text(self):
        """Gets the answer_text of this Answer.  # noqa: E501

        The text of the answer.  # noqa: E501

        :return: The answer_text of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._answer_text

    @answer_text.setter
    def answer_text(self, answer_text):
        """Sets the answer_text of this Answer.

        The text of the answer.  # noqa: E501

        :param answer_text: The answer_text of this Answer.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and answer_text is None:
            raise ValueError("Invalid value for `answer_text`, must not be `None`")  # noqa: E501

        self._answer_text = answer_text

    @property
    def answer_weight(self):
        """Gets the answer_weight of this Answer.  # noqa: E501

        An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be 100.  # noqa: E501

        :return: The answer_weight of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._answer_weight

    @answer_weight.setter
    def answer_weight(self, answer_weight):
        """Sets the answer_weight of this Answer.

        An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be 100.  # noqa: E501

        :param answer_weight: The answer_weight of this Answer.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and answer_weight is None:
            raise ValueError("Invalid value for `answer_weight`, must not be `None`")  # noqa: E501

        self._answer_weight = answer_weight

    @property
    def answer_comments(self):
        """Gets the answer_comments of this Answer.  # noqa: E501

        Specific contextual comments for a particular answer.  # noqa: E501

        :return: The answer_comments of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._answer_comments

    @answer_comments.setter
    def answer_comments(self, answer_comments):
        """Sets the answer_comments of this Answer.

        Specific contextual comments for a particular answer.  # noqa: E501

        :param answer_comments: The answer_comments of this Answer.  # noqa: E501
        :type: str
        """

        self._answer_comments = answer_comments

    @property
    def text_after_answers(self):
        """Gets the text_after_answers of this Answer.  # noqa: E501

        Used in missing word questions.  The text to follow the missing word  # noqa: E501

        :return: The text_after_answers of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._text_after_answers

    @text_after_answers.setter
    def text_after_answers(self, text_after_answers):
        """Sets the text_after_answers of this Answer.

        Used in missing word questions.  The text to follow the missing word  # noqa: E501

        :param text_after_answers: The text_after_answers of this Answer.  # noqa: E501
        :type: str
        """

        self._text_after_answers = text_after_answers

    @property
    def answer_match_left(self):
        """Gets the answer_match_left of this Answer.  # noqa: E501

        Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.  # noqa: E501

        :return: The answer_match_left of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._answer_match_left

    @answer_match_left.setter
    def answer_match_left(self, answer_match_left):
        """Sets the answer_match_left of this Answer.

        Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.  # noqa: E501

        :param answer_match_left: The answer_match_left of this Answer.  # noqa: E501
        :type: str
        """

        self._answer_match_left = answer_match_left

    @property
    def answer_match_right(self):
        """Gets the answer_match_right of this Answer.  # noqa: E501

        Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..  # noqa: E501

        :return: The answer_match_right of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._answer_match_right

    @answer_match_right.setter
    def answer_match_right(self, answer_match_right):
        """Sets the answer_match_right of this Answer.

        Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..  # noqa: E501

        :param answer_match_right: The answer_match_right of this Answer.  # noqa: E501
        :type: str
        """

        self._answer_match_right = answer_match_right

    @property
    def matching_answer_incorrect_matches(self):
        """Gets the matching_answer_incorrect_matches of this Answer.  # noqa: E501

        Used in matching questions. A list of distractors, delimited by new lines ( ) that will be seeded with all the answer_match_right values.  # noqa: E501

        :return: The matching_answer_incorrect_matches of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._matching_answer_incorrect_matches

    @matching_answer_incorrect_matches.setter
    def matching_answer_incorrect_matches(self, matching_answer_incorrect_matches):
        """Sets the matching_answer_incorrect_matches of this Answer.

        Used in matching questions. A list of distractors, delimited by new lines ( ) that will be seeded with all the answer_match_right values.  # noqa: E501

        :param matching_answer_incorrect_matches: The matching_answer_incorrect_matches of this Answer.  # noqa: E501
        :type: str
        """

        self._matching_answer_incorrect_matches = matching_answer_incorrect_matches

    @property
    def numerical_answer_type(self):
        """Gets the numerical_answer_type of this Answer.  # noqa: E501

        Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.  # noqa: E501

        :return: The numerical_answer_type of this Answer.  # noqa: E501
        :rtype: str
        """
        return self._numerical_answer_type

    @numerical_answer_type.setter
    def numerical_answer_type(self, numerical_answer_type):
        """Sets the numerical_answer_type of this Answer.

        Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.  # noqa: E501

        :param numerical_answer_type: The numerical_answer_type of this Answer.  # noqa: E501
        :type: str
        """

        self._numerical_answer_type = numerical_answer_type

    @property
    def exact(self):
        """Gets the exact of this Answer.  # noqa: E501

        Used in numerical questions of type 'exact_answer'.  The value the answer should equal.  # noqa: E501

        :return: The exact of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._exact

    @exact.setter
    def exact(self, exact):
        """Sets the exact of this Answer.

        Used in numerical questions of type 'exact_answer'.  The value the answer should equal.  # noqa: E501

        :param exact: The exact of this Answer.  # noqa: E501
        :type: int
        """

        self._exact = exact

    @property
    def margin(self):
        """Gets the margin of this Answer.  # noqa: E501

        Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.  # noqa: E501

        :return: The margin of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._margin

    @margin.setter
    def margin(self, margin):
        """Sets the margin of this Answer.

        Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.  # noqa: E501

        :param margin: The margin of this Answer.  # noqa: E501
        :type: int
        """

        self._margin = margin

    @property
    def approximate(self):
        """Gets the approximate of this Answer.  # noqa: E501

        Used in numerical questions of type 'precision_answer'.  The value the answer should equal.  # noqa: E501

        :return: The approximate of this Answer.  # noqa: E501
        :rtype: float
        """
        return self._approximate

    @approximate.setter
    def approximate(self, approximate):
        """Sets the approximate of this Answer.

        Used in numerical questions of type 'precision_answer'.  The value the answer should equal.  # noqa: E501

        :param approximate: The approximate of this Answer.  # noqa: E501
        :type: float
        """

        self._approximate = approximate

    @property
    def precision(self):
        """Gets the precision of this Answer.  # noqa: E501

        Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.  # noqa: E501

        :return: The precision of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this Answer.

        Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.  # noqa: E501

        :param precision: The precision of this Answer.  # noqa: E501
        :type: int
        """

        self._precision = precision

    @property
    def start(self):
        """Gets the start of this Answer.  # noqa: E501

        Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).  # noqa: E501

        :return: The start of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Answer.

        Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).  # noqa: E501

        :param start: The start of this Answer.  # noqa: E501
        :type: int
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this Answer.  # noqa: E501

        Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).  # noqa: E501

        :return: The end of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Answer.

        Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).  # noqa: E501

        :param end: The end of this Answer.  # noqa: E501
        :type: int
        """

        self._end = end

    @property
    def blank_id(self):
        """Gets the blank_id of this Answer.  # noqa: E501

        Used in fill in multiple blank and multiple dropdowns questions.  # noqa: E501

        :return: The blank_id of this Answer.  # noqa: E501
        :rtype: int
        """
        return self._blank_id

    @blank_id.setter
    def blank_id(self, blank_id):
        """Sets the blank_id of this Answer.

        Used in fill in multiple blank and multiple dropdowns questions.  # noqa: E501

        :param blank_id: The blank_id of this Answer.  # noqa: E501
        :type: int
        """

        self._blank_id = blank_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Answer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Answer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Answer):
            return True

        return self.to_dict() != other.to_dict()
