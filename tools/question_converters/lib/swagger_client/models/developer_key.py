# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DeveloperKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'is_lti_key': 'bool',
        'visible': 'bool',
        'account_name': 'str',
        'public_jwk': 'str',
        'vendor_code': 'str',
        'last_used_at': 'ModelDatetime',
        'access_token_count': 'float',
        'redirect_uris': 'str',
        'redirect_uri': 'str',
        'api_key': 'str',
        'notes': 'str',
        'name': 'str',
        'user_id': 'str',
        'created_at': 'ModelDatetime',
        'user_name': 'str',
        'email': 'str',
        'require_scopes': 'bool',
        'icon_url': 'str',
        'scopes': 'str',
        'workflow_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'is_lti_key': 'is_lti_key',
        'visible': 'visible',
        'account_name': 'account_name',
        'public_jwk': 'public_jwk',
        'vendor_code': 'vendor_code',
        'last_used_at': 'last_used_at',
        'access_token_count': 'access_token_count',
        'redirect_uris': 'redirect_uris',
        'redirect_uri': 'redirect_uri',
        'api_key': 'api_key',
        'notes': 'notes',
        'name': 'name',
        'user_id': 'user_id',
        'created_at': 'created_at',
        'user_name': 'user_name',
        'email': 'email',
        'require_scopes': 'require_scopes',
        'icon_url': 'icon_url',
        'scopes': 'scopes',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, id=None, is_lti_key=None, visible=None, account_name=None, public_jwk=None, vendor_code=None, last_used_at=None, access_token_count=None, redirect_uris=None, redirect_uri=None, api_key=None, notes=None, name=None, user_id=None, created_at=None, user_name=None, email=None, require_scopes=None, icon_url=None, scopes=None, workflow_state=None, _configuration=None):  # noqa: E501
        """DeveloperKey - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._is_lti_key = None
        self._visible = None
        self._account_name = None
        self._public_jwk = None
        self._vendor_code = None
        self._last_used_at = None
        self._access_token_count = None
        self._redirect_uris = None
        self._redirect_uri = None
        self._api_key = None
        self._notes = None
        self._name = None
        self._user_id = None
        self._created_at = None
        self._user_name = None
        self._email = None
        self._require_scopes = None
        self._icon_url = None
        self._scopes = None
        self._workflow_state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if is_lti_key is not None:
            self.is_lti_key = is_lti_key
        if visible is not None:
            self.visible = visible
        if account_name is not None:
            self.account_name = account_name
        if public_jwk is not None:
            self.public_jwk = public_jwk
        if vendor_code is not None:
            self.vendor_code = vendor_code
        if last_used_at is not None:
            self.last_used_at = last_used_at
        if access_token_count is not None:
            self.access_token_count = access_token_count
        if redirect_uris is not None:
            self.redirect_uris = redirect_uris
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if api_key is not None:
            self.api_key = api_key
        if notes is not None:
            self.notes = notes
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if created_at is not None:
            self.created_at = created_at
        if user_name is not None:
            self.user_name = user_name
        if email is not None:
            self.email = email
        if require_scopes is not None:
            self.require_scopes = require_scopes
        if icon_url is not None:
            self.icon_url = icon_url
        if scopes is not None:
            self.scopes = scopes
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def id(self):
        """Gets the id of this DeveloperKey.  # noqa: E501

        The ID should match the Developer Key ID in canvas  # noqa: E501

        :return: The id of this DeveloperKey.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeveloperKey.

        The ID should match the Developer Key ID in canvas  # noqa: E501

        :param id: The id of this DeveloperKey.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def is_lti_key(self):
        """Gets the is_lti_key of this DeveloperKey.  # noqa: E501

        true the tool is a lti key, null is not a lti key  # noqa: E501

        :return: The is_lti_key of this DeveloperKey.  # noqa: E501
        :rtype: bool
        """
        return self._is_lti_key

    @is_lti_key.setter
    def is_lti_key(self, is_lti_key):
        """Sets the is_lti_key of this DeveloperKey.

        true the tool is a lti key, null is not a lti key  # noqa: E501

        :param is_lti_key: The is_lti_key of this DeveloperKey.  # noqa: E501
        :type: bool
        """

        self._is_lti_key = is_lti_key

    @property
    def visible(self):
        """Gets the visible of this DeveloperKey.  # noqa: E501

        Controls if the tool is visable  # noqa: E501

        :return: The visible of this DeveloperKey.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this DeveloperKey.

        Controls if the tool is visable  # noqa: E501

        :param visible: The visible of this DeveloperKey.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def account_name(self):
        """Gets the account_name of this DeveloperKey.  # noqa: E501

        The name of the account associated with the tool  # noqa: E501

        :return: The account_name of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this DeveloperKey.

        The name of the account associated with the tool  # noqa: E501

        :param account_name: The account_name of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._account_name = account_name

    @property
    def public_jwk(self):
        """Gets the public_jwk of this DeveloperKey.  # noqa: E501

        The public key in jwk format  # noqa: E501

        :return: The public_jwk of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._public_jwk

    @public_jwk.setter
    def public_jwk(self, public_jwk):
        """Sets the public_jwk of this DeveloperKey.

        The public key in jwk format  # noqa: E501

        :param public_jwk: The public_jwk of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._public_jwk = public_jwk

    @property
    def vendor_code(self):
        """Gets the vendor_code of this DeveloperKey.  # noqa: E501

        The code of the vendor managing the tool  # noqa: E501

        :return: The vendor_code of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._vendor_code

    @vendor_code.setter
    def vendor_code(self, vendor_code):
        """Sets the vendor_code of this DeveloperKey.

        The code of the vendor managing the tool  # noqa: E501

        :param vendor_code: The vendor_code of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._vendor_code = vendor_code

    @property
    def last_used_at(self):
        """Gets the last_used_at of this DeveloperKey.  # noqa: E501

        The date and time the tool was last used  # noqa: E501

        :return: The last_used_at of this DeveloperKey.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_used_at

    @last_used_at.setter
    def last_used_at(self, last_used_at):
        """Sets the last_used_at of this DeveloperKey.

        The date and time the tool was last used  # noqa: E501

        :param last_used_at: The last_used_at of this DeveloperKey.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_used_at = last_used_at

    @property
    def access_token_count(self):
        """Gets the access_token_count of this DeveloperKey.  # noqa: E501

        The number of active access tokens associated with the tool  # noqa: E501

        :return: The access_token_count of this DeveloperKey.  # noqa: E501
        :rtype: float
        """
        return self._access_token_count

    @access_token_count.setter
    def access_token_count(self, access_token_count):
        """Sets the access_token_count of this DeveloperKey.

        The number of active access tokens associated with the tool  # noqa: E501

        :param access_token_count: The access_token_count of this DeveloperKey.  # noqa: E501
        :type: float
        """

        self._access_token_count = access_token_count

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this DeveloperKey.  # noqa: E501

        redirect uris description  # noqa: E501

        :return: The redirect_uris of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this DeveloperKey.

        redirect uris description  # noqa: E501

        :param redirect_uris: The redirect_uris of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._redirect_uris = redirect_uris

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this DeveloperKey.  # noqa: E501

        redirect uri description  # noqa: E501

        :return: The redirect_uri of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this DeveloperKey.

        redirect uri description  # noqa: E501

        :param redirect_uri: The redirect_uri of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def api_key(self):
        """Gets the api_key of this DeveloperKey.  # noqa: E501

        Api key for api access for the tool  # noqa: E501

        :return: The api_key of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this DeveloperKey.

        Api key for api access for the tool  # noqa: E501

        :param api_key: The api_key of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def notes(self):
        """Gets the notes of this DeveloperKey.  # noqa: E501

        Notes for use specifications for the tool  # noqa: E501

        :return: The notes of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DeveloperKey.

        Notes for use specifications for the tool  # noqa: E501

        :param notes: The notes of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def name(self):
        """Gets the name of this DeveloperKey.  # noqa: E501

        Display name of the tool  # noqa: E501

        :return: The name of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeveloperKey.

        Display name of the tool  # noqa: E501

        :param name: The name of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this DeveloperKey.  # noqa: E501

        ID of the user associated with the tool  # noqa: E501

        :return: The user_id of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DeveloperKey.

        ID of the user associated with the tool  # noqa: E501

        :param user_id: The user_id of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this DeveloperKey.  # noqa: E501

        The time the jwk was created  # noqa: E501

        :return: The created_at of this DeveloperKey.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeveloperKey.

        The time the jwk was created  # noqa: E501

        :param created_at: The created_at of this DeveloperKey.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def user_name(self):
        """Gets the user_name of this DeveloperKey.  # noqa: E501

        The user name of the tool creator  # noqa: E501

        :return: The user_name of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DeveloperKey.

        The user name of the tool creator  # noqa: E501

        :param user_name: The user_name of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def email(self):
        """Gets the email of this DeveloperKey.  # noqa: E501

        Email associated with the tool owner  # noqa: E501

        :return: The email of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DeveloperKey.

        Email associated with the tool owner  # noqa: E501

        :param email: The email of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def require_scopes(self):
        """Gets the require_scopes of this DeveloperKey.  # noqa: E501

        True if the tool has required permissions, null if there are no needed permissions  # noqa: E501

        :return: The require_scopes of this DeveloperKey.  # noqa: E501
        :rtype: bool
        """
        return self._require_scopes

    @require_scopes.setter
    def require_scopes(self, require_scopes):
        """Sets the require_scopes of this DeveloperKey.

        True if the tool has required permissions, null if there are no needed permissions  # noqa: E501

        :param require_scopes: The require_scopes of this DeveloperKey.  # noqa: E501
        :type: bool
        """

        self._require_scopes = require_scopes

    @property
    def icon_url(self):
        """Gets the icon_url of this DeveloperKey.  # noqa: E501

        Icon to be displayed with the name of the tool  # noqa: E501

        :return: The icon_url of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """Sets the icon_url of this DeveloperKey.

        Icon to be displayed with the name of the tool  # noqa: E501

        :param icon_url: The icon_url of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._icon_url = icon_url

    @property
    def scopes(self):
        """Gets the scopes of this DeveloperKey.  # noqa: E501

        Specified permissions for the tool  # noqa: E501

        :return: The scopes of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this DeveloperKey.

        Specified permissions for the tool  # noqa: E501

        :param scopes: The scopes of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._scopes = scopes

    @property
    def workflow_state(self):
        """Gets the workflow_state of this DeveloperKey.  # noqa: E501

        The current state of the tool  # noqa: E501

        :return: The workflow_state of this DeveloperKey.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this DeveloperKey.

        The current state of the tool  # noqa: E501

        :param workflow_state: The workflow_state of this DeveloperKey.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeveloperKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeveloperKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DeveloperKey):
            return True

        return self.to_dict() != other.to_dict()
