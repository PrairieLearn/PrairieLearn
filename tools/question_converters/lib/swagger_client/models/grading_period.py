# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GradingPeriod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'close_date': 'datetime',
        'weight': 'int',
        'is_closed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'close_date': 'close_date',
        'weight': 'weight',
        'is_closed': 'is_closed'
    }

    def __init__(self, id=None, title=None, start_date=None, end_date=None, close_date=None, weight=None, is_closed=None, _configuration=None):  # noqa: E501
        """GradingPeriod - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._start_date = None
        self._end_date = None
        self._close_date = None
        self._weight = None
        self._is_closed = None
        self.discriminator = None

        self.id = id
        if title is not None:
            self.title = title
        self.start_date = start_date
        self.end_date = end_date
        if close_date is not None:
            self.close_date = close_date
        if weight is not None:
            self.weight = weight
        if is_closed is not None:
            self.is_closed = is_closed

    @property
    def id(self):
        """Gets the id of this GradingPeriod.  # noqa: E501

        The unique identifier for the grading period.  # noqa: E501

        :return: The id of this GradingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GradingPeriod.

        The unique identifier for the grading period.  # noqa: E501

        :param id: The id of this GradingPeriod.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self):
        """Gets the title of this GradingPeriod.  # noqa: E501

        The title for the grading period.  # noqa: E501

        :return: The title of this GradingPeriod.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this GradingPeriod.

        The title for the grading period.  # noqa: E501

        :param title: The title of this GradingPeriod.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def start_date(self):
        """Gets the start_date of this GradingPeriod.  # noqa: E501

        The start date of the grading period.  # noqa: E501

        :return: The start_date of this GradingPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GradingPeriod.

        The start date of the grading period.  # noqa: E501

        :param start_date: The start_date of this GradingPeriod.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this GradingPeriod.  # noqa: E501

        The end date of the grading period.  # noqa: E501

        :return: The end_date of this GradingPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GradingPeriod.

        The end date of the grading period.  # noqa: E501

        :param end_date: The end_date of this GradingPeriod.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def close_date(self):
        """Gets the close_date of this GradingPeriod.  # noqa: E501

        Grades can only be changed before the close date of the grading period.  # noqa: E501

        :return: The close_date of this GradingPeriod.  # noqa: E501
        :rtype: datetime
        """
        return self._close_date

    @close_date.setter
    def close_date(self, close_date):
        """Sets the close_date of this GradingPeriod.

        Grades can only be changed before the close date of the grading period.  # noqa: E501

        :param close_date: The close_date of this GradingPeriod.  # noqa: E501
        :type: datetime
        """

        self._close_date = close_date

    @property
    def weight(self):
        """Gets the weight of this GradingPeriod.  # noqa: E501

        A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade  # noqa: E501

        :return: The weight of this GradingPeriod.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this GradingPeriod.

        A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade  # noqa: E501

        :param weight: The weight of this GradingPeriod.  # noqa: E501
        :type: int
        """

        self._weight = weight

    @property
    def is_closed(self):
        """Gets the is_closed of this GradingPeriod.  # noqa: E501

        If true, the grading period's close_date has passed.  # noqa: E501

        :return: The is_closed of this GradingPeriod.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this GradingPeriod.

        If true, the grading period's close_date has passed.  # noqa: E501

        :param is_closed: The is_closed of this GradingPeriod.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GradingPeriod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GradingPeriod):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GradingPeriod):
            return True

        return self.to_dict() != other.to_dict()
