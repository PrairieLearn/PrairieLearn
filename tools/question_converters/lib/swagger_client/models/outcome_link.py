# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'context_id': 'int',
        'context_type': 'str',
        'outcome_group': 'OutcomeGroup',
        'outcome': 'Outcome',
        'assessed': 'bool',
        'can_unlink': 'bool'
    }

    attribute_map = {
        'url': 'url',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'outcome_group': 'outcome_group',
        'outcome': 'outcome',
        'assessed': 'assessed',
        'can_unlink': 'can_unlink'
    }

    def __init__(self, url=None, context_id=None, context_type=None, outcome_group=None, outcome=None, assessed=None, can_unlink=None, _configuration=None):  # noqa: E501
        """OutcomeLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._context_id = None
        self._context_type = None
        self._outcome_group = None
        self._outcome = None
        self._assessed = None
        self._can_unlink = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if outcome_group is not None:
            self.outcome_group = outcome_group
        if outcome is not None:
            self.outcome = outcome
        if assessed is not None:
            self.assessed = assessed
        if can_unlink is not None:
            self.can_unlink = can_unlink

    @property
    def url(self):
        """Gets the url of this OutcomeLink.  # noqa: E501

        the URL for fetching/updating the outcome link. should be treated as opaque  # noqa: E501

        :return: The url of this OutcomeLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OutcomeLink.

        the URL for fetching/updating the outcome link. should be treated as opaque  # noqa: E501

        :param url: The url of this OutcomeLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def context_id(self):
        """Gets the context_id of this OutcomeLink.  # noqa: E501

        the context owning the outcome link. will match the context owning the outcome group containing the outcome link; included for convenience. may be null for links in global outcome groups.  # noqa: E501

        :return: The context_id of this OutcomeLink.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this OutcomeLink.

        the context owning the outcome link. will match the context owning the outcome group containing the outcome link; included for convenience. may be null for links in global outcome groups.  # noqa: E501

        :param context_id: The context_id of this OutcomeLink.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this OutcomeLink.  # noqa: E501


        :return: The context_type of this OutcomeLink.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this OutcomeLink.


        :param context_type: The context_type of this OutcomeLink.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def outcome_group(self):
        """Gets the outcome_group of this OutcomeLink.  # noqa: E501

        an abbreviated OutcomeGroup object representing the group containing the outcome link.  # noqa: E501

        :return: The outcome_group of this OutcomeLink.  # noqa: E501
        :rtype: OutcomeGroup
        """
        return self._outcome_group

    @outcome_group.setter
    def outcome_group(self, outcome_group):
        """Sets the outcome_group of this OutcomeLink.

        an abbreviated OutcomeGroup object representing the group containing the outcome link.  # noqa: E501

        :param outcome_group: The outcome_group of this OutcomeLink.  # noqa: E501
        :type: OutcomeGroup
        """

        self._outcome_group = outcome_group

    @property
    def outcome(self):
        """Gets the outcome of this OutcomeLink.  # noqa: E501

        an abbreviated Outcome object representing the outcome linked into the containing outcome group.  # noqa: E501

        :return: The outcome of this OutcomeLink.  # noqa: E501
        :rtype: Outcome
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this OutcomeLink.

        an abbreviated Outcome object representing the outcome linked into the containing outcome group.  # noqa: E501

        :param outcome: The outcome of this OutcomeLink.  # noqa: E501
        :type: Outcome
        """

        self._outcome = outcome

    @property
    def assessed(self):
        """Gets the assessed of this OutcomeLink.  # noqa: E501

        whether this outcome has been used to assess a student in the context of this outcome link.  In other words, this will be set to true if the context is a course, and a student has been assessed with this outcome in that course.  # noqa: E501

        :return: The assessed of this OutcomeLink.  # noqa: E501
        :rtype: bool
        """
        return self._assessed

    @assessed.setter
    def assessed(self, assessed):
        """Sets the assessed of this OutcomeLink.

        whether this outcome has been used to assess a student in the context of this outcome link.  In other words, this will be set to true if the context is a course, and a student has been assessed with this outcome in that course.  # noqa: E501

        :param assessed: The assessed of this OutcomeLink.  # noqa: E501
        :type: bool
        """

        self._assessed = assessed

    @property
    def can_unlink(self):
        """Gets the can_unlink of this OutcomeLink.  # noqa: E501

        whether this outcome link is manageable and is not the last link to an aligned outcome  # noqa: E501

        :return: The can_unlink of this OutcomeLink.  # noqa: E501
        :rtype: bool
        """
        return self._can_unlink

    @can_unlink.setter
    def can_unlink(self, can_unlink):
        """Sets the can_unlink of this OutcomeLink.

        whether this outcome link is manageable and is not the last link to an aligned outcome  # noqa: E501

        :param can_unlink: The can_unlink of this OutcomeLink.  # noqa: E501
        :type: bool
        """

        self._can_unlink = can_unlink

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeLink):
            return True

        return self.to_dict() != other.to_dict()
