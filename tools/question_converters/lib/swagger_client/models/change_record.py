# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ChangeRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_id': 'int',
        'asset_type': 'str',
        'asset_name': 'str',
        'change_type': 'str',
        'html_url': 'str',
        'locked': 'bool',
        'exceptions': 'list[object]'
    }

    attribute_map = {
        'asset_id': 'asset_id',
        'asset_type': 'asset_type',
        'asset_name': 'asset_name',
        'change_type': 'change_type',
        'html_url': 'html_url',
        'locked': 'locked',
        'exceptions': 'exceptions'
    }

    def __init__(self, asset_id=None, asset_type=None, asset_name=None, change_type=None, html_url=None, locked=None, exceptions=None, _configuration=None):  # noqa: E501
        """ChangeRecord - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_id = None
        self._asset_type = None
        self._asset_name = None
        self._change_type = None
        self._html_url = None
        self._locked = None
        self._exceptions = None
        self.discriminator = None

        if asset_id is not None:
            self.asset_id = asset_id
        if asset_type is not None:
            self.asset_type = asset_type
        if asset_name is not None:
            self.asset_name = asset_name
        if change_type is not None:
            self.change_type = change_type
        if html_url is not None:
            self.html_url = html_url
        if locked is not None:
            self.locked = locked
        if exceptions is not None:
            self.exceptions = exceptions

    @property
    def asset_id(self):
        """Gets the asset_id of this ChangeRecord.  # noqa: E501

        The ID of the learning object that was changed in the blueprint course.  # noqa: E501

        :return: The asset_id of this ChangeRecord.  # noqa: E501
        :rtype: int
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ChangeRecord.

        The ID of the learning object that was changed in the blueprint course.  # noqa: E501

        :param asset_id: The asset_id of this ChangeRecord.  # noqa: E501
        :type: int
        """

        self._asset_id = asset_id

    @property
    def asset_type(self):
        """Gets the asset_type of this ChangeRecord.  # noqa: E501

        The type of the learning object that was changed in the blueprint course.  One of 'assignment', 'attachment', 'discussion_topic', 'external_tool', 'quiz', 'wiki_page', 'syllabus', or 'settings'.  For 'syllabus' or 'settings', the asset_id is the course id.  # noqa: E501

        :return: The asset_type of this ChangeRecord.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this ChangeRecord.

        The type of the learning object that was changed in the blueprint course.  One of 'assignment', 'attachment', 'discussion_topic', 'external_tool', 'quiz', 'wiki_page', 'syllabus', or 'settings'.  For 'syllabus' or 'settings', the asset_id is the course id.  # noqa: E501

        :param asset_type: The asset_type of this ChangeRecord.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def asset_name(self):
        """Gets the asset_name of this ChangeRecord.  # noqa: E501

        The name of the learning object that was changed in the blueprint course.  # noqa: E501

        :return: The asset_name of this ChangeRecord.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this ChangeRecord.

        The name of the learning object that was changed in the blueprint course.  # noqa: E501

        :param asset_name: The asset_name of this ChangeRecord.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def change_type(self):
        """Gets the change_type of this ChangeRecord.  # noqa: E501

        The type of change; one of 'created', 'updated', 'deleted'  # noqa: E501

        :return: The change_type of this ChangeRecord.  # noqa: E501
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ChangeRecord.

        The type of change; one of 'created', 'updated', 'deleted'  # noqa: E501

        :param change_type: The change_type of this ChangeRecord.  # noqa: E501
        :type: str
        """

        self._change_type = change_type

    @property
    def html_url(self):
        """Gets the html_url of this ChangeRecord.  # noqa: E501

        The URL of the changed object  # noqa: E501

        :return: The html_url of this ChangeRecord.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this ChangeRecord.

        The URL of the changed object  # noqa: E501

        :param html_url: The html_url of this ChangeRecord.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def locked(self):
        """Gets the locked of this ChangeRecord.  # noqa: E501

        Whether the object is locked in the blueprint  # noqa: E501

        :return: The locked of this ChangeRecord.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this ChangeRecord.

        Whether the object is locked in the blueprint  # noqa: E501

        :param locked: The locked of this ChangeRecord.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def exceptions(self):
        """Gets the exceptions of this ChangeRecord.  # noqa: E501

        A list of ExceptionRecords for linked courses that did not receive this update.  # noqa: E501

        :return: The exceptions of this ChangeRecord.  # noqa: E501
        :rtype: list[object]
        """
        return self._exceptions

    @exceptions.setter
    def exceptions(self, exceptions):
        """Sets the exceptions of this ChangeRecord.

        A list of ExceptionRecords for linked courses that did not receive this update.  # noqa: E501

        :param exceptions: The exceptions of this ChangeRecord.  # noqa: E501
        :type: list[object]
        """

        self._exceptions = exceptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChangeRecord):
            return True

        return self.to_dict() != other.to_dict()
