# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BlueprintMigration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'template_id': 'int',
        'subscription_id': 'int',
        'user_id': 'int',
        'workflow_state': 'str',
        'created_at': 'ModelDatetime',
        'exports_started_at': 'ModelDatetime',
        'imports_queued_at': 'ModelDatetime',
        'imports_completed_at': 'ModelDatetime',
        'comment': 'str'
    }

    attribute_map = {
        'id': 'id',
        'template_id': 'template_id',
        'subscription_id': 'subscription_id',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state',
        'created_at': 'created_at',
        'exports_started_at': 'exports_started_at',
        'imports_queued_at': 'imports_queued_at',
        'imports_completed_at': 'imports_completed_at',
        'comment': 'comment'
    }

    def __init__(self, id=None, template_id=None, subscription_id=None, user_id=None, workflow_state=None, created_at=None, exports_started_at=None, imports_queued_at=None, imports_completed_at=None, comment=None, _configuration=None):  # noqa: E501
        """BlueprintMigration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._template_id = None
        self._subscription_id = None
        self._user_id = None
        self._workflow_state = None
        self._created_at = None
        self._exports_started_at = None
        self._imports_queued_at = None
        self._imports_completed_at = None
        self._comment = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if template_id is not None:
            self.template_id = template_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if created_at is not None:
            self.created_at = created_at
        if exports_started_at is not None:
            self.exports_started_at = exports_started_at
        if imports_queued_at is not None:
            self.imports_queued_at = imports_queued_at
        if imports_completed_at is not None:
            self.imports_completed_at = imports_completed_at
        if comment is not None:
            self.comment = comment

    @property
    def id(self):
        """Gets the id of this BlueprintMigration.  # noqa: E501

        The ID of the migration.  # noqa: E501

        :return: The id of this BlueprintMigration.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BlueprintMigration.

        The ID of the migration.  # noqa: E501

        :param id: The id of this BlueprintMigration.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def template_id(self):
        """Gets the template_id of this BlueprintMigration.  # noqa: E501

        The ID of the template the migration belongs to. Only present when querying a blueprint course.  # noqa: E501

        :return: The template_id of this BlueprintMigration.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this BlueprintMigration.

        The ID of the template the migration belongs to. Only present when querying a blueprint course.  # noqa: E501

        :param template_id: The template_id of this BlueprintMigration.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this BlueprintMigration.  # noqa: E501

        The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.  # noqa: E501

        :return: The subscription_id of this BlueprintMigration.  # noqa: E501
        :rtype: int
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this BlueprintMigration.

        The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.  # noqa: E501

        :param subscription_id: The subscription_id of this BlueprintMigration.  # noqa: E501
        :type: int
        """

        self._subscription_id = subscription_id

    @property
    def user_id(self):
        """Gets the user_id of this BlueprintMigration.  # noqa: E501

        The ID of the user who queued the migration.  # noqa: E501

        :return: The user_id of this BlueprintMigration.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BlueprintMigration.

        The ID of the user who queued the migration.  # noqa: E501

        :param user_id: The user_id of this BlueprintMigration.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this BlueprintMigration.  # noqa: E501

        Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed  # noqa: E501

        :return: The workflow_state of this BlueprintMigration.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this BlueprintMigration.

        Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed  # noqa: E501

        :param workflow_state: The workflow_state of this BlueprintMigration.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def created_at(self):
        """Gets the created_at of this BlueprintMigration.  # noqa: E501

        Time when the migration was queued  # noqa: E501

        :return: The created_at of this BlueprintMigration.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BlueprintMigration.

        Time when the migration was queued  # noqa: E501

        :param created_at: The created_at of this BlueprintMigration.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def exports_started_at(self):
        """Gets the exports_started_at of this BlueprintMigration.  # noqa: E501

        Time when the exports begun  # noqa: E501

        :return: The exports_started_at of this BlueprintMigration.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._exports_started_at

    @exports_started_at.setter
    def exports_started_at(self, exports_started_at):
        """Sets the exports_started_at of this BlueprintMigration.

        Time when the exports begun  # noqa: E501

        :param exports_started_at: The exports_started_at of this BlueprintMigration.  # noqa: E501
        :type: ModelDatetime
        """

        self._exports_started_at = exports_started_at

    @property
    def imports_queued_at(self):
        """Gets the imports_queued_at of this BlueprintMigration.  # noqa: E501

        Time when the exports were completed and imports were queued  # noqa: E501

        :return: The imports_queued_at of this BlueprintMigration.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._imports_queued_at

    @imports_queued_at.setter
    def imports_queued_at(self, imports_queued_at):
        """Sets the imports_queued_at of this BlueprintMigration.

        Time when the exports were completed and imports were queued  # noqa: E501

        :param imports_queued_at: The imports_queued_at of this BlueprintMigration.  # noqa: E501
        :type: ModelDatetime
        """

        self._imports_queued_at = imports_queued_at

    @property
    def imports_completed_at(self):
        """Gets the imports_completed_at of this BlueprintMigration.  # noqa: E501

        Time when the imports were completed  # noqa: E501

        :return: The imports_completed_at of this BlueprintMigration.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._imports_completed_at

    @imports_completed_at.setter
    def imports_completed_at(self, imports_completed_at):
        """Sets the imports_completed_at of this BlueprintMigration.

        Time when the imports were completed  # noqa: E501

        :param imports_completed_at: The imports_completed_at of this BlueprintMigration.  # noqa: E501
        :type: ModelDatetime
        """

        self._imports_completed_at = imports_completed_at

    @property
    def comment(self):
        """Gets the comment of this BlueprintMigration.  # noqa: E501

        User-specified comment describing changes made in this operation  # noqa: E501

        :return: The comment of this BlueprintMigration.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this BlueprintMigration.

        User-specified comment describing changes made in this operation  # noqa: E501

        :param comment: The comment of this BlueprintMigration.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlueprintMigration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlueprintMigration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BlueprintMigration):
            return True

        return self.to_dict() != other.to_dict()
