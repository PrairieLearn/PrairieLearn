# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ResultViewSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'result_view_restricted': 'bool',
        'display_points_awarded': 'bool',
        'display_points_possible': 'bool',
        'display_items': 'bool',
        'display_item_response': 'bool',
        'display_item_response_correctness': 'bool',
        'display_item_correct_answer': 'bool',
        'display_item_feedback': 'bool'
    }

    attribute_map = {
        'result_view_restricted': 'result_view_restricted',
        'display_points_awarded': 'display_points_awarded',
        'display_points_possible': 'display_points_possible',
        'display_items': 'display_items',
        'display_item_response': 'display_item_response',
        'display_item_response_correctness': 'display_item_response_correctness',
        'display_item_correct_answer': 'display_item_correct_answer',
        'display_item_feedback': 'display_item_feedback'
    }

    def __init__(self, result_view_restricted=None, display_points_awarded=None, display_points_possible=None, display_items=None, display_item_response=None, display_item_response_correctness=None, display_item_correct_answer=None, display_item_feedback=None, _configuration=None):  # noqa: E501
        """ResultViewSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._result_view_restricted = None
        self._display_points_awarded = None
        self._display_points_possible = None
        self._display_items = None
        self._display_item_response = None
        self._display_item_response_correctness = None
        self._display_item_correct_answer = None
        self._display_item_feedback = None
        self.discriminator = None

        if result_view_restricted is not None:
            self.result_view_restricted = result_view_restricted
        if display_points_awarded is not None:
            self.display_points_awarded = display_points_awarded
        if display_points_possible is not None:
            self.display_points_possible = display_points_possible
        if display_items is not None:
            self.display_items = display_items
        if display_item_response is not None:
            self.display_item_response = display_item_response
        if display_item_response_correctness is not None:
            self.display_item_response_correctness = display_item_response_correctness
        if display_item_correct_answer is not None:
            self.display_item_correct_answer = display_item_correct_answer
        if display_item_feedback is not None:
            self.display_item_feedback = display_item_feedback

    @property
    def result_view_restricted(self):
        """Gets the result_view_restricted of this ResultViewSettings.  # noqa: E501

        whether to restrict the student result view  # noqa: E501

        :return: The result_view_restricted of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._result_view_restricted

    @result_view_restricted.setter
    def result_view_restricted(self, result_view_restricted):
        """Sets the result_view_restricted of this ResultViewSettings.

        whether to restrict the student result view  # noqa: E501

        :param result_view_restricted: The result_view_restricted of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._result_view_restricted = result_view_restricted

    @property
    def display_points_awarded(self):
        """Gets the display_points_awarded of this ResultViewSettings.  # noqa: E501

        whether to show points awarded (overall and per question), if 'result_view_restricted' is true  # noqa: E501

        :return: The display_points_awarded of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_points_awarded

    @display_points_awarded.setter
    def display_points_awarded(self, display_points_awarded):
        """Sets the display_points_awarded of this ResultViewSettings.

        whether to show points awarded (overall and per question), if 'result_view_restricted' is true  # noqa: E501

        :param display_points_awarded: The display_points_awarded of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_points_awarded = display_points_awarded

    @property
    def display_points_possible(self):
        """Gets the display_points_possible of this ResultViewSettings.  # noqa: E501

        whether to show points possible (overall and per question), if 'result_view_restricted' is true  # noqa: E501

        :return: The display_points_possible of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_points_possible

    @display_points_possible.setter
    def display_points_possible(self, display_points_possible):
        """Sets the display_points_possible of this ResultViewSettings.

        whether to show points possible (overall and per question), if 'result_view_restricted' is true  # noqa: E501

        :param display_points_possible: The display_points_possible of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_points_possible = display_points_possible

    @property
    def display_items(self):
        """Gets the display_items of this ResultViewSettings.  # noqa: E501

        whether to show questions in the result view, if 'result_view_restricted' is true  # noqa: E501

        :return: The display_items of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_items

    @display_items.setter
    def display_items(self, display_items):
        """Sets the display_items of this ResultViewSettings.

        whether to show questions in the result view, if 'result_view_restricted' is true  # noqa: E501

        :param display_items: The display_items of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_items = display_items

    @property
    def display_item_response(self):
        """Gets the display_item_response of this ResultViewSettings.  # noqa: E501

        whether to show student's responses in the result view, if 'display_items' is true  # noqa: E501

        :return: The display_item_response of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_item_response

    @display_item_response.setter
    def display_item_response(self, display_item_response):
        """Sets the display_item_response of this ResultViewSettings.

        whether to show student's responses in the result view, if 'display_items' is true  # noqa: E501

        :param display_item_response: The display_item_response of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_item_response = display_item_response

    @property
    def display_item_response_correctness(self):
        """Gets the display_item_response_correctness of this ResultViewSettings.  # noqa: E501

        whether to indicate whether the student's response is correct/incorrect, if 'display_item_response' is true  # noqa: E501

        :return: The display_item_response_correctness of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_item_response_correctness

    @display_item_response_correctness.setter
    def display_item_response_correctness(self, display_item_response_correctness):
        """Sets the display_item_response_correctness of this ResultViewSettings.

        whether to indicate whether the student's response is correct/incorrect, if 'display_item_response' is true  # noqa: E501

        :param display_item_response_correctness: The display_item_response_correctness of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_item_response_correctness = display_item_response_correctness

    @property
    def display_item_correct_answer(self):
        """Gets the display_item_correct_answer of this ResultViewSettings.  # noqa: E501

        whether to show the correct answer for each question, if 'display_item_response_correctness' is true  # noqa: E501

        :return: The display_item_correct_answer of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_item_correct_answer

    @display_item_correct_answer.setter
    def display_item_correct_answer(self, display_item_correct_answer):
        """Sets the display_item_correct_answer of this ResultViewSettings.

        whether to show the correct answer for each question, if 'display_item_response_correctness' is true  # noqa: E501

        :param display_item_correct_answer: The display_item_correct_answer of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_item_correct_answer = display_item_correct_answer

    @property
    def display_item_feedback(self):
        """Gets the display_item_feedback of this ResultViewSettings.  # noqa: E501

        whether to show feedback for each item, if 'display_items' is true  # noqa: E501

        :return: The display_item_feedback of this ResultViewSettings.  # noqa: E501
        :rtype: bool
        """
        return self._display_item_feedback

    @display_item_feedback.setter
    def display_item_feedback(self, display_item_feedback):
        """Sets the display_item_feedback of this ResultViewSettings.

        whether to show feedback for each item, if 'display_items' is true  # noqa: E501

        :param display_item_feedback: The display_item_feedback of this ResultViewSettings.  # noqa: E501
        :type: bool
        """

        self._display_item_feedback = display_item_feedback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResultViewSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResultViewSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResultViewSettings):
            return True

        return self.to_dict() != other.to_dict()
