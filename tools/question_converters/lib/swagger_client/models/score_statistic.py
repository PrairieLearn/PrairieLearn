# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ScoreStatistic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min': 'int',
        'max': 'int',
        'mean': 'int',
        'upper_q': 'int',
        'median': 'int',
        'lower_q': 'int'
    }

    attribute_map = {
        'min': 'min',
        'max': 'max',
        'mean': 'mean',
        'upper_q': 'upper_q',
        'median': 'median',
        'lower_q': 'lower_q'
    }

    def __init__(self, min=None, max=None, mean=None, upper_q=None, median=None, lower_q=None, _configuration=None):  # noqa: E501
        """ScoreStatistic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._min = None
        self._max = None
        self._mean = None
        self._upper_q = None
        self._median = None
        self._lower_q = None
        self.discriminator = None

        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if mean is not None:
            self.mean = mean
        if upper_q is not None:
            self.upper_q = upper_q
        if median is not None:
            self.median = median
        if lower_q is not None:
            self.lower_q = lower_q

    @property
    def min(self):
        """Gets the min of this ScoreStatistic.  # noqa: E501

        Min score  # noqa: E501

        :return: The min of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this ScoreStatistic.

        Min score  # noqa: E501

        :param min: The min of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this ScoreStatistic.  # noqa: E501

        Max score  # noqa: E501

        :return: The max of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this ScoreStatistic.

        Max score  # noqa: E501

        :param max: The max of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._max = max

    @property
    def mean(self):
        """Gets the mean of this ScoreStatistic.  # noqa: E501

        Mean score  # noqa: E501

        :return: The mean of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this ScoreStatistic.

        Mean score  # noqa: E501

        :param mean: The mean of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._mean = mean

    @property
    def upper_q(self):
        """Gets the upper_q of this ScoreStatistic.  # noqa: E501

        Upper quartile score  # noqa: E501

        :return: The upper_q of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._upper_q

    @upper_q.setter
    def upper_q(self, upper_q):
        """Sets the upper_q of this ScoreStatistic.

        Upper quartile score  # noqa: E501

        :param upper_q: The upper_q of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._upper_q = upper_q

    @property
    def median(self):
        """Gets the median of this ScoreStatistic.  # noqa: E501

        Median score  # noqa: E501

        :return: The median of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this ScoreStatistic.

        Median score  # noqa: E501

        :param median: The median of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._median = median

    @property
    def lower_q(self):
        """Gets the lower_q of this ScoreStatistic.  # noqa: E501

        Lower quartile score  # noqa: E501

        :return: The lower_q of this ScoreStatistic.  # noqa: E501
        :rtype: int
        """
        return self._lower_q

    @lower_q.setter
    def lower_q(self, lower_q):
        """Sets the lower_q of this ScoreStatistic.

        Lower quartile score  # noqa: E501

        :param lower_q: The lower_q of this ScoreStatistic.  # noqa: E501
        :type: int
        """

        self._lower_q = lower_q

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScoreStatistic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScoreStatistic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScoreStatistic):
            return True

        return self.to_dict() != other.to_dict()
