# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'course_id': 'int',
        'name': 'str',
        'created_at': 'ModelDatetime',
        'due_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'points_possible': 'int',
        'submission_types': 'list[str]',
        'integration_id': 'str',
        'integration_data': 'str',
        'include_in_final_grade': 'bool',
        'assignment_group': 'list[AssignmentGroupAttributes]',
        'sections': 'list[SectionAttributes]',
        'user_overrides': 'list[UserAssignmentOverrideAttributes]'
    }

    attribute_map = {
        'id': 'id',
        'course_id': 'course_id',
        'name': 'name',
        'created_at': 'created_at',
        'due_at': 'due_at',
        'unlock_at': 'unlock_at',
        'lock_at': 'lock_at',
        'points_possible': 'points_possible',
        'submission_types': 'submission_types',
        'integration_id': 'integration_id',
        'integration_data': 'integration_data',
        'include_in_final_grade': 'include_in_final_grade',
        'assignment_group': 'assignment_group',
        'sections': 'sections',
        'user_overrides': 'user_overrides'
    }

    def __init__(self, id=None, course_id=None, name=None, created_at=None, due_at=None, unlock_at=None, lock_at=None, points_possible=None, submission_types=None, integration_id=None, integration_data=None, include_in_final_grade=None, assignment_group=None, sections=None, user_overrides=None, _configuration=None):  # noqa: E501
        """SisAssignment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._course_id = None
        self._name = None
        self._created_at = None
        self._due_at = None
        self._unlock_at = None
        self._lock_at = None
        self._points_possible = None
        self._submission_types = None
        self._integration_id = None
        self._integration_data = None
        self._include_in_final_grade = None
        self._assignment_group = None
        self._sections = None
        self._user_overrides = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if course_id is not None:
            self.course_id = course_id
        if name is not None:
            self.name = name
        if created_at is not None:
            self.created_at = created_at
        if due_at is not None:
            self.due_at = due_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if lock_at is not None:
            self.lock_at = lock_at
        if points_possible is not None:
            self.points_possible = points_possible
        if submission_types is not None:
            self.submission_types = submission_types
        if integration_id is not None:
            self.integration_id = integration_id
        if integration_data is not None:
            self.integration_data = integration_data
        if include_in_final_grade is not None:
            self.include_in_final_grade = include_in_final_grade
        if assignment_group is not None:
            self.assignment_group = assignment_group
        if sections is not None:
            self.sections = sections
        if user_overrides is not None:
            self.user_overrides = user_overrides

    @property
    def id(self):
        """Gets the id of this SisAssignment.  # noqa: E501

        The unique identifier for the assignment.  # noqa: E501

        :return: The id of this SisAssignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SisAssignment.

        The unique identifier for the assignment.  # noqa: E501

        :param id: The id of this SisAssignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def course_id(self):
        """Gets the course_id of this SisAssignment.  # noqa: E501

        The unique identifier for the course.  # noqa: E501

        :return: The course_id of this SisAssignment.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this SisAssignment.

        The unique identifier for the course.  # noqa: E501

        :param course_id: The course_id of this SisAssignment.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def name(self):
        """Gets the name of this SisAssignment.  # noqa: E501

        the name of the assignment  # noqa: E501

        :return: The name of this SisAssignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SisAssignment.

        the name of the assignment  # noqa: E501

        :param name: The name of this SisAssignment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def created_at(self):
        """Gets the created_at of this SisAssignment.  # noqa: E501

        The time at which this assignment was originally created  # noqa: E501

        :return: The created_at of this SisAssignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SisAssignment.

        The time at which this assignment was originally created  # noqa: E501

        :param created_at: The created_at of this SisAssignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def due_at(self):
        """Gets the due_at of this SisAssignment.  # noqa: E501

        the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.  # noqa: E501

        :return: The due_at of this SisAssignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this SisAssignment.

        the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.  # noqa: E501

        :param due_at: The due_at of this SisAssignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this SisAssignment.  # noqa: E501

        (Optional) Time at which this was/will be unlocked.  # noqa: E501

        :return: The unlock_at of this SisAssignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this SisAssignment.

        (Optional) Time at which this was/will be unlocked.  # noqa: E501

        :param unlock_at: The unlock_at of this SisAssignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """Gets the lock_at of this SisAssignment.  # noqa: E501

        (Optional) Time at which this was/will be locked.  # noqa: E501

        :return: The lock_at of this SisAssignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this SisAssignment.

        (Optional) Time at which this was/will be locked.  # noqa: E501

        :param lock_at: The lock_at of this SisAssignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def points_possible(self):
        """Gets the points_possible of this SisAssignment.  # noqa: E501

        The maximum points possible for the assignment  # noqa: E501

        :return: The points_possible of this SisAssignment.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this SisAssignment.

        The maximum points possible for the assignment  # noqa: E501

        :param points_possible: The points_possible of this SisAssignment.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def submission_types(self):
        """Gets the submission_types of this SisAssignment.  # noqa: E501

        the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'  # noqa: E501

        :return: The submission_types of this SisAssignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._submission_types

    @submission_types.setter
    def submission_types(self, submission_types):
        """Sets the submission_types of this SisAssignment.

        the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'  # noqa: E501

        :param submission_types: The submission_types of this SisAssignment.  # noqa: E501
        :type: list[str]
        """

        self._submission_types = submission_types

    @property
    def integration_id(self):
        """Gets the integration_id of this SisAssignment.  # noqa: E501

        Third Party integration id for assignment  # noqa: E501

        :return: The integration_id of this SisAssignment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this SisAssignment.

        Third Party integration id for assignment  # noqa: E501

        :param integration_id: The integration_id of this SisAssignment.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def integration_data(self):
        """Gets the integration_data of this SisAssignment.  # noqa: E501

        (optional, Third Party integration data for assignment)  # noqa: E501

        :return: The integration_data of this SisAssignment.  # noqa: E501
        :rtype: str
        """
        return self._integration_data

    @integration_data.setter
    def integration_data(self, integration_data):
        """Sets the integration_data of this SisAssignment.

        (optional, Third Party integration data for assignment)  # noqa: E501

        :param integration_data: The integration_data of this SisAssignment.  # noqa: E501
        :type: str
        """

        self._integration_data = integration_data

    @property
    def include_in_final_grade(self):
        """Gets the include_in_final_grade of this SisAssignment.  # noqa: E501

        If false, the assignment will be omitted from the student's final grade  # noqa: E501

        :return: The include_in_final_grade of this SisAssignment.  # noqa: E501
        :rtype: bool
        """
        return self._include_in_final_grade

    @include_in_final_grade.setter
    def include_in_final_grade(self, include_in_final_grade):
        """Sets the include_in_final_grade of this SisAssignment.

        If false, the assignment will be omitted from the student's final grade  # noqa: E501

        :param include_in_final_grade: The include_in_final_grade of this SisAssignment.  # noqa: E501
        :type: bool
        """

        self._include_in_final_grade = include_in_final_grade

    @property
    def assignment_group(self):
        """Gets the assignment_group of this SisAssignment.  # noqa: E501

        Includes attributes of a assignment_group for convenience. For more details see Assignments API.  # noqa: E501

        :return: The assignment_group of this SisAssignment.  # noqa: E501
        :rtype: list[AssignmentGroupAttributes]
        """
        return self._assignment_group

    @assignment_group.setter
    def assignment_group(self, assignment_group):
        """Sets the assignment_group of this SisAssignment.

        Includes attributes of a assignment_group for convenience. For more details see Assignments API.  # noqa: E501

        :param assignment_group: The assignment_group of this SisAssignment.  # noqa: E501
        :type: list[AssignmentGroupAttributes]
        """

        self._assignment_group = assignment_group

    @property
    def sections(self):
        """Gets the sections of this SisAssignment.  # noqa: E501

        Includes attributes of a section for convenience. For more details see Sections API.  # noqa: E501

        :return: The sections of this SisAssignment.  # noqa: E501
        :rtype: list[SectionAttributes]
        """
        return self._sections

    @sections.setter
    def sections(self, sections):
        """Sets the sections of this SisAssignment.

        Includes attributes of a section for convenience. For more details see Sections API.  # noqa: E501

        :param sections: The sections of this SisAssignment.  # noqa: E501
        :type: list[SectionAttributes]
        """

        self._sections = sections

    @property
    def user_overrides(self):
        """Gets the user_overrides of this SisAssignment.  # noqa: E501

        Includes attributes of a user assignment overrides. For more details see Assignments API.  # noqa: E501

        :return: The user_overrides of this SisAssignment.  # noqa: E501
        :rtype: list[UserAssignmentOverrideAttributes]
        """
        return self._user_overrides

    @user_overrides.setter
    def user_overrides(self, user_overrides):
        """Sets the user_overrides of this SisAssignment.

        Includes attributes of a user assignment overrides. For more details see Assignments API.  # noqa: E501

        :param user_overrides: The user_overrides of this SisAssignment.  # noqa: E501
        :type: list[UserAssignmentOverrideAttributes]
        """

        self._user_overrides = user_overrides

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisAssignment):
            return True

        return self.to_dict() != other.to_dict()
