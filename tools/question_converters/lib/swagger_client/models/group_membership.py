# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class GroupMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'group_id': 'int',
        'user_id': 'int',
        'workflow_state': 'str',
        'moderator': 'bool',
        'just_created': 'bool',
        'sis_import_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'group_id': 'group_id',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state',
        'moderator': 'moderator',
        'just_created': 'just_created',
        'sis_import_id': 'sis_import_id'
    }

    def __init__(self, id=None, group_id=None, user_id=None, workflow_state=None, moderator=None, just_created=None, sis_import_id=None, _configuration=None):  # noqa: E501
        """GroupMembership - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._group_id = None
        self._user_id = None
        self._workflow_state = None
        self._moderator = None
        self._just_created = None
        self._sis_import_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if group_id is not None:
            self.group_id = group_id
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if moderator is not None:
            self.moderator = moderator
        if just_created is not None:
            self.just_created = just_created
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id

    @property
    def id(self):
        """Gets the id of this GroupMembership.  # noqa: E501

        The id of the membership object  # noqa: E501

        :return: The id of this GroupMembership.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupMembership.

        The id of the membership object  # noqa: E501

        :param id: The id of this GroupMembership.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this GroupMembership.  # noqa: E501

        The id of the group object to which the membership belongs  # noqa: E501

        :return: The group_id of this GroupMembership.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this GroupMembership.

        The id of the group object to which the membership belongs  # noqa: E501

        :param group_id: The group_id of this GroupMembership.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def user_id(self):
        """Gets the user_id of this GroupMembership.  # noqa: E501

        The id of the user object to which the membership belongs  # noqa: E501

        :return: The user_id of this GroupMembership.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this GroupMembership.

        The id of the user object to which the membership belongs  # noqa: E501

        :param user_id: The user_id of this GroupMembership.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this GroupMembership.  # noqa: E501

        The current state of the membership. Current possible values are 'accepted', 'invited', and 'requested'  # noqa: E501

        :return: The workflow_state of this GroupMembership.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this GroupMembership.

        The current state of the membership. Current possible values are 'accepted', 'invited', and 'requested'  # noqa: E501

        :param workflow_state: The workflow_state of this GroupMembership.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def moderator(self):
        """Gets the moderator of this GroupMembership.  # noqa: E501

        Whether or not the user is a moderator of the group (the must also be an active member of the group to moderate)  # noqa: E501

        :return: The moderator of this GroupMembership.  # noqa: E501
        :rtype: bool
        """
        return self._moderator

    @moderator.setter
    def moderator(self, moderator):
        """Sets the moderator of this GroupMembership.

        Whether or not the user is a moderator of the group (the must also be an active member of the group to moderate)  # noqa: E501

        :param moderator: The moderator of this GroupMembership.  # noqa: E501
        :type: bool
        """

        self._moderator = moderator

    @property
    def just_created(self):
        """Gets the just_created of this GroupMembership.  # noqa: E501

        optional: whether or not the record was just created on a create call (POST), i.e. was the user just added to the group, or was the user already a member  # noqa: E501

        :return: The just_created of this GroupMembership.  # noqa: E501
        :rtype: bool
        """
        return self._just_created

    @just_created.setter
    def just_created(self, just_created):
        """Sets the just_created of this GroupMembership.

        optional: whether or not the record was just created on a create call (POST), i.e. was the user just added to the group, or was the user already a member  # noqa: E501

        :param just_created: The just_created of this GroupMembership.  # noqa: E501
        :type: bool
        """

        self._just_created = just_created

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this GroupMembership.  # noqa: E501

        The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this GroupMembership.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this GroupMembership.

        The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this GroupMembership.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupMembership):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GroupMembership):
            return True

        return self.to_dict() != other.to_dict()
