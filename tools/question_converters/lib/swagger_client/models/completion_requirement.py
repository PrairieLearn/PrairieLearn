# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CompletionRequirement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'min_score': 'int',
        'completed': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'min_score': 'min_score',
        'completed': 'completed'
    }

    def __init__(self, type=None, min_score=None, completed=None, _configuration=None):  # noqa: E501
        """CompletionRequirement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._min_score = None
        self._completed = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if min_score is not None:
            self.min_score = min_score
        if completed is not None:
            self.completed = completed

    @property
    def type(self):
        """Gets the type of this CompletionRequirement.  # noqa: E501

        one of 'must_view', 'must_submit', 'must_contribute', 'min_score', 'must_mark_done'  # noqa: E501

        :return: The type of this CompletionRequirement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompletionRequirement.

        one of 'must_view', 'must_submit', 'must_contribute', 'min_score', 'must_mark_done'  # noqa: E501

        :param type: The type of this CompletionRequirement.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def min_score(self):
        """Gets the min_score of this CompletionRequirement.  # noqa: E501

        minimum score required to complete (only present when type == 'min_score')  # noqa: E501

        :return: The min_score of this CompletionRequirement.  # noqa: E501
        :rtype: int
        """
        return self._min_score

    @min_score.setter
    def min_score(self, min_score):
        """Sets the min_score of this CompletionRequirement.

        minimum score required to complete (only present when type == 'min_score')  # noqa: E501

        :param min_score: The min_score of this CompletionRequirement.  # noqa: E501
        :type: int
        """

        self._min_score = min_score

    @property
    def completed(self):
        """Gets the completed of this CompletionRequirement.  # noqa: E501

        whether the calling user has met this requirement (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :return: The completed of this CompletionRequirement.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this CompletionRequirement.

        whether the calling user has met this requirement (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)  # noqa: E501

        :param completed: The completed of this CompletionRequirement.  # noqa: E501
        :type: bool
        """

        self._completed = completed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompletionRequirement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompletionRequirement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompletionRequirement):
            return True

        return self.to_dict() != other.to_dict()
