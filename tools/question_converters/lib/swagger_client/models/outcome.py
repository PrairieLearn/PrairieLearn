# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Outcome(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'url': 'str',
        'context_id': 'int',
        'context_type': 'str',
        'title': 'str',
        'display_name': 'str',
        'description': 'str',
        'vendor_guid': 'str',
        'points_possible': 'int',
        'mastery_points': 'int',
        'calculation_method': 'str',
        'calculation_int': 'int',
        'ratings': 'list[RubricRating]',
        'can_edit': 'bool',
        'can_unlink': 'bool',
        'assessed': 'bool',
        'has_updateable_rubrics': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'title': 'title',
        'display_name': 'display_name',
        'description': 'description',
        'vendor_guid': 'vendor_guid',
        'points_possible': 'points_possible',
        'mastery_points': 'mastery_points',
        'calculation_method': 'calculation_method',
        'calculation_int': 'calculation_int',
        'ratings': 'ratings',
        'can_edit': 'can_edit',
        'can_unlink': 'can_unlink',
        'assessed': 'assessed',
        'has_updateable_rubrics': 'has_updateable_rubrics'
    }

    def __init__(self, id=None, url=None, context_id=None, context_type=None, title=None, display_name=None, description=None, vendor_guid=None, points_possible=None, mastery_points=None, calculation_method=None, calculation_int=None, ratings=None, can_edit=None, can_unlink=None, assessed=None, has_updateable_rubrics=None, _configuration=None):  # noqa: E501
        """Outcome - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._url = None
        self._context_id = None
        self._context_type = None
        self._title = None
        self._display_name = None
        self._description = None
        self._vendor_guid = None
        self._points_possible = None
        self._mastery_points = None
        self._calculation_method = None
        self._calculation_int = None
        self._ratings = None
        self._can_edit = None
        self._can_unlink = None
        self._assessed = None
        self._has_updateable_rubrics = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if url is not None:
            self.url = url
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if title is not None:
            self.title = title
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if vendor_guid is not None:
            self.vendor_guid = vendor_guid
        if points_possible is not None:
            self.points_possible = points_possible
        if mastery_points is not None:
            self.mastery_points = mastery_points
        if calculation_method is not None:
            self.calculation_method = calculation_method
        if calculation_int is not None:
            self.calculation_int = calculation_int
        if ratings is not None:
            self.ratings = ratings
        if can_edit is not None:
            self.can_edit = can_edit
        if can_unlink is not None:
            self.can_unlink = can_unlink
        if assessed is not None:
            self.assessed = assessed
        if has_updateable_rubrics is not None:
            self.has_updateable_rubrics = has_updateable_rubrics

    @property
    def id(self):
        """Gets the id of this Outcome.  # noqa: E501

        the ID of the outcome  # noqa: E501

        :return: The id of this Outcome.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Outcome.

        the ID of the outcome  # noqa: E501

        :param id: The id of this Outcome.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def url(self):
        """Gets the url of this Outcome.  # noqa: E501

        the URL for fetching/updating the outcome. should be treated as opaque  # noqa: E501

        :return: The url of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Outcome.

        the URL for fetching/updating the outcome. should be treated as opaque  # noqa: E501

        :param url: The url of this Outcome.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def context_id(self):
        """Gets the context_id of this Outcome.  # noqa: E501

        the context owning the outcome. may be null for global outcomes  # noqa: E501

        :return: The context_id of this Outcome.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this Outcome.

        the context owning the outcome. may be null for global outcomes  # noqa: E501

        :param context_id: The context_id of this Outcome.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this Outcome.  # noqa: E501


        :return: The context_type of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this Outcome.


        :param context_type: The context_type of this Outcome.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def title(self):
        """Gets the title of this Outcome.  # noqa: E501

        title of the outcome  # noqa: E501

        :return: The title of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Outcome.

        title of the outcome  # noqa: E501

        :param title: The title of this Outcome.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def display_name(self):
        """Gets the display_name of this Outcome.  # noqa: E501

        Optional friendly name for reporting  # noqa: E501

        :return: The display_name of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Outcome.

        Optional friendly name for reporting  # noqa: E501

        :param display_name: The display_name of this Outcome.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this Outcome.  # noqa: E501

        description of the outcome. omitted in the abbreviated form.  # noqa: E501

        :return: The description of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Outcome.

        description of the outcome. omitted in the abbreviated form.  # noqa: E501

        :param description: The description of this Outcome.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def vendor_guid(self):
        """Gets the vendor_guid of this Outcome.  # noqa: E501

        A custom GUID for the learning standard.  # noqa: E501

        :return: The vendor_guid of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._vendor_guid

    @vendor_guid.setter
    def vendor_guid(self, vendor_guid):
        """Sets the vendor_guid of this Outcome.

        A custom GUID for the learning standard.  # noqa: E501

        :param vendor_guid: The vendor_guid of this Outcome.  # noqa: E501
        :type: str
        """

        self._vendor_guid = vendor_guid

    @property
    def points_possible(self):
        """Gets the points_possible of this Outcome.  # noqa: E501

        maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :return: The points_possible of this Outcome.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this Outcome.

        maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :param points_possible: The points_possible of this Outcome.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def mastery_points(self):
        """Gets the mastery_points of this Outcome.  # noqa: E501

        points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :return: The mastery_points of this Outcome.  # noqa: E501
        :rtype: int
        """
        return self._mastery_points

    @mastery_points.setter
    def mastery_points(self, mastery_points):
        """Sets the mastery_points of this Outcome.

        points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :param mastery_points: The mastery_points of this Outcome.  # noqa: E501
        :type: int
        """

        self._mastery_points = mastery_points

    @property
    def calculation_method(self):
        """Gets the calculation_method of this Outcome.  # noqa: E501

        the method used to calculate a students score  # noqa: E501

        :return: The calculation_method of this Outcome.  # noqa: E501
        :rtype: str
        """
        return self._calculation_method

    @calculation_method.setter
    def calculation_method(self, calculation_method):
        """Sets the calculation_method of this Outcome.

        the method used to calculate a students score  # noqa: E501

        :param calculation_method: The calculation_method of this Outcome.  # noqa: E501
        :type: str
        """

        self._calculation_method = calculation_method

    @property
    def calculation_int(self):
        """Gets the calculation_int of this Outcome.  # noqa: E501

        this defines the variable value used by the calculation_method. included only if calculation_method uses it  # noqa: E501

        :return: The calculation_int of this Outcome.  # noqa: E501
        :rtype: int
        """
        return self._calculation_int

    @calculation_int.setter
    def calculation_int(self, calculation_int):
        """Sets the calculation_int of this Outcome.

        this defines the variable value used by the calculation_method. included only if calculation_method uses it  # noqa: E501

        :param calculation_int: The calculation_int of this Outcome.  # noqa: E501
        :type: int
        """

        self._calculation_int = calculation_int

    @property
    def ratings(self):
        """Gets the ratings of this Outcome.  # noqa: E501

        possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :return: The ratings of this Outcome.  # noqa: E501
        :rtype: list[RubricRating]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this Outcome.

        possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.  # noqa: E501

        :param ratings: The ratings of this Outcome.  # noqa: E501
        :type: list[RubricRating]
        """

        self._ratings = ratings

    @property
    def can_edit(self):
        """Gets the can_edit of this Outcome.  # noqa: E501

        whether the current user can update the outcome  # noqa: E501

        :return: The can_edit of this Outcome.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit

    @can_edit.setter
    def can_edit(self, can_edit):
        """Sets the can_edit of this Outcome.

        whether the current user can update the outcome  # noqa: E501

        :param can_edit: The can_edit of this Outcome.  # noqa: E501
        :type: bool
        """

        self._can_edit = can_edit

    @property
    def can_unlink(self):
        """Gets the can_unlink of this Outcome.  # noqa: E501

        whether the outcome can be unlinked  # noqa: E501

        :return: The can_unlink of this Outcome.  # noqa: E501
        :rtype: bool
        """
        return self._can_unlink

    @can_unlink.setter
    def can_unlink(self, can_unlink):
        """Sets the can_unlink of this Outcome.

        whether the outcome can be unlinked  # noqa: E501

        :param can_unlink: The can_unlink of this Outcome.  # noqa: E501
        :type: bool
        """

        self._can_unlink = can_unlink

    @property
    def assessed(self):
        """Gets the assessed of this Outcome.  # noqa: E501

        whether this outcome has been used to assess a student  # noqa: E501

        :return: The assessed of this Outcome.  # noqa: E501
        :rtype: bool
        """
        return self._assessed

    @assessed.setter
    def assessed(self, assessed):
        """Sets the assessed of this Outcome.

        whether this outcome has been used to assess a student  # noqa: E501

        :param assessed: The assessed of this Outcome.  # noqa: E501
        :type: bool
        """

        self._assessed = assessed

    @property
    def has_updateable_rubrics(self):
        """Gets the has_updateable_rubrics of this Outcome.  # noqa: E501

        whether updates to this outcome will propagate to unassessed rubrics that have imported it  # noqa: E501

        :return: The has_updateable_rubrics of this Outcome.  # noqa: E501
        :rtype: bool
        """
        return self._has_updateable_rubrics

    @has_updateable_rubrics.setter
    def has_updateable_rubrics(self, has_updateable_rubrics):
        """Sets the has_updateable_rubrics of this Outcome.

        whether updates to this outcome will propagate to unassessed rubrics that have imported it  # noqa: E501

        :param has_updateable_rubrics: The has_updateable_rubrics of this Outcome.  # noqa: E501
        :type: bool
        """

        self._has_updateable_rubrics = has_updateable_rubrics

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Outcome, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Outcome):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Outcome):
            return True

        return self.to_dict() != other.to_dict()
