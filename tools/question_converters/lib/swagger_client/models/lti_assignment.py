# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LtiAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'points_possible': 'int',
        'due_at': 'ModelDatetime',
        'lti_id': 'str',
        'course_id': 'int',
        'lti_course_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'points_possible': 'points_possible',
        'due_at': 'due_at',
        'lti_id': 'lti_id',
        'course_id': 'course_id',
        'lti_course_id': 'lti_course_id'
    }

    def __init__(self, id=None, name=None, description=None, points_possible=None, due_at=None, lti_id=None, course_id=None, lti_course_id=None, _configuration=None):  # noqa: E501
        """LtiAssignment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._points_possible = None
        self._due_at = None
        self._lti_id = None
        self._course_id = None
        self._lti_course_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if points_possible is not None:
            self.points_possible = points_possible
        if due_at is not None:
            self.due_at = due_at
        if lti_id is not None:
            self.lti_id = lti_id
        if course_id is not None:
            self.course_id = course_id
        if lti_course_id is not None:
            self.lti_course_id = lti_course_id

    @property
    def id(self):
        """Gets the id of this LtiAssignment.  # noqa: E501


        :return: The id of this LtiAssignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LtiAssignment.


        :param id: The id of this LtiAssignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this LtiAssignment.  # noqa: E501


        :return: The name of this LtiAssignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LtiAssignment.


        :param name: The name of this LtiAssignment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this LtiAssignment.  # noqa: E501


        :return: The description of this LtiAssignment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LtiAssignment.


        :param description: The description of this LtiAssignment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def points_possible(self):
        """Gets the points_possible of this LtiAssignment.  # noqa: E501


        :return: The points_possible of this LtiAssignment.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this LtiAssignment.


        :param points_possible: The points_possible of this LtiAssignment.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def due_at(self):
        """Gets the due_at of this LtiAssignment.  # noqa: E501

        The due date for the assignment. If a user id is supplied and an assignment override is in place this field will reflect the due date as it applies to the user.  # noqa: E501

        :return: The due_at of this LtiAssignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this LtiAssignment.

        The due date for the assignment. If a user id is supplied and an assignment override is in place this field will reflect the due date as it applies to the user.  # noqa: E501

        :param due_at: The due_at of this LtiAssignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def lti_id(self):
        """Gets the lti_id of this LtiAssignment.  # noqa: E501


        :return: The lti_id of this LtiAssignment.  # noqa: E501
        :rtype: str
        """
        return self._lti_id

    @lti_id.setter
    def lti_id(self, lti_id):
        """Sets the lti_id of this LtiAssignment.


        :param lti_id: The lti_id of this LtiAssignment.  # noqa: E501
        :type: str
        """

        self._lti_id = lti_id

    @property
    def course_id(self):
        """Gets the course_id of this LtiAssignment.  # noqa: E501


        :return: The course_id of this LtiAssignment.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this LtiAssignment.


        :param course_id: The course_id of this LtiAssignment.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def lti_course_id(self):
        """Gets the lti_course_id of this LtiAssignment.  # noqa: E501


        :return: The lti_course_id of this LtiAssignment.  # noqa: E501
        :rtype: str
        """
        return self._lti_course_id

    @lti_course_id.setter
    def lti_course_id(self, lti_course_id):
        """Sets the lti_course_id of this LtiAssignment.


        :param lti_course_id: The lti_course_id of this LtiAssignment.  # noqa: E501
        :type: str
        """

        self._lti_course_id = lti_course_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LtiAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LtiAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LtiAssignment):
            return True

        return self.to_dict() != other.to_dict()
