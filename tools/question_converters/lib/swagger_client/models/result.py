# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Result(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'result_score': 'float',
        'result_maximum': 'float',
        'comment': 'str',
        'score_of': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'result_score': 'resultScore',
        'result_maximum': 'resultMaximum',
        'comment': 'comment',
        'score_of': 'scoreOf'
    }

    def __init__(self, id=None, user_id=None, result_score=None, result_maximum=None, comment=None, score_of=None, _configuration=None):  # noqa: E501
        """Result - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._result_score = None
        self._result_maximum = None
        self._comment = None
        self._score_of = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if result_score is not None:
            self.result_score = result_score
        if result_maximum is not None:
            self.result_maximum = result_maximum
        if comment is not None:
            self.comment = comment
        if score_of is not None:
            self.score_of = score_of

    @property
    def id(self):
        """Gets the id of this Result.  # noqa: E501

        The fully qualified URL for showing the Result  # noqa: E501

        :return: The id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Result.

        The fully qualified URL for showing the Result  # noqa: E501

        :param id: The id of this Result.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this Result.  # noqa: E501

        The lti_user_id or the Canvas user_id  # noqa: E501

        :return: The user_id of this Result.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Result.

        The lti_user_id or the Canvas user_id  # noqa: E501

        :param user_id: The user_id of this Result.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def result_score(self):
        """Gets the result_score of this Result.  # noqa: E501

        The score of the result as defined by Canvas, scaled to the resultMaximum  # noqa: E501

        :return: The result_score of this Result.  # noqa: E501
        :rtype: float
        """
        return self._result_score

    @result_score.setter
    def result_score(self, result_score):
        """Sets the result_score of this Result.

        The score of the result as defined by Canvas, scaled to the resultMaximum  # noqa: E501

        :param result_score: The result_score of this Result.  # noqa: E501
        :type: float
        """

        self._result_score = result_score

    @property
    def result_maximum(self):
        """Gets the result_maximum of this Result.  # noqa: E501

        Maximum possible score for this result; 1 is the default value and will be assumed if not specified otherwise. Minimum value of 0 required.  # noqa: E501

        :return: The result_maximum of this Result.  # noqa: E501
        :rtype: float
        """
        return self._result_maximum

    @result_maximum.setter
    def result_maximum(self, result_maximum):
        """Sets the result_maximum of this Result.

        Maximum possible score for this result; 1 is the default value and will be assumed if not specified otherwise. Minimum value of 0 required.  # noqa: E501

        :param result_maximum: The result_maximum of this Result.  # noqa: E501
        :type: float
        """

        self._result_maximum = result_maximum

    @property
    def comment(self):
        """Gets the comment of this Result.  # noqa: E501

        Comment visible to the student about the result.  # noqa: E501

        :return: The comment of this Result.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Result.

        Comment visible to the student about the result.  # noqa: E501

        :param comment: The comment of this Result.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def score_of(self):
        """Gets the score_of of this Result.  # noqa: E501

        URL of the line item this belongs to  # noqa: E501

        :return: The score_of of this Result.  # noqa: E501
        :rtype: str
        """
        return self._score_of

    @score_of.setter
    def score_of(self, score_of):
        """Sets the score_of of this Result.

        URL of the line item this belongs to  # noqa: E501

        :param score_of: The score_of of this Result.  # noqa: E501
        :type: str
        """

        self._score_of = score_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Result, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Result):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Result):
            return True

        return self.to_dict() != other.to_dict()
