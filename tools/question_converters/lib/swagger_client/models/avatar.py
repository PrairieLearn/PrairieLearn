# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Avatar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'url': 'str',
        'token': 'str',
        'display_name': 'str',
        'id': 'int',
        'content_type': 'str',
        'filename': 'str',
        'size': 'int'
    }

    attribute_map = {
        'type': 'type',
        'url': 'url',
        'token': 'token',
        'display_name': 'display_name',
        'id': 'id',
        'content_type': 'content-type',
        'filename': 'filename',
        'size': 'size'
    }

    def __init__(self, type=None, url=None, token=None, display_name=None, id=None, content_type=None, filename=None, size=None, _configuration=None):  # noqa: E501
        """Avatar - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._type = None
        self._url = None
        self._token = None
        self._display_name = None
        self._id = None
        self._content_type = None
        self._filename = None
        self._size = None
        self.discriminator = None

        self.type = type
        self.url = url
        self.token = token
        self.display_name = display_name
        if id is not None:
            self.id = id
        if content_type is not None:
            self.content_type = content_type
        if filename is not None:
            self.filename = filename
        if size is not None:
            self.size = size

    @property
    def type(self):
        """Gets the type of this Avatar.  # noqa: E501

        ['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes.  # noqa: E501

        :return: The type of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Avatar.

        ['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes.  # noqa: E501

        :param type: The type of this Avatar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def url(self):
        """Gets the url of this Avatar.  # noqa: E501

        The url of the avatar  # noqa: E501

        :return: The url of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Avatar.

        The url of the avatar  # noqa: E501

        :param url: The url of this Avatar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def token(self):
        """Gets the token of this Avatar.  # noqa: E501

        A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.  # noqa: E501

        :return: The token of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Avatar.

        A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.  # noqa: E501

        :param token: The token of this Avatar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def display_name(self):
        """Gets the display_name of this Avatar.  # noqa: E501

        A textual description of the avatar record.  # noqa: E501

        :return: The display_name of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Avatar.

        A textual description of the avatar record.  # noqa: E501

        :param display_name: The display_name of this Avatar.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this Avatar.  # noqa: E501

        ['attachment' type only] the internal id of the attachment  # noqa: E501

        :return: The id of this Avatar.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Avatar.

        ['attachment' type only] the internal id of the attachment  # noqa: E501

        :param id: The id of this Avatar.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content_type(self):
        """Gets the content_type of this Avatar.  # noqa: E501

        ['attachment' type only] the content-type of the attachment.  # noqa: E501

        :return: The content_type of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Avatar.

        ['attachment' type only] the content-type of the attachment.  # noqa: E501

        :param content_type: The content_type of this Avatar.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def filename(self):
        """Gets the filename of this Avatar.  # noqa: E501

        ['attachment' type only] the filename of the attachment  # noqa: E501

        :return: The filename of this Avatar.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Avatar.

        ['attachment' type only] the filename of the attachment  # noqa: E501

        :param filename: The filename of this Avatar.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def size(self):
        """Gets the size of this Avatar.  # noqa: E501

        ['attachment' type only] the size of the attachment  # noqa: E501

        :return: The size of this Avatar.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Avatar.

        ['attachment' type only] the size of the attachment  # noqa: E501

        :param size: The size of this Avatar.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Avatar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Avatar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Avatar):
            return True

        return self.to_dict() != other.to_dict()
