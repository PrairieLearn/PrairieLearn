# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EPortfolio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'user_id': 'int',
        'name': 'str',
        'public': 'bool',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'workflow_state': 'str',
        'deleted_at': 'ModelDatetime',
        'spam_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'user_id',
        'name': 'name',
        'public': 'public',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'workflow_state': 'workflow_state',
        'deleted_at': 'deleted_at',
        'spam_status': 'spam_status'
    }

    def __init__(self, id=None, user_id=None, name=None, public=None, created_at=None, updated_at=None, workflow_state=None, deleted_at=None, spam_status=None, _configuration=None):  # noqa: E501
        """EPortfolio - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._user_id = None
        self._name = None
        self._public = None
        self._created_at = None
        self._updated_at = None
        self._workflow_state = None
        self._deleted_at = None
        self._spam_status = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if name is not None:
            self.name = name
        if public is not None:
            self.public = public
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if spam_status is not None:
            self.spam_status = spam_status

    @property
    def id(self):
        """Gets the id of this EPortfolio.  # noqa: E501

        The database ID of the ePortfolio  # noqa: E501

        :return: The id of this EPortfolio.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EPortfolio.

        The database ID of the ePortfolio  # noqa: E501

        :param id: The id of this EPortfolio.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this EPortfolio.  # noqa: E501

        The user ID to which the ePortfolio belongs  # noqa: E501

        :return: The user_id of this EPortfolio.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EPortfolio.

        The user ID to which the ePortfolio belongs  # noqa: E501

        :param user_id: The user_id of this EPortfolio.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this EPortfolio.  # noqa: E501

        The name of the ePortfolio  # noqa: E501

        :return: The name of this EPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EPortfolio.

        The name of the ePortfolio  # noqa: E501

        :param name: The name of this EPortfolio.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public(self):
        """Gets the public of this EPortfolio.  # noqa: E501

        Whether or not the ePortfolio is visible without authentication  # noqa: E501

        :return: The public of this EPortfolio.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this EPortfolio.

        Whether or not the ePortfolio is visible without authentication  # noqa: E501

        :param public: The public of this EPortfolio.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def created_at(self):
        """Gets the created_at of this EPortfolio.  # noqa: E501

        The creation timestamp for the ePortfolio  # noqa: E501

        :return: The created_at of this EPortfolio.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EPortfolio.

        The creation timestamp for the ePortfolio  # noqa: E501

        :param created_at: The created_at of this EPortfolio.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EPortfolio.  # noqa: E501

        The timestamp of the last time any of the ePortfolio attributes changed  # noqa: E501

        :return: The updated_at of this EPortfolio.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EPortfolio.

        The timestamp of the last time any of the ePortfolio attributes changed  # noqa: E501

        :param updated_at: The updated_at of this EPortfolio.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this EPortfolio.  # noqa: E501

        The state of the ePortfolio. Either 'active' or 'deleted'  # noqa: E501

        :return: The workflow_state of this EPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this EPortfolio.

        The state of the ePortfolio. Either 'active' or 'deleted'  # noqa: E501

        :param workflow_state: The workflow_state of this EPortfolio.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def deleted_at(self):
        """Gets the deleted_at of this EPortfolio.  # noqa: E501

        The timestamp when the ePortfolio was deleted, or else null  # noqa: E501

        :return: The deleted_at of this EPortfolio.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this EPortfolio.

        The timestamp when the ePortfolio was deleted, or else null  # noqa: E501

        :param deleted_at: The deleted_at of this EPortfolio.  # noqa: E501
        :type: ModelDatetime
        """

        self._deleted_at = deleted_at

    @property
    def spam_status(self):
        """Gets the spam_status of this EPortfolio.  # noqa: E501

        A flag indicating whether the ePortfolio has been       flagged or moderated as spam. One of 'flagged_as_possible_spam',       'marked_as_safe', 'marked_as_spam', or null  # noqa: E501

        :return: The spam_status of this EPortfolio.  # noqa: E501
        :rtype: str
        """
        return self._spam_status

    @spam_status.setter
    def spam_status(self, spam_status):
        """Sets the spam_status of this EPortfolio.

        A flag indicating whether the ePortfolio has been       flagged or moderated as spam. One of 'flagged_as_possible_spam',       'marked_as_safe', 'marked_as_spam', or null  # noqa: E501

        :param spam_status: The spam_status of this EPortfolio.  # noqa: E501
        :type: str
        """

        self._spam_status = spam_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EPortfolio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EPortfolio):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EPortfolio):
            return True

        return self.to_dict() != other.to_dict()
