# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisImportError(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sis_import_id': 'int',
        'file': 'str',
        'message': 'str',
        'row_info': 'str',
        'row': 'int'
    }

    attribute_map = {
        'sis_import_id': 'sis_import_id',
        'file': 'file',
        'message': 'message',
        'row_info': 'row_info',
        'row': 'row'
    }

    def __init__(self, sis_import_id=None, file=None, message=None, row_info=None, row=None, _configuration=None):  # noqa: E501
        """SisImportError - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sis_import_id = None
        self._file = None
        self._message = None
        self._row_info = None
        self._row = None
        self.discriminator = None

        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if file is not None:
            self.file = file
        if message is not None:
            self.message = message
        if row_info is not None:
            self.row_info = row_info
        if row is not None:
            self.row = row

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this SisImportError.  # noqa: E501

        The unique identifier for the SIS import.  # noqa: E501

        :return: The sis_import_id of this SisImportError.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this SisImportError.

        The unique identifier for the SIS import.  # noqa: E501

        :param sis_import_id: The sis_import_id of this SisImportError.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def file(self):
        """Gets the file of this SisImportError.  # noqa: E501

        The file where the error message occurred.  # noqa: E501

        :return: The file of this SisImportError.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this SisImportError.

        The file where the error message occurred.  # noqa: E501

        :param file: The file of this SisImportError.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def message(self):
        """Gets the message of this SisImportError.  # noqa: E501

        The error message that from the record.  # noqa: E501

        :return: The message of this SisImportError.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SisImportError.

        The error message that from the record.  # noqa: E501

        :param message: The message of this SisImportError.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def row_info(self):
        """Gets the row_info of this SisImportError.  # noqa: E501

        The contents of the line that had the error.  # noqa: E501

        :return: The row_info of this SisImportError.  # noqa: E501
        :rtype: str
        """
        return self._row_info

    @row_info.setter
    def row_info(self, row_info):
        """Sets the row_info of this SisImportError.

        The contents of the line that had the error.  # noqa: E501

        :param row_info: The row_info of this SisImportError.  # noqa: E501
        :type: str
        """

        self._row_info = row_info

    @property
    def row(self):
        """Gets the row of this SisImportError.  # noqa: E501

        The line number where the error occurred. Some Importers do not yet support this. This is a 1 based index starting with the header row.  # noqa: E501

        :return: The row of this SisImportError.  # noqa: E501
        :rtype: int
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this SisImportError.

        The line number where the error occurred. Some Importers do not yet support this. This is a 1 based index starting with the header row.  # noqa: E501

        :param row: The row of this SisImportError.  # noqa: E501
        :type: int
        """

        self._row = row

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisImportError, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisImportError):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisImportError):
            return True

        return self.to_dict() != other.to_dict()
