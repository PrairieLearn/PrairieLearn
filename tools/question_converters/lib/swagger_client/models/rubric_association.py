# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RubricAssociation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'rubric_id': 'int',
        'association_id': 'int',
        'association_type': 'str',
        'use_for_grading': 'bool',
        'summary_data': 'str',
        'purpose': 'str',
        'hide_score_total': 'bool',
        'hide_points': 'bool',
        'hide_outcome_results': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'rubric_id': 'rubric_id',
        'association_id': 'association_id',
        'association_type': 'association_type',
        'use_for_grading': 'use_for_grading',
        'summary_data': 'summary_data',
        'purpose': 'purpose',
        'hide_score_total': 'hide_score_total',
        'hide_points': 'hide_points',
        'hide_outcome_results': 'hide_outcome_results'
    }

    def __init__(self, id=None, rubric_id=None, association_id=None, association_type=None, use_for_grading=None, summary_data=None, purpose=None, hide_score_total=None, hide_points=None, hide_outcome_results=None, _configuration=None):  # noqa: E501
        """RubricAssociation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._rubric_id = None
        self._association_id = None
        self._association_type = None
        self._use_for_grading = None
        self._summary_data = None
        self._purpose = None
        self._hide_score_total = None
        self._hide_points = None
        self._hide_outcome_results = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if rubric_id is not None:
            self.rubric_id = rubric_id
        if association_id is not None:
            self.association_id = association_id
        if association_type is not None:
            self.association_type = association_type
        if use_for_grading is not None:
            self.use_for_grading = use_for_grading
        if summary_data is not None:
            self.summary_data = summary_data
        if purpose is not None:
            self.purpose = purpose
        if hide_score_total is not None:
            self.hide_score_total = hide_score_total
        if hide_points is not None:
            self.hide_points = hide_points
        if hide_outcome_results is not None:
            self.hide_outcome_results = hide_outcome_results

    @property
    def id(self):
        """Gets the id of this RubricAssociation.  # noqa: E501

        the ID of the association  # noqa: E501

        :return: The id of this RubricAssociation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RubricAssociation.

        the ID of the association  # noqa: E501

        :param id: The id of this RubricAssociation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rubric_id(self):
        """Gets the rubric_id of this RubricAssociation.  # noqa: E501

        the ID of the rubric  # noqa: E501

        :return: The rubric_id of this RubricAssociation.  # noqa: E501
        :rtype: int
        """
        return self._rubric_id

    @rubric_id.setter
    def rubric_id(self, rubric_id):
        """Sets the rubric_id of this RubricAssociation.

        the ID of the rubric  # noqa: E501

        :param rubric_id: The rubric_id of this RubricAssociation.  # noqa: E501
        :type: int
        """

        self._rubric_id = rubric_id

    @property
    def association_id(self):
        """Gets the association_id of this RubricAssociation.  # noqa: E501

        the ID of the object this association links to  # noqa: E501

        :return: The association_id of this RubricAssociation.  # noqa: E501
        :rtype: int
        """
        return self._association_id

    @association_id.setter
    def association_id(self, association_id):
        """Sets the association_id of this RubricAssociation.

        the ID of the object this association links to  # noqa: E501

        :param association_id: The association_id of this RubricAssociation.  # noqa: E501
        :type: int
        """

        self._association_id = association_id

    @property
    def association_type(self):
        """Gets the association_type of this RubricAssociation.  # noqa: E501

        the type of object this association links to  # noqa: E501

        :return: The association_type of this RubricAssociation.  # noqa: E501
        :rtype: str
        """
        return self._association_type

    @association_type.setter
    def association_type(self, association_type):
        """Sets the association_type of this RubricAssociation.

        the type of object this association links to  # noqa: E501

        :param association_type: The association_type of this RubricAssociation.  # noqa: E501
        :type: str
        """

        self._association_type = association_type

    @property
    def use_for_grading(self):
        """Gets the use_for_grading of this RubricAssociation.  # noqa: E501

        Whether or not the associated rubric is used for grade calculation  # noqa: E501

        :return: The use_for_grading of this RubricAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_grading

    @use_for_grading.setter
    def use_for_grading(self, use_for_grading):
        """Sets the use_for_grading of this RubricAssociation.

        Whether or not the associated rubric is used for grade calculation  # noqa: E501

        :param use_for_grading: The use_for_grading of this RubricAssociation.  # noqa: E501
        :type: bool
        """

        self._use_for_grading = use_for_grading

    @property
    def summary_data(self):
        """Gets the summary_data of this RubricAssociation.  # noqa: E501


        :return: The summary_data of this RubricAssociation.  # noqa: E501
        :rtype: str
        """
        return self._summary_data

    @summary_data.setter
    def summary_data(self, summary_data):
        """Sets the summary_data of this RubricAssociation.


        :param summary_data: The summary_data of this RubricAssociation.  # noqa: E501
        :type: str
        """

        self._summary_data = summary_data

    @property
    def purpose(self):
        """Gets the purpose of this RubricAssociation.  # noqa: E501

        Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark.  # noqa: E501

        :return: The purpose of this RubricAssociation.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this RubricAssociation.

        Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark.  # noqa: E501

        :param purpose: The purpose of this RubricAssociation.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def hide_score_total(self):
        """Gets the hide_score_total of this RubricAssociation.  # noqa: E501

        Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.  # noqa: E501

        :return: The hide_score_total of this RubricAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._hide_score_total

    @hide_score_total.setter
    def hide_score_total(self, hide_score_total):
        """Sets the hide_score_total of this RubricAssociation.

        Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.  # noqa: E501

        :param hide_score_total: The hide_score_total of this RubricAssociation.  # noqa: E501
        :type: bool
        """

        self._hide_score_total = hide_score_total

    @property
    def hide_points(self):
        """Gets the hide_points of this RubricAssociation.  # noqa: E501


        :return: The hide_points of this RubricAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._hide_points

    @hide_points.setter
    def hide_points(self, hide_points):
        """Sets the hide_points of this RubricAssociation.


        :param hide_points: The hide_points of this RubricAssociation.  # noqa: E501
        :type: bool
        """

        self._hide_points = hide_points

    @property
    def hide_outcome_results(self):
        """Gets the hide_outcome_results of this RubricAssociation.  # noqa: E501


        :return: The hide_outcome_results of this RubricAssociation.  # noqa: E501
        :rtype: bool
        """
        return self._hide_outcome_results

    @hide_outcome_results.setter
    def hide_outcome_results(self, hide_outcome_results):
        """Sets the hide_outcome_results of this RubricAssociation.


        :param hide_outcome_results: The hide_outcome_results of this RubricAssociation.  # noqa: E501
        :type: bool
        """

        self._hide_outcome_results = hide_outcome_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RubricAssociation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RubricAssociation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RubricAssociation):
            return True

        return self.to_dict() != other.to_dict()
