# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FeatureFlag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context_type': 'str',
        'context_id': 'int',
        'feature': 'str',
        'state': 'str',
        'locked': 'bool'
    }

    attribute_map = {
        'context_type': 'context_type',
        'context_id': 'context_id',
        'feature': 'feature',
        'state': 'state',
        'locked': 'locked'
    }

    def __init__(self, context_type=None, context_id=None, feature=None, state=None, locked=None, _configuration=None):  # noqa: E501
        """FeatureFlag - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._context_type = None
        self._context_id = None
        self._feature = None
        self._state = None
        self._locked = None
        self.discriminator = None

        if context_type is not None:
            self.context_type = context_type
        if context_id is not None:
            self.context_id = context_id
        if feature is not None:
            self.feature = feature
        if state is not None:
            self.state = state
        if locked is not None:
            self.locked = locked

    @property
    def context_type(self):
        """Gets the context_type of this FeatureFlag.  # noqa: E501

        The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)  # noqa: E501

        :return: The context_type of this FeatureFlag.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this FeatureFlag.

        The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)  # noqa: E501

        :param context_type: The context_type of this FeatureFlag.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def context_id(self):
        """Gets the context_id of this FeatureFlag.  # noqa: E501

        The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)  # noqa: E501

        :return: The context_id of this FeatureFlag.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this FeatureFlag.

        The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)  # noqa: E501

        :param context_id: The context_id of this FeatureFlag.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def feature(self):
        """Gets the feature of this FeatureFlag.  # noqa: E501

        The feature this flag controls  # noqa: E501

        :return: The feature of this FeatureFlag.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this FeatureFlag.

        The feature this flag controls  # noqa: E501

        :param feature: The feature of this FeatureFlag.  # noqa: E501
        :type: str
        """

        self._feature = feature

    @property
    def state(self):
        """Gets the state of this FeatureFlag.  # noqa: E501

        The policy for the feature at this context.  can be 'off', 'allowed', 'allowed_on', or 'on'.  # noqa: E501

        :return: The state of this FeatureFlag.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this FeatureFlag.

        The policy for the feature at this context.  can be 'off', 'allowed', 'allowed_on', or 'on'.  # noqa: E501

        :param state: The state of this FeatureFlag.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def locked(self):
        """Gets the locked of this FeatureFlag.  # noqa: E501

        If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context  # noqa: E501

        :return: The locked of this FeatureFlag.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this FeatureFlag.

        If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context  # noqa: E501

        :param locked: The locked of this FeatureFlag.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FeatureFlag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FeatureFlag):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FeatureFlag):
            return True

        return self.to_dict() != other.to_dict()
