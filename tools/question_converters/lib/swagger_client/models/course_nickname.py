# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CourseNickname(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'course_id': 'int',
        'name': 'str',
        'nickname': 'str'
    }

    attribute_map = {
        'course_id': 'course_id',
        'name': 'name',
        'nickname': 'nickname'
    }

    def __init__(self, course_id=None, name=None, nickname=None, _configuration=None):  # noqa: E501
        """CourseNickname - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._course_id = None
        self._name = None
        self._nickname = None
        self.discriminator = None

        if course_id is not None:
            self.course_id = course_id
        if name is not None:
            self.name = name
        if nickname is not None:
            self.nickname = nickname

    @property
    def course_id(self):
        """Gets the course_id of this CourseNickname.  # noqa: E501

        the ID of the course  # noqa: E501

        :return: The course_id of this CourseNickname.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this CourseNickname.

        the ID of the course  # noqa: E501

        :param course_id: The course_id of this CourseNickname.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def name(self):
        """Gets the name of this CourseNickname.  # noqa: E501

        the actual name of the course  # noqa: E501

        :return: The name of this CourseNickname.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CourseNickname.

        the actual name of the course  # noqa: E501

        :param name: The name of this CourseNickname.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this CourseNickname.  # noqa: E501

        the calling user's nickname for the course  # noqa: E501

        :return: The nickname of this CourseNickname.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this CourseNickname.

        the calling user's nickname for the course  # noqa: E501

        :param nickname: The nickname of this CourseNickname.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CourseNickname, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CourseNickname):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CourseNickname):
            return True

        return self.to_dict() != other.to_dict()
