# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RolePermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'locked': 'bool',
        'applies_to_self': 'bool',
        'applies_to_descendants': 'bool',
        'readonly': 'bool',
        'explicit': 'bool',
        'prior_default': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'locked': 'locked',
        'applies_to_self': 'applies_to_self',
        'applies_to_descendants': 'applies_to_descendants',
        'readonly': 'readonly',
        'explicit': 'explicit',
        'prior_default': 'prior_default'
    }

    def __init__(self, enabled=None, locked=None, applies_to_self=None, applies_to_descendants=None, readonly=None, explicit=None, prior_default=None, _configuration=None):  # noqa: E501
        """RolePermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._locked = None
        self._applies_to_self = None
        self._applies_to_descendants = None
        self._readonly = None
        self._explicit = None
        self._prior_default = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if locked is not None:
            self.locked = locked
        if applies_to_self is not None:
            self.applies_to_self = applies_to_self
        if applies_to_descendants is not None:
            self.applies_to_descendants = applies_to_descendants
        if readonly is not None:
            self.readonly = readonly
        if explicit is not None:
            self.explicit = explicit
        if prior_default is not None:
            self.prior_default = prior_default

    @property
    def enabled(self):
        """Gets the enabled of this RolePermissions.  # noqa: E501

        Whether the role has the permission  # noqa: E501

        :return: The enabled of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this RolePermissions.

        Whether the role has the permission  # noqa: E501

        :param enabled: The enabled of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def locked(self):
        """Gets the locked of this RolePermissions.  # noqa: E501

        Whether the permission is locked by this role  # noqa: E501

        :return: The locked of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this RolePermissions.

        Whether the permission is locked by this role  # noqa: E501

        :param locked: The locked of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def applies_to_self(self):
        """Gets the applies_to_self of this RolePermissions.  # noqa: E501

        Whether the permission applies to the account this role is in. Only present if enabled is true  # noqa: E501

        :return: The applies_to_self of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._applies_to_self

    @applies_to_self.setter
    def applies_to_self(self, applies_to_self):
        """Sets the applies_to_self of this RolePermissions.

        Whether the permission applies to the account this role is in. Only present if enabled is true  # noqa: E501

        :param applies_to_self: The applies_to_self of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._applies_to_self = applies_to_self

    @property
    def applies_to_descendants(self):
        """Gets the applies_to_descendants of this RolePermissions.  # noqa: E501

        Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true  # noqa: E501

        :return: The applies_to_descendants of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._applies_to_descendants

    @applies_to_descendants.setter
    def applies_to_descendants(self, applies_to_descendants):
        """Sets the applies_to_descendants of this RolePermissions.

        Whether the permission cascades down to sub accounts of the account this role is in. Only present if enabled is true  # noqa: E501

        :param applies_to_descendants: The applies_to_descendants of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._applies_to_descendants = applies_to_descendants

    @property
    def readonly(self):
        """Gets the readonly of this RolePermissions.  # noqa: E501

        Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).  # noqa: E501

        :return: The readonly of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this RolePermissions.

        Whether the permission can be modified in this role (i.e. whether the permission is locked by an upstream role).  # noqa: E501

        :param readonly: The readonly of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def explicit(self):
        """Gets the explicit of this RolePermissions.  # noqa: E501

        Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.  # noqa: E501

        :return: The explicit of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this RolePermissions.

        Whether the value of enabled is specified explicitly by this role, or inherited from an upstream role.  # noqa: E501

        :param explicit: The explicit of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._explicit = explicit

    @property
    def prior_default(self):
        """Gets the prior_default of this RolePermissions.  # noqa: E501

        The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.  # noqa: E501

        :return: The prior_default of this RolePermissions.  # noqa: E501
        :rtype: bool
        """
        return self._prior_default

    @prior_default.setter
    def prior_default(self, prior_default):
        """Sets the prior_default of this RolePermissions.

        The value that would have been inherited from upstream if the role had not explicitly set a value. Only present if explicit is true.  # noqa: E501

        :param prior_default: The prior_default of this RolePermissions.  # noqa: E501
        :type: bool
        """

        self._prior_default = prior_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RolePermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RolePermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RolePermissions):
            return True

        return self.to_dict() != other.to_dict()
