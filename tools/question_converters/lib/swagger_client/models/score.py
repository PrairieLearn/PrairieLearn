# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Score(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'score_given': 'float',
        'score_maximum': 'float',
        'comment': 'str',
        'timestamp': 'str',
        'activity_progress': 'str',
        'grading_progress': 'str',
        'submission': 'object'
    }

    attribute_map = {
        'user_id': 'userId',
        'score_given': 'scoreGiven',
        'score_maximum': 'scoreMaximum',
        'comment': 'comment',
        'timestamp': 'timestamp',
        'activity_progress': 'activityProgress',
        'grading_progress': 'gradingProgress',
        'submission': 'submission'
    }

    def __init__(self, user_id=None, score_given=None, score_maximum=None, comment=None, timestamp=None, activity_progress=None, grading_progress=None, submission=None, _configuration=None):  # noqa: E501
        """Score - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._user_id = None
        self._score_given = None
        self._score_maximum = None
        self._comment = None
        self._timestamp = None
        self._activity_progress = None
        self._grading_progress = None
        self._submission = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if score_given is not None:
            self.score_given = score_given
        if score_maximum is not None:
            self.score_maximum = score_maximum
        if comment is not None:
            self.comment = comment
        if timestamp is not None:
            self.timestamp = timestamp
        if activity_progress is not None:
            self.activity_progress = activity_progress
        if grading_progress is not None:
            self.grading_progress = grading_progress
        if submission is not None:
            self.submission = submission

    @property
    def user_id(self):
        """Gets the user_id of this Score.  # noqa: E501

        The lti_user_id or the Canvas user_id  # noqa: E501

        :return: The user_id of this Score.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Score.

        The lti_user_id or the Canvas user_id  # noqa: E501

        :param user_id: The user_id of this Score.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def score_given(self):
        """Gets the score_given of this Score.  # noqa: E501

        The Current score received in the tool for this line item and user, scaled to the scoreMaximum  # noqa: E501

        :return: The score_given of this Score.  # noqa: E501
        :rtype: float
        """
        return self._score_given

    @score_given.setter
    def score_given(self, score_given):
        """Sets the score_given of this Score.

        The Current score received in the tool for this line item and user, scaled to the scoreMaximum  # noqa: E501

        :param score_given: The score_given of this Score.  # noqa: E501
        :type: float
        """

        self._score_given = score_given

    @property
    def score_maximum(self):
        """Gets the score_maximum of this Score.  # noqa: E501

        Maximum possible score for this result; it must be present if scoreGiven is present.  # noqa: E501

        :return: The score_maximum of this Score.  # noqa: E501
        :rtype: float
        """
        return self._score_maximum

    @score_maximum.setter
    def score_maximum(self, score_maximum):
        """Sets the score_maximum of this Score.

        Maximum possible score for this result; it must be present if scoreGiven is present.  # noqa: E501

        :param score_maximum: The score_maximum of this Score.  # noqa: E501
        :type: float
        """

        self._score_maximum = score_maximum

    @property
    def comment(self):
        """Gets the comment of this Score.  # noqa: E501

        Comment visible to the student about this score.  # noqa: E501

        :return: The comment of this Score.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Score.

        Comment visible to the student about this score.  # noqa: E501

        :param comment: The comment of this Score.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def timestamp(self):
        """Gets the timestamp of this Score.  # noqa: E501

        Date and time when the score was modified in the tool. Should use subsecond precision.  # noqa: E501

        :return: The timestamp of this Score.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Score.

        Date and time when the score was modified in the tool. Should use subsecond precision.  # noqa: E501

        :param timestamp: The timestamp of this Score.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def activity_progress(self):
        """Gets the activity_progress of this Score.  # noqa: E501

        Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed  # noqa: E501

        :return: The activity_progress of this Score.  # noqa: E501
        :rtype: str
        """
        return self._activity_progress

    @activity_progress.setter
    def activity_progress(self, activity_progress):
        """Sets the activity_progress of this Score.

        Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed  # noqa: E501

        :param activity_progress: The activity_progress of this Score.  # noqa: E501
        :type: str
        """

        self._activity_progress = activity_progress

    @property
    def grading_progress(self):
        """Gets the grading_progress of this Score.  # noqa: E501

        Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded  # noqa: E501

        :return: The grading_progress of this Score.  # noqa: E501
        :rtype: str
        """
        return self._grading_progress

    @grading_progress.setter
    def grading_progress(self, grading_progress):
        """Sets the grading_progress of this Score.

        Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded  # noqa: E501

        :param grading_progress: The grading_progress of this Score.  # noqa: E501
        :type: str
        """

        self._grading_progress = grading_progress

    @property
    def submission(self):
        """Gets the submission of this Score.  # noqa: E501

        Contains metadata about the submission attempt, like submittedAt: Date and time that the submission was originally created - should use ISO8601-formatted date with subsecond precision.  # noqa: E501

        :return: The submission of this Score.  # noqa: E501
        :rtype: object
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this Score.

        Contains metadata about the submission attempt, like submittedAt: Date and time that the submission was originally created - should use ISO8601-formatted date with subsecond precision.  # noqa: E501

        :param submission: The submission of this Score.  # noqa: E501
        :type: object
        """

        self._submission = submission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Score, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Score):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Score):
            return True

        return self.to_dict() != other.to_dict()
