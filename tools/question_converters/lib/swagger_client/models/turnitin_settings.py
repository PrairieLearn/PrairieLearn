# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TurnitinSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'originality_report_visibility': 'str',
        's_paper_check': 'bool',
        'internet_check': 'bool',
        'journal_check': 'bool',
        'exclude_biblio': 'bool',
        'exclude_quoted': 'bool',
        'exclude_small_matches_type': 'str',
        'exclude_small_matches_value': 'int'
    }

    attribute_map = {
        'originality_report_visibility': 'originality_report_visibility',
        's_paper_check': 's_paper_check',
        'internet_check': 'internet_check',
        'journal_check': 'journal_check',
        'exclude_biblio': 'exclude_biblio',
        'exclude_quoted': 'exclude_quoted',
        'exclude_small_matches_type': 'exclude_small_matches_type',
        'exclude_small_matches_value': 'exclude_small_matches_value'
    }

    def __init__(self, originality_report_visibility=None, s_paper_check=None, internet_check=None, journal_check=None, exclude_biblio=None, exclude_quoted=None, exclude_small_matches_type=None, exclude_small_matches_value=None, _configuration=None):  # noqa: E501
        """TurnitinSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._originality_report_visibility = None
        self._s_paper_check = None
        self._internet_check = None
        self._journal_check = None
        self._exclude_biblio = None
        self._exclude_quoted = None
        self._exclude_small_matches_type = None
        self._exclude_small_matches_value = None
        self.discriminator = None

        if originality_report_visibility is not None:
            self.originality_report_visibility = originality_report_visibility
        if s_paper_check is not None:
            self.s_paper_check = s_paper_check
        if internet_check is not None:
            self.internet_check = internet_check
        if journal_check is not None:
            self.journal_check = journal_check
        if exclude_biblio is not None:
            self.exclude_biblio = exclude_biblio
        if exclude_quoted is not None:
            self.exclude_quoted = exclude_quoted
        if exclude_small_matches_type is not None:
            self.exclude_small_matches_type = exclude_small_matches_type
        if exclude_small_matches_value is not None:
            self.exclude_small_matches_value = exclude_small_matches_value

    @property
    def originality_report_visibility(self):
        """Gets the originality_report_visibility of this TurnitinSettings.  # noqa: E501


        :return: The originality_report_visibility of this TurnitinSettings.  # noqa: E501
        :rtype: str
        """
        return self._originality_report_visibility

    @originality_report_visibility.setter
    def originality_report_visibility(self, originality_report_visibility):
        """Sets the originality_report_visibility of this TurnitinSettings.


        :param originality_report_visibility: The originality_report_visibility of this TurnitinSettings.  # noqa: E501
        :type: str
        """

        self._originality_report_visibility = originality_report_visibility

    @property
    def s_paper_check(self):
        """Gets the s_paper_check of this TurnitinSettings.  # noqa: E501


        :return: The s_paper_check of this TurnitinSettings.  # noqa: E501
        :rtype: bool
        """
        return self._s_paper_check

    @s_paper_check.setter
    def s_paper_check(self, s_paper_check):
        """Sets the s_paper_check of this TurnitinSettings.


        :param s_paper_check: The s_paper_check of this TurnitinSettings.  # noqa: E501
        :type: bool
        """

        self._s_paper_check = s_paper_check

    @property
    def internet_check(self):
        """Gets the internet_check of this TurnitinSettings.  # noqa: E501


        :return: The internet_check of this TurnitinSettings.  # noqa: E501
        :rtype: bool
        """
        return self._internet_check

    @internet_check.setter
    def internet_check(self, internet_check):
        """Sets the internet_check of this TurnitinSettings.


        :param internet_check: The internet_check of this TurnitinSettings.  # noqa: E501
        :type: bool
        """

        self._internet_check = internet_check

    @property
    def journal_check(self):
        """Gets the journal_check of this TurnitinSettings.  # noqa: E501


        :return: The journal_check of this TurnitinSettings.  # noqa: E501
        :rtype: bool
        """
        return self._journal_check

    @journal_check.setter
    def journal_check(self, journal_check):
        """Sets the journal_check of this TurnitinSettings.


        :param journal_check: The journal_check of this TurnitinSettings.  # noqa: E501
        :type: bool
        """

        self._journal_check = journal_check

    @property
    def exclude_biblio(self):
        """Gets the exclude_biblio of this TurnitinSettings.  # noqa: E501


        :return: The exclude_biblio of this TurnitinSettings.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_biblio

    @exclude_biblio.setter
    def exclude_biblio(self, exclude_biblio):
        """Sets the exclude_biblio of this TurnitinSettings.


        :param exclude_biblio: The exclude_biblio of this TurnitinSettings.  # noqa: E501
        :type: bool
        """

        self._exclude_biblio = exclude_biblio

    @property
    def exclude_quoted(self):
        """Gets the exclude_quoted of this TurnitinSettings.  # noqa: E501


        :return: The exclude_quoted of this TurnitinSettings.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_quoted

    @exclude_quoted.setter
    def exclude_quoted(self, exclude_quoted):
        """Sets the exclude_quoted of this TurnitinSettings.


        :param exclude_quoted: The exclude_quoted of this TurnitinSettings.  # noqa: E501
        :type: bool
        """

        self._exclude_quoted = exclude_quoted

    @property
    def exclude_small_matches_type(self):
        """Gets the exclude_small_matches_type of this TurnitinSettings.  # noqa: E501


        :return: The exclude_small_matches_type of this TurnitinSettings.  # noqa: E501
        :rtype: str
        """
        return self._exclude_small_matches_type

    @exclude_small_matches_type.setter
    def exclude_small_matches_type(self, exclude_small_matches_type):
        """Sets the exclude_small_matches_type of this TurnitinSettings.


        :param exclude_small_matches_type: The exclude_small_matches_type of this TurnitinSettings.  # noqa: E501
        :type: str
        """

        self._exclude_small_matches_type = exclude_small_matches_type

    @property
    def exclude_small_matches_value(self):
        """Gets the exclude_small_matches_value of this TurnitinSettings.  # noqa: E501


        :return: The exclude_small_matches_value of this TurnitinSettings.  # noqa: E501
        :rtype: int
        """
        return self._exclude_small_matches_value

    @exclude_small_matches_value.setter
    def exclude_small_matches_value(self, exclude_small_matches_value):
        """Sets the exclude_small_matches_value of this TurnitinSettings.


        :param exclude_small_matches_value: The exclude_small_matches_value of this TurnitinSettings.  # noqa: E501
        :type: int
        """

        self._exclude_small_matches_value = exclude_small_matches_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TurnitinSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TurnitinSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TurnitinSettings):
            return True

        return self.to_dict() != other.to_dict()
