# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizQuestion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'quiz_id': 'int',
        'position': 'int',
        'question_name': 'str',
        'question_type': 'str',
        'question_text': 'str',
        'points_possible': 'int',
        'correct_comments': 'str',
        'incorrect_comments': 'str',
        'neutral_comments': 'str',
        'answers': 'list[Answer]'
    }

    attribute_map = {
        'id': 'id',
        'quiz_id': 'quiz_id',
        'position': 'position',
        'question_name': 'question_name',
        'question_type': 'question_type',
        'question_text': 'question_text',
        'points_possible': 'points_possible',
        'correct_comments': 'correct_comments',
        'incorrect_comments': 'incorrect_comments',
        'neutral_comments': 'neutral_comments',
        'answers': 'answers'
    }

    def __init__(self, id=None, quiz_id=None, position=None, question_name=None, question_type=None, question_text=None, points_possible=None, correct_comments=None, incorrect_comments=None, neutral_comments=None, answers=None, _configuration=None):  # noqa: E501
        """QuizQuestion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._quiz_id = None
        self._position = None
        self._question_name = None
        self._question_type = None
        self._question_text = None
        self._points_possible = None
        self._correct_comments = None
        self._incorrect_comments = None
        self._neutral_comments = None
        self._answers = None
        self.discriminator = None

        self.id = id
        self.quiz_id = quiz_id
        if position is not None:
            self.position = position
        if question_name is not None:
            self.question_name = question_name
        if question_type is not None:
            self.question_type = question_type
        if question_text is not None:
            self.question_text = question_text
        if points_possible is not None:
            self.points_possible = points_possible
        if correct_comments is not None:
            self.correct_comments = correct_comments
        if incorrect_comments is not None:
            self.incorrect_comments = incorrect_comments
        if neutral_comments is not None:
            self.neutral_comments = neutral_comments
        if answers is not None:
            self.answers = answers

    @property
    def id(self):
        """Gets the id of this QuizQuestion.  # noqa: E501

        The ID of the quiz question.  # noqa: E501

        :return: The id of this QuizQuestion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuizQuestion.

        The ID of the quiz question.  # noqa: E501

        :param id: The id of this QuizQuestion.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def quiz_id(self):
        """Gets the quiz_id of this QuizQuestion.  # noqa: E501

        The ID of the Quiz the question belongs to.  # noqa: E501

        :return: The quiz_id of this QuizQuestion.  # noqa: E501
        :rtype: int
        """
        return self._quiz_id

    @quiz_id.setter
    def quiz_id(self, quiz_id):
        """Sets the quiz_id of this QuizQuestion.

        The ID of the Quiz the question belongs to.  # noqa: E501

        :param quiz_id: The quiz_id of this QuizQuestion.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quiz_id is None:
            raise ValueError("Invalid value for `quiz_id`, must not be `None`")  # noqa: E501

        self._quiz_id = quiz_id

    @property
    def position(self):
        """Gets the position of this QuizQuestion.  # noqa: E501

        The order in which the question will be retrieved and displayed.  # noqa: E501

        :return: The position of this QuizQuestion.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this QuizQuestion.

        The order in which the question will be retrieved and displayed.  # noqa: E501

        :param position: The position of this QuizQuestion.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def question_name(self):
        """Gets the question_name of this QuizQuestion.  # noqa: E501

        The name of the question.  # noqa: E501

        :return: The question_name of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_name

    @question_name.setter
    def question_name(self, question_name):
        """Sets the question_name of this QuizQuestion.

        The name of the question.  # noqa: E501

        :param question_name: The question_name of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._question_name = question_name

    @property
    def question_type(self):
        """Gets the question_type of this QuizQuestion.  # noqa: E501

        The type of the question.  # noqa: E501

        :return: The question_type of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this QuizQuestion.

        The type of the question.  # noqa: E501

        :param question_type: The question_type of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._question_type = question_type

    @property
    def question_text(self):
        """Gets the question_text of this QuizQuestion.  # noqa: E501

        The text of the question.  # noqa: E501

        :return: The question_text of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._question_text

    @question_text.setter
    def question_text(self, question_text):
        """Sets the question_text of this QuizQuestion.

        The text of the question.  # noqa: E501

        :param question_text: The question_text of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._question_text = question_text

    @property
    def points_possible(self):
        """Gets the points_possible of this QuizQuestion.  # noqa: E501

        The maximum amount of points possible received for getting this question correct.  # noqa: E501

        :return: The points_possible of this QuizQuestion.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this QuizQuestion.

        The maximum amount of points possible received for getting this question correct.  # noqa: E501

        :param points_possible: The points_possible of this QuizQuestion.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def correct_comments(self):
        """Gets the correct_comments of this QuizQuestion.  # noqa: E501

        The comments to display if the student answers the question correctly.  # noqa: E501

        :return: The correct_comments of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._correct_comments

    @correct_comments.setter
    def correct_comments(self, correct_comments):
        """Sets the correct_comments of this QuizQuestion.

        The comments to display if the student answers the question correctly.  # noqa: E501

        :param correct_comments: The correct_comments of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._correct_comments = correct_comments

    @property
    def incorrect_comments(self):
        """Gets the incorrect_comments of this QuizQuestion.  # noqa: E501

        The comments to display if the student answers incorrectly.  # noqa: E501

        :return: The incorrect_comments of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._incorrect_comments

    @incorrect_comments.setter
    def incorrect_comments(self, incorrect_comments):
        """Sets the incorrect_comments of this QuizQuestion.

        The comments to display if the student answers incorrectly.  # noqa: E501

        :param incorrect_comments: The incorrect_comments of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._incorrect_comments = incorrect_comments

    @property
    def neutral_comments(self):
        """Gets the neutral_comments of this QuizQuestion.  # noqa: E501

        The comments to display regardless of how the student answered.  # noqa: E501

        :return: The neutral_comments of this QuizQuestion.  # noqa: E501
        :rtype: str
        """
        return self._neutral_comments

    @neutral_comments.setter
    def neutral_comments(self, neutral_comments):
        """Sets the neutral_comments of this QuizQuestion.

        The comments to display regardless of how the student answered.  # noqa: E501

        :param neutral_comments: The neutral_comments of this QuizQuestion.  # noqa: E501
        :type: str
        """

        self._neutral_comments = neutral_comments

    @property
    def answers(self):
        """Gets the answers of this QuizQuestion.  # noqa: E501

        An array of available answers to display to the student.  # noqa: E501

        :return: The answers of this QuizQuestion.  # noqa: E501
        :rtype: list[Answer]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this QuizQuestion.

        An array of available answers to display to the student.  # noqa: E501

        :param answers: The answers of this QuizQuestion.  # noqa: E501
        :type: list[Answer]
        """

        self._answers = answers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizQuestion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizQuestion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizQuestion):
            return True

        return self.to_dict() != other.to_dict()
