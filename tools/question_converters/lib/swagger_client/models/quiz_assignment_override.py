# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizAssignmentOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'due_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'title': 'str',
        'base': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'due_at': 'due_at',
        'unlock_at': 'unlock_at',
        'lock_at': 'lock_at',
        'title': 'title',
        'base': 'base'
    }

    def __init__(self, id=None, due_at=None, unlock_at=None, lock_at=None, title=None, base=None, _configuration=None):  # noqa: E501
        """QuizAssignmentOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._due_at = None
        self._unlock_at = None
        self._lock_at = None
        self._title = None
        self._base = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if due_at is not None:
            self.due_at = due_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if lock_at is not None:
            self.lock_at = lock_at
        if title is not None:
            self.title = title
        if base is not None:
            self.base = base

    @property
    def id(self):
        """Gets the id of this QuizAssignmentOverride.  # noqa: E501

        ID of the assignment override, unless this is the base construct, in which case the 'id' field is omitted.  # noqa: E501

        :return: The id of this QuizAssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuizAssignmentOverride.

        ID of the assignment override, unless this is the base construct, in which case the 'id' field is omitted.  # noqa: E501

        :param id: The id of this QuizAssignmentOverride.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def due_at(self):
        """Gets the due_at of this QuizAssignmentOverride.  # noqa: E501

        The date after which any quiz submission is considered late.  # noqa: E501

        :return: The due_at of this QuizAssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this QuizAssignmentOverride.

        The date after which any quiz submission is considered late.  # noqa: E501

        :param due_at: The due_at of this QuizAssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this QuizAssignmentOverride.  # noqa: E501

        Date when the quiz becomes available for taking.  # noqa: E501

        :return: The unlock_at of this QuizAssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this QuizAssignmentOverride.

        Date when the quiz becomes available for taking.  # noqa: E501

        :param unlock_at: The unlock_at of this QuizAssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """Gets the lock_at of this QuizAssignmentOverride.  # noqa: E501

        When the quiz will stop being available for taking. A value of null means it can always be taken.  # noqa: E501

        :return: The lock_at of this QuizAssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this QuizAssignmentOverride.

        When the quiz will stop being available for taking. A value of null means it can always be taken.  # noqa: E501

        :param lock_at: The lock_at of this QuizAssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def title(self):
        """Gets the title of this QuizAssignmentOverride.  # noqa: E501

        Title of the section this assignment override is for, if any.  # noqa: E501

        :return: The title of this QuizAssignmentOverride.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuizAssignmentOverride.

        Title of the section this assignment override is for, if any.  # noqa: E501

        :param title: The title of this QuizAssignmentOverride.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def base(self):
        """Gets the base of this QuizAssignmentOverride.  # noqa: E501

        If this property is present, it means that dates in this structure are not based on an assignment override, but are instead for all students.  # noqa: E501

        :return: The base of this QuizAssignmentOverride.  # noqa: E501
        :rtype: bool
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this QuizAssignmentOverride.

        If this property is present, it means that dates in this structure are not based on an assignment override, but are instead for all students.  # noqa: E501

        :param base: The base of this QuizAssignmentOverride.  # noqa: E501
        :type: bool
        """

        self._base = base

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizAssignmentOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizAssignmentOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizAssignmentOverride):
            return True

        return self.to_dict() != other.to_dict()
