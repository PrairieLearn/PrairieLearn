# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Grades(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'Grade',
        'current_groups': 'GradeGroup',
        'final': 'Grade',
        'final_groups': 'GradeGroup'
    }

    attribute_map = {
        'current': 'current',
        'current_groups': 'current_groups',
        'final': 'final',
        'final_groups': 'final_groups'
    }

    def __init__(self, current=None, current_groups=None, final=None, final_groups=None, _configuration=None):  # noqa: E501
        """Grades - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._current = None
        self._current_groups = None
        self._final = None
        self._final_groups = None
        self.discriminator = None

        if current is not None:
            self.current = current
        if current_groups is not None:
            self.current_groups = current_groups
        if final is not None:
            self.final = final
        if final_groups is not None:
            self.final_groups = final_groups

    @property
    def current(self):
        """Gets the current of this Grades.  # noqa: E501


        :return: The current of this Grades.  # noqa: E501
        :rtype: Grade
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this Grades.


        :param current: The current of this Grades.  # noqa: E501
        :type: Grade
        """

        self._current = current

    @property
    def current_groups(self):
        """Gets the current_groups of this Grades.  # noqa: E501


        :return: The current_groups of this Grades.  # noqa: E501
        :rtype: GradeGroup
        """
        return self._current_groups

    @current_groups.setter
    def current_groups(self, current_groups):
        """Sets the current_groups of this Grades.


        :param current_groups: The current_groups of this Grades.  # noqa: E501
        :type: GradeGroup
        """

        self._current_groups = current_groups

    @property
    def final(self):
        """Gets the final of this Grades.  # noqa: E501


        :return: The final of this Grades.  # noqa: E501
        :rtype: Grade
        """
        return self._final

    @final.setter
    def final(self, final):
        """Sets the final of this Grades.


        :param final: The final of this Grades.  # noqa: E501
        :type: Grade
        """

        self._final = final

    @property
    def final_groups(self):
        """Gets the final_groups of this Grades.  # noqa: E501


        :return: The final_groups of this Grades.  # noqa: E501
        :rtype: GradeGroup
        """
        return self._final_groups

    @final_groups.setter
    def final_groups(self, final_groups):
        """Sets the final_groups of this Grades.


        :param final_groups: The final_groups of this Grades.  # noqa: E501
        :type: GradeGroup
        """

        self._final_groups = final_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Grades, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Grades):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Grades):
            return True

        return self.to_dict() != other.to_dict()
