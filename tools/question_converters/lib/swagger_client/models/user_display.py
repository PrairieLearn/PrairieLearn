# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class UserDisplay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'short_name': 'str',
        'avatar_image_url': 'str',
        'html_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'short_name': 'short_name',
        'avatar_image_url': 'avatar_image_url',
        'html_url': 'html_url'
    }

    def __init__(self, id=None, short_name=None, avatar_image_url=None, html_url=None, _configuration=None):  # noqa: E501
        """UserDisplay - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._short_name = None
        self._avatar_image_url = None
        self._html_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if short_name is not None:
            self.short_name = short_name
        if avatar_image_url is not None:
            self.avatar_image_url = avatar_image_url
        if html_url is not None:
            self.html_url = html_url

    @property
    def id(self):
        """Gets the id of this UserDisplay.  # noqa: E501

        The ID of the user.  # noqa: E501

        :return: The id of this UserDisplay.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDisplay.

        The ID of the user.  # noqa: E501

        :param id: The id of this UserDisplay.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def short_name(self):
        """Gets the short_name of this UserDisplay.  # noqa: E501

        A short name the user has selected, for use in conversations or other less formal places through the site.  # noqa: E501

        :return: The short_name of this UserDisplay.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this UserDisplay.

        A short name the user has selected, for use in conversations or other less formal places through the site.  # noqa: E501

        :param short_name: The short_name of this UserDisplay.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def avatar_image_url(self):
        """Gets the avatar_image_url of this UserDisplay.  # noqa: E501

        If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.  # noqa: E501

        :return: The avatar_image_url of this UserDisplay.  # noqa: E501
        :rtype: str
        """
        return self._avatar_image_url

    @avatar_image_url.setter
    def avatar_image_url(self, avatar_image_url):
        """Sets the avatar_image_url of this UserDisplay.

        If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.  # noqa: E501

        :param avatar_image_url: The avatar_image_url of this UserDisplay.  # noqa: E501
        :type: str
        """

        self._avatar_image_url = avatar_image_url

    @property
    def html_url(self):
        """Gets the html_url of this UserDisplay.  # noqa: E501

        URL to access user, either nested to a context or directly.  # noqa: E501

        :return: The html_url of this UserDisplay.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this UserDisplay.

        URL to access user, either nested to a context or directly.  # noqa: E501

        :param html_url: The html_url of this UserDisplay.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserDisplay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserDisplay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserDisplay):
            return True

        return self.to_dict() != other.to_dict()
