# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NamesAndRoleMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'name': 'str',
        'picture': 'str',
        'given_name': 'str',
        'family_name': 'str',
        'email': 'str',
        'lis_person_sourcedid': 'str',
        'user_id': 'str',
        'roles': 'list[str]',
        'message': 'list[NamesAndRoleMessage]'
    }

    attribute_map = {
        'status': 'status',
        'name': 'name',
        'picture': 'picture',
        'given_name': 'given_name',
        'family_name': 'family_name',
        'email': 'email',
        'lis_person_sourcedid': 'lis_person_sourcedid',
        'user_id': 'user_id',
        'roles': 'roles',
        'message': 'message'
    }

    def __init__(self, status=None, name=None, picture=None, given_name=None, family_name=None, email=None, lis_person_sourcedid=None, user_id=None, roles=None, message=None, _configuration=None):  # noqa: E501
        """NamesAndRoleMembership - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._name = None
        self._picture = None
        self._given_name = None
        self._family_name = None
        self._email = None
        self._lis_person_sourcedid = None
        self._user_id = None
        self._roles = None
        self._message = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if picture is not None:
            self.picture = picture
        if given_name is not None:
            self.given_name = given_name
        if family_name is not None:
            self.family_name = family_name
        if email is not None:
            self.email = email
        if lis_person_sourcedid is not None:
            self.lis_person_sourcedid = lis_person_sourcedid
        if user_id is not None:
            self.user_id = user_id
        if roles is not None:
            self.roles = roles
        if message is not None:
            self.message = message

    @property
    def status(self):
        """Gets the status of this NamesAndRoleMembership.  # noqa: E501

        Membership state  # noqa: E501

        :return: The status of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NamesAndRoleMembership.

        Membership state  # noqa: E501

        :param status: The status of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this NamesAndRoleMembership.  # noqa: E501

        Member's full name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :return: The name of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NamesAndRoleMembership.

        Member's full name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :param name: The name of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def picture(self):
        """Gets the picture of this NamesAndRoleMembership.  # noqa: E501

        URL to the member's avatar. Only included if tool privacy level is `public`.  # noqa: E501

        :return: The picture of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this NamesAndRoleMembership.

        URL to the member's avatar. Only included if tool privacy level is `public`.  # noqa: E501

        :param picture: The picture of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def given_name(self):
        """Gets the given_name of this NamesAndRoleMembership.  # noqa: E501

        Member's 'first' name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :return: The given_name of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this NamesAndRoleMembership.

        Member's 'first' name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :param given_name: The given_name of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def family_name(self):
        """Gets the family_name of this NamesAndRoleMembership.  # noqa: E501

        Member's 'last' name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :return: The family_name of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._family_name

    @family_name.setter
    def family_name(self, family_name):
        """Sets the family_name of this NamesAndRoleMembership.

        Member's 'last' name. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :param family_name: The family_name of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._family_name = family_name

    @property
    def email(self):
        """Gets the email of this NamesAndRoleMembership.  # noqa: E501

        Member's email address. Only included if tool privacy level is `public` or `email_only`.  # noqa: E501

        :return: The email of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this NamesAndRoleMembership.

        Member's email address. Only included if tool privacy level is `public` or `email_only`.  # noqa: E501

        :param email: The email of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def lis_person_sourcedid(self):
        """Gets the lis_person_sourcedid of this NamesAndRoleMembership.  # noqa: E501

        Member's primary SIS identifier. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :return: The lis_person_sourcedid of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._lis_person_sourcedid

    @lis_person_sourcedid.setter
    def lis_person_sourcedid(self, lis_person_sourcedid):
        """Sets the lis_person_sourcedid of this NamesAndRoleMembership.

        Member's primary SIS identifier. Only included if tool privacy level is `public` or `name_only`.  # noqa: E501

        :param lis_person_sourcedid: The lis_person_sourcedid of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._lis_person_sourcedid = lis_person_sourcedid

    @property
    def user_id(self):
        """Gets the user_id of this NamesAndRoleMembership.  # noqa: E501

        Member's unique LTI identifier.  # noqa: E501

        :return: The user_id of this NamesAndRoleMembership.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this NamesAndRoleMembership.

        Member's unique LTI identifier.  # noqa: E501

        :param user_id: The user_id of this NamesAndRoleMembership.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def roles(self):
        """Gets the roles of this NamesAndRoleMembership.  # noqa: E501

        Member's roles in the current Context, expressed as LTI/LIS URNs.  # noqa: E501

        :return: The roles of this NamesAndRoleMembership.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this NamesAndRoleMembership.

        Member's roles in the current Context, expressed as LTI/LIS URNs.  # noqa: E501

        :param roles: The roles of this NamesAndRoleMembership.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["http://purl.imsglobal.org/vocab/lis/v2/membership/Instructor#TeachingAssistant", "http://purl.imsglobal.org/vocab/lis/v2/membership#Learner", "http://purl.imsglobal.org/vocab/lis/v2/membership#Instructor", "http://purl.imsglobal.org/vocab/lis/v2/membership#ContentDeveloper", "http://purl.imsglobal.org/vocab/lis/v2/membership#Mentor", "http://purl.imsglobal.org/vocab/lis/v2/membership#Member", "http://purl.imsglobal.org/vocab/lis/v2/membership#Manager"]  # noqa: E501
        if (self._configuration.client_side_validation and
                not set(roles).issubset(set(allowed_values))):  # noqa: E501
            raise ValueError(
                "Invalid values for `roles` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(roles) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._roles = roles

    @property
    def message(self):
        """Gets the message of this NamesAndRoleMembership.  # noqa: E501

        Only present when the request specifies a `rlid` query parameter. Contains additional attributes which would appear in the LTI launch message were this member to click the link referenced by the `rlid` query parameter  # noqa: E501

        :return: The message of this NamesAndRoleMembership.  # noqa: E501
        :rtype: list[NamesAndRoleMessage]
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NamesAndRoleMembership.

        Only present when the request specifies a `rlid` query parameter. Contains additional attributes which would appear in the LTI launch message were this member to click the link referenced by the `rlid` query parameter  # noqa: E501

        :param message: The message of this NamesAndRoleMembership.  # noqa: E501
        :type: list[NamesAndRoleMessage]
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NamesAndRoleMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NamesAndRoleMembership):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NamesAndRoleMembership):
            return True

        return self.to_dict() != other.to_dict()
