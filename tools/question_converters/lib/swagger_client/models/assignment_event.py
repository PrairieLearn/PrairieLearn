# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssignmentEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'title': 'str',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'description': 'str',
        'context_code': 'str',
        'workflow_state': 'str',
        'url': 'str',
        'html_url': 'str',
        'all_day_date': 'ModelDatetime',
        'all_day': 'bool',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'assignment': 'Assignment',
        'assignment_overrides': 'AssignmentOverride',
        'important_dates': 'bool',
        'rrule': 'str',
        'series_head': 'bool',
        'series_natural_language': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'description': 'description',
        'context_code': 'context_code',
        'workflow_state': 'workflow_state',
        'url': 'url',
        'html_url': 'html_url',
        'all_day_date': 'all_day_date',
        'all_day': 'all_day',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'assignment': 'assignment',
        'assignment_overrides': 'assignment_overrides',
        'important_dates': 'important_dates',
        'rrule': 'rrule',
        'series_head': 'series_head',
        'series_natural_language': 'series_natural_language'
    }

    def __init__(self, id=None, title=None, start_at=None, end_at=None, description=None, context_code=None, workflow_state=None, url=None, html_url=None, all_day_date=None, all_day=None, created_at=None, updated_at=None, assignment=None, assignment_overrides=None, important_dates=None, rrule=None, series_head=None, series_natural_language=None, _configuration=None):  # noqa: E501
        """AssignmentEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._start_at = None
        self._end_at = None
        self._description = None
        self._context_code = None
        self._workflow_state = None
        self._url = None
        self._html_url = None
        self._all_day_date = None
        self._all_day = None
        self._created_at = None
        self._updated_at = None
        self._assignment = None
        self._assignment_overrides = None
        self._important_dates = None
        self._rrule = None
        self._series_head = None
        self._series_natural_language = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if description is not None:
            self.description = description
        if context_code is not None:
            self.context_code = context_code
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if url is not None:
            self.url = url
        if html_url is not None:
            self.html_url = html_url
        if all_day_date is not None:
            self.all_day_date = all_day_date
        if all_day is not None:
            self.all_day = all_day
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if assignment is not None:
            self.assignment = assignment
        if assignment_overrides is not None:
            self.assignment_overrides = assignment_overrides
        if important_dates is not None:
            self.important_dates = important_dates
        if rrule is not None:
            self.rrule = rrule
        if series_head is not None:
            self.series_head = series_head
        if series_natural_language is not None:
            self.series_natural_language = series_natural_language

    @property
    def id(self):
        """Gets the id of this AssignmentEvent.  # noqa: E501

        A synthetic ID for the assignment  # noqa: E501

        :return: The id of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentEvent.

        A synthetic ID for the assignment  # noqa: E501

        :param id: The id of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this AssignmentEvent.  # noqa: E501

        The title of the assignment  # noqa: E501

        :return: The title of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AssignmentEvent.

        The title of the assignment  # noqa: E501

        :param title: The title of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def start_at(self):
        """Gets the start_at of this AssignmentEvent.  # noqa: E501

        The due_at timestamp of the assignment  # noqa: E501

        :return: The start_at of this AssignmentEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this AssignmentEvent.

        The due_at timestamp of the assignment  # noqa: E501

        :param start_at: The start_at of this AssignmentEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this AssignmentEvent.  # noqa: E501

        The due_at timestamp of the assignment  # noqa: E501

        :return: The end_at of this AssignmentEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this AssignmentEvent.

        The due_at timestamp of the assignment  # noqa: E501

        :param end_at: The end_at of this AssignmentEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def description(self):
        """Gets the description of this AssignmentEvent.  # noqa: E501

        The HTML description of the assignment  # noqa: E501

        :return: The description of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentEvent.

        The HTML description of the assignment  # noqa: E501

        :param description: The description of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def context_code(self):
        """Gets the context_code of this AssignmentEvent.  # noqa: E501

        the context code of the (course) calendar this assignment belongs to  # noqa: E501

        :return: The context_code of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._context_code

    @context_code.setter
    def context_code(self, context_code):
        """Sets the context_code of this AssignmentEvent.

        the context code of the (course) calendar this assignment belongs to  # noqa: E501

        :param context_code: The context_code of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._context_code = context_code

    @property
    def workflow_state(self):
        """Gets the workflow_state of this AssignmentEvent.  # noqa: E501

        Current state of the assignment ('published' or 'deleted')  # noqa: E501

        :return: The workflow_state of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this AssignmentEvent.

        Current state of the assignment ('published' or 'deleted')  # noqa: E501

        :param workflow_state: The workflow_state of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def url(self):
        """Gets the url of this AssignmentEvent.  # noqa: E501

        URL for this assignment (note that updating/deleting should be done via the Assignments API)  # noqa: E501

        :return: The url of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AssignmentEvent.

        URL for this assignment (note that updating/deleting should be done via the Assignments API)  # noqa: E501

        :param url: The url of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def html_url(self):
        """Gets the html_url of this AssignmentEvent.  # noqa: E501

        URL for a user to view this assignment  # noqa: E501

        :return: The html_url of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this AssignmentEvent.

        URL for a user to view this assignment  # noqa: E501

        :param html_url: The html_url of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def all_day_date(self):
        """Gets the all_day_date of this AssignmentEvent.  # noqa: E501

        The due date of this assignment  # noqa: E501

        :return: The all_day_date of this AssignmentEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._all_day_date

    @all_day_date.setter
    def all_day_date(self, all_day_date):
        """Sets the all_day_date of this AssignmentEvent.

        The due date of this assignment  # noqa: E501

        :param all_day_date: The all_day_date of this AssignmentEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._all_day_date = all_day_date

    @property
    def all_day(self):
        """Gets the all_day of this AssignmentEvent.  # noqa: E501

        Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)  # noqa: E501

        :return: The all_day of this AssignmentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this AssignmentEvent.

        Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)  # noqa: E501

        :param all_day: The all_day of this AssignmentEvent.  # noqa: E501
        :type: bool
        """

        self._all_day = all_day

    @property
    def created_at(self):
        """Gets the created_at of this AssignmentEvent.  # noqa: E501

        When the assignment was created  # noqa: E501

        :return: The created_at of this AssignmentEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AssignmentEvent.

        When the assignment was created  # noqa: E501

        :param created_at: The created_at of this AssignmentEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this AssignmentEvent.  # noqa: E501

        When the assignment was last updated  # noqa: E501

        :return: The updated_at of this AssignmentEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this AssignmentEvent.

        When the assignment was last updated  # noqa: E501

        :param updated_at: The updated_at of this AssignmentEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def assignment(self):
        """Gets the assignment of this AssignmentEvent.  # noqa: E501

        The full assignment JSON data (See the Assignments API)  # noqa: E501

        :return: The assignment of this AssignmentEvent.  # noqa: E501
        :rtype: Assignment
        """
        return self._assignment

    @assignment.setter
    def assignment(self, assignment):
        """Sets the assignment of this AssignmentEvent.

        The full assignment JSON data (See the Assignments API)  # noqa: E501

        :param assignment: The assignment of this AssignmentEvent.  # noqa: E501
        :type: Assignment
        """

        self._assignment = assignment

    @property
    def assignment_overrides(self):
        """Gets the assignment_overrides of this AssignmentEvent.  # noqa: E501

        The list of AssignmentOverrides that apply to this event (See the Assignments API). This information is useful for determining which students or sections this assignment-due event applies to.  # noqa: E501

        :return: The assignment_overrides of this AssignmentEvent.  # noqa: E501
        :rtype: AssignmentOverride
        """
        return self._assignment_overrides

    @assignment_overrides.setter
    def assignment_overrides(self, assignment_overrides):
        """Sets the assignment_overrides of this AssignmentEvent.

        The list of AssignmentOverrides that apply to this event (See the Assignments API). This information is useful for determining which students or sections this assignment-due event applies to.  # noqa: E501

        :param assignment_overrides: The assignment_overrides of this AssignmentEvent.  # noqa: E501
        :type: AssignmentOverride
        """

        self._assignment_overrides = assignment_overrides

    @property
    def important_dates(self):
        """Gets the important_dates of this AssignmentEvent.  # noqa: E501

        Boolean indicating whether this has important dates.  # noqa: E501

        :return: The important_dates of this AssignmentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._important_dates

    @important_dates.setter
    def important_dates(self, important_dates):
        """Sets the important_dates of this AssignmentEvent.

        Boolean indicating whether this has important dates.  # noqa: E501

        :param important_dates: The important_dates of this AssignmentEvent.  # noqa: E501
        :type: bool
        """

        self._important_dates = important_dates

    @property
    def rrule(self):
        """Gets the rrule of this AssignmentEvent.  # noqa: E501

        An iCalendar RRULE for defining how events in a recurring event series repeat.  # noqa: E501

        :return: The rrule of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._rrule

    @rrule.setter
    def rrule(self, rrule):
        """Sets the rrule of this AssignmentEvent.

        An iCalendar RRULE for defining how events in a recurring event series repeat.  # noqa: E501

        :param rrule: The rrule of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._rrule = rrule

    @property
    def series_head(self):
        """Gets the series_head of this AssignmentEvent.  # noqa: E501

        Trueif this is the first event in the series of recurring events.  # noqa: E501

        :return: The series_head of this AssignmentEvent.  # noqa: E501
        :rtype: bool
        """
        return self._series_head

    @series_head.setter
    def series_head(self, series_head):
        """Sets the series_head of this AssignmentEvent.

        Trueif this is the first event in the series of recurring events.  # noqa: E501

        :param series_head: The series_head of this AssignmentEvent.  # noqa: E501
        :type: bool
        """

        self._series_head = series_head

    @property
    def series_natural_language(self):
        """Gets the series_natural_language of this AssignmentEvent.  # noqa: E501

        A natural language expression of how events occur in the series.  # noqa: E501

        :return: The series_natural_language of this AssignmentEvent.  # noqa: E501
        :rtype: str
        """
        return self._series_natural_language

    @series_natural_language.setter
    def series_natural_language(self, series_natural_language):
        """Sets the series_natural_language of this AssignmentEvent.

        A natural language expression of how events occur in the series.  # noqa: E501

        :param series_natural_language: The series_natural_language of this AssignmentEvent.  # noqa: E501
        :type: str
        """

        self._series_natural_language = series_natural_language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentEvent):
            return True

        return self.to_dict() != other.to_dict()
