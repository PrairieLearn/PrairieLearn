# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'position': 'int',
        'points_possible': 'float',
        'entry_type': 'str',
        'entry_editable': 'bool',
        'stimulus_quiz_entry_id': 'str',
        'status': 'str',
        'properties': 'ItemProperties',
        'entry': 'QuestionItemStimulusItemBankEntryItemBankItem'
    }

    attribute_map = {
        'id': 'id',
        'position': 'position',
        'points_possible': 'points_possible',
        'entry_type': 'entry_type',
        'entry_editable': 'entry_editable',
        'stimulus_quiz_entry_id': 'stimulus_quiz_entry_id',
        'status': 'status',
        'properties': 'properties',
        'entry': 'entry'
    }

    def __init__(self, id=None, position=None, points_possible=None, entry_type=None, entry_editable=None, stimulus_quiz_entry_id=None, status=None, properties=None, entry=None, _configuration=None):  # noqa: E501
        """QuizItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._position = None
        self._points_possible = None
        self._entry_type = None
        self._entry_editable = None
        self._stimulus_quiz_entry_id = None
        self._status = None
        self._properties = None
        self._entry = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if position is not None:
            self.position = position
        if points_possible is not None:
            self.points_possible = points_possible
        if entry_type is not None:
            self.entry_type = entry_type
        if entry_editable is not None:
            self.entry_editable = entry_editable
        if stimulus_quiz_entry_id is not None:
            self.stimulus_quiz_entry_id = stimulus_quiz_entry_id
        if status is not None:
            self.status = status
        if properties is not None:
            self.properties = properties
        if entry is not None:
            self.entry = entry

    @property
    def id(self):
        """Gets the id of this QuizItem.  # noqa: E501

        the ID of the quiz item  # noqa: E501

        :return: The id of this QuizItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuizItem.

        the ID of the quiz item  # noqa: E501

        :param id: The id of this QuizItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def position(self):
        """Gets the position of this QuizItem.  # noqa: E501

        the position of the item within the quiz. The first item in a quiz is given position 1.  # noqa: E501

        :return: The position of this QuizItem.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this QuizItem.

        the position of the item within the quiz. The first item in a quiz is given position 1.  # noqa: E501

        :param position: The position of this QuizItem.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def points_possible(self):
        """Gets the points_possible of this QuizItem.  # noqa: E501

        the number of points available to score on this item  # noqa: E501

        :return: The points_possible of this QuizItem.  # noqa: E501
        :rtype: float
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this QuizItem.

        the number of points available to score on this item  # noqa: E501

        :param points_possible: The points_possible of this QuizItem.  # noqa: E501
        :type: float
        """

        self._points_possible = points_possible

    @property
    def entry_type(self):
        """Gets the entry_type of this QuizItem.  # noqa: E501

        the type of the item. One of 'Item', 'Stimulus', 'BankEntry', or 'Bank'.  # noqa: E501

        :return: The entry_type of this QuizItem.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this QuizItem.

        the type of the item. One of 'Item', 'Stimulus', 'BankEntry', or 'Bank'.  # noqa: E501

        :param entry_type: The entry_type of this QuizItem.  # noqa: E501
        :type: str
        """

        self._entry_type = entry_type

    @property
    def entry_editable(self):
        """Gets the entry_editable of this QuizItem.  # noqa: E501

        whether the current user can edit the item -- used internally, no need to set  # noqa: E501

        :return: The entry_editable of this QuizItem.  # noqa: E501
        :rtype: bool
        """
        return self._entry_editable

    @entry_editable.setter
    def entry_editable(self, entry_editable):
        """Sets the entry_editable of this QuizItem.

        whether the current user can edit the item -- used internally, no need to set  # noqa: E501

        :param entry_editable: The entry_editable of this QuizItem.  # noqa: E501
        :type: bool
        """

        self._entry_editable = entry_editable

    @property
    def stimulus_quiz_entry_id(self):
        """Gets the stimulus_quiz_entry_id of this QuizItem.  # noqa: E501

        the ID of the stimulus that this item is associated with. null if not associated with any stimuli.  # noqa: E501

        :return: The stimulus_quiz_entry_id of this QuizItem.  # noqa: E501
        :rtype: str
        """
        return self._stimulus_quiz_entry_id

    @stimulus_quiz_entry_id.setter
    def stimulus_quiz_entry_id(self, stimulus_quiz_entry_id):
        """Sets the stimulus_quiz_entry_id of this QuizItem.

        the ID of the stimulus that this item is associated with. null if not associated with any stimuli.  # noqa: E501

        :param stimulus_quiz_entry_id: The stimulus_quiz_entry_id of this QuizItem.  # noqa: E501
        :type: str
        """

        self._stimulus_quiz_entry_id = stimulus_quiz_entry_id

    @property
    def status(self):
        """Gets the status of this QuizItem.  # noqa: E501

        status of the item. one of 'mutable' or 'immutable'.  Used internally, no need to set  # noqa: E501

        :return: The status of this QuizItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this QuizItem.

        status of the item. one of 'mutable' or 'immutable'.  Used internally, no need to set  # noqa: E501

        :param status: The status of this QuizItem.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def properties(self):
        """Gets the properties of this QuizItem.  # noqa: E501

        additional properties for the item (currently only populated by items with a BankItem entry)  # noqa: E501

        :return: The properties of this QuizItem.  # noqa: E501
        :rtype: ItemProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this QuizItem.

        additional properties for the item (currently only populated by items with a BankItem entry)  # noqa: E501

        :param properties: The properties of this QuizItem.  # noqa: E501
        :type: ItemProperties
        """

        self._properties = properties

    @property
    def entry(self):
        """Gets the entry of this QuizItem.  # noqa: E501

        the specific data associated with the quiz item.  These items can be either a        QuestionItem, StimulusItem, BankEntryItem, or BankItem, depending on entry_type, and are defined        separately  # noqa: E501

        :return: The entry of this QuizItem.  # noqa: E501
        :rtype: QuestionItemStimulusItemBankEntryItemBankItem
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this QuizItem.

        the specific data associated with the quiz item.  These items can be either a        QuestionItem, StimulusItem, BankEntryItem, or BankItem, depending on entry_type, and are defined        separately  # noqa: E501

        :param entry: The entry of this QuizItem.  # noqa: E501
        :type: QuestionItemStimulusItemBankEntryItemBankItem
        """

        self._entry = entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizItem):
            return True

        return self.to_dict() != other.to_dict()
