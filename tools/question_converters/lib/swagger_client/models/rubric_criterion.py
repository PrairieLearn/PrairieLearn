# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class RubricCriterion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'description': 'str',
        'long_description': 'str',
        'points': 'int',
        'criterion_use_range': 'bool',
        'ratings': 'list[RubricRating]'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'long_description': 'long_description',
        'points': 'points',
        'criterion_use_range': 'criterion_use_range',
        'ratings': 'ratings'
    }

    def __init__(self, id=None, description=None, long_description=None, points=None, criterion_use_range=None, ratings=None, _configuration=None):  # noqa: E501
        """RubricCriterion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._description = None
        self._long_description = None
        self._points = None
        self._criterion_use_range = None
        self._ratings = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if long_description is not None:
            self.long_description = long_description
        if points is not None:
            self.points = points
        if criterion_use_range is not None:
            self.criterion_use_range = criterion_use_range
        if ratings is not None:
            self.ratings = ratings

    @property
    def id(self):
        """Gets the id of this RubricCriterion.  # noqa: E501

        the ID of the criterion  # noqa: E501

        :return: The id of this RubricCriterion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RubricCriterion.

        the ID of the criterion  # noqa: E501

        :param id: The id of this RubricCriterion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this RubricCriterion.  # noqa: E501


        :return: The description of this RubricCriterion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RubricCriterion.


        :param description: The description of this RubricCriterion.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def long_description(self):
        """Gets the long_description of this RubricCriterion.  # noqa: E501


        :return: The long_description of this RubricCriterion.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this RubricCriterion.


        :param long_description: The long_description of this RubricCriterion.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def points(self):
        """Gets the points of this RubricCriterion.  # noqa: E501


        :return: The points of this RubricCriterion.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RubricCriterion.


        :param points: The points of this RubricCriterion.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def criterion_use_range(self):
        """Gets the criterion_use_range of this RubricCriterion.  # noqa: E501


        :return: The criterion_use_range of this RubricCriterion.  # noqa: E501
        :rtype: bool
        """
        return self._criterion_use_range

    @criterion_use_range.setter
    def criterion_use_range(self, criterion_use_range):
        """Sets the criterion_use_range of this RubricCriterion.


        :param criterion_use_range: The criterion_use_range of this RubricCriterion.  # noqa: E501
        :type: bool
        """

        self._criterion_use_range = criterion_use_range

    @property
    def ratings(self):
        """Gets the ratings of this RubricCriterion.  # noqa: E501

        the possible ratings for this Criterion  # noqa: E501

        :return: The ratings of this RubricCriterion.  # noqa: E501
        :rtype: list[RubricRating]
        """
        return self._ratings

    @ratings.setter
    def ratings(self, ratings):
        """Sets the ratings of this RubricCriterion.

        the possible ratings for this Criterion  # noqa: E501

        :param ratings: The ratings of this RubricCriterion.  # noqa: E501
        :type: list[RubricRating]
        """

        self._ratings = ratings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RubricCriterion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RubricCriterion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RubricCriterion):
            return True

        return self.to_dict() != other.to_dict()
