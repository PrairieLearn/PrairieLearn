# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class BankItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'archived': 'bool',
        'entry_count': 'int',
        'item_entry_count': 'int'
    }

    attribute_map = {
        'title': 'title',
        'archived': 'archived',
        'entry_count': 'entry_count',
        'item_entry_count': 'item_entry_count'
    }

    def __init__(self, title=None, archived=None, entry_count=None, item_entry_count=None, _configuration=None):  # noqa: E501
        """BankItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._archived = None
        self._entry_count = None
        self._item_entry_count = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if archived is not None:
            self.archived = archived
        if entry_count is not None:
            self.entry_count = entry_count
        if item_entry_count is not None:
            self.item_entry_count = item_entry_count

    @property
    def title(self):
        """Gets the title of this BankItem.  # noqa: E501

        the title of the bank  # noqa: E501

        :return: The title of this BankItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BankItem.

        the title of the bank  # noqa: E501

        :param title: The title of this BankItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def archived(self):
        """Gets the archived of this BankItem.  # noqa: E501

        whether the bank is archived  # noqa: E501

        :return: The archived of this BankItem.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this BankItem.

        whether the bank is archived  # noqa: E501

        :param archived: The archived of this BankItem.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def entry_count(self):
        """Gets the entry_count of this BankItem.  # noqa: E501

        the number of items in the bank, including stimuli  # noqa: E501

        :return: The entry_count of this BankItem.  # noqa: E501
        :rtype: int
        """
        return self._entry_count

    @entry_count.setter
    def entry_count(self, entry_count):
        """Sets the entry_count of this BankItem.

        the number of items in the bank, including stimuli  # noqa: E501

        :param entry_count: The entry_count of this BankItem.  # noqa: E501
        :type: int
        """

        self._entry_count = entry_count

    @property
    def item_entry_count(self):
        """Gets the item_entry_count of this BankItem.  # noqa: E501

        the number of items in the bank, excluding stimuli  # noqa: E501

        :return: The item_entry_count of this BankItem.  # noqa: E501
        :rtype: int
        """
        return self._item_entry_count

    @item_entry_count.setter
    def item_entry_count(self, item_entry_count):
        """Sets the item_entry_count of this BankItem.

        the number of items in the bank, excluding stimuli  # noqa: E501

        :param item_entry_count: The item_entry_count of this BankItem.  # noqa: E501
        :type: int
        """

        self._item_entry_count = item_entry_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BankItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BankItem):
            return True

        return self.to_dict() != other.to_dict()
