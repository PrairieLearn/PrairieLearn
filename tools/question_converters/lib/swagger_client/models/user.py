# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'sortable_name': 'str',
        'last_name': 'str',
        'first_name': 'str',
        'short_name': 'str',
        'sis_user_id': 'str',
        'sis_import_id': 'int',
        'integration_id': 'str',
        'login_id': 'str',
        'avatar_url': 'str',
        'avatar_state': 'str',
        'enrollments': 'list[Enrollment]',
        'email': 'str',
        'locale': 'str',
        'last_login': 'datetime',
        'time_zone': 'str',
        'bio': 'str',
        'pronouns': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sortable_name': 'sortable_name',
        'last_name': 'last_name',
        'first_name': 'first_name',
        'short_name': 'short_name',
        'sis_user_id': 'sis_user_id',
        'sis_import_id': 'sis_import_id',
        'integration_id': 'integration_id',
        'login_id': 'login_id',
        'avatar_url': 'avatar_url',
        'avatar_state': 'avatar_state',
        'enrollments': 'enrollments',
        'email': 'email',
        'locale': 'locale',
        'last_login': 'last_login',
        'time_zone': 'time_zone',
        'bio': 'bio',
        'pronouns': 'pronouns'
    }

    def __init__(self, id=None, name=None, sortable_name=None, last_name=None, first_name=None, short_name=None, sis_user_id=None, sis_import_id=None, integration_id=None, login_id=None, avatar_url=None, avatar_state=None, enrollments=None, email=None, locale=None, last_login=None, time_zone=None, bio=None, pronouns=None, _configuration=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._sortable_name = None
        self._last_name = None
        self._first_name = None
        self._short_name = None
        self._sis_user_id = None
        self._sis_import_id = None
        self._integration_id = None
        self._login_id = None
        self._avatar_url = None
        self._avatar_state = None
        self._enrollments = None
        self._email = None
        self._locale = None
        self._last_login = None
        self._time_zone = None
        self._bio = None
        self._pronouns = None
        self.discriminator = None

        self.id = id
        if name is not None:
            self.name = name
        if sortable_name is not None:
            self.sortable_name = sortable_name
        if last_name is not None:
            self.last_name = last_name
        if first_name is not None:
            self.first_name = first_name
        if short_name is not None:
            self.short_name = short_name
        if sis_user_id is not None:
            self.sis_user_id = sis_user_id
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if integration_id is not None:
            self.integration_id = integration_id
        if login_id is not None:
            self.login_id = login_id
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if avatar_state is not None:
            self.avatar_state = avatar_state
        if enrollments is not None:
            self.enrollments = enrollments
        if email is not None:
            self.email = email
        if locale is not None:
            self.locale = locale
        if last_login is not None:
            self.last_login = last_login
        if time_zone is not None:
            self.time_zone = time_zone
        if bio is not None:
            self.bio = bio
        if pronouns is not None:
            self.pronouns = pronouns

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501

        The ID of the user.  # noqa: E501

        :return: The id of this User.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The ID of the user.  # noqa: E501

        :param id: The id of this User.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501

        The name of the user.  # noqa: E501

        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        The name of the user.  # noqa: E501

        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sortable_name(self):
        """Gets the sortable_name of this User.  # noqa: E501

        The name of the user that is should be used for sorting groups of users, such as in the gradebook.  # noqa: E501

        :return: The sortable_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._sortable_name

    @sortable_name.setter
    def sortable_name(self, sortable_name):
        """Sets the sortable_name of this User.

        The name of the user that is should be used for sorting groups of users, such as in the gradebook.  # noqa: E501

        :param sortable_name: The sortable_name of this User.  # noqa: E501
        :type: str
        """

        self._sortable_name = sortable_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        The last name of the user.  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of the user.  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        The first name of the user.  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of the user.  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def short_name(self):
        """Gets the short_name of this User.  # noqa: E501

        A short name the user has selected, for use in conversations or other less formal places through the site.  # noqa: E501

        :return: The short_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this User.

        A short name the user has selected, for use in conversations or other less formal places through the site.  # noqa: E501

        :param short_name: The short_name of this User.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def sis_user_id(self):
        """Gets the sis_user_id of this User.  # noqa: E501

        The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.  # noqa: E501

        :return: The sis_user_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._sis_user_id

    @sis_user_id.setter
    def sis_user_id(self, sis_user_id):
        """Sets the sis_user_id of this User.

        The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.  # noqa: E501

        :param sis_user_id: The sis_user_id of this User.  # noqa: E501
        :type: str
        """

        self._sis_user_id = sis_user_id

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this User.  # noqa: E501

        The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this User.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this User.

        The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this User.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def integration_id(self):
        """Gets the integration_id of this User.  # noqa: E501

        The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.  # noqa: E501

        :return: The integration_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this User.

        The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.  # noqa: E501

        :param integration_id: The integration_id of this User.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def login_id(self):
        """Gets the login_id of this User.  # noqa: E501

        The unique login id for the user.  This is what the user uses to log in to Canvas.  # noqa: E501

        :return: The login_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._login_id

    @login_id.setter
    def login_id(self, login_id):
        """Sets the login_id of this User.

        The unique login id for the user.  This is what the user uses to log in to Canvas.  # noqa: E501

        :param login_id: The login_id of this User.  # noqa: E501
        :type: str
        """

        self._login_id = login_id

    @property
    def avatar_url(self):
        """Gets the avatar_url of this User.  # noqa: E501

        If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.  # noqa: E501

        :return: The avatar_url of this User.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this User.

        If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.  # noqa: E501

        :param avatar_url: The avatar_url of this User.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def avatar_state(self):
        """Gets the avatar_state of this User.  # noqa: E501

        Optional: If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.  # noqa: E501

        :return: The avatar_state of this User.  # noqa: E501
        :rtype: str
        """
        return self._avatar_state

    @avatar_state.setter
    def avatar_state(self, avatar_state):
        """Sets the avatar_state of this User.

        Optional: If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.  # noqa: E501

        :param avatar_state: The avatar_state of this User.  # noqa: E501
        :type: str
        """

        self._avatar_state = avatar_state

    @property
    def enrollments(self):
        """Gets the enrollments of this User.  # noqa: E501

        Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.  # noqa: E501

        :return: The enrollments of this User.  # noqa: E501
        :rtype: list[Enrollment]
        """
        return self._enrollments

    @enrollments.setter
    def enrollments(self, enrollments):
        """Sets the enrollments of this User.

        Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.  # noqa: E501

        :param enrollments: The enrollments of this User.  # noqa: E501
        :type: list[Enrollment]
        """

        self._enrollments = enrollments

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501

        Optional: This field can be requested with certain API calls, and will return the users primary email address.  # noqa: E501

        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        Optional: This field can be requested with certain API calls, and will return the users primary email address.  # noqa: E501

        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def locale(self):
        """Gets the locale of this User.  # noqa: E501

        Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.  # noqa: E501

        :return: The locale of this User.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.  # noqa: E501

        :param locale: The locale of this User.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def last_login(self):
        """Gets the last_login of this User.  # noqa: E501

        Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.  # noqa: E501

        :return: The last_login of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this User.

        Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.  # noqa: E501

        :param last_login: The last_login of this User.  # noqa: E501
        :type: datetime
        """

        self._last_login = last_login

    @property
    def time_zone(self):
        """Gets the time_zone of this User.  # noqa: E501

        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.  # noqa: E501

        :return: The time_zone of this User.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this User.

        Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.  # noqa: E501

        :param time_zone: The time_zone of this User.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    @property
    def bio(self):
        """Gets the bio of this User.  # noqa: E501

        Optional: The user's bio.  # noqa: E501

        :return: The bio of this User.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this User.

        Optional: The user's bio.  # noqa: E501

        :param bio: The bio of this User.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def pronouns(self):
        """Gets the pronouns of this User.  # noqa: E501

        Optional: This field is only returned if pronouns are enabled, and will return the pronouns of the user.  # noqa: E501

        :return: The pronouns of this User.  # noqa: E501
        :rtype: str
        """
        return self._pronouns

    @pronouns.setter
    def pronouns(self, pronouns):
        """Sets the pronouns of this User.

        Optional: This field is only returned if pronouns are enabled, and will return the pronouns of the user.  # noqa: E501

        :param pronouns: The pronouns of this User.  # noqa: E501
        :type: str
        """

        self._pronouns = pronouns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, User):
            return True

        return self.to_dict() != other.to_dict()
