# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccountCalendar(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'parent_account_id': 'int',
        'root_account_id': 'int',
        'visible': 'bool',
        'auto_subscribe': 'bool',
        'sub_account_count': 'int',
        'asset_string': 'str',
        'type': 'str',
        'calendar_event_url': 'str',
        'can_create_calendar_events': 'bool',
        'create_calendar_event_url': 'str',
        'new_calendar_event_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'parent_account_id': 'parent_account_id',
        'root_account_id': 'root_account_id',
        'visible': 'visible',
        'auto_subscribe': 'auto_subscribe',
        'sub_account_count': 'sub_account_count',
        'asset_string': 'asset_string',
        'type': 'type',
        'calendar_event_url': 'calendar_event_url',
        'can_create_calendar_events': 'can_create_calendar_events',
        'create_calendar_event_url': 'create_calendar_event_url',
        'new_calendar_event_url': 'new_calendar_event_url'
    }

    def __init__(self, id=None, name=None, parent_account_id=None, root_account_id=None, visible=None, auto_subscribe=None, sub_account_count=None, asset_string=None, type=None, calendar_event_url=None, can_create_calendar_events=None, create_calendar_event_url=None, new_calendar_event_url=None, _configuration=None):  # noqa: E501
        """AccountCalendar - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._parent_account_id = None
        self._root_account_id = None
        self._visible = None
        self._auto_subscribe = None
        self._sub_account_count = None
        self._asset_string = None
        self._type = None
        self._calendar_event_url = None
        self._can_create_calendar_events = None
        self._create_calendar_event_url = None
        self._new_calendar_event_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if parent_account_id is not None:
            self.parent_account_id = parent_account_id
        if root_account_id is not None:
            self.root_account_id = root_account_id
        if visible is not None:
            self.visible = visible
        if auto_subscribe is not None:
            self.auto_subscribe = auto_subscribe
        if sub_account_count is not None:
            self.sub_account_count = sub_account_count
        if asset_string is not None:
            self.asset_string = asset_string
        if type is not None:
            self.type = type
        if calendar_event_url is not None:
            self.calendar_event_url = calendar_event_url
        if can_create_calendar_events is not None:
            self.can_create_calendar_events = can_create_calendar_events
        if create_calendar_event_url is not None:
            self.create_calendar_event_url = create_calendar_event_url
        if new_calendar_event_url is not None:
            self.new_calendar_event_url = new_calendar_event_url

    @property
    def id(self):
        """Gets the id of this AccountCalendar.  # noqa: E501

        the ID of the account associated with this calendar  # noqa: E501

        :return: The id of this AccountCalendar.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountCalendar.

        the ID of the account associated with this calendar  # noqa: E501

        :param id: The id of this AccountCalendar.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AccountCalendar.  # noqa: E501

        the name of the account associated with this calendar  # noqa: E501

        :return: The name of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountCalendar.

        the name of the account associated with this calendar  # noqa: E501

        :param name: The name of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent_account_id(self):
        """Gets the parent_account_id of this AccountCalendar.  # noqa: E501

        the account's parent ID, or null if this is the root account  # noqa: E501

        :return: The parent_account_id of this AccountCalendar.  # noqa: E501
        :rtype: int
        """
        return self._parent_account_id

    @parent_account_id.setter
    def parent_account_id(self, parent_account_id):
        """Sets the parent_account_id of this AccountCalendar.

        the account's parent ID, or null if this is the root account  # noqa: E501

        :param parent_account_id: The parent_account_id of this AccountCalendar.  # noqa: E501
        :type: int
        """

        self._parent_account_id = parent_account_id

    @property
    def root_account_id(self):
        """Gets the root_account_id of this AccountCalendar.  # noqa: E501

        the ID of the root account, or null if this is the root account  # noqa: E501

        :return: The root_account_id of this AccountCalendar.  # noqa: E501
        :rtype: int
        """
        return self._root_account_id

    @root_account_id.setter
    def root_account_id(self, root_account_id):
        """Sets the root_account_id of this AccountCalendar.

        the ID of the root account, or null if this is the root account  # noqa: E501

        :param root_account_id: The root_account_id of this AccountCalendar.  # noqa: E501
        :type: int
        """

        self._root_account_id = root_account_id

    @property
    def visible(self):
        """Gets the visible of this AccountCalendar.  # noqa: E501

        whether this calendar is visible to users  # noqa: E501

        :return: The visible of this AccountCalendar.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this AccountCalendar.

        whether this calendar is visible to users  # noqa: E501

        :param visible: The visible of this AccountCalendar.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def auto_subscribe(self):
        """Gets the auto_subscribe of this AccountCalendar.  # noqa: E501

        whether users see this calendar's events without needing to manually add it  # noqa: E501

        :return: The auto_subscribe of this AccountCalendar.  # noqa: E501
        :rtype: bool
        """
        return self._auto_subscribe

    @auto_subscribe.setter
    def auto_subscribe(self, auto_subscribe):
        """Sets the auto_subscribe of this AccountCalendar.

        whether users see this calendar's events without needing to manually add it  # noqa: E501

        :param auto_subscribe: The auto_subscribe of this AccountCalendar.  # noqa: E501
        :type: bool
        """

        self._auto_subscribe = auto_subscribe

    @property
    def sub_account_count(self):
        """Gets the sub_account_count of this AccountCalendar.  # noqa: E501

        number of this account's direct sub-accounts  # noqa: E501

        :return: The sub_account_count of this AccountCalendar.  # noqa: E501
        :rtype: int
        """
        return self._sub_account_count

    @sub_account_count.setter
    def sub_account_count(self, sub_account_count):
        """Sets the sub_account_count of this AccountCalendar.

        number of this account's direct sub-accounts  # noqa: E501

        :param sub_account_count: The sub_account_count of this AccountCalendar.  # noqa: E501
        :type: int
        """

        self._sub_account_count = sub_account_count

    @property
    def asset_string(self):
        """Gets the asset_string of this AccountCalendar.  # noqa: E501

        Asset string of the account  # noqa: E501

        :return: The asset_string of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._asset_string

    @asset_string.setter
    def asset_string(self, asset_string):
        """Sets the asset_string of this AccountCalendar.

        Asset string of the account  # noqa: E501

        :param asset_string: The asset_string of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._asset_string = asset_string

    @property
    def type(self):
        """Gets the type of this AccountCalendar.  # noqa: E501

        Object type  # noqa: E501

        :return: The type of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountCalendar.

        Object type  # noqa: E501

        :param type: The type of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def calendar_event_url(self):
        """Gets the calendar_event_url of this AccountCalendar.  # noqa: E501

        url to get full detailed events  # noqa: E501

        :return: The calendar_event_url of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._calendar_event_url

    @calendar_event_url.setter
    def calendar_event_url(self, calendar_event_url):
        """Sets the calendar_event_url of this AccountCalendar.

        url to get full detailed events  # noqa: E501

        :param calendar_event_url: The calendar_event_url of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._calendar_event_url = calendar_event_url

    @property
    def can_create_calendar_events(self):
        """Gets the can_create_calendar_events of this AccountCalendar.  # noqa: E501

        whether the user can create calendar events  # noqa: E501

        :return: The can_create_calendar_events of this AccountCalendar.  # noqa: E501
        :rtype: bool
        """
        return self._can_create_calendar_events

    @can_create_calendar_events.setter
    def can_create_calendar_events(self, can_create_calendar_events):
        """Sets the can_create_calendar_events of this AccountCalendar.

        whether the user can create calendar events  # noqa: E501

        :param can_create_calendar_events: The can_create_calendar_events of this AccountCalendar.  # noqa: E501
        :type: bool
        """

        self._can_create_calendar_events = can_create_calendar_events

    @property
    def create_calendar_event_url(self):
        """Gets the create_calendar_event_url of this AccountCalendar.  # noqa: E501

        API path to create events for the account  # noqa: E501

        :return: The create_calendar_event_url of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._create_calendar_event_url

    @create_calendar_event_url.setter
    def create_calendar_event_url(self, create_calendar_event_url):
        """Sets the create_calendar_event_url of this AccountCalendar.

        API path to create events for the account  # noqa: E501

        :param create_calendar_event_url: The create_calendar_event_url of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._create_calendar_event_url = create_calendar_event_url

    @property
    def new_calendar_event_url(self):
        """Gets the new_calendar_event_url of this AccountCalendar.  # noqa: E501

        url to open the more options event editor  # noqa: E501

        :return: The new_calendar_event_url of this AccountCalendar.  # noqa: E501
        :rtype: str
        """
        return self._new_calendar_event_url

    @new_calendar_event_url.setter
    def new_calendar_event_url(self, new_calendar_event_url):
        """Sets the new_calendar_event_url of this AccountCalendar.

        url to open the more options event editor  # noqa: E501

        :param new_calendar_event_url: The new_calendar_event_url of this AccountCalendar.  # noqa: E501
        :type: str
        """

        self._new_calendar_event_url = new_calendar_event_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountCalendar, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountCalendar):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountCalendar):
            return True

        return self.to_dict() != other.to_dict()
