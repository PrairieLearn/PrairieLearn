# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ContentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'points_possible': 'int',
        'due_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'locked_for_user': 'bool',
        'lock_explanation': 'str',
        'lock_info': 'LockInfo'
    }

    attribute_map = {
        'points_possible': 'points_possible',
        'due_at': 'due_at',
        'unlock_at': 'unlock_at',
        'lock_at': 'lock_at',
        'locked_for_user': 'locked_for_user',
        'lock_explanation': 'lock_explanation',
        'lock_info': 'lock_info'
    }

    def __init__(self, points_possible=None, due_at=None, unlock_at=None, lock_at=None, locked_for_user=None, lock_explanation=None, lock_info=None, _configuration=None):  # noqa: E501
        """ContentDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._points_possible = None
        self._due_at = None
        self._unlock_at = None
        self._lock_at = None
        self._locked_for_user = None
        self._lock_explanation = None
        self._lock_info = None
        self.discriminator = None

        if points_possible is not None:
            self.points_possible = points_possible
        if due_at is not None:
            self.due_at = due_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if lock_at is not None:
            self.lock_at = lock_at
        if locked_for_user is not None:
            self.locked_for_user = locked_for_user
        if lock_explanation is not None:
            self.lock_explanation = lock_explanation
        if lock_info is not None:
            self.lock_info = lock_info

    @property
    def points_possible(self):
        """Gets the points_possible of this ContentDetails.  # noqa: E501


        :return: The points_possible of this ContentDetails.  # noqa: E501
        :rtype: int
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this ContentDetails.


        :param points_possible: The points_possible of this ContentDetails.  # noqa: E501
        :type: int
        """

        self._points_possible = points_possible

    @property
    def due_at(self):
        """Gets the due_at of this ContentDetails.  # noqa: E501


        :return: The due_at of this ContentDetails.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this ContentDetails.


        :param due_at: The due_at of this ContentDetails.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this ContentDetails.  # noqa: E501


        :return: The unlock_at of this ContentDetails.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this ContentDetails.


        :param unlock_at: The unlock_at of this ContentDetails.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """Gets the lock_at of this ContentDetails.  # noqa: E501


        :return: The lock_at of this ContentDetails.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this ContentDetails.


        :param lock_at: The lock_at of this ContentDetails.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def locked_for_user(self):
        """Gets the locked_for_user of this ContentDetails.  # noqa: E501


        :return: The locked_for_user of this ContentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._locked_for_user

    @locked_for_user.setter
    def locked_for_user(self, locked_for_user):
        """Sets the locked_for_user of this ContentDetails.


        :param locked_for_user: The locked_for_user of this ContentDetails.  # noqa: E501
        :type: bool
        """

        self._locked_for_user = locked_for_user

    @property
    def lock_explanation(self):
        """Gets the lock_explanation of this ContentDetails.  # noqa: E501


        :return: The lock_explanation of this ContentDetails.  # noqa: E501
        :rtype: str
        """
        return self._lock_explanation

    @lock_explanation.setter
    def lock_explanation(self, lock_explanation):
        """Sets the lock_explanation of this ContentDetails.


        :param lock_explanation: The lock_explanation of this ContentDetails.  # noqa: E501
        :type: str
        """

        self._lock_explanation = lock_explanation

    @property
    def lock_info(self):
        """Gets the lock_info of this ContentDetails.  # noqa: E501


        :return: The lock_info of this ContentDetails.  # noqa: E501
        :rtype: LockInfo
        """
        return self._lock_info

    @lock_info.setter
    def lock_info(self, lock_info):
        """Sets the lock_info of this ContentDetails.


        :param lock_info: The lock_info of this ContentDetails.  # noqa: E501
        :type: LockInfo
        """

        self._lock_info = lock_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentDetails):
            return True

        return self.to_dict() != other.to_dict()
