# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssignmentOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'assignment_id': 'int',
        'quiz_id': 'int',
        'context_module_id': 'int',
        'discussion_topic_id': 'int',
        'wiki_page_id': 'int',
        'attachment_id': 'int',
        'student_ids': 'list[int]',
        'group_id': 'int',
        'course_section_id': 'int',
        'title': 'str',
        'due_at': 'ModelDatetime',
        'all_day': 'bool',
        'all_day_date': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime'
    }

    attribute_map = {
        'id': 'id',
        'assignment_id': 'assignment_id',
        'quiz_id': 'quiz_id',
        'context_module_id': 'context_module_id',
        'discussion_topic_id': 'discussion_topic_id',
        'wiki_page_id': 'wiki_page_id',
        'attachment_id': 'attachment_id',
        'student_ids': 'student_ids',
        'group_id': 'group_id',
        'course_section_id': 'course_section_id',
        'title': 'title',
        'due_at': 'due_at',
        'all_day': 'all_day',
        'all_day_date': 'all_day_date',
        'unlock_at': 'unlock_at',
        'lock_at': 'lock_at'
    }

    def __init__(self, id=None, assignment_id=None, quiz_id=None, context_module_id=None, discussion_topic_id=None, wiki_page_id=None, attachment_id=None, student_ids=None, group_id=None, course_section_id=None, title=None, due_at=None, all_day=None, all_day_date=None, unlock_at=None, lock_at=None, _configuration=None):  # noqa: E501
        """AssignmentOverride - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._assignment_id = None
        self._quiz_id = None
        self._context_module_id = None
        self._discussion_topic_id = None
        self._wiki_page_id = None
        self._attachment_id = None
        self._student_ids = None
        self._group_id = None
        self._course_section_id = None
        self._title = None
        self._due_at = None
        self._all_day = None
        self._all_day_date = None
        self._unlock_at = None
        self._lock_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if quiz_id is not None:
            self.quiz_id = quiz_id
        if context_module_id is not None:
            self.context_module_id = context_module_id
        if discussion_topic_id is not None:
            self.discussion_topic_id = discussion_topic_id
        if wiki_page_id is not None:
            self.wiki_page_id = wiki_page_id
        if attachment_id is not None:
            self.attachment_id = attachment_id
        if student_ids is not None:
            self.student_ids = student_ids
        if group_id is not None:
            self.group_id = group_id
        if course_section_id is not None:
            self.course_section_id = course_section_id
        if title is not None:
            self.title = title
        if due_at is not None:
            self.due_at = due_at
        if all_day is not None:
            self.all_day = all_day
        if all_day_date is not None:
            self.all_day_date = all_day_date
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if lock_at is not None:
            self.lock_at = lock_at

    @property
    def id(self):
        """Gets the id of this AssignmentOverride.  # noqa: E501

        the ID of the assignment override  # noqa: E501

        :return: The id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentOverride.

        the ID of the assignment override  # noqa: E501

        :param id: The id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this AssignmentOverride.  # noqa: E501

        the ID of the assignment the override applies to (present if the override applies to an assignment)  # noqa: E501

        :return: The assignment_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this AssignmentOverride.

        the ID of the assignment the override applies to (present if the override applies to an assignment)  # noqa: E501

        :param assignment_id: The assignment_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def quiz_id(self):
        """Gets the quiz_id of this AssignmentOverride.  # noqa: E501

        the ID of the quiz the override applies to (present if the override applies to a quiz)  # noqa: E501

        :return: The quiz_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._quiz_id

    @quiz_id.setter
    def quiz_id(self, quiz_id):
        """Sets the quiz_id of this AssignmentOverride.

        the ID of the quiz the override applies to (present if the override applies to a quiz)  # noqa: E501

        :param quiz_id: The quiz_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._quiz_id = quiz_id

    @property
    def context_module_id(self):
        """Gets the context_module_id of this AssignmentOverride.  # noqa: E501

        the ID of the module the override applies to (present if the override applies to a module)  # noqa: E501

        :return: The context_module_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._context_module_id

    @context_module_id.setter
    def context_module_id(self, context_module_id):
        """Sets the context_module_id of this AssignmentOverride.

        the ID of the module the override applies to (present if the override applies to a module)  # noqa: E501

        :param context_module_id: The context_module_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._context_module_id = context_module_id

    @property
    def discussion_topic_id(self):
        """Gets the discussion_topic_id of this AssignmentOverride.  # noqa: E501

        the ID of the discussion the override applies to (present if the override applies to an ungraded discussion)  # noqa: E501

        :return: The discussion_topic_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._discussion_topic_id

    @discussion_topic_id.setter
    def discussion_topic_id(self, discussion_topic_id):
        """Sets the discussion_topic_id of this AssignmentOverride.

        the ID of the discussion the override applies to (present if the override applies to an ungraded discussion)  # noqa: E501

        :param discussion_topic_id: The discussion_topic_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._discussion_topic_id = discussion_topic_id

    @property
    def wiki_page_id(self):
        """Gets the wiki_page_id of this AssignmentOverride.  # noqa: E501

        the ID of the page the override applies to (present if the override applies to a page)  # noqa: E501

        :return: The wiki_page_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._wiki_page_id

    @wiki_page_id.setter
    def wiki_page_id(self, wiki_page_id):
        """Sets the wiki_page_id of this AssignmentOverride.

        the ID of the page the override applies to (present if the override applies to a page)  # noqa: E501

        :param wiki_page_id: The wiki_page_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._wiki_page_id = wiki_page_id

    @property
    def attachment_id(self):
        """Gets the attachment_id of this AssignmentOverride.  # noqa: E501

        the ID of the file the override applies to (present if the override applies to a file)  # noqa: E501

        :return: The attachment_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._attachment_id

    @attachment_id.setter
    def attachment_id(self, attachment_id):
        """Sets the attachment_id of this AssignmentOverride.

        the ID of the file the override applies to (present if the override applies to a file)  # noqa: E501

        :param attachment_id: The attachment_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._attachment_id = attachment_id

    @property
    def student_ids(self):
        """Gets the student_ids of this AssignmentOverride.  # noqa: E501

        the IDs of the override's target students (present if the override targets an ad-hoc set of students)  # noqa: E501

        :return: The student_ids of this AssignmentOverride.  # noqa: E501
        :rtype: list[int]
        """
        return self._student_ids

    @student_ids.setter
    def student_ids(self, student_ids):
        """Sets the student_ids of this AssignmentOverride.

        the IDs of the override's target students (present if the override targets an ad-hoc set of students)  # noqa: E501

        :param student_ids: The student_ids of this AssignmentOverride.  # noqa: E501
        :type: list[int]
        """

        self._student_ids = student_ids

    @property
    def group_id(self):
        """Gets the group_id of this AssignmentOverride.  # noqa: E501

        the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)  # noqa: E501

        :return: The group_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this AssignmentOverride.

        the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)  # noqa: E501

        :param group_id: The group_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def course_section_id(self):
        """Gets the course_section_id of this AssignmentOverride.  # noqa: E501

        the ID of the overrides's target section (present if the override targets a section)  # noqa: E501

        :return: The course_section_id of this AssignmentOverride.  # noqa: E501
        :rtype: int
        """
        return self._course_section_id

    @course_section_id.setter
    def course_section_id(self, course_section_id):
        """Sets the course_section_id of this AssignmentOverride.

        the ID of the overrides's target section (present if the override targets a section)  # noqa: E501

        :param course_section_id: The course_section_id of this AssignmentOverride.  # noqa: E501
        :type: int
        """

        self._course_section_id = course_section_id

    @property
    def title(self):
        """Gets the title of this AssignmentOverride.  # noqa: E501

        the title of the override  # noqa: E501

        :return: The title of this AssignmentOverride.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AssignmentOverride.

        the title of the override  # noqa: E501

        :param title: The title of this AssignmentOverride.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def due_at(self):
        """Gets the due_at of this AssignmentOverride.  # noqa: E501

        the overridden due at (present if due_at is overridden)  # noqa: E501

        :return: The due_at of this AssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this AssignmentOverride.

        the overridden due at (present if due_at is overridden)  # noqa: E501

        :param due_at: The due_at of this AssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def all_day(self):
        """Gets the all_day of this AssignmentOverride.  # noqa: E501

        the overridden all day flag (present if due_at is overridden)  # noqa: E501

        :return: The all_day of this AssignmentOverride.  # noqa: E501
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this AssignmentOverride.

        the overridden all day flag (present if due_at is overridden)  # noqa: E501

        :param all_day: The all_day of this AssignmentOverride.  # noqa: E501
        :type: bool
        """

        self._all_day = all_day

    @property
    def all_day_date(self):
        """Gets the all_day_date of this AssignmentOverride.  # noqa: E501

        the overridden all day date (present if due_at is overridden)  # noqa: E501

        :return: The all_day_date of this AssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._all_day_date

    @all_day_date.setter
    def all_day_date(self, all_day_date):
        """Sets the all_day_date of this AssignmentOverride.

        the overridden all day date (present if due_at is overridden)  # noqa: E501

        :param all_day_date: The all_day_date of this AssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._all_day_date = all_day_date

    @property
    def unlock_at(self):
        """Gets the unlock_at of this AssignmentOverride.  # noqa: E501

        the overridden unlock at (present if unlock_at is overridden)  # noqa: E501

        :return: The unlock_at of this AssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this AssignmentOverride.

        the overridden unlock at (present if unlock_at is overridden)  # noqa: E501

        :param unlock_at: The unlock_at of this AssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """Gets the lock_at of this AssignmentOverride.  # noqa: E501

        the overridden lock at, if any (present if lock_at is overridden)  # noqa: E501

        :return: The lock_at of this AssignmentOverride.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this AssignmentOverride.

        the overridden lock at, if any (present if lock_at is overridden)  # noqa: E501

        :param lock_at: The lock_at of this AssignmentOverride.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentOverride):
            return True

        return self.to_dict() != other.to_dict()
