# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TermsOfService(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'terms_type': 'str',
        'passive': 'bool',
        'account_id': 'int',
        'content': 'str',
        'self_registration_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'terms_type': 'terms_type',
        'passive': 'passive',
        'account_id': 'account_id',
        'content': 'content',
        'self_registration_type': 'self_registration_type'
    }

    def __init__(self, id=None, terms_type=None, passive=None, account_id=None, content=None, self_registration_type=None, _configuration=None):  # noqa: E501
        """TermsOfService - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._terms_type = None
        self._passive = None
        self._account_id = None
        self._content = None
        self._self_registration_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if terms_type is not None:
            self.terms_type = terms_type
        if passive is not None:
            self.passive = passive
        if account_id is not None:
            self.account_id = account_id
        if content is not None:
            self.content = content
        if self_registration_type is not None:
            self.self_registration_type = self_registration_type

    @property
    def id(self):
        """Gets the id of this TermsOfService.  # noqa: E501

        Terms Of Service id  # noqa: E501

        :return: The id of this TermsOfService.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TermsOfService.

        Terms Of Service id  # noqa: E501

        :param id: The id of this TermsOfService.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def terms_type(self):
        """Gets the terms_type of this TermsOfService.  # noqa: E501

        The given type for the Terms of Service  # noqa: E501

        :return: The terms_type of this TermsOfService.  # noqa: E501
        :rtype: str
        """
        return self._terms_type

    @terms_type.setter
    def terms_type(self, terms_type):
        """Sets the terms_type of this TermsOfService.

        The given type for the Terms of Service  # noqa: E501

        :param terms_type: The terms_type of this TermsOfService.  # noqa: E501
        :type: str
        """
        allowed_values = ["default", "custom", "no_terms"]  # noqa: E501
        if (self._configuration.client_side_validation and
                terms_type not in allowed_values):
            raise ValueError(
                "Invalid value for `terms_type` ({0}), must be one of {1}"  # noqa: E501
                .format(terms_type, allowed_values)
            )

        self._terms_type = terms_type

    @property
    def passive(self):
        """Gets the passive of this TermsOfService.  # noqa: E501

        Boolean dictating if the user must accept Terms of Service  # noqa: E501

        :return: The passive of this TermsOfService.  # noqa: E501
        :rtype: bool
        """
        return self._passive

    @passive.setter
    def passive(self, passive):
        """Sets the passive of this TermsOfService.

        Boolean dictating if the user must accept Terms of Service  # noqa: E501

        :param passive: The passive of this TermsOfService.  # noqa: E501
        :type: bool
        """

        self._passive = passive

    @property
    def account_id(self):
        """Gets the account_id of this TermsOfService.  # noqa: E501

        The id of the root account that owns the Terms of Service  # noqa: E501

        :return: The account_id of this TermsOfService.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TermsOfService.

        The id of the root account that owns the Terms of Service  # noqa: E501

        :param account_id: The account_id of this TermsOfService.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def content(self):
        """Gets the content of this TermsOfService.  # noqa: E501

        Content of the Terms of Service  # noqa: E501

        :return: The content of this TermsOfService.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TermsOfService.

        Content of the Terms of Service  # noqa: E501

        :param content: The content of this TermsOfService.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def self_registration_type(self):
        """Gets the self_registration_type of this TermsOfService.  # noqa: E501

        The type of self registration allowed  # noqa: E501

        :return: The self_registration_type of this TermsOfService.  # noqa: E501
        :rtype: str
        """
        return self._self_registration_type

    @self_registration_type.setter
    def self_registration_type(self, self_registration_type):
        """Sets the self_registration_type of this TermsOfService.

        The type of self registration allowed  # noqa: E501

        :param self_registration_type: The self_registration_type of this TermsOfService.  # noqa: E501
        :type: str
        """

        self._self_registration_type = self_registration_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TermsOfService, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TermsOfService):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TermsOfService):
            return True

        return self.to_dict() != other.to_dict()
