# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ProvisionalGrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provisional_grade_id': 'int',
        'score': 'int',
        'grade': 'str',
        'grade_matches_current_submission': 'bool',
        'graded_at': 'ModelDatetime',
        'final': 'bool',
        'speedgrader_url': 'str'
    }

    attribute_map = {
        'provisional_grade_id': 'provisional_grade_id',
        'score': 'score',
        'grade': 'grade',
        'grade_matches_current_submission': 'grade_matches_current_submission',
        'graded_at': 'graded_at',
        'final': 'final',
        'speedgrader_url': 'speedgrader_url'
    }

    def __init__(self, provisional_grade_id=None, score=None, grade=None, grade_matches_current_submission=None, graded_at=None, final=None, speedgrader_url=None, _configuration=None):  # noqa: E501
        """ProvisionalGrade - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._provisional_grade_id = None
        self._score = None
        self._grade = None
        self._grade_matches_current_submission = None
        self._graded_at = None
        self._final = None
        self._speedgrader_url = None
        self.discriminator = None

        if provisional_grade_id is not None:
            self.provisional_grade_id = provisional_grade_id
        if score is not None:
            self.score = score
        if grade is not None:
            self.grade = grade
        if grade_matches_current_submission is not None:
            self.grade_matches_current_submission = grade_matches_current_submission
        if graded_at is not None:
            self.graded_at = graded_at
        if final is not None:
            self.final = final
        if speedgrader_url is not None:
            self.speedgrader_url = speedgrader_url

    @property
    def provisional_grade_id(self):
        """Gets the provisional_grade_id of this ProvisionalGrade.  # noqa: E501

        The identifier for the provisional grade  # noqa: E501

        :return: The provisional_grade_id of this ProvisionalGrade.  # noqa: E501
        :rtype: int
        """
        return self._provisional_grade_id

    @provisional_grade_id.setter
    def provisional_grade_id(self, provisional_grade_id):
        """Sets the provisional_grade_id of this ProvisionalGrade.

        The identifier for the provisional grade  # noqa: E501

        :param provisional_grade_id: The provisional_grade_id of this ProvisionalGrade.  # noqa: E501
        :type: int
        """

        self._provisional_grade_id = provisional_grade_id

    @property
    def score(self):
        """Gets the score of this ProvisionalGrade.  # noqa: E501

        The numeric score  # noqa: E501

        :return: The score of this ProvisionalGrade.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ProvisionalGrade.

        The numeric score  # noqa: E501

        :param score: The score of this ProvisionalGrade.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def grade(self):
        """Gets the grade of this ProvisionalGrade.  # noqa: E501

        The grade  # noqa: E501

        :return: The grade of this ProvisionalGrade.  # noqa: E501
        :rtype: str
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this ProvisionalGrade.

        The grade  # noqa: E501

        :param grade: The grade of this ProvisionalGrade.  # noqa: E501
        :type: str
        """

        self._grade = grade

    @property
    def grade_matches_current_submission(self):
        """Gets the grade_matches_current_submission of this ProvisionalGrade.  # noqa: E501

        Whether the grade was applied to the most current submission (false if the student resubmitted after grading)  # noqa: E501

        :return: The grade_matches_current_submission of this ProvisionalGrade.  # noqa: E501
        :rtype: bool
        """
        return self._grade_matches_current_submission

    @grade_matches_current_submission.setter
    def grade_matches_current_submission(self, grade_matches_current_submission):
        """Sets the grade_matches_current_submission of this ProvisionalGrade.

        Whether the grade was applied to the most current submission (false if the student resubmitted after grading)  # noqa: E501

        :param grade_matches_current_submission: The grade_matches_current_submission of this ProvisionalGrade.  # noqa: E501
        :type: bool
        """

        self._grade_matches_current_submission = grade_matches_current_submission

    @property
    def graded_at(self):
        """Gets the graded_at of this ProvisionalGrade.  # noqa: E501

        When the grade was given  # noqa: E501

        :return: The graded_at of this ProvisionalGrade.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._graded_at

    @graded_at.setter
    def graded_at(self, graded_at):
        """Sets the graded_at of this ProvisionalGrade.

        When the grade was given  # noqa: E501

        :param graded_at: The graded_at of this ProvisionalGrade.  # noqa: E501
        :type: ModelDatetime
        """

        self._graded_at = graded_at

    @property
    def final(self):
        """Gets the final of this ProvisionalGrade.  # noqa: E501

        Whether this is the 'final' provisional grade created by the moderator  # noqa: E501

        :return: The final of this ProvisionalGrade.  # noqa: E501
        :rtype: bool
        """
        return self._final

    @final.setter
    def final(self, final):
        """Sets the final of this ProvisionalGrade.

        Whether this is the 'final' provisional grade created by the moderator  # noqa: E501

        :param final: The final of this ProvisionalGrade.  # noqa: E501
        :type: bool
        """

        self._final = final

    @property
    def speedgrader_url(self):
        """Gets the speedgrader_url of this ProvisionalGrade.  # noqa: E501

        A link to view this provisional grade in SpeedGrader  # noqa: E501

        :return: The speedgrader_url of this ProvisionalGrade.  # noqa: E501
        :rtype: str
        """
        return self._speedgrader_url

    @speedgrader_url.setter
    def speedgrader_url(self, speedgrader_url):
        """Sets the speedgrader_url of this ProvisionalGrade.

        A link to view this provisional grade in SpeedGrader  # noqa: E501

        :param speedgrader_url: The speedgrader_url of this ProvisionalGrade.  # noqa: E501
        :type: str
        """

        self._speedgrader_url = speedgrader_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisionalGrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisionalGrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProvisionalGrade):
            return True

        return self.to_dict() != other.to_dict()
