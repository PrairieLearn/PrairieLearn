# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SectionAttributes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'sis_id': 'str',
        'integration_id': 'str',
        'origin_course': 'CourseAttributes',
        'xlist_course': 'CourseAttributes',
        'override': 'SectionAssignmentOverrideAttributes'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sis_id': 'sis_id',
        'integration_id': 'integration_id',
        'origin_course': 'origin_course',
        'xlist_course': 'xlist_course',
        'override': 'override'
    }

    def __init__(self, id=None, name=None, sis_id=None, integration_id=None, origin_course=None, xlist_course=None, override=None, _configuration=None):  # noqa: E501
        """SectionAttributes - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._sis_id = None
        self._integration_id = None
        self._origin_course = None
        self._xlist_course = None
        self._override = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sis_id is not None:
            self.sis_id = sis_id
        if integration_id is not None:
            self.integration_id = integration_id
        if origin_course is not None:
            self.origin_course = origin_course
        if xlist_course is not None:
            self.xlist_course = xlist_course
        if override is not None:
            self.override = override

    @property
    def id(self):
        """Gets the id of this SectionAttributes.  # noqa: E501

        The unique identifier for the section.  # noqa: E501

        :return: The id of this SectionAttributes.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SectionAttributes.

        The unique identifier for the section.  # noqa: E501

        :param id: The id of this SectionAttributes.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SectionAttributes.  # noqa: E501

        The name of the section.  # noqa: E501

        :return: The name of this SectionAttributes.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SectionAttributes.

        The name of the section.  # noqa: E501

        :param name: The name of this SectionAttributes.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sis_id(self):
        """Gets the sis_id of this SectionAttributes.  # noqa: E501

        The sis id of the section.  # noqa: E501

        :return: The sis_id of this SectionAttributes.  # noqa: E501
        :rtype: str
        """
        return self._sis_id

    @sis_id.setter
    def sis_id(self, sis_id):
        """Sets the sis_id of this SectionAttributes.

        The sis id of the section.  # noqa: E501

        :param sis_id: The sis_id of this SectionAttributes.  # noqa: E501
        :type: str
        """

        self._sis_id = sis_id

    @property
    def integration_id(self):
        """Gets the integration_id of this SectionAttributes.  # noqa: E501

        Optional: The integration ID of the section.  # noqa: E501

        :return: The integration_id of this SectionAttributes.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this SectionAttributes.

        Optional: The integration ID of the section.  # noqa: E501

        :param integration_id: The integration_id of this SectionAttributes.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def origin_course(self):
        """Gets the origin_course of this SectionAttributes.  # noqa: E501

        The course to which the section belongs or the course from which the section was cross-listed  # noqa: E501

        :return: The origin_course of this SectionAttributes.  # noqa: E501
        :rtype: CourseAttributes
        """
        return self._origin_course

    @origin_course.setter
    def origin_course(self, origin_course):
        """Sets the origin_course of this SectionAttributes.

        The course to which the section belongs or the course from which the section was cross-listed  # noqa: E501

        :param origin_course: The origin_course of this SectionAttributes.  # noqa: E501
        :type: CourseAttributes
        """

        self._origin_course = origin_course

    @property
    def xlist_course(self):
        """Gets the xlist_course of this SectionAttributes.  # noqa: E501

        Optional: Attributes of the xlist course. Only present when the section has been cross-listed. See Courses API for more details  # noqa: E501

        :return: The xlist_course of this SectionAttributes.  # noqa: E501
        :rtype: CourseAttributes
        """
        return self._xlist_course

    @xlist_course.setter
    def xlist_course(self, xlist_course):
        """Sets the xlist_course of this SectionAttributes.

        Optional: Attributes of the xlist course. Only present when the section has been cross-listed. See Courses API for more details  # noqa: E501

        :param xlist_course: The xlist_course of this SectionAttributes.  # noqa: E501
        :type: CourseAttributes
        """

        self._xlist_course = xlist_course

    @property
    def override(self):
        """Gets the override of this SectionAttributes.  # noqa: E501

        Optional: Attributes of the assignment override that apply to the section. See Assignment API for more details  # noqa: E501

        :return: The override of this SectionAttributes.  # noqa: E501
        :rtype: SectionAssignmentOverrideAttributes
        """
        return self._override

    @override.setter
    def override(self, override):
        """Sets the override of this SectionAttributes.

        Optional: Attributes of the assignment override that apply to the section. See Assignment API for more details  # noqa: E501

        :param override: The override of this SectionAttributes.  # noqa: E501
        :type: SectionAssignmentOverrideAttributes
        """

        self._override = override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SectionAttributes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionAttributes):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SectionAttributes):
            return True

        return self.to_dict() != other.to_dict()
