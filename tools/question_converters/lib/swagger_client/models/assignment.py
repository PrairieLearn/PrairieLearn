# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Assignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'due_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'unlock_at': 'ModelDatetime',
        'has_overrides': 'bool',
        'all_dates': 'list[AssignmentDate]',
        'course_id': 'int',
        'html_url': 'str',
        'submissions_download_url': 'str',
        'assignment_group_id': 'int',
        'due_date_required': 'bool',
        'allowed_extensions': 'list[str]',
        'max_name_length': 'int',
        'turnitin_enabled': 'bool',
        'vericite_enabled': 'bool',
        'turnitin_settings': 'TurnitinSettings',
        'grade_group_students_individually': 'bool',
        'external_tool_tag_attributes': 'ExternalToolTagAttributes',
        'peer_reviews': 'bool',
        'automatic_peer_reviews': 'bool',
        'peer_review_count': 'int',
        'peer_reviews_assign_at': 'ModelDatetime',
        'intra_group_peer_reviews': 'bool',
        'group_category_id': 'int',
        'needs_grading_count': 'int',
        'needs_grading_count_by_section': 'list[NeedsGradingCount]',
        'position': 'int',
        'post_to_sis': 'bool',
        'integration_id': 'str',
        'integration_data': 'object',
        'points_possible': 'float',
        'submission_types': 'list[str]',
        'has_submitted_submissions': 'bool',
        'grading_type': 'str',
        'grading_standard_id': 'int',
        'published': 'bool',
        'unpublishable': 'bool',
        'only_visible_to_overrides': 'bool',
        'locked_for_user': 'bool',
        'lock_info': 'LockInfo',
        'lock_explanation': 'str',
        'quiz_id': 'int',
        'anonymous_submissions': 'bool',
        'discussion_topic': 'DiscussionTopic',
        'freeze_on_copy': 'bool',
        'frozen': 'bool',
        'frozen_attributes': 'list[str]',
        'submission': 'Submission',
        'use_rubric_for_grading': 'bool',
        'rubric_settings': 'object',
        'rubric': 'list[RubricCriteria]',
        'assignment_visibility': 'list[int]',
        'overrides': 'list[AssignmentOverride]',
        'omit_from_final_grade': 'bool',
        'hide_in_gradebook': 'bool',
        'moderated_grading': 'bool',
        'grader_count': 'int',
        'final_grader_id': 'int',
        'grader_comments_visible_to_graders': 'bool',
        'graders_anonymous_to_graders': 'bool',
        'grader_names_visible_to_final_grader': 'bool',
        'anonymous_grading': 'bool',
        'allowed_attempts': 'int',
        'post_manually': 'bool',
        'score_statistics': 'ScoreStatistic',
        'can_submit': 'bool',
        'ab_guid': 'list[str]',
        'annotatable_attachment_id': 'int',
        'anonymize_students': 'bool',
        'require_lockdown_browser': 'bool',
        'important_dates': 'bool',
        'muted': 'bool',
        'anonymous_peer_reviews': 'bool',
        'anonymous_instructor_annotations': 'bool',
        'graded_submissions_exist': 'bool',
        'is_quiz_assignment': 'bool',
        'in_closed_grading_period': 'bool',
        'can_duplicate': 'bool',
        'original_course_id': 'int',
        'original_assignment_id': 'int',
        'original_lti_resource_link_id': 'int',
        'original_assignment_name': 'str',
        'original_quiz_id': 'int',
        'workflow_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'due_at': 'due_at',
        'lock_at': 'lock_at',
        'unlock_at': 'unlock_at',
        'has_overrides': 'has_overrides',
        'all_dates': 'all_dates',
        'course_id': 'course_id',
        'html_url': 'html_url',
        'submissions_download_url': 'submissions_download_url',
        'assignment_group_id': 'assignment_group_id',
        'due_date_required': 'due_date_required',
        'allowed_extensions': 'allowed_extensions',
        'max_name_length': 'max_name_length',
        'turnitin_enabled': 'turnitin_enabled',
        'vericite_enabled': 'vericite_enabled',
        'turnitin_settings': 'turnitin_settings',
        'grade_group_students_individually': 'grade_group_students_individually',
        'external_tool_tag_attributes': 'external_tool_tag_attributes',
        'peer_reviews': 'peer_reviews',
        'automatic_peer_reviews': 'automatic_peer_reviews',
        'peer_review_count': 'peer_review_count',
        'peer_reviews_assign_at': 'peer_reviews_assign_at',
        'intra_group_peer_reviews': 'intra_group_peer_reviews',
        'group_category_id': 'group_category_id',
        'needs_grading_count': 'needs_grading_count',
        'needs_grading_count_by_section': 'needs_grading_count_by_section',
        'position': 'position',
        'post_to_sis': 'post_to_sis',
        'integration_id': 'integration_id',
        'integration_data': 'integration_data',
        'points_possible': 'points_possible',
        'submission_types': 'submission_types',
        'has_submitted_submissions': 'has_submitted_submissions',
        'grading_type': 'grading_type',
        'grading_standard_id': 'grading_standard_id',
        'published': 'published',
        'unpublishable': 'unpublishable',
        'only_visible_to_overrides': 'only_visible_to_overrides',
        'locked_for_user': 'locked_for_user',
        'lock_info': 'lock_info',
        'lock_explanation': 'lock_explanation',
        'quiz_id': 'quiz_id',
        'anonymous_submissions': 'anonymous_submissions',
        'discussion_topic': 'discussion_topic',
        'freeze_on_copy': 'freeze_on_copy',
        'frozen': 'frozen',
        'frozen_attributes': 'frozen_attributes',
        'submission': 'submission',
        'use_rubric_for_grading': 'use_rubric_for_grading',
        'rubric_settings': 'rubric_settings',
        'rubric': 'rubric',
        'assignment_visibility': 'assignment_visibility',
        'overrides': 'overrides',
        'omit_from_final_grade': 'omit_from_final_grade',
        'hide_in_gradebook': 'hide_in_gradebook',
        'moderated_grading': 'moderated_grading',
        'grader_count': 'grader_count',
        'final_grader_id': 'final_grader_id',
        'grader_comments_visible_to_graders': 'grader_comments_visible_to_graders',
        'graders_anonymous_to_graders': 'graders_anonymous_to_graders',
        'grader_names_visible_to_final_grader': 'grader_names_visible_to_final_grader',
        'anonymous_grading': 'anonymous_grading',
        'allowed_attempts': 'allowed_attempts',
        'post_manually': 'post_manually',
        'score_statistics': 'score_statistics',
        'can_submit': 'can_submit',
        'ab_guid': 'ab_guid',
        'annotatable_attachment_id': 'annotatable_attachment_id',
        'anonymize_students': 'anonymize_students',
        'require_lockdown_browser': 'require_lockdown_browser',
        'important_dates': 'important_dates',
        'muted': 'muted',
        'anonymous_peer_reviews': 'anonymous_peer_reviews',
        'anonymous_instructor_annotations': 'anonymous_instructor_annotations',
        'graded_submissions_exist': 'graded_submissions_exist',
        'is_quiz_assignment': 'is_quiz_assignment',
        'in_closed_grading_period': 'in_closed_grading_period',
        'can_duplicate': 'can_duplicate',
        'original_course_id': 'original_course_id',
        'original_assignment_id': 'original_assignment_id',
        'original_lti_resource_link_id': 'original_lti_resource_link_id',
        'original_assignment_name': 'original_assignment_name',
        'original_quiz_id': 'original_quiz_id',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, id=None, name=None, description=None, created_at=None, updated_at=None, due_at=None, lock_at=None, unlock_at=None, has_overrides=None, all_dates=None, course_id=None, html_url=None, submissions_download_url=None, assignment_group_id=None, due_date_required=None, allowed_extensions=None, max_name_length=None, turnitin_enabled=None, vericite_enabled=None, turnitin_settings=None, grade_group_students_individually=None, external_tool_tag_attributes=None, peer_reviews=None, automatic_peer_reviews=None, peer_review_count=None, peer_reviews_assign_at=None, intra_group_peer_reviews=None, group_category_id=None, needs_grading_count=None, needs_grading_count_by_section=None, position=None, post_to_sis=None, integration_id=None, integration_data=None, points_possible=None, submission_types=None, has_submitted_submissions=None, grading_type=None, grading_standard_id=None, published=None, unpublishable=None, only_visible_to_overrides=None, locked_for_user=None, lock_info=None, lock_explanation=None, quiz_id=None, anonymous_submissions=None, discussion_topic=None, freeze_on_copy=None, frozen=None, frozen_attributes=None, submission=None, use_rubric_for_grading=None, rubric_settings=None, rubric=None, assignment_visibility=None, overrides=None, omit_from_final_grade=None, hide_in_gradebook=None, moderated_grading=None, grader_count=None, final_grader_id=None, grader_comments_visible_to_graders=None, graders_anonymous_to_graders=None, grader_names_visible_to_final_grader=None, anonymous_grading=None, allowed_attempts=None, post_manually=None, score_statistics=None, can_submit=None, ab_guid=None, annotatable_attachment_id=None, anonymize_students=None, require_lockdown_browser=None, important_dates=None, muted=None, anonymous_peer_reviews=None, anonymous_instructor_annotations=None, graded_submissions_exist=None, is_quiz_assignment=None, in_closed_grading_period=None, can_duplicate=None, original_course_id=None, original_assignment_id=None, original_lti_resource_link_id=None, original_assignment_name=None, original_quiz_id=None, workflow_state=None, _configuration=None):  # noqa: E501
        """Assignment - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self._due_at = None
        self._lock_at = None
        self._unlock_at = None
        self._has_overrides = None
        self._all_dates = None
        self._course_id = None
        self._html_url = None
        self._submissions_download_url = None
        self._assignment_group_id = None
        self._due_date_required = None
        self._allowed_extensions = None
        self._max_name_length = None
        self._turnitin_enabled = None
        self._vericite_enabled = None
        self._turnitin_settings = None
        self._grade_group_students_individually = None
        self._external_tool_tag_attributes = None
        self._peer_reviews = None
        self._automatic_peer_reviews = None
        self._peer_review_count = None
        self._peer_reviews_assign_at = None
        self._intra_group_peer_reviews = None
        self._group_category_id = None
        self._needs_grading_count = None
        self._needs_grading_count_by_section = None
        self._position = None
        self._post_to_sis = None
        self._integration_id = None
        self._integration_data = None
        self._points_possible = None
        self._submission_types = None
        self._has_submitted_submissions = None
        self._grading_type = None
        self._grading_standard_id = None
        self._published = None
        self._unpublishable = None
        self._only_visible_to_overrides = None
        self._locked_for_user = None
        self._lock_info = None
        self._lock_explanation = None
        self._quiz_id = None
        self._anonymous_submissions = None
        self._discussion_topic = None
        self._freeze_on_copy = None
        self._frozen = None
        self._frozen_attributes = None
        self._submission = None
        self._use_rubric_for_grading = None
        self._rubric_settings = None
        self._rubric = None
        self._assignment_visibility = None
        self._overrides = None
        self._omit_from_final_grade = None
        self._hide_in_gradebook = None
        self._moderated_grading = None
        self._grader_count = None
        self._final_grader_id = None
        self._grader_comments_visible_to_graders = None
        self._graders_anonymous_to_graders = None
        self._grader_names_visible_to_final_grader = None
        self._anonymous_grading = None
        self._allowed_attempts = None
        self._post_manually = None
        self._score_statistics = None
        self._can_submit = None
        self._ab_guid = None
        self._annotatable_attachment_id = None
        self._anonymize_students = None
        self._require_lockdown_browser = None
        self._important_dates = None
        self._muted = None
        self._anonymous_peer_reviews = None
        self._anonymous_instructor_annotations = None
        self._graded_submissions_exist = None
        self._is_quiz_assignment = None
        self._in_closed_grading_period = None
        self._can_duplicate = None
        self._original_course_id = None
        self._original_assignment_id = None
        self._original_lti_resource_link_id = None
        self._original_assignment_name = None
        self._original_quiz_id = None
        self._workflow_state = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if due_at is not None:
            self.due_at = due_at
        if lock_at is not None:
            self.lock_at = lock_at
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if has_overrides is not None:
            self.has_overrides = has_overrides
        if all_dates is not None:
            self.all_dates = all_dates
        if course_id is not None:
            self.course_id = course_id
        if html_url is not None:
            self.html_url = html_url
        if submissions_download_url is not None:
            self.submissions_download_url = submissions_download_url
        if assignment_group_id is not None:
            self.assignment_group_id = assignment_group_id
        if due_date_required is not None:
            self.due_date_required = due_date_required
        if allowed_extensions is not None:
            self.allowed_extensions = allowed_extensions
        if max_name_length is not None:
            self.max_name_length = max_name_length
        if turnitin_enabled is not None:
            self.turnitin_enabled = turnitin_enabled
        if vericite_enabled is not None:
            self.vericite_enabled = vericite_enabled
        if turnitin_settings is not None:
            self.turnitin_settings = turnitin_settings
        if grade_group_students_individually is not None:
            self.grade_group_students_individually = grade_group_students_individually
        if external_tool_tag_attributes is not None:
            self.external_tool_tag_attributes = external_tool_tag_attributes
        if peer_reviews is not None:
            self.peer_reviews = peer_reviews
        if automatic_peer_reviews is not None:
            self.automatic_peer_reviews = automatic_peer_reviews
        if peer_review_count is not None:
            self.peer_review_count = peer_review_count
        if peer_reviews_assign_at is not None:
            self.peer_reviews_assign_at = peer_reviews_assign_at
        if intra_group_peer_reviews is not None:
            self.intra_group_peer_reviews = intra_group_peer_reviews
        if group_category_id is not None:
            self.group_category_id = group_category_id
        if needs_grading_count is not None:
            self.needs_grading_count = needs_grading_count
        if needs_grading_count_by_section is not None:
            self.needs_grading_count_by_section = needs_grading_count_by_section
        if position is not None:
            self.position = position
        if post_to_sis is not None:
            self.post_to_sis = post_to_sis
        if integration_id is not None:
            self.integration_id = integration_id
        if integration_data is not None:
            self.integration_data = integration_data
        if points_possible is not None:
            self.points_possible = points_possible
        if submission_types is not None:
            self.submission_types = submission_types
        if has_submitted_submissions is not None:
            self.has_submitted_submissions = has_submitted_submissions
        if grading_type is not None:
            self.grading_type = grading_type
        if grading_standard_id is not None:
            self.grading_standard_id = grading_standard_id
        if published is not None:
            self.published = published
        if unpublishable is not None:
            self.unpublishable = unpublishable
        if only_visible_to_overrides is not None:
            self.only_visible_to_overrides = only_visible_to_overrides
        if locked_for_user is not None:
            self.locked_for_user = locked_for_user
        if lock_info is not None:
            self.lock_info = lock_info
        if lock_explanation is not None:
            self.lock_explanation = lock_explanation
        if quiz_id is not None:
            self.quiz_id = quiz_id
        if anonymous_submissions is not None:
            self.anonymous_submissions = anonymous_submissions
        if discussion_topic is not None:
            self.discussion_topic = discussion_topic
        if freeze_on_copy is not None:
            self.freeze_on_copy = freeze_on_copy
        if frozen is not None:
            self.frozen = frozen
        if frozen_attributes is not None:
            self.frozen_attributes = frozen_attributes
        if submission is not None:
            self.submission = submission
        if use_rubric_for_grading is not None:
            self.use_rubric_for_grading = use_rubric_for_grading
        if rubric_settings is not None:
            self.rubric_settings = rubric_settings
        if rubric is not None:
            self.rubric = rubric
        if assignment_visibility is not None:
            self.assignment_visibility = assignment_visibility
        if overrides is not None:
            self.overrides = overrides
        if omit_from_final_grade is not None:
            self.omit_from_final_grade = omit_from_final_grade
        if hide_in_gradebook is not None:
            self.hide_in_gradebook = hide_in_gradebook
        if moderated_grading is not None:
            self.moderated_grading = moderated_grading
        if grader_count is not None:
            self.grader_count = grader_count
        if final_grader_id is not None:
            self.final_grader_id = final_grader_id
        if grader_comments_visible_to_graders is not None:
            self.grader_comments_visible_to_graders = grader_comments_visible_to_graders
        if graders_anonymous_to_graders is not None:
            self.graders_anonymous_to_graders = graders_anonymous_to_graders
        if grader_names_visible_to_final_grader is not None:
            self.grader_names_visible_to_final_grader = grader_names_visible_to_final_grader
        if anonymous_grading is not None:
            self.anonymous_grading = anonymous_grading
        if allowed_attempts is not None:
            self.allowed_attempts = allowed_attempts
        if post_manually is not None:
            self.post_manually = post_manually
        if score_statistics is not None:
            self.score_statistics = score_statistics
        if can_submit is not None:
            self.can_submit = can_submit
        if ab_guid is not None:
            self.ab_guid = ab_guid
        if annotatable_attachment_id is not None:
            self.annotatable_attachment_id = annotatable_attachment_id
        if anonymize_students is not None:
            self.anonymize_students = anonymize_students
        if require_lockdown_browser is not None:
            self.require_lockdown_browser = require_lockdown_browser
        if important_dates is not None:
            self.important_dates = important_dates
        if muted is not None:
            self.muted = muted
        if anonymous_peer_reviews is not None:
            self.anonymous_peer_reviews = anonymous_peer_reviews
        if anonymous_instructor_annotations is not None:
            self.anonymous_instructor_annotations = anonymous_instructor_annotations
        if graded_submissions_exist is not None:
            self.graded_submissions_exist = graded_submissions_exist
        if is_quiz_assignment is not None:
            self.is_quiz_assignment = is_quiz_assignment
        if in_closed_grading_period is not None:
            self.in_closed_grading_period = in_closed_grading_period
        if can_duplicate is not None:
            self.can_duplicate = can_duplicate
        if original_course_id is not None:
            self.original_course_id = original_course_id
        if original_assignment_id is not None:
            self.original_assignment_id = original_assignment_id
        if original_lti_resource_link_id is not None:
            self.original_lti_resource_link_id = original_lti_resource_link_id
        if original_assignment_name is not None:
            self.original_assignment_name = original_assignment_name
        if original_quiz_id is not None:
            self.original_quiz_id = original_quiz_id
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def id(self):
        """Gets the id of this Assignment.  # noqa: E501

        the ID of the assignment  # noqa: E501

        :return: The id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assignment.

        the ID of the assignment  # noqa: E501

        :param id: The id of this Assignment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Assignment.  # noqa: E501

        the name of the assignment  # noqa: E501

        :return: The name of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Assignment.

        the name of the assignment  # noqa: E501

        :param name: The name of this Assignment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Assignment.  # noqa: E501

        the assignment description, in an HTML fragment  # noqa: E501

        :return: The description of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assignment.

        the assignment description, in an HTML fragment  # noqa: E501

        :param description: The description of this Assignment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this Assignment.  # noqa: E501

        The time at which this assignment was originally created  # noqa: E501

        :return: The created_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Assignment.

        The time at which this assignment was originally created  # noqa: E501

        :param created_at: The created_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Assignment.  # noqa: E501

        The time at which this assignment was last modified in any way  # noqa: E501

        :return: The updated_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Assignment.

        The time at which this assignment was last modified in any way  # noqa: E501

        :param updated_at: The updated_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def due_at(self):
        """Gets the due_at of this Assignment.  # noqa: E501

        the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.  # noqa: E501

        :return: The due_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """Sets the due_at of this Assignment.

        the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.  # noqa: E501

        :param due_at: The due_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._due_at = due_at

    @property
    def lock_at(self):
        """Gets the lock_at of this Assignment.  # noqa: E501

        the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.  # noqa: E501

        :return: The lock_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this Assignment.

        the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.  # noqa: E501

        :param lock_at: The lock_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def unlock_at(self):
        """Gets the unlock_at of this Assignment.  # noqa: E501

        the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.  # noqa: E501

        :return: The unlock_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this Assignment.

        the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.  # noqa: E501

        :param unlock_at: The unlock_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def has_overrides(self):
        """Gets the has_overrides of this Assignment.  # noqa: E501

        whether this assignment has overrides  # noqa: E501

        :return: The has_overrides of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._has_overrides

    @has_overrides.setter
    def has_overrides(self, has_overrides):
        """Sets the has_overrides of this Assignment.

        whether this assignment has overrides  # noqa: E501

        :param has_overrides: The has_overrides of this Assignment.  # noqa: E501
        :type: bool
        """

        self._has_overrides = has_overrides

    @property
    def all_dates(self):
        """Gets the all_dates of this Assignment.  # noqa: E501

        (Optional) all dates associated with the assignment, if applicable  # noqa: E501

        :return: The all_dates of this Assignment.  # noqa: E501
        :rtype: list[AssignmentDate]
        """
        return self._all_dates

    @all_dates.setter
    def all_dates(self, all_dates):
        """Sets the all_dates of this Assignment.

        (Optional) all dates associated with the assignment, if applicable  # noqa: E501

        :param all_dates: The all_dates of this Assignment.  # noqa: E501
        :type: list[AssignmentDate]
        """

        self._all_dates = all_dates

    @property
    def course_id(self):
        """Gets the course_id of this Assignment.  # noqa: E501

        the ID of the course the assignment belongs to  # noqa: E501

        :return: The course_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Assignment.

        the ID of the course the assignment belongs to  # noqa: E501

        :param course_id: The course_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def html_url(self):
        """Gets the html_url of this Assignment.  # noqa: E501

        the URL to the assignment's web page  # noqa: E501

        :return: The html_url of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Assignment.

        the URL to the assignment's web page  # noqa: E501

        :param html_url: The html_url of this Assignment.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def submissions_download_url(self):
        """Gets the submissions_download_url of this Assignment.  # noqa: E501

        the URL to download all submissions as a zip  # noqa: E501

        :return: The submissions_download_url of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._submissions_download_url

    @submissions_download_url.setter
    def submissions_download_url(self, submissions_download_url):
        """Sets the submissions_download_url of this Assignment.

        the URL to download all submissions as a zip  # noqa: E501

        :param submissions_download_url: The submissions_download_url of this Assignment.  # noqa: E501
        :type: str
        """

        self._submissions_download_url = submissions_download_url

    @property
    def assignment_group_id(self):
        """Gets the assignment_group_id of this Assignment.  # noqa: E501

        the ID of the assignment's group  # noqa: E501

        :return: The assignment_group_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._assignment_group_id

    @assignment_group_id.setter
    def assignment_group_id(self, assignment_group_id):
        """Sets the assignment_group_id of this Assignment.

        the ID of the assignment's group  # noqa: E501

        :param assignment_group_id: The assignment_group_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._assignment_group_id = assignment_group_id

    @property
    def due_date_required(self):
        """Gets the due_date_required of this Assignment.  # noqa: E501

        Boolean flag indicating whether the assignment requires a due date based on the account level setting  # noqa: E501

        :return: The due_date_required of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._due_date_required

    @due_date_required.setter
    def due_date_required(self, due_date_required):
        """Sets the due_date_required of this Assignment.

        Boolean flag indicating whether the assignment requires a due date based on the account level setting  # noqa: E501

        :param due_date_required: The due_date_required of this Assignment.  # noqa: E501
        :type: bool
        """

        self._due_date_required = due_date_required

    @property
    def allowed_extensions(self):
        """Gets the allowed_extensions of this Assignment.  # noqa: E501

        Allowed file extensions, which take effect if submission_types includes 'online_upload'.  # noqa: E501

        :return: The allowed_extensions of this Assignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_extensions

    @allowed_extensions.setter
    def allowed_extensions(self, allowed_extensions):
        """Sets the allowed_extensions of this Assignment.

        Allowed file extensions, which take effect if submission_types includes 'online_upload'.  # noqa: E501

        :param allowed_extensions: The allowed_extensions of this Assignment.  # noqa: E501
        :type: list[str]
        """

        self._allowed_extensions = allowed_extensions

    @property
    def max_name_length(self):
        """Gets the max_name_length of this Assignment.  # noqa: E501

        An integer indicating the maximum length an assignment's name may be  # noqa: E501

        :return: The max_name_length of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._max_name_length

    @max_name_length.setter
    def max_name_length(self, max_name_length):
        """Sets the max_name_length of this Assignment.

        An integer indicating the maximum length an assignment's name may be  # noqa: E501

        :param max_name_length: The max_name_length of this Assignment.  # noqa: E501
        :type: int
        """

        self._max_name_length = max_name_length

    @property
    def turnitin_enabled(self):
        """Gets the turnitin_enabled of this Assignment.  # noqa: E501

        Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available  # noqa: E501

        :return: The turnitin_enabled of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._turnitin_enabled

    @turnitin_enabled.setter
    def turnitin_enabled(self, turnitin_enabled):
        """Sets the turnitin_enabled of this Assignment.

        Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available  # noqa: E501

        :param turnitin_enabled: The turnitin_enabled of this Assignment.  # noqa: E501
        :type: bool
        """

        self._turnitin_enabled = turnitin_enabled

    @property
    def vericite_enabled(self):
        """Gets the vericite_enabled of this Assignment.  # noqa: E501

        Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available  # noqa: E501

        :return: The vericite_enabled of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._vericite_enabled

    @vericite_enabled.setter
    def vericite_enabled(self, vericite_enabled):
        """Sets the vericite_enabled of this Assignment.

        Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available  # noqa: E501

        :param vericite_enabled: The vericite_enabled of this Assignment.  # noqa: E501
        :type: bool
        """

        self._vericite_enabled = vericite_enabled

    @property
    def turnitin_settings(self):
        """Gets the turnitin_settings of this Assignment.  # noqa: E501

        Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available  # noqa: E501

        :return: The turnitin_settings of this Assignment.  # noqa: E501
        :rtype: TurnitinSettings
        """
        return self._turnitin_settings

    @turnitin_settings.setter
    def turnitin_settings(self, turnitin_settings):
        """Sets the turnitin_settings of this Assignment.

        Settings to pass along to turnitin to control what kinds of matches should be considered. originality_report_visibility can be 'immediate', 'after_grading', 'after_due_date', or 'never' exclude_small_matches_type can be null, 'percent', 'words' exclude_small_matches_value: - if type is null, this will be null also - if type is 'percent', this will be a number between 0 and 100 representing match size to exclude as a percentage of the document size. - if type is 'words', this will be number > 0 representing how many words a match must contain for it to be considered NOTE: This flag will not appear unless your account has the Turnitin plugin available  # noqa: E501

        :param turnitin_settings: The turnitin_settings of this Assignment.  # noqa: E501
        :type: TurnitinSettings
        """

        self._turnitin_settings = turnitin_settings

    @property
    def grade_group_students_individually(self):
        """Gets the grade_group_students_individually of this Assignment.  # noqa: E501

        If this is a group assignment, boolean flag indicating whether or not students will be graded individually.  # noqa: E501

        :return: The grade_group_students_individually of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._grade_group_students_individually

    @grade_group_students_individually.setter
    def grade_group_students_individually(self, grade_group_students_individually):
        """Sets the grade_group_students_individually of this Assignment.

        If this is a group assignment, boolean flag indicating whether or not students will be graded individually.  # noqa: E501

        :param grade_group_students_individually: The grade_group_students_individually of this Assignment.  # noqa: E501
        :type: bool
        """

        self._grade_group_students_individually = grade_group_students_individually

    @property
    def external_tool_tag_attributes(self):
        """Gets the external_tool_tag_attributes of this Assignment.  # noqa: E501

        (Optional) assignment's settings for external tools if submission_types include 'external_tool'. Only url and new_tab are included (new_tab defaults to false).  Use the 'External Tools' API if you need more information about an external tool.  # noqa: E501

        :return: The external_tool_tag_attributes of this Assignment.  # noqa: E501
        :rtype: ExternalToolTagAttributes
        """
        return self._external_tool_tag_attributes

    @external_tool_tag_attributes.setter
    def external_tool_tag_attributes(self, external_tool_tag_attributes):
        """Sets the external_tool_tag_attributes of this Assignment.

        (Optional) assignment's settings for external tools if submission_types include 'external_tool'. Only url and new_tab are included (new_tab defaults to false).  Use the 'External Tools' API if you need more information about an external tool.  # noqa: E501

        :param external_tool_tag_attributes: The external_tool_tag_attributes of this Assignment.  # noqa: E501
        :type: ExternalToolTagAttributes
        """

        self._external_tool_tag_attributes = external_tool_tag_attributes

    @property
    def peer_reviews(self):
        """Gets the peer_reviews of this Assignment.  # noqa: E501

        Boolean indicating if peer reviews are required for this assignment  # noqa: E501

        :return: The peer_reviews of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._peer_reviews

    @peer_reviews.setter
    def peer_reviews(self, peer_reviews):
        """Sets the peer_reviews of this Assignment.

        Boolean indicating if peer reviews are required for this assignment  # noqa: E501

        :param peer_reviews: The peer_reviews of this Assignment.  # noqa: E501
        :type: bool
        """

        self._peer_reviews = peer_reviews

    @property
    def automatic_peer_reviews(self):
        """Gets the automatic_peer_reviews of this Assignment.  # noqa: E501

        Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.  # noqa: E501

        :return: The automatic_peer_reviews of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_peer_reviews

    @automatic_peer_reviews.setter
    def automatic_peer_reviews(self, automatic_peer_reviews):
        """Sets the automatic_peer_reviews of this Assignment.

        Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.  # noqa: E501

        :param automatic_peer_reviews: The automatic_peer_reviews of this Assignment.  # noqa: E501
        :type: bool
        """

        self._automatic_peer_reviews = automatic_peer_reviews

    @property
    def peer_review_count(self):
        """Gets the peer_review_count of this Assignment.  # noqa: E501

        Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.  # noqa: E501

        :return: The peer_review_count of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._peer_review_count

    @peer_review_count.setter
    def peer_review_count(self, peer_review_count):
        """Sets the peer_review_count of this Assignment.

        Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.  # noqa: E501

        :param peer_review_count: The peer_review_count of this Assignment.  # noqa: E501
        :type: int
        """

        self._peer_review_count = peer_review_count

    @property
    def peer_reviews_assign_at(self):
        """Gets the peer_reviews_assign_at of this Assignment.  # noqa: E501

        String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.  # noqa: E501

        :return: The peer_reviews_assign_at of this Assignment.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._peer_reviews_assign_at

    @peer_reviews_assign_at.setter
    def peer_reviews_assign_at(self, peer_reviews_assign_at):
        """Sets the peer_reviews_assign_at of this Assignment.

        String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.  # noqa: E501

        :param peer_reviews_assign_at: The peer_reviews_assign_at of this Assignment.  # noqa: E501
        :type: ModelDatetime
        """

        self._peer_reviews_assign_at = peer_reviews_assign_at

    @property
    def intra_group_peer_reviews(self):
        """Gets the intra_group_peer_reviews of this Assignment.  # noqa: E501

        Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work  # noqa: E501

        :return: The intra_group_peer_reviews of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._intra_group_peer_reviews

    @intra_group_peer_reviews.setter
    def intra_group_peer_reviews(self, intra_group_peer_reviews):
        """Sets the intra_group_peer_reviews of this Assignment.

        Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work  # noqa: E501

        :param intra_group_peer_reviews: The intra_group_peer_reviews of this Assignment.  # noqa: E501
        :type: bool
        """

        self._intra_group_peer_reviews = intra_group_peer_reviews

    @property
    def group_category_id(self):
        """Gets the group_category_id of this Assignment.  # noqa: E501

        The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.  # noqa: E501

        :return: The group_category_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._group_category_id

    @group_category_id.setter
    def group_category_id(self, group_category_id):
        """Sets the group_category_id of this Assignment.

        The ID of the assignment’s group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.  # noqa: E501

        :param group_category_id: The group_category_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._group_category_id = group_category_id

    @property
    def needs_grading_count(self):
        """Gets the needs_grading_count of this Assignment.  # noqa: E501

        if the requesting user has grading rights, the number of submissions that need grading.  # noqa: E501

        :return: The needs_grading_count of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._needs_grading_count

    @needs_grading_count.setter
    def needs_grading_count(self, needs_grading_count):
        """Sets the needs_grading_count of this Assignment.

        if the requesting user has grading rights, the number of submissions that need grading.  # noqa: E501

        :param needs_grading_count: The needs_grading_count of this Assignment.  # noqa: E501
        :type: int
        """

        self._needs_grading_count = needs_grading_count

    @property
    def needs_grading_count_by_section(self):
        """Gets the needs_grading_count_by_section of this Assignment.  # noqa: E501

        if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)  # noqa: E501

        :return: The needs_grading_count_by_section of this Assignment.  # noqa: E501
        :rtype: list[NeedsGradingCount]
        """
        return self._needs_grading_count_by_section

    @needs_grading_count_by_section.setter
    def needs_grading_count_by_section(self, needs_grading_count_by_section):
        """Sets the needs_grading_count_by_section of this Assignment.

        if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)  # noqa: E501

        :param needs_grading_count_by_section: The needs_grading_count_by_section of this Assignment.  # noqa: E501
        :type: list[NeedsGradingCount]
        """

        self._needs_grading_count_by_section = needs_grading_count_by_section

    @property
    def position(self):
        """Gets the position of this Assignment.  # noqa: E501

        the sorting order of the assignment in the group  # noqa: E501

        :return: The position of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Assignment.

        the sorting order of the assignment in the group  # noqa: E501

        :param position: The position of this Assignment.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def post_to_sis(self):
        """Gets the post_to_sis of this Assignment.  # noqa: E501

        (optional, present if Sync Grades to SIS feature is enabled)  # noqa: E501

        :return: The post_to_sis of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._post_to_sis

    @post_to_sis.setter
    def post_to_sis(self, post_to_sis):
        """Sets the post_to_sis of this Assignment.

        (optional, present if Sync Grades to SIS feature is enabled)  # noqa: E501

        :param post_to_sis: The post_to_sis of this Assignment.  # noqa: E501
        :type: bool
        """

        self._post_to_sis = post_to_sis

    @property
    def integration_id(self):
        """Gets the integration_id of this Assignment.  # noqa: E501

        (optional, Third Party unique identifier for Assignment)  # noqa: E501

        :return: The integration_id of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Assignment.

        (optional, Third Party unique identifier for Assignment)  # noqa: E501

        :param integration_id: The integration_id of this Assignment.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def integration_data(self):
        """Gets the integration_data of this Assignment.  # noqa: E501

        (optional, Third Party integration data for assignment)  # noqa: E501

        :return: The integration_data of this Assignment.  # noqa: E501
        :rtype: object
        """
        return self._integration_data

    @integration_data.setter
    def integration_data(self, integration_data):
        """Sets the integration_data of this Assignment.

        (optional, Third Party integration data for assignment)  # noqa: E501

        :param integration_data: The integration_data of this Assignment.  # noqa: E501
        :type: object
        """

        self._integration_data = integration_data

    @property
    def points_possible(self):
        """Gets the points_possible of this Assignment.  # noqa: E501

        the maximum points possible for the assignment  # noqa: E501

        :return: The points_possible of this Assignment.  # noqa: E501
        :rtype: float
        """
        return self._points_possible

    @points_possible.setter
    def points_possible(self, points_possible):
        """Sets the points_possible of this Assignment.

        the maximum points possible for the assignment  # noqa: E501

        :param points_possible: The points_possible of this Assignment.  # noqa: E501
        :type: float
        """

        self._points_possible = points_possible

    @property
    def submission_types(self):
        """Gets the submission_types of this Assignment.  # noqa: E501

        the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'  # noqa: E501

        :return: The submission_types of this Assignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._submission_types

    @submission_types.setter
    def submission_types(self, submission_types):
        """Sets the submission_types of this Assignment.

        the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload', 'media_recording', 'student_annotation'  # noqa: E501

        :param submission_types: The submission_types of this Assignment.  # noqa: E501
        :type: list[str]
        """

        self._submission_types = submission_types

    @property
    def has_submitted_submissions(self):
        """Gets the has_submitted_submissions of this Assignment.  # noqa: E501

        If true, the assignment has been submitted to by at least one student  # noqa: E501

        :return: The has_submitted_submissions of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._has_submitted_submissions

    @has_submitted_submissions.setter
    def has_submitted_submissions(self, has_submitted_submissions):
        """Sets the has_submitted_submissions of this Assignment.

        If true, the assignment has been submitted to by at least one student  # noqa: E501

        :param has_submitted_submissions: The has_submitted_submissions of this Assignment.  # noqa: E501
        :type: bool
        """

        self._has_submitted_submissions = has_submitted_submissions

    @property
    def grading_type(self):
        """Gets the grading_type of this Assignment.  # noqa: E501

        The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'  # noqa: E501

        :return: The grading_type of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._grading_type

    @grading_type.setter
    def grading_type(self, grading_type):
        """Sets the grading_type of this Assignment.

        The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'  # noqa: E501

        :param grading_type: The grading_type of this Assignment.  # noqa: E501
        :type: str
        """

        self._grading_type = grading_type

    @property
    def grading_standard_id(self):
        """Gets the grading_standard_id of this Assignment.  # noqa: E501

        The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.  # noqa: E501

        :return: The grading_standard_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._grading_standard_id

    @grading_standard_id.setter
    def grading_standard_id(self, grading_standard_id):
        """Sets the grading_standard_id of this Assignment.

        The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.  # noqa: E501

        :param grading_standard_id: The grading_standard_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._grading_standard_id = grading_standard_id

    @property
    def published(self):
        """Gets the published of this Assignment.  # noqa: E501

        Whether the assignment is published  # noqa: E501

        :return: The published of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Assignment.

        Whether the assignment is published  # noqa: E501

        :param published: The published of this Assignment.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def unpublishable(self):
        """Gets the unpublishable of this Assignment.  # noqa: E501

        Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.  # noqa: E501

        :return: The unpublishable of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._unpublishable

    @unpublishable.setter
    def unpublishable(self, unpublishable):
        """Sets the unpublishable of this Assignment.

        Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.  # noqa: E501

        :param unpublishable: The unpublishable of this Assignment.  # noqa: E501
        :type: bool
        """

        self._unpublishable = unpublishable

    @property
    def only_visible_to_overrides(self):
        """Gets the only_visible_to_overrides of this Assignment.  # noqa: E501

        Whether the assignment is only visible to overrides.  # noqa: E501

        :return: The only_visible_to_overrides of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._only_visible_to_overrides

    @only_visible_to_overrides.setter
    def only_visible_to_overrides(self, only_visible_to_overrides):
        """Sets the only_visible_to_overrides of this Assignment.

        Whether the assignment is only visible to overrides.  # noqa: E501

        :param only_visible_to_overrides: The only_visible_to_overrides of this Assignment.  # noqa: E501
        :type: bool
        """

        self._only_visible_to_overrides = only_visible_to_overrides

    @property
    def locked_for_user(self):
        """Gets the locked_for_user of this Assignment.  # noqa: E501

        Whether or not this is locked for the user.  # noqa: E501

        :return: The locked_for_user of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._locked_for_user

    @locked_for_user.setter
    def locked_for_user(self, locked_for_user):
        """Sets the locked_for_user of this Assignment.

        Whether or not this is locked for the user.  # noqa: E501

        :param locked_for_user: The locked_for_user of this Assignment.  # noqa: E501
        :type: bool
        """

        self._locked_for_user = locked_for_user

    @property
    def lock_info(self):
        """Gets the lock_info of this Assignment.  # noqa: E501

        (Optional) Information for the user about the lock. Present when locked_for_user is true.  # noqa: E501

        :return: The lock_info of this Assignment.  # noqa: E501
        :rtype: LockInfo
        """
        return self._lock_info

    @lock_info.setter
    def lock_info(self, lock_info):
        """Sets the lock_info of this Assignment.

        (Optional) Information for the user about the lock. Present when locked_for_user is true.  # noqa: E501

        :param lock_info: The lock_info of this Assignment.  # noqa: E501
        :type: LockInfo
        """

        self._lock_info = lock_info

    @property
    def lock_explanation(self):
        """Gets the lock_explanation of this Assignment.  # noqa: E501

        (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.  # noqa: E501

        :return: The lock_explanation of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._lock_explanation

    @lock_explanation.setter
    def lock_explanation(self, lock_explanation):
        """Sets the lock_explanation of this Assignment.

        (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.  # noqa: E501

        :param lock_explanation: The lock_explanation of this Assignment.  # noqa: E501
        :type: str
        """

        self._lock_explanation = lock_explanation

    @property
    def quiz_id(self):
        """Gets the quiz_id of this Assignment.  # noqa: E501

        (Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])  # noqa: E501

        :return: The quiz_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._quiz_id

    @quiz_id.setter
    def quiz_id(self, quiz_id):
        """Sets the quiz_id of this Assignment.

        (Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])  # noqa: E501

        :param quiz_id: The quiz_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._quiz_id = quiz_id

    @property
    def anonymous_submissions(self):
        """Gets the anonymous_submissions of this Assignment.  # noqa: E501

        (Optional) whether anonymous submissions are accepted (applies only to quiz assignments)  # noqa: E501

        :return: The anonymous_submissions of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous_submissions

    @anonymous_submissions.setter
    def anonymous_submissions(self, anonymous_submissions):
        """Sets the anonymous_submissions of this Assignment.

        (Optional) whether anonymous submissions are accepted (applies only to quiz assignments)  # noqa: E501

        :param anonymous_submissions: The anonymous_submissions of this Assignment.  # noqa: E501
        :type: bool
        """

        self._anonymous_submissions = anonymous_submissions

    @property
    def discussion_topic(self):
        """Gets the discussion_topic of this Assignment.  # noqa: E501

        (Optional) the DiscussionTopic associated with the assignment, if applicable  # noqa: E501

        :return: The discussion_topic of this Assignment.  # noqa: E501
        :rtype: DiscussionTopic
        """
        return self._discussion_topic

    @discussion_topic.setter
    def discussion_topic(self, discussion_topic):
        """Sets the discussion_topic of this Assignment.

        (Optional) the DiscussionTopic associated with the assignment, if applicable  # noqa: E501

        :param discussion_topic: The discussion_topic of this Assignment.  # noqa: E501
        :type: DiscussionTopic
        """

        self._discussion_topic = discussion_topic

    @property
    def freeze_on_copy(self):
        """Gets the freeze_on_copy of this Assignment.  # noqa: E501

        (Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :return: The freeze_on_copy of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._freeze_on_copy

    @freeze_on_copy.setter
    def freeze_on_copy(self, freeze_on_copy):
        """Sets the freeze_on_copy of this Assignment.

        (Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :param freeze_on_copy: The freeze_on_copy of this Assignment.  # noqa: E501
        :type: bool
        """

        self._freeze_on_copy = freeze_on_copy

    @property
    def frozen(self):
        """Gets the frozen of this Assignment.  # noqa: E501

        (Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :return: The frozen of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this Assignment.

        (Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :param frozen: The frozen of this Assignment.  # noqa: E501
        :type: bool
        """

        self._frozen = frozen

    @property
    def frozen_attributes(self):
        """Gets the frozen_attributes of this Assignment.  # noqa: E501

        (Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :return: The frozen_attributes of this Assignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._frozen_attributes

    @frozen_attributes.setter
    def frozen_attributes(self, frozen_attributes):
        """Sets the frozen_attributes of this Assignment.

        (Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.  # noqa: E501

        :param frozen_attributes: The frozen_attributes of this Assignment.  # noqa: E501
        :type: list[str]
        """

        self._frozen_attributes = frozen_attributes

    @property
    def submission(self):
        """Gets the submission of this Assignment.  # noqa: E501

        (Optional) If 'submission' is included in the 'include' parameter, includes a Submission object that represents the current user's (user who is requesting information from the api) current submission for the assignment. See the Submissions API for an example response. If the user does not have a submission, this key will be absent.  # noqa: E501

        :return: The submission of this Assignment.  # noqa: E501
        :rtype: Submission
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this Assignment.

        (Optional) If 'submission' is included in the 'include' parameter, includes a Submission object that represents the current user's (user who is requesting information from the api) current submission for the assignment. See the Submissions API for an example response. If the user does not have a submission, this key will be absent.  # noqa: E501

        :param submission: The submission of this Assignment.  # noqa: E501
        :type: Submission
        """

        self._submission = submission

    @property
    def use_rubric_for_grading(self):
        """Gets the use_rubric_for_grading of this Assignment.  # noqa: E501

        (Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.  # noqa: E501

        :return: The use_rubric_for_grading of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._use_rubric_for_grading

    @use_rubric_for_grading.setter
    def use_rubric_for_grading(self, use_rubric_for_grading):
        """Sets the use_rubric_for_grading of this Assignment.

        (Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.  # noqa: E501

        :param use_rubric_for_grading: The use_rubric_for_grading of this Assignment.  # noqa: E501
        :type: bool
        """

        self._use_rubric_for_grading = use_rubric_for_grading

    @property
    def rubric_settings(self):
        """Gets the rubric_settings of this Assignment.  # noqa: E501

        (Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.  # noqa: E501

        :return: The rubric_settings of this Assignment.  # noqa: E501
        :rtype: object
        """
        return self._rubric_settings

    @rubric_settings.setter
    def rubric_settings(self, rubric_settings):
        """Sets the rubric_settings of this Assignment.

        (Optional) An object describing the basic attributes of the rubric, including the point total. Included if there is an associated rubric.  # noqa: E501

        :param rubric_settings: The rubric_settings of this Assignment.  # noqa: E501
        :type: object
        """

        self._rubric_settings = rubric_settings

    @property
    def rubric(self):
        """Gets the rubric of this Assignment.  # noqa: E501

        (Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.  # noqa: E501

        :return: The rubric of this Assignment.  # noqa: E501
        :rtype: list[RubricCriteria]
        """
        return self._rubric

    @rubric.setter
    def rubric(self, rubric):
        """Sets the rubric of this Assignment.

        (Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.  # noqa: E501

        :param rubric: The rubric of this Assignment.  # noqa: E501
        :type: list[RubricCriteria]
        """

        self._rubric = rubric

    @property
    def assignment_visibility(self):
        """Gets the assignment_visibility of this Assignment.  # noqa: E501

        (Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.  # noqa: E501

        :return: The assignment_visibility of this Assignment.  # noqa: E501
        :rtype: list[int]
        """
        return self._assignment_visibility

    @assignment_visibility.setter
    def assignment_visibility(self, assignment_visibility):
        """Sets the assignment_visibility of this Assignment.

        (Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.  # noqa: E501

        :param assignment_visibility: The assignment_visibility of this Assignment.  # noqa: E501
        :type: list[int]
        """

        self._assignment_visibility = assignment_visibility

    @property
    def overrides(self):
        """Gets the overrides of this Assignment.  # noqa: E501

        (Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.  # noqa: E501

        :return: The overrides of this Assignment.  # noqa: E501
        :rtype: list[AssignmentOverride]
        """
        return self._overrides

    @overrides.setter
    def overrides(self, overrides):
        """Sets the overrides of this Assignment.

        (Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.  # noqa: E501

        :param overrides: The overrides of this Assignment.  # noqa: E501
        :type: list[AssignmentOverride]
        """

        self._overrides = overrides

    @property
    def omit_from_final_grade(self):
        """Gets the omit_from_final_grade of this Assignment.  # noqa: E501

        (Optional) If true, the assignment will be omitted from the student's final grade  # noqa: E501

        :return: The omit_from_final_grade of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._omit_from_final_grade

    @omit_from_final_grade.setter
    def omit_from_final_grade(self, omit_from_final_grade):
        """Sets the omit_from_final_grade of this Assignment.

        (Optional) If true, the assignment will be omitted from the student's final grade  # noqa: E501

        :param omit_from_final_grade: The omit_from_final_grade of this Assignment.  # noqa: E501
        :type: bool
        """

        self._omit_from_final_grade = omit_from_final_grade

    @property
    def hide_in_gradebook(self):
        """Gets the hide_in_gradebook of this Assignment.  # noqa: E501

        (Optional) If true, the assignment will not be shown in any gradebooks  # noqa: E501

        :return: The hide_in_gradebook of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._hide_in_gradebook

    @hide_in_gradebook.setter
    def hide_in_gradebook(self, hide_in_gradebook):
        """Sets the hide_in_gradebook of this Assignment.

        (Optional) If true, the assignment will not be shown in any gradebooks  # noqa: E501

        :param hide_in_gradebook: The hide_in_gradebook of this Assignment.  # noqa: E501
        :type: bool
        """

        self._hide_in_gradebook = hide_in_gradebook

    @property
    def moderated_grading(self):
        """Gets the moderated_grading of this Assignment.  # noqa: E501

        Boolean indicating if the assignment is moderated.  # noqa: E501

        :return: The moderated_grading of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._moderated_grading

    @moderated_grading.setter
    def moderated_grading(self, moderated_grading):
        """Sets the moderated_grading of this Assignment.

        Boolean indicating if the assignment is moderated.  # noqa: E501

        :param moderated_grading: The moderated_grading of this Assignment.  # noqa: E501
        :type: bool
        """

        self._moderated_grading = moderated_grading

    @property
    def grader_count(self):
        """Gets the grader_count of this Assignment.  # noqa: E501

        The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.  # noqa: E501

        :return: The grader_count of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._grader_count

    @grader_count.setter
    def grader_count(self, grader_count):
        """Sets the grader_count of this Assignment.

        The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.  # noqa: E501

        :param grader_count: The grader_count of this Assignment.  # noqa: E501
        :type: int
        """

        self._grader_count = grader_count

    @property
    def final_grader_id(self):
        """Gets the final_grader_id of this Assignment.  # noqa: E501

        The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.  # noqa: E501

        :return: The final_grader_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._final_grader_id

    @final_grader_id.setter
    def final_grader_id(self, final_grader_id):
        """Sets the final_grader_id of this Assignment.

        The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.  # noqa: E501

        :param final_grader_id: The final_grader_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._final_grader_id = final_grader_id

    @property
    def grader_comments_visible_to_graders(self):
        """Gets the grader_comments_visible_to_graders of this Assignment.  # noqa: E501

        Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.  # noqa: E501

        :return: The grader_comments_visible_to_graders of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._grader_comments_visible_to_graders

    @grader_comments_visible_to_graders.setter
    def grader_comments_visible_to_graders(self, grader_comments_visible_to_graders):
        """Sets the grader_comments_visible_to_graders of this Assignment.

        Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.  # noqa: E501

        :param grader_comments_visible_to_graders: The grader_comments_visible_to_graders of this Assignment.  # noqa: E501
        :type: bool
        """

        self._grader_comments_visible_to_graders = grader_comments_visible_to_graders

    @property
    def graders_anonymous_to_graders(self):
        """Gets the graders_anonymous_to_graders of this Assignment.  # noqa: E501

        Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true.  # noqa: E501

        :return: The graders_anonymous_to_graders of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._graders_anonymous_to_graders

    @graders_anonymous_to_graders.setter
    def graders_anonymous_to_graders(self, graders_anonymous_to_graders):
        """Sets the graders_anonymous_to_graders of this Assignment.

        Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments with grader_comments_visible_to_graders set to true.  # noqa: E501

        :param graders_anonymous_to_graders: The graders_anonymous_to_graders of this Assignment.  # noqa: E501
        :type: bool
        """

        self._graders_anonymous_to_graders = graders_anonymous_to_graders

    @property
    def grader_names_visible_to_final_grader(self):
        """Gets the grader_names_visible_to_final_grader of this Assignment.  # noqa: E501

        Boolean indicating if provisional grader identities are visible to the final grader. Only relevant for moderated assignments.  # noqa: E501

        :return: The grader_names_visible_to_final_grader of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._grader_names_visible_to_final_grader

    @grader_names_visible_to_final_grader.setter
    def grader_names_visible_to_final_grader(self, grader_names_visible_to_final_grader):
        """Sets the grader_names_visible_to_final_grader of this Assignment.

        Boolean indicating if provisional grader identities are visible to the final grader. Only relevant for moderated assignments.  # noqa: E501

        :param grader_names_visible_to_final_grader: The grader_names_visible_to_final_grader of this Assignment.  # noqa: E501
        :type: bool
        """

        self._grader_names_visible_to_final_grader = grader_names_visible_to_final_grader

    @property
    def anonymous_grading(self):
        """Gets the anonymous_grading of this Assignment.  # noqa: E501

        Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.  # noqa: E501

        :return: The anonymous_grading of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous_grading

    @anonymous_grading.setter
    def anonymous_grading(self, anonymous_grading):
        """Sets the anonymous_grading of this Assignment.

        Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.  # noqa: E501

        :param anonymous_grading: The anonymous_grading of this Assignment.  # noqa: E501
        :type: bool
        """

        self._anonymous_grading = anonymous_grading

    @property
    def allowed_attempts(self):
        """Gets the allowed_attempts of this Assignment.  # noqa: E501

        The number of submission attempts a student can make for this assignment. -1 is considered unlimited.  # noqa: E501

        :return: The allowed_attempts of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._allowed_attempts

    @allowed_attempts.setter
    def allowed_attempts(self, allowed_attempts):
        """Sets the allowed_attempts of this Assignment.

        The number of submission attempts a student can make for this assignment. -1 is considered unlimited.  # noqa: E501

        :param allowed_attempts: The allowed_attempts of this Assignment.  # noqa: E501
        :type: int
        """

        self._allowed_attempts = allowed_attempts

    @property
    def post_manually(self):
        """Gets the post_manually of this Assignment.  # noqa: E501

        Whether the assignment has manual posting enabled. Only relevant for courses using New Gradebook.  # noqa: E501

        :return: The post_manually of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._post_manually

    @post_manually.setter
    def post_manually(self, post_manually):
        """Sets the post_manually of this Assignment.

        Whether the assignment has manual posting enabled. Only relevant for courses using New Gradebook.  # noqa: E501

        :param post_manually: The post_manually of this Assignment.  # noqa: E501
        :type: bool
        """

        self._post_manually = post_manually

    @property
    def score_statistics(self):
        """Gets the score_statistics of this Assignment.  # noqa: E501

        (Optional) If 'score_statistics' and 'submission' are included in the 'include' parameter and statistics are available, includes the min, max, and mode for this assignment  # noqa: E501

        :return: The score_statistics of this Assignment.  # noqa: E501
        :rtype: ScoreStatistic
        """
        return self._score_statistics

    @score_statistics.setter
    def score_statistics(self, score_statistics):
        """Sets the score_statistics of this Assignment.

        (Optional) If 'score_statistics' and 'submission' are included in the 'include' parameter and statistics are available, includes the min, max, and mode for this assignment  # noqa: E501

        :param score_statistics: The score_statistics of this Assignment.  # noqa: E501
        :type: ScoreStatistic
        """

        self._score_statistics = score_statistics

    @property
    def can_submit(self):
        """Gets the can_submit of this Assignment.  # noqa: E501

        (Optional) If retrieving a single assignment and 'can_submit' is included in the 'include' parameter, flags whether user has the right to submit the assignment (i.e. checks enrollment dates, submission types, locked status, attempts remaining, etc...). Including 'can submit' automatically includes 'submission' in the include parameter. Not available when observed_users are included.  # noqa: E501

        :return: The can_submit of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._can_submit

    @can_submit.setter
    def can_submit(self, can_submit):
        """Sets the can_submit of this Assignment.

        (Optional) If retrieving a single assignment and 'can_submit' is included in the 'include' parameter, flags whether user has the right to submit the assignment (i.e. checks enrollment dates, submission types, locked status, attempts remaining, etc...). Including 'can submit' automatically includes 'submission' in the include parameter. Not available when observed_users are included.  # noqa: E501

        :param can_submit: The can_submit of this Assignment.  # noqa: E501
        :type: bool
        """

        self._can_submit = can_submit

    @property
    def ab_guid(self):
        """Gets the ab_guid of this Assignment.  # noqa: E501

        (Optional) The academic benchmark(s) associated with the assignment or the assignment's rubric. Only included if 'ab_guid' is included in the 'include' parameter.  # noqa: E501

        :return: The ab_guid of this Assignment.  # noqa: E501
        :rtype: list[str]
        """
        return self._ab_guid

    @ab_guid.setter
    def ab_guid(self, ab_guid):
        """Sets the ab_guid of this Assignment.

        (Optional) The academic benchmark(s) associated with the assignment or the assignment's rubric. Only included if 'ab_guid' is included in the 'include' parameter.  # noqa: E501

        :param ab_guid: The ab_guid of this Assignment.  # noqa: E501
        :type: list[str]
        """

        self._ab_guid = ab_guid

    @property
    def annotatable_attachment_id(self):
        """Gets the annotatable_attachment_id of this Assignment.  # noqa: E501

        The id of the attachment to be annotated by students. Relevant only if submission_types includes 'student_annotation'.  # noqa: E501

        :return: The annotatable_attachment_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._annotatable_attachment_id

    @annotatable_attachment_id.setter
    def annotatable_attachment_id(self, annotatable_attachment_id):
        """Sets the annotatable_attachment_id of this Assignment.

        The id of the attachment to be annotated by students. Relevant only if submission_types includes 'student_annotation'.  # noqa: E501

        :param annotatable_attachment_id: The annotatable_attachment_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._annotatable_attachment_id = annotatable_attachment_id

    @property
    def anonymize_students(self):
        """Gets the anonymize_students of this Assignment.  # noqa: E501

        (Optional) Boolean indicating whether student names are anonymized  # noqa: E501

        :return: The anonymize_students of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._anonymize_students

    @anonymize_students.setter
    def anonymize_students(self, anonymize_students):
        """Sets the anonymize_students of this Assignment.

        (Optional) Boolean indicating whether student names are anonymized  # noqa: E501

        :param anonymize_students: The anonymize_students of this Assignment.  # noqa: E501
        :type: bool
        """

        self._anonymize_students = anonymize_students

    @property
    def require_lockdown_browser(self):
        """Gets the require_lockdown_browser of this Assignment.  # noqa: E501

        (Optional) Boolean indicating whether the Respondus LockDown Browser® is required for this assignment.  # noqa: E501

        :return: The require_lockdown_browser of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._require_lockdown_browser

    @require_lockdown_browser.setter
    def require_lockdown_browser(self, require_lockdown_browser):
        """Sets the require_lockdown_browser of this Assignment.

        (Optional) Boolean indicating whether the Respondus LockDown Browser® is required for this assignment.  # noqa: E501

        :param require_lockdown_browser: The require_lockdown_browser of this Assignment.  # noqa: E501
        :type: bool
        """

        self._require_lockdown_browser = require_lockdown_browser

    @property
    def important_dates(self):
        """Gets the important_dates of this Assignment.  # noqa: E501

        (Optional) Boolean indicating whether this assignment has important dates.  # noqa: E501

        :return: The important_dates of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._important_dates

    @important_dates.setter
    def important_dates(self, important_dates):
        """Sets the important_dates of this Assignment.

        (Optional) Boolean indicating whether this assignment has important dates.  # noqa: E501

        :param important_dates: The important_dates of this Assignment.  # noqa: E501
        :type: bool
        """

        self._important_dates = important_dates

    @property
    def muted(self):
        """Gets the muted of this Assignment.  # noqa: E501

        (Optional, Deprecated) Boolean indicating whether notifications are muted for this assignment.  # noqa: E501

        :return: The muted of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Assignment.

        (Optional, Deprecated) Boolean indicating whether notifications are muted for this assignment.  # noqa: E501

        :param muted: The muted of this Assignment.  # noqa: E501
        :type: bool
        """

        self._muted = muted

    @property
    def anonymous_peer_reviews(self):
        """Gets the anonymous_peer_reviews of this Assignment.  # noqa: E501

        Boolean indicating whether peer reviews are anonymous.  # noqa: E501

        :return: The anonymous_peer_reviews of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous_peer_reviews

    @anonymous_peer_reviews.setter
    def anonymous_peer_reviews(self, anonymous_peer_reviews):
        """Sets the anonymous_peer_reviews of this Assignment.

        Boolean indicating whether peer reviews are anonymous.  # noqa: E501

        :param anonymous_peer_reviews: The anonymous_peer_reviews of this Assignment.  # noqa: E501
        :type: bool
        """

        self._anonymous_peer_reviews = anonymous_peer_reviews

    @property
    def anonymous_instructor_annotations(self):
        """Gets the anonymous_instructor_annotations of this Assignment.  # noqa: E501

        Boolean indicating whether instructor anotations are anonymous.  # noqa: E501

        :return: The anonymous_instructor_annotations of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._anonymous_instructor_annotations

    @anonymous_instructor_annotations.setter
    def anonymous_instructor_annotations(self, anonymous_instructor_annotations):
        """Sets the anonymous_instructor_annotations of this Assignment.

        Boolean indicating whether instructor anotations are anonymous.  # noqa: E501

        :param anonymous_instructor_annotations: The anonymous_instructor_annotations of this Assignment.  # noqa: E501
        :type: bool
        """

        self._anonymous_instructor_annotations = anonymous_instructor_annotations

    @property
    def graded_submissions_exist(self):
        """Gets the graded_submissions_exist of this Assignment.  # noqa: E501

        Boolean indicating whether this assignment has graded submissions.  # noqa: E501

        :return: The graded_submissions_exist of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._graded_submissions_exist

    @graded_submissions_exist.setter
    def graded_submissions_exist(self, graded_submissions_exist):
        """Sets the graded_submissions_exist of this Assignment.

        Boolean indicating whether this assignment has graded submissions.  # noqa: E501

        :param graded_submissions_exist: The graded_submissions_exist of this Assignment.  # noqa: E501
        :type: bool
        """

        self._graded_submissions_exist = graded_submissions_exist

    @property
    def is_quiz_assignment(self):
        """Gets the is_quiz_assignment of this Assignment.  # noqa: E501

        Boolean indicating whether this is a quiz lti assignment.  # noqa: E501

        :return: The is_quiz_assignment of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._is_quiz_assignment

    @is_quiz_assignment.setter
    def is_quiz_assignment(self, is_quiz_assignment):
        """Sets the is_quiz_assignment of this Assignment.

        Boolean indicating whether this is a quiz lti assignment.  # noqa: E501

        :param is_quiz_assignment: The is_quiz_assignment of this Assignment.  # noqa: E501
        :type: bool
        """

        self._is_quiz_assignment = is_quiz_assignment

    @property
    def in_closed_grading_period(self):
        """Gets the in_closed_grading_period of this Assignment.  # noqa: E501

        Boolean indicating whether this assignment is in a closed grading period.  # noqa: E501

        :return: The in_closed_grading_period of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._in_closed_grading_period

    @in_closed_grading_period.setter
    def in_closed_grading_period(self, in_closed_grading_period):
        """Sets the in_closed_grading_period of this Assignment.

        Boolean indicating whether this assignment is in a closed grading period.  # noqa: E501

        :param in_closed_grading_period: The in_closed_grading_period of this Assignment.  # noqa: E501
        :type: bool
        """

        self._in_closed_grading_period = in_closed_grading_period

    @property
    def can_duplicate(self):
        """Gets the can_duplicate of this Assignment.  # noqa: E501

        Boolean indicating whether this assignment can be duplicated.  # noqa: E501

        :return: The can_duplicate of this Assignment.  # noqa: E501
        :rtype: bool
        """
        return self._can_duplicate

    @can_duplicate.setter
    def can_duplicate(self, can_duplicate):
        """Sets the can_duplicate of this Assignment.

        Boolean indicating whether this assignment can be duplicated.  # noqa: E501

        :param can_duplicate: The can_duplicate of this Assignment.  # noqa: E501
        :type: bool
        """

        self._can_duplicate = can_duplicate

    @property
    def original_course_id(self):
        """Gets the original_course_id of this Assignment.  # noqa: E501

        If this assignment is a duplicate, it is the original assignment's course_id  # noqa: E501

        :return: The original_course_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._original_course_id

    @original_course_id.setter
    def original_course_id(self, original_course_id):
        """Sets the original_course_id of this Assignment.

        If this assignment is a duplicate, it is the original assignment's course_id  # noqa: E501

        :param original_course_id: The original_course_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._original_course_id = original_course_id

    @property
    def original_assignment_id(self):
        """Gets the original_assignment_id of this Assignment.  # noqa: E501

        If this assignment is a duplicate, it is the original assignment's id  # noqa: E501

        :return: The original_assignment_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._original_assignment_id

    @original_assignment_id.setter
    def original_assignment_id(self, original_assignment_id):
        """Sets the original_assignment_id of this Assignment.

        If this assignment is a duplicate, it is the original assignment's id  # noqa: E501

        :param original_assignment_id: The original_assignment_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._original_assignment_id = original_assignment_id

    @property
    def original_lti_resource_link_id(self):
        """Gets the original_lti_resource_link_id of this Assignment.  # noqa: E501

        If this assignment is a duplicate, it is the original assignment's lti_resource_link_id  # noqa: E501

        :return: The original_lti_resource_link_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._original_lti_resource_link_id

    @original_lti_resource_link_id.setter
    def original_lti_resource_link_id(self, original_lti_resource_link_id):
        """Sets the original_lti_resource_link_id of this Assignment.

        If this assignment is a duplicate, it is the original assignment's lti_resource_link_id  # noqa: E501

        :param original_lti_resource_link_id: The original_lti_resource_link_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._original_lti_resource_link_id = original_lti_resource_link_id

    @property
    def original_assignment_name(self):
        """Gets the original_assignment_name of this Assignment.  # noqa: E501

        If this assignment is a duplicate, it is the original assignment's name  # noqa: E501

        :return: The original_assignment_name of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._original_assignment_name

    @original_assignment_name.setter
    def original_assignment_name(self, original_assignment_name):
        """Sets the original_assignment_name of this Assignment.

        If this assignment is a duplicate, it is the original assignment's name  # noqa: E501

        :param original_assignment_name: The original_assignment_name of this Assignment.  # noqa: E501
        :type: str
        """

        self._original_assignment_name = original_assignment_name

    @property
    def original_quiz_id(self):
        """Gets the original_quiz_id of this Assignment.  # noqa: E501

        If this assignment is a duplicate, it is the original assignment's quiz_id  # noqa: E501

        :return: The original_quiz_id of this Assignment.  # noqa: E501
        :rtype: int
        """
        return self._original_quiz_id

    @original_quiz_id.setter
    def original_quiz_id(self, original_quiz_id):
        """Sets the original_quiz_id of this Assignment.

        If this assignment is a duplicate, it is the original assignment's quiz_id  # noqa: E501

        :param original_quiz_id: The original_quiz_id of this Assignment.  # noqa: E501
        :type: int
        """

        self._original_quiz_id = original_quiz_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Assignment.  # noqa: E501

        String indicating what state this assignment is in.  # noqa: E501

        :return: The workflow_state of this Assignment.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Assignment.

        String indicating what state this assignment is in.  # noqa: E501

        :param workflow_state: The workflow_state of this Assignment.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Assignment):
            return True

        return self.to_dict() != other.to_dict()
