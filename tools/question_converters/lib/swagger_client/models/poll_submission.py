# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PollSubmission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'poll_choice_id': 'int',
        'user_id': 'int',
        'created_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'poll_choice_id': 'poll_choice_id',
        'user_id': 'user_id',
        'created_at': 'created_at'
    }

    def __init__(self, id=None, poll_choice_id=None, user_id=None, created_at=None, _configuration=None):  # noqa: E501
        """PollSubmission - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._poll_choice_id = None
        self._user_id = None
        self._created_at = None
        self.discriminator = None

        self.id = id
        if poll_choice_id is not None:
            self.poll_choice_id = poll_choice_id
        if user_id is not None:
            self.user_id = user_id
        if created_at is not None:
            self.created_at = created_at

    @property
    def id(self):
        """Gets the id of this PollSubmission.  # noqa: E501

        The unique identifier for the poll submission.  # noqa: E501

        :return: The id of this PollSubmission.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PollSubmission.

        The unique identifier for the poll submission.  # noqa: E501

        :param id: The id of this PollSubmission.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def poll_choice_id(self):
        """Gets the poll_choice_id of this PollSubmission.  # noqa: E501

        The unique identifier of the poll choice chosen for this submission.  # noqa: E501

        :return: The poll_choice_id of this PollSubmission.  # noqa: E501
        :rtype: int
        """
        return self._poll_choice_id

    @poll_choice_id.setter
    def poll_choice_id(self, poll_choice_id):
        """Sets the poll_choice_id of this PollSubmission.

        The unique identifier of the poll choice chosen for this submission.  # noqa: E501

        :param poll_choice_id: The poll_choice_id of this PollSubmission.  # noqa: E501
        :type: int
        """

        self._poll_choice_id = poll_choice_id

    @property
    def user_id(self):
        """Gets the user_id of this PollSubmission.  # noqa: E501

        the unique identifier of the user who submitted this poll submission.  # noqa: E501

        :return: The user_id of this PollSubmission.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PollSubmission.

        the unique identifier of the user who submitted this poll submission.  # noqa: E501

        :param user_id: The user_id of this PollSubmission.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this PollSubmission.  # noqa: E501

        The date and time the poll submission was submitted.  # noqa: E501

        :return: The created_at of this PollSubmission.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PollSubmission.

        The date and time the poll submission was submitted.  # noqa: E501

        :param created_at: The created_at of this PollSubmission.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PollSubmission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PollSubmission):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PollSubmission):
            return True

        return self.to_dict() != other.to_dict()
