# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuizPermissions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'read': 'bool',
        'submit': 'bool',
        'create': 'bool',
        'manage': 'bool',
        'read_statistics': 'bool',
        'review_grades': 'bool',
        'update': 'bool'
    }

    attribute_map = {
        'read': 'read',
        'submit': 'submit',
        'create': 'create',
        'manage': 'manage',
        'read_statistics': 'read_statistics',
        'review_grades': 'review_grades',
        'update': 'update'
    }

    def __init__(self, read=None, submit=None, create=None, manage=None, read_statistics=None, review_grades=None, update=None, _configuration=None):  # noqa: E501
        """QuizPermissions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._read = None
        self._submit = None
        self._create = None
        self._manage = None
        self._read_statistics = None
        self._review_grades = None
        self._update = None
        self.discriminator = None

        if read is not None:
            self.read = read
        if submit is not None:
            self.submit = submit
        if create is not None:
            self.create = create
        if manage is not None:
            self.manage = manage
        if read_statistics is not None:
            self.read_statistics = read_statistics
        if review_grades is not None:
            self.review_grades = review_grades
        if update is not None:
            self.update = update

    @property
    def read(self):
        """Gets the read of this QuizPermissions.  # noqa: E501

        whether the user can view the quiz  # noqa: E501

        :return: The read of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this QuizPermissions.

        whether the user can view the quiz  # noqa: E501

        :param read: The read of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def submit(self):
        """Gets the submit of this QuizPermissions.  # noqa: E501

        whether the user may submit a submission for the quiz  # noqa: E501

        :return: The submit of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._submit

    @submit.setter
    def submit(self, submit):
        """Sets the submit of this QuizPermissions.

        whether the user may submit a submission for the quiz  # noqa: E501

        :param submit: The submit of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._submit = submit

    @property
    def create(self):
        """Gets the create of this QuizPermissions.  # noqa: E501

        whether the user may create a new quiz  # noqa: E501

        :return: The create of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this QuizPermissions.

        whether the user may create a new quiz  # noqa: E501

        :param create: The create of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._create = create

    @property
    def manage(self):
        """Gets the manage of this QuizPermissions.  # noqa: E501

        whether the user may edit, update, or delete the quiz  # noqa: E501

        :return: The manage of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._manage

    @manage.setter
    def manage(self, manage):
        """Sets the manage of this QuizPermissions.

        whether the user may edit, update, or delete the quiz  # noqa: E501

        :param manage: The manage of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._manage = manage

    @property
    def read_statistics(self):
        """Gets the read_statistics of this QuizPermissions.  # noqa: E501

        whether the user may view quiz statistics for this quiz  # noqa: E501

        :return: The read_statistics of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._read_statistics

    @read_statistics.setter
    def read_statistics(self, read_statistics):
        """Sets the read_statistics of this QuizPermissions.

        whether the user may view quiz statistics for this quiz  # noqa: E501

        :param read_statistics: The read_statistics of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._read_statistics = read_statistics

    @property
    def review_grades(self):
        """Gets the review_grades of this QuizPermissions.  # noqa: E501

        whether the user may review grades for all quiz submissions for this quiz  # noqa: E501

        :return: The review_grades of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._review_grades

    @review_grades.setter
    def review_grades(self, review_grades):
        """Sets the review_grades of this QuizPermissions.

        whether the user may review grades for all quiz submissions for this quiz  # noqa: E501

        :param review_grades: The review_grades of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._review_grades = review_grades

    @property
    def update(self):
        """Gets the update of this QuizPermissions.  # noqa: E501

        whether the user may update the quiz  # noqa: E501

        :return: The update of this QuizPermissions.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this QuizPermissions.

        whether the user may update the quiz  # noqa: E501

        :param update: The update of this QuizPermissions.  # noqa: E501
        :type: bool
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuizPermissions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuizPermissions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuizPermissions):
            return True

        return self.to_dict() != other.to_dict()
