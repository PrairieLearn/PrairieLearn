# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PlannerNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'description': 'str',
        'user_id': 'int',
        'workflow_state': 'str',
        'course_id': 'int',
        'todo_date': 'ModelDatetime',
        'linked_object_type': 'str',
        'linked_object_id': 'int',
        'linked_object_html_url': 'str',
        'linked_object_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'description': 'description',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state',
        'course_id': 'course_id',
        'todo_date': 'todo_date',
        'linked_object_type': 'linked_object_type',
        'linked_object_id': 'linked_object_id',
        'linked_object_html_url': 'linked_object_html_url',
        'linked_object_url': 'linked_object_url'
    }

    def __init__(self, id=None, title=None, description=None, user_id=None, workflow_state=None, course_id=None, todo_date=None, linked_object_type=None, linked_object_id=None, linked_object_html_url=None, linked_object_url=None, _configuration=None):  # noqa: E501
        """PlannerNote - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._description = None
        self._user_id = None
        self._workflow_state = None
        self._course_id = None
        self._todo_date = None
        self._linked_object_type = None
        self._linked_object_id = None
        self._linked_object_html_url = None
        self._linked_object_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if course_id is not None:
            self.course_id = course_id
        if todo_date is not None:
            self.todo_date = todo_date
        if linked_object_type is not None:
            self.linked_object_type = linked_object_type
        if linked_object_id is not None:
            self.linked_object_id = linked_object_id
        if linked_object_html_url is not None:
            self.linked_object_html_url = linked_object_html_url
        if linked_object_url is not None:
            self.linked_object_url = linked_object_url

    @property
    def id(self):
        """Gets the id of this PlannerNote.  # noqa: E501

        The ID of the planner note  # noqa: E501

        :return: The id of this PlannerNote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PlannerNote.

        The ID of the planner note  # noqa: E501

        :param id: The id of this PlannerNote.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this PlannerNote.  # noqa: E501

        The title for a planner note  # noqa: E501

        :return: The title of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PlannerNote.

        The title for a planner note  # noqa: E501

        :param title: The title of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this PlannerNote.  # noqa: E501

        The description of the planner note  # noqa: E501

        :return: The description of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlannerNote.

        The description of the planner note  # noqa: E501

        :param description: The description of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def user_id(self):
        """Gets the user_id of this PlannerNote.  # noqa: E501

        The id of the associated user creating the planner note  # noqa: E501

        :return: The user_id of this PlannerNote.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PlannerNote.

        The id of the associated user creating the planner note  # noqa: E501

        :param user_id: The user_id of this PlannerNote.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this PlannerNote.  # noqa: E501

        The current published state of the planner note  # noqa: E501

        :return: The workflow_state of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this PlannerNote.

        The current published state of the planner note  # noqa: E501

        :param workflow_state: The workflow_state of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def course_id(self):
        """Gets the course_id of this PlannerNote.  # noqa: E501

        The course that the note is in relation too, if applicable  # noqa: E501

        :return: The course_id of this PlannerNote.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this PlannerNote.

        The course that the note is in relation too, if applicable  # noqa: E501

        :param course_id: The course_id of this PlannerNote.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def todo_date(self):
        """Gets the todo_date of this PlannerNote.  # noqa: E501

        The datetime of when the planner note should show up on their planner  # noqa: E501

        :return: The todo_date of this PlannerNote.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._todo_date

    @todo_date.setter
    def todo_date(self, todo_date):
        """Sets the todo_date of this PlannerNote.

        The datetime of when the planner note should show up on their planner  # noqa: E501

        :param todo_date: The todo_date of this PlannerNote.  # noqa: E501
        :type: ModelDatetime
        """

        self._todo_date = todo_date

    @property
    def linked_object_type(self):
        """Gets the linked_object_type of this PlannerNote.  # noqa: E501

        the type of the linked learning object  # noqa: E501

        :return: The linked_object_type of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._linked_object_type

    @linked_object_type.setter
    def linked_object_type(self, linked_object_type):
        """Sets the linked_object_type of this PlannerNote.

        the type of the linked learning object  # noqa: E501

        :param linked_object_type: The linked_object_type of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._linked_object_type = linked_object_type

    @property
    def linked_object_id(self):
        """Gets the linked_object_id of this PlannerNote.  # noqa: E501

        the id of the linked learning object  # noqa: E501

        :return: The linked_object_id of this PlannerNote.  # noqa: E501
        :rtype: int
        """
        return self._linked_object_id

    @linked_object_id.setter
    def linked_object_id(self, linked_object_id):
        """Sets the linked_object_id of this PlannerNote.

        the id of the linked learning object  # noqa: E501

        :param linked_object_id: The linked_object_id of this PlannerNote.  # noqa: E501
        :type: int
        """

        self._linked_object_id = linked_object_id

    @property
    def linked_object_html_url(self):
        """Gets the linked_object_html_url of this PlannerNote.  # noqa: E501

        the Canvas web URL of the linked learning object  # noqa: E501

        :return: The linked_object_html_url of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._linked_object_html_url

    @linked_object_html_url.setter
    def linked_object_html_url(self, linked_object_html_url):
        """Sets the linked_object_html_url of this PlannerNote.

        the Canvas web URL of the linked learning object  # noqa: E501

        :param linked_object_html_url: The linked_object_html_url of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._linked_object_html_url = linked_object_html_url

    @property
    def linked_object_url(self):
        """Gets the linked_object_url of this PlannerNote.  # noqa: E501

        the API URL of the linked learning object  # noqa: E501

        :return: The linked_object_url of this PlannerNote.  # noqa: E501
        :rtype: str
        """
        return self._linked_object_url

    @linked_object_url.setter
    def linked_object_url(self, linked_object_url):
        """Sets the linked_object_url of this PlannerNote.

        the API URL of the linked learning object  # noqa: E501

        :param linked_object_url: The linked_object_url of this PlannerNote.  # noqa: E501
        :type: str
        """

        self._linked_object_url = linked_object_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlannerNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlannerNote):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PlannerNote):
            return True

        return self.to_dict() != other.to_dict()
