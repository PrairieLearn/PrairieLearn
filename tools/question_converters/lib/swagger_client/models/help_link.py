# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class HelpLink(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'text': 'str',
        'subtext': 'str',
        'url': 'str',
        'type': 'str',
        'available_to': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'subtext': 'subtext',
        'url': 'url',
        'type': 'type',
        'available_to': 'available_to'
    }

    def __init__(self, id=None, text=None, subtext=None, url=None, type=None, available_to=None, _configuration=None):  # noqa: E501
        """HelpLink - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._text = None
        self._subtext = None
        self._url = None
        self._type = None
        self._available_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if text is not None:
            self.text = text
        if subtext is not None:
            self.subtext = subtext
        if url is not None:
            self.url = url
        if type is not None:
            self.type = type
        if available_to is not None:
            self.available_to = available_to

    @property
    def id(self):
        """Gets the id of this HelpLink.  # noqa: E501

        The ID of the help link  # noqa: E501

        :return: The id of this HelpLink.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HelpLink.

        The ID of the help link  # noqa: E501

        :param id: The id of this HelpLink.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def text(self):
        """Gets the text of this HelpLink.  # noqa: E501

        The name of the help link  # noqa: E501

        :return: The text of this HelpLink.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this HelpLink.

        The name of the help link  # noqa: E501

        :param text: The text of this HelpLink.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def subtext(self):
        """Gets the subtext of this HelpLink.  # noqa: E501

        The description of the help link  # noqa: E501

        :return: The subtext of this HelpLink.  # noqa: E501
        :rtype: str
        """
        return self._subtext

    @subtext.setter
    def subtext(self, subtext):
        """Sets the subtext of this HelpLink.

        The description of the help link  # noqa: E501

        :param subtext: The subtext of this HelpLink.  # noqa: E501
        :type: str
        """

        self._subtext = subtext

    @property
    def url(self):
        """Gets the url of this HelpLink.  # noqa: E501

        The URL of the help link  # noqa: E501

        :return: The url of this HelpLink.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HelpLink.

        The URL of the help link  # noqa: E501

        :param url: The url of this HelpLink.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def type(self):
        """Gets the type of this HelpLink.  # noqa: E501

        The type of the help link  # noqa: E501

        :return: The type of this HelpLink.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HelpLink.

        The type of the help link  # noqa: E501

        :param type: The type of this HelpLink.  # noqa: E501
        :type: str
        """
        allowed_values = ["default", "custom"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def available_to(self):
        """Gets the available_to of this HelpLink.  # noqa: E501

        The roles that have access to this help link  # noqa: E501

        :return: The available_to of this HelpLink.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_to

    @available_to.setter
    def available_to(self, available_to):
        """Sets the available_to of this HelpLink.

        The roles that have access to this help link  # noqa: E501

        :param available_to: The available_to of this HelpLink.  # noqa: E501
        :type: list[str]
        """

        self._available_to = available_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HelpLink, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HelpLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HelpLink):
            return True

        return self.to_dict() != other.to_dict()
