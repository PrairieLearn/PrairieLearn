# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class OutcomeImport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'learning_outcome_group_id': 'int',
        'created_at': 'ModelDatetime',
        'ended_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'workflow_state': 'str',
        'data': 'OutcomeImportData',
        'progress': 'str',
        'user': 'User',
        'processing_errors': 'list[list[Object]]'
    }

    attribute_map = {
        'id': 'id',
        'learning_outcome_group_id': 'learning_outcome_group_id',
        'created_at': 'created_at',
        'ended_at': 'ended_at',
        'updated_at': 'updated_at',
        'workflow_state': 'workflow_state',
        'data': 'data',
        'progress': 'progress',
        'user': 'user',
        'processing_errors': 'processing_errors'
    }

    def __init__(self, id=None, learning_outcome_group_id=None, created_at=None, ended_at=None, updated_at=None, workflow_state=None, data=None, progress=None, user=None, processing_errors=None, _configuration=None):  # noqa: E501
        """OutcomeImport - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._learning_outcome_group_id = None
        self._created_at = None
        self._ended_at = None
        self._updated_at = None
        self._workflow_state = None
        self._data = None
        self._progress = None
        self._user = None
        self._processing_errors = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if learning_outcome_group_id is not None:
            self.learning_outcome_group_id = learning_outcome_group_id
        if created_at is not None:
            self.created_at = created_at
        if ended_at is not None:
            self.ended_at = ended_at
        if updated_at is not None:
            self.updated_at = updated_at
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if data is not None:
            self.data = data
        if progress is not None:
            self.progress = progress
        if user is not None:
            self.user = user
        if processing_errors is not None:
            self.processing_errors = processing_errors

    @property
    def id(self):
        """Gets the id of this OutcomeImport.  # noqa: E501

        The unique identifier for the outcome import.  # noqa: E501

        :return: The id of this OutcomeImport.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OutcomeImport.

        The unique identifier for the outcome import.  # noqa: E501

        :param id: The id of this OutcomeImport.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def learning_outcome_group_id(self):
        """Gets the learning_outcome_group_id of this OutcomeImport.  # noqa: E501

        The unique identifier for the group into which the outcomes will be imported to, or NULL.  # noqa: E501

        :return: The learning_outcome_group_id of this OutcomeImport.  # noqa: E501
        :rtype: int
        """
        return self._learning_outcome_group_id

    @learning_outcome_group_id.setter
    def learning_outcome_group_id(self, learning_outcome_group_id):
        """Sets the learning_outcome_group_id of this OutcomeImport.

        The unique identifier for the group into which the outcomes will be imported to, or NULL.  # noqa: E501

        :param learning_outcome_group_id: The learning_outcome_group_id of this OutcomeImport.  # noqa: E501
        :type: int
        """

        self._learning_outcome_group_id = learning_outcome_group_id

    @property
    def created_at(self):
        """Gets the created_at of this OutcomeImport.  # noqa: E501

        The date the outcome import was created.  # noqa: E501

        :return: The created_at of this OutcomeImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OutcomeImport.

        The date the outcome import was created.  # noqa: E501

        :param created_at: The created_at of this OutcomeImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def ended_at(self):
        """Gets the ended_at of this OutcomeImport.  # noqa: E501

        The date the outcome import finished. Returns null if not finished.  # noqa: E501

        :return: The ended_at of this OutcomeImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this OutcomeImport.

        The date the outcome import finished. Returns null if not finished.  # noqa: E501

        :param ended_at: The ended_at of this OutcomeImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._ended_at = ended_at

    @property
    def updated_at(self):
        """Gets the updated_at of this OutcomeImport.  # noqa: E501

        The date the outcome import was last updated.  # noqa: E501

        :return: The updated_at of this OutcomeImport.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this OutcomeImport.

        The date the outcome import was last updated.  # noqa: E501

        :param updated_at: The updated_at of this OutcomeImport.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def workflow_state(self):
        """Gets the workflow_state of this OutcomeImport.  # noqa: E501

        The current state of the outcome import.  - 'created': The outcome import has been created.  - 'importing': The outcome import is currently processing.  - 'succeeded': The outcome import has completed successfully.  - 'failed': The outcome import failed.  # noqa: E501

        :return: The workflow_state of this OutcomeImport.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this OutcomeImport.

        The current state of the outcome import.  - 'created': The outcome import has been created.  - 'importing': The outcome import is currently processing.  - 'succeeded': The outcome import has completed successfully.  - 'failed': The outcome import failed.  # noqa: E501

        :param workflow_state: The workflow_state of this OutcomeImport.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def data(self):
        """Gets the data of this OutcomeImport.  # noqa: E501

        See the OutcomeImportData specification above.  # noqa: E501

        :return: The data of this OutcomeImport.  # noqa: E501
        :rtype: OutcomeImportData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this OutcomeImport.

        See the OutcomeImportData specification above.  # noqa: E501

        :param data: The data of this OutcomeImport.  # noqa: E501
        :type: OutcomeImportData
        """

        self._data = data

    @property
    def progress(self):
        """Gets the progress of this OutcomeImport.  # noqa: E501

        The progress of the outcome import.  # noqa: E501

        :return: The progress of this OutcomeImport.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this OutcomeImport.

        The progress of the outcome import.  # noqa: E501

        :param progress: The progress of this OutcomeImport.  # noqa: E501
        :type: str
        """

        self._progress = progress

    @property
    def user(self):
        """Gets the user of this OutcomeImport.  # noqa: E501

        The user that initiated the outcome_import. See the Users API for details.  # noqa: E501

        :return: The user of this OutcomeImport.  # noqa: E501
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this OutcomeImport.

        The user that initiated the outcome_import. See the Users API for details.  # noqa: E501

        :param user: The user of this OutcomeImport.  # noqa: E501
        :type: User
        """

        self._user = user

    @property
    def processing_errors(self):
        """Gets the processing_errors of this OutcomeImport.  # noqa: E501

        An array of row number / error message pairs. Returns the first 25 errors.  # noqa: E501

        :return: The processing_errors of this OutcomeImport.  # noqa: E501
        :rtype: list[list[Object]]
        """
        return self._processing_errors

    @processing_errors.setter
    def processing_errors(self, processing_errors):
        """Sets the processing_errors of this OutcomeImport.

        An array of row number / error message pairs. Returns the first 25 errors.  # noqa: E501

        :param processing_errors: The processing_errors of this OutcomeImport.  # noqa: E501
        :type: list[list[Object]]
        """

        self._processing_errors = processing_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OutcomeImport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutcomeImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OutcomeImport):
            return True

        return self.to_dict() != other.to_dict()
