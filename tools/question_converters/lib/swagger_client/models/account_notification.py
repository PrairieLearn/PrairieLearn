# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AccountNotification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'str',
        'message': 'str',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'icon': 'str',
        'roles': 'list[str]',
        'role_ids': 'list[int]'
    }

    attribute_map = {
        'subject': 'subject',
        'message': 'message',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'icon': 'icon',
        'roles': 'roles',
        'role_ids': 'role_ids'
    }

    def __init__(self, subject=None, message=None, start_at=None, end_at=None, icon=None, roles=None, role_ids=None, _configuration=None):  # noqa: E501
        """AccountNotification - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subject = None
        self._message = None
        self._start_at = None
        self._end_at = None
        self._icon = None
        self._roles = None
        self._role_ids = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if message is not None:
            self.message = message
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if icon is not None:
            self.icon = icon
        if roles is not None:
            self.roles = roles
        if role_ids is not None:
            self.role_ids = role_ids

    @property
    def subject(self):
        """Gets the subject of this AccountNotification.  # noqa: E501

        The subject of the notifications  # noqa: E501

        :return: The subject of this AccountNotification.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this AccountNotification.

        The subject of the notifications  # noqa: E501

        :param subject: The subject of this AccountNotification.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this AccountNotification.  # noqa: E501

        The message to be sent in the notification.  # noqa: E501

        :return: The message of this AccountNotification.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AccountNotification.

        The message to be sent in the notification.  # noqa: E501

        :param message: The message of this AccountNotification.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def start_at(self):
        """Gets the start_at of this AccountNotification.  # noqa: E501

        When to send out the notification.  # noqa: E501

        :return: The start_at of this AccountNotification.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this AccountNotification.

        When to send out the notification.  # noqa: E501

        :param start_at: The start_at of this AccountNotification.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this AccountNotification.  # noqa: E501

        When to expire the notification.  # noqa: E501

        :return: The end_at of this AccountNotification.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this AccountNotification.

        When to expire the notification.  # noqa: E501

        :param end_at: The end_at of this AccountNotification.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def icon(self):
        """Gets the icon of this AccountNotification.  # noqa: E501

        The icon to display with the message.  Defaults to warning.  # noqa: E501

        :return: The icon of this AccountNotification.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this AccountNotification.

        The icon to display with the message.  Defaults to warning.  # noqa: E501

        :param icon: The icon of this AccountNotification.  # noqa: E501
        :type: str
        """

        self._icon = icon

    @property
    def roles(self):
        """Gets the roles of this AccountNotification.  # noqa: E501

        (Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles  # noqa: E501

        :return: The roles of this AccountNotification.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this AccountNotification.

        (Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles  # noqa: E501

        :param roles: The roles of this AccountNotification.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def role_ids(self):
        """Gets the role_ids of this AccountNotification.  # noqa: E501

        The roles to send the notification to.  If roles is not passed it defaults to all roles  # noqa: E501

        :return: The role_ids of this AccountNotification.  # noqa: E501
        :rtype: list[int]
        """
        return self._role_ids

    @role_ids.setter
    def role_ids(self, role_ids):
        """Sets the role_ids of this AccountNotification.

        The roles to send the notification to.  If roles is not passed it defaults to all roles  # noqa: E501

        :param role_ids: The role_ids of this AccountNotification.  # noqa: E501
        :type: list[int]
        """

        self._role_ids = role_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountNotification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountNotification):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountNotification):
            return True

        return self.to_dict() != other.to_dict()
