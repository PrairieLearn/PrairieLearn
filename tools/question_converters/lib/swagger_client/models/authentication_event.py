# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AuthenticationEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'ModelDatetime',
        'event_type': 'str',
        'pseudonym_id': 'int',
        'account_id': 'int',
        'user_id': 'int'
    }

    attribute_map = {
        'created_at': 'created_at',
        'event_type': 'event_type',
        'pseudonym_id': 'pseudonym_id',
        'account_id': 'account_id',
        'user_id': 'user_id'
    }

    def __init__(self, created_at=None, event_type=None, pseudonym_id=None, account_id=None, user_id=None, _configuration=None):  # noqa: E501
        """AuthenticationEvent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created_at = None
        self._event_type = None
        self._pseudonym_id = None
        self._account_id = None
        self._user_id = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if event_type is not None:
            self.event_type = event_type
        if pseudonym_id is not None:
            self.pseudonym_id = pseudonym_id
        if account_id is not None:
            self.account_id = account_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def created_at(self):
        """Gets the created_at of this AuthenticationEvent.  # noqa: E501

        timestamp of the event  # noqa: E501

        :return: The created_at of this AuthenticationEvent.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AuthenticationEvent.

        timestamp of the event  # noqa: E501

        :param created_at: The created_at of this AuthenticationEvent.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def event_type(self):
        """Gets the event_type of this AuthenticationEvent.  # noqa: E501

        authentication event type ('login' or 'logout')  # noqa: E501

        :return: The event_type of this AuthenticationEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuthenticationEvent.

        authentication event type ('login' or 'logout')  # noqa: E501

        :param event_type: The event_type of this AuthenticationEvent.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def pseudonym_id(self):
        """Gets the pseudonym_id of this AuthenticationEvent.  # noqa: E501

        ID of the pseudonym (login) associated with the event  # noqa: E501

        :return: The pseudonym_id of this AuthenticationEvent.  # noqa: E501
        :rtype: int
        """
        return self._pseudonym_id

    @pseudonym_id.setter
    def pseudonym_id(self, pseudonym_id):
        """Sets the pseudonym_id of this AuthenticationEvent.

        ID of the pseudonym (login) associated with the event  # noqa: E501

        :param pseudonym_id: The pseudonym_id of this AuthenticationEvent.  # noqa: E501
        :type: int
        """

        self._pseudonym_id = pseudonym_id

    @property
    def account_id(self):
        """Gets the account_id of this AuthenticationEvent.  # noqa: E501

        ID of the account associated with the event. will match the account_id in the associated pseudonym.  # noqa: E501

        :return: The account_id of this AuthenticationEvent.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AuthenticationEvent.

        ID of the account associated with the event. will match the account_id in the associated pseudonym.  # noqa: E501

        :param account_id: The account_id of this AuthenticationEvent.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def user_id(self):
        """Gets the user_id of this AuthenticationEvent.  # noqa: E501

        ID of the user associated with the event will match the user_id in the associated pseudonym.  # noqa: E501

        :return: The user_id of this AuthenticationEvent.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuthenticationEvent.

        ID of the user associated with the event will match the user_id in the associated pseudonym.  # noqa: E501

        :param user_id: The user_id of this AuthenticationEvent.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthenticationEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationEvent):
            return True

        return self.to_dict() != other.to_dict()
