# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FederatedAttributeConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute': 'str',
        'provisioning_only': 'bool',
        'autoconfirm': 'bool'
    }

    attribute_map = {
        'attribute': 'attribute',
        'provisioning_only': 'provisioning_only',
        'autoconfirm': 'autoconfirm'
    }

    def __init__(self, attribute=None, provisioning_only=None, autoconfirm=None, _configuration=None):  # noqa: E501
        """FederatedAttributeConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._attribute = None
        self._provisioning_only = None
        self._autoconfirm = None
        self.discriminator = None

        if attribute is not None:
            self.attribute = attribute
        if provisioning_only is not None:
            self.provisioning_only = provisioning_only
        if autoconfirm is not None:
            self.autoconfirm = autoconfirm

    @property
    def attribute(self):
        """Gets the attribute of this FederatedAttributeConfig.  # noqa: E501

        The name of the attribute as it will be sent from the authentication provider  # noqa: E501

        :return: The attribute of this FederatedAttributeConfig.  # noqa: E501
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this FederatedAttributeConfig.

        The name of the attribute as it will be sent from the authentication provider  # noqa: E501

        :param attribute: The attribute of this FederatedAttributeConfig.  # noqa: E501
        :type: str
        """

        self._attribute = attribute

    @property
    def provisioning_only(self):
        """Gets the provisioning_only of this FederatedAttributeConfig.  # noqa: E501

        If the attribute should be applied only when provisioning a new user, rather than all logins  # noqa: E501

        :return: The provisioning_only of this FederatedAttributeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._provisioning_only

    @provisioning_only.setter
    def provisioning_only(self, provisioning_only):
        """Sets the provisioning_only of this FederatedAttributeConfig.

        If the attribute should be applied only when provisioning a new user, rather than all logins  # noqa: E501

        :param provisioning_only: The provisioning_only of this FederatedAttributeConfig.  # noqa: E501
        :type: bool
        """

        self._provisioning_only = provisioning_only

    @property
    def autoconfirm(self):
        """Gets the autoconfirm of this FederatedAttributeConfig.  # noqa: E501

        (only for email) If the email address is trusted and should be automatically confirmed  # noqa: E501

        :return: The autoconfirm of this FederatedAttributeConfig.  # noqa: E501
        :rtype: bool
        """
        return self._autoconfirm

    @autoconfirm.setter
    def autoconfirm(self, autoconfirm):
        """Sets the autoconfirm of this FederatedAttributeConfig.

        (only for email) If the email address is trusted and should be automatically confirmed  # noqa: E501

        :param autoconfirm: The autoconfirm of this FederatedAttributeConfig.  # noqa: E501
        :type: bool
        """

        self._autoconfirm = autoconfirm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FederatedAttributeConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FederatedAttributeConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FederatedAttributeConfig):
            return True

        return self.to_dict() != other.to_dict()
