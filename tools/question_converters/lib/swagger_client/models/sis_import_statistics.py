# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisImportStatistics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_state_changes': 'int',
        'account': 'SisImportStatistic',
        'enrollment_term': 'SisImportStatistic',
        'communication_channel': 'SisImportStatistic',
        'abstract_course': 'SisImportStatistic',
        'course': 'SisImportStatistic',
        'course_section': 'SisImportStatistic',
        'enrollment': 'SisImportStatistic',
        'group_category': 'SisImportStatistic',
        'group': 'SisImportStatistic',
        'group_membership': 'SisImportStatistic',
        'pseudonym': 'SisImportStatistic',
        'user_observer': 'SisImportStatistic',
        'account_user': 'SisImportStatistic'
    }

    attribute_map = {
        'total_state_changes': 'total_state_changes',
        'account': 'Account',
        'enrollment_term': 'EnrollmentTerm',
        'communication_channel': 'CommunicationChannel',
        'abstract_course': 'AbstractCourse',
        'course': 'Course',
        'course_section': 'CourseSection',
        'enrollment': 'Enrollment',
        'group_category': 'GroupCategory',
        'group': 'Group',
        'group_membership': 'GroupMembership',
        'pseudonym': 'Pseudonym',
        'user_observer': 'UserObserver',
        'account_user': 'AccountUser'
    }

    def __init__(self, total_state_changes=None, account=None, enrollment_term=None, communication_channel=None, abstract_course=None, course=None, course_section=None, enrollment=None, group_category=None, group=None, group_membership=None, pseudonym=None, user_observer=None, account_user=None, _configuration=None):  # noqa: E501
        """SisImportStatistics - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._total_state_changes = None
        self._account = None
        self._enrollment_term = None
        self._communication_channel = None
        self._abstract_course = None
        self._course = None
        self._course_section = None
        self._enrollment = None
        self._group_category = None
        self._group = None
        self._group_membership = None
        self._pseudonym = None
        self._user_observer = None
        self._account_user = None
        self.discriminator = None

        if total_state_changes is not None:
            self.total_state_changes = total_state_changes
        if account is not None:
            self.account = account
        if enrollment_term is not None:
            self.enrollment_term = enrollment_term
        if communication_channel is not None:
            self.communication_channel = communication_channel
        if abstract_course is not None:
            self.abstract_course = abstract_course
        if course is not None:
            self.course = course
        if course_section is not None:
            self.course_section = course_section
        if enrollment is not None:
            self.enrollment = enrollment
        if group_category is not None:
            self.group_category = group_category
        if group is not None:
            self.group = group
        if group_membership is not None:
            self.group_membership = group_membership
        if pseudonym is not None:
            self.pseudonym = pseudonym
        if user_observer is not None:
            self.user_observer = user_observer
        if account_user is not None:
            self.account_user = account_user

    @property
    def total_state_changes(self):
        """Gets the total_state_changes of this SisImportStatistics.  # noqa: E501

        This is the total number of items that were changed in the sis import. There are a few caveats that can cause this number to not add up to the individual counts. There are some state changes that happen that have no impact to the object. An example would be changing a course from 'created' to 'claimed'. Both of these would be considered an active course, but would increment this counter. In this example the course would not increment the created or restored counters for course statistic.  # noqa: E501

        :return: The total_state_changes of this SisImportStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_state_changes

    @total_state_changes.setter
    def total_state_changes(self, total_state_changes):
        """Sets the total_state_changes of this SisImportStatistics.

        This is the total number of items that were changed in the sis import. There are a few caveats that can cause this number to not add up to the individual counts. There are some state changes that happen that have no impact to the object. An example would be changing a course from 'created' to 'claimed'. Both of these would be considered an active course, but would increment this counter. In this example the course would not increment the created or restored counters for course statistic.  # noqa: E501

        :param total_state_changes: The total_state_changes of this SisImportStatistics.  # noqa: E501
        :type: int
        """

        self._total_state_changes = total_state_changes

    @property
    def account(self):
        """Gets the account of this SisImportStatistics.  # noqa: E501

        This contains that statistics for accounts.  # noqa: E501

        :return: The account of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SisImportStatistics.

        This contains that statistics for accounts.  # noqa: E501

        :param account: The account of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._account = account

    @property
    def enrollment_term(self):
        """Gets the enrollment_term of this SisImportStatistics.  # noqa: E501

        This contains that statistics for terms.  # noqa: E501

        :return: The enrollment_term of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._enrollment_term

    @enrollment_term.setter
    def enrollment_term(self, enrollment_term):
        """Sets the enrollment_term of this SisImportStatistics.

        This contains that statistics for terms.  # noqa: E501

        :param enrollment_term: The enrollment_term of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._enrollment_term = enrollment_term

    @property
    def communication_channel(self):
        """Gets the communication_channel of this SisImportStatistics.  # noqa: E501

        This contains that statistics for communication channels. This is an indirect effect from creating or deleting a user.  # noqa: E501

        :return: The communication_channel of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._communication_channel

    @communication_channel.setter
    def communication_channel(self, communication_channel):
        """Sets the communication_channel of this SisImportStatistics.

        This contains that statistics for communication channels. This is an indirect effect from creating or deleting a user.  # noqa: E501

        :param communication_channel: The communication_channel of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._communication_channel = communication_channel

    @property
    def abstract_course(self):
        """Gets the abstract_course of this SisImportStatistics.  # noqa: E501

        This contains that statistics for abstract courses.  # noqa: E501

        :return: The abstract_course of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._abstract_course

    @abstract_course.setter
    def abstract_course(self, abstract_course):
        """Sets the abstract_course of this SisImportStatistics.

        This contains that statistics for abstract courses.  # noqa: E501

        :param abstract_course: The abstract_course of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._abstract_course = abstract_course

    @property
    def course(self):
        """Gets the course of this SisImportStatistics.  # noqa: E501

        This contains that statistics for courses.  # noqa: E501

        :return: The course of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this SisImportStatistics.

        This contains that statistics for courses.  # noqa: E501

        :param course: The course of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._course = course

    @property
    def course_section(self):
        """Gets the course_section of this SisImportStatistics.  # noqa: E501

        This contains that statistics for course sections.  # noqa: E501

        :return: The course_section of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._course_section

    @course_section.setter
    def course_section(self, course_section):
        """Sets the course_section of this SisImportStatistics.

        This contains that statistics for course sections.  # noqa: E501

        :param course_section: The course_section of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._course_section = course_section

    @property
    def enrollment(self):
        """Gets the enrollment of this SisImportStatistics.  # noqa: E501

        This contains that statistics for enrollments.  # noqa: E501

        :return: The enrollment of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._enrollment

    @enrollment.setter
    def enrollment(self, enrollment):
        """Sets the enrollment of this SisImportStatistics.

        This contains that statistics for enrollments.  # noqa: E501

        :param enrollment: The enrollment of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._enrollment = enrollment

    @property
    def group_category(self):
        """Gets the group_category of this SisImportStatistics.  # noqa: E501

        This contains that statistics for group categories.  # noqa: E501

        :return: The group_category of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._group_category

    @group_category.setter
    def group_category(self, group_category):
        """Sets the group_category of this SisImportStatistics.

        This contains that statistics for group categories.  # noqa: E501

        :param group_category: The group_category of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._group_category = group_category

    @property
    def group(self):
        """Gets the group of this SisImportStatistics.  # noqa: E501

        This contains that statistics for groups.  # noqa: E501

        :return: The group of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this SisImportStatistics.

        This contains that statistics for groups.  # noqa: E501

        :param group: The group of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._group = group

    @property
    def group_membership(self):
        """Gets the group_membership of this SisImportStatistics.  # noqa: E501

        This contains that statistics for group memberships. This can be a direct impact from the import or indirect from an enrollment being deleted.  # noqa: E501

        :return: The group_membership of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._group_membership

    @group_membership.setter
    def group_membership(self, group_membership):
        """Sets the group_membership of this SisImportStatistics.

        This contains that statistics for group memberships. This can be a direct impact from the import or indirect from an enrollment being deleted.  # noqa: E501

        :param group_membership: The group_membership of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._group_membership = group_membership

    @property
    def pseudonym(self):
        """Gets the pseudonym of this SisImportStatistics.  # noqa: E501

        This contains that statistics for pseudonyms. Pseudonyms are logins for users, and are the object that ties an enrollment to a user. This would be impacted from the user importer.   # noqa: E501

        :return: The pseudonym of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._pseudonym

    @pseudonym.setter
    def pseudonym(self, pseudonym):
        """Sets the pseudonym of this SisImportStatistics.

        This contains that statistics for pseudonyms. Pseudonyms are logins for users, and are the object that ties an enrollment to a user. This would be impacted from the user importer.   # noqa: E501

        :param pseudonym: The pseudonym of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._pseudonym = pseudonym

    @property
    def user_observer(self):
        """Gets the user_observer of this SisImportStatistics.  # noqa: E501

        This contains that statistics for user observers.  # noqa: E501

        :return: The user_observer of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._user_observer

    @user_observer.setter
    def user_observer(self, user_observer):
        """Sets the user_observer of this SisImportStatistics.

        This contains that statistics for user observers.  # noqa: E501

        :param user_observer: The user_observer of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._user_observer = user_observer

    @property
    def account_user(self):
        """Gets the account_user of this SisImportStatistics.  # noqa: E501

        This contains that statistics for account users.  # noqa: E501

        :return: The account_user of this SisImportStatistics.  # noqa: E501
        :rtype: SisImportStatistic
        """
        return self._account_user

    @account_user.setter
    def account_user(self, account_user):
        """Sets the account_user of this SisImportStatistics.

        This contains that statistics for account users.  # noqa: E501

        :param account_user: The account_user of this SisImportStatistics.  # noqa: E501
        :type: SisImportStatistic
        """

        self._account_user = account_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisImportStatistics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisImportStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisImportStatistics):
            return True

        return self.to_dict() != other.to_dict()
