# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Day(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'ModelDatetime',
        'graders': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'graders': 'graders'
    }

    def __init__(self, _date=None, graders=None, _configuration=None):  # noqa: E501
        """Day - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self.__date = None
        self._graders = None
        self.discriminator = None

        if _date is not None:
            self._date = _date
        if graders is not None:
            self.graders = graders

    @property
    def _date(self):
        """Gets the _date of this Day.  # noqa: E501

        the date represented by this entry  # noqa: E501

        :return: The _date of this Day.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Day.

        the date represented by this entry  # noqa: E501

        :param _date: The _date of this Day.  # noqa: E501
        :type: ModelDatetime
        """

        self.__date = _date

    @property
    def graders(self):
        """Gets the graders of this Day.  # noqa: E501

        an array of the graders who were responsible for the submissions in this response. the submissions are grouped according to the person who graded them and the assignment they were submitted for.  # noqa: E501

        :return: The graders of this Day.  # noqa: E501
        :rtype: int
        """
        return self._graders

    @graders.setter
    def graders(self, graders):
        """Sets the graders of this Day.

        an array of the graders who were responsible for the submissions in this response. the submissions are grouped according to the person who graded them and the assignment they were submitted for.  # noqa: E501

        :param graders: The graders of this Day.  # noqa: E501
        :type: int
        """

        self._graders = graders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Day, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Day):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Day):
            return True

        return self.to_dict() != other.to_dict()
