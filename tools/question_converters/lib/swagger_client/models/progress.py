# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Progress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'context_id': 'int',
        'context_type': 'str',
        'user_id': 'int',
        'tag': 'str',
        'completion': 'int',
        'workflow_state': 'str',
        'created_at': 'ModelDatetime',
        'updated_at': 'ModelDatetime',
        'message': 'str',
        'results': 'object',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'context_id': 'context_id',
        'context_type': 'context_type',
        'user_id': 'user_id',
        'tag': 'tag',
        'completion': 'completion',
        'workflow_state': 'workflow_state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'message': 'message',
        'results': 'results',
        'url': 'url'
    }

    def __init__(self, id=None, context_id=None, context_type=None, user_id=None, tag=None, completion=None, workflow_state=None, created_at=None, updated_at=None, message=None, results=None, url=None, _configuration=None):  # noqa: E501
        """Progress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._context_id = None
        self._context_type = None
        self._user_id = None
        self._tag = None
        self._completion = None
        self._workflow_state = None
        self._created_at = None
        self._updated_at = None
        self._message = None
        self._results = None
        self._url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if context_id is not None:
            self.context_id = context_id
        if context_type is not None:
            self.context_type = context_type
        if user_id is not None:
            self.user_id = user_id
        if tag is not None:
            self.tag = tag
        if completion is not None:
            self.completion = completion
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if message is not None:
            self.message = message
        if results is not None:
            self.results = results
        if url is not None:
            self.url = url

    @property
    def id(self):
        """Gets the id of this Progress.  # noqa: E501

        the ID of the Progress object  # noqa: E501

        :return: The id of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Progress.

        the ID of the Progress object  # noqa: E501

        :param id: The id of this Progress.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def context_id(self):
        """Gets the context_id of this Progress.  # noqa: E501

        the context owning the job.  # noqa: E501

        :return: The context_id of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id):
        """Sets the context_id of this Progress.

        the context owning the job.  # noqa: E501

        :param context_id: The context_id of this Progress.  # noqa: E501
        :type: int
        """

        self._context_id = context_id

    @property
    def context_type(self):
        """Gets the context_type of this Progress.  # noqa: E501


        :return: The context_type of this Progress.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this Progress.


        :param context_type: The context_type of this Progress.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def user_id(self):
        """Gets the user_id of this Progress.  # noqa: E501

        the id of the user who started the job  # noqa: E501

        :return: The user_id of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Progress.

        the id of the user who started the job  # noqa: E501

        :param user_id: The user_id of this Progress.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def tag(self):
        """Gets the tag of this Progress.  # noqa: E501

        the type of operation  # noqa: E501

        :return: The tag of this Progress.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Progress.

        the type of operation  # noqa: E501

        :param tag: The tag of this Progress.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def completion(self):
        """Gets the completion of this Progress.  # noqa: E501

        percent completed  # noqa: E501

        :return: The completion of this Progress.  # noqa: E501
        :rtype: int
        """
        return self._completion

    @completion.setter
    def completion(self, completion):
        """Sets the completion of this Progress.

        percent completed  # noqa: E501

        :param completion: The completion of this Progress.  # noqa: E501
        :type: int
        """

        self._completion = completion

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Progress.  # noqa: E501

        the state of the job one of 'queued', 'running', 'completed', 'failed'  # noqa: E501

        :return: The workflow_state of this Progress.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Progress.

        the state of the job one of 'queued', 'running', 'completed', 'failed'  # noqa: E501

        :param workflow_state: The workflow_state of this Progress.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def created_at(self):
        """Gets the created_at of this Progress.  # noqa: E501

        the time the job was created  # noqa: E501

        :return: The created_at of this Progress.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Progress.

        the time the job was created  # noqa: E501

        :param created_at: The created_at of this Progress.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Progress.  # noqa: E501

        the time the job was last updated  # noqa: E501

        :return: The updated_at of this Progress.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Progress.

        the time the job was last updated  # noqa: E501

        :param updated_at: The updated_at of this Progress.  # noqa: E501
        :type: ModelDatetime
        """

        self._updated_at = updated_at

    @property
    def message(self):
        """Gets the message of this Progress.  # noqa: E501

        optional details about the job  # noqa: E501

        :return: The message of this Progress.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Progress.

        optional details about the job  # noqa: E501

        :param message: The message of this Progress.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def results(self):
        """Gets the results of this Progress.  # noqa: E501

        optional results of the job. omitted when job is still pending  # noqa: E501

        :return: The results of this Progress.  # noqa: E501
        :rtype: object
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Progress.

        optional results of the job. omitted when job is still pending  # noqa: E501

        :param results: The results of this Progress.  # noqa: E501
        :type: object
        """

        self._results = results

    @property
    def url(self):
        """Gets the url of this Progress.  # noqa: E501

        url where a progress update can be retrieved with an LTI access token  # noqa: E501

        :return: The url of this Progress.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Progress.

        url where a progress update can be retrieved with an LTI access token  # noqa: E501

        :param url: The url of this Progress.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Progress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Progress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Progress):
            return True

        return self.to_dict() != other.to_dict()
