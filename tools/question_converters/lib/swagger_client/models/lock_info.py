# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LockInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_string': 'str',
        'unlock_at': 'ModelDatetime',
        'lock_at': 'ModelDatetime',
        'context_module': 'str',
        'manually_locked': 'bool'
    }

    attribute_map = {
        'asset_string': 'asset_string',
        'unlock_at': 'unlock_at',
        'lock_at': 'lock_at',
        'context_module': 'context_module',
        'manually_locked': 'manually_locked'
    }

    def __init__(self, asset_string=None, unlock_at=None, lock_at=None, context_module=None, manually_locked=None, _configuration=None):  # noqa: E501
        """LockInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._asset_string = None
        self._unlock_at = None
        self._lock_at = None
        self._context_module = None
        self._manually_locked = None
        self.discriminator = None

        if asset_string is not None:
            self.asset_string = asset_string
        if unlock_at is not None:
            self.unlock_at = unlock_at
        if lock_at is not None:
            self.lock_at = lock_at
        if context_module is not None:
            self.context_module = context_module
        if manually_locked is not None:
            self.manually_locked = manually_locked

    @property
    def asset_string(self):
        """Gets the asset_string of this LockInfo.  # noqa: E501

        Asset string for the object causing the lock  # noqa: E501

        :return: The asset_string of this LockInfo.  # noqa: E501
        :rtype: str
        """
        return self._asset_string

    @asset_string.setter
    def asset_string(self, asset_string):
        """Sets the asset_string of this LockInfo.

        Asset string for the object causing the lock  # noqa: E501

        :param asset_string: The asset_string of this LockInfo.  # noqa: E501
        :type: str
        """

        self._asset_string = asset_string

    @property
    def unlock_at(self):
        """Gets the unlock_at of this LockInfo.  # noqa: E501

        (Optional) Time at which this was/will be unlocked. Must be before the due date.  # noqa: E501

        :return: The unlock_at of this LockInfo.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._unlock_at

    @unlock_at.setter
    def unlock_at(self, unlock_at):
        """Sets the unlock_at of this LockInfo.

        (Optional) Time at which this was/will be unlocked. Must be before the due date.  # noqa: E501

        :param unlock_at: The unlock_at of this LockInfo.  # noqa: E501
        :type: ModelDatetime
        """

        self._unlock_at = unlock_at

    @property
    def lock_at(self):
        """Gets the lock_at of this LockInfo.  # noqa: E501

        (Optional) Time at which this was/will be locked. Must be after the due date.  # noqa: E501

        :return: The lock_at of this LockInfo.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this LockInfo.

        (Optional) Time at which this was/will be locked. Must be after the due date.  # noqa: E501

        :param lock_at: The lock_at of this LockInfo.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def context_module(self):
        """Gets the context_module of this LockInfo.  # noqa: E501

        (Optional) Context module causing the lock.  # noqa: E501

        :return: The context_module of this LockInfo.  # noqa: E501
        :rtype: str
        """
        return self._context_module

    @context_module.setter
    def context_module(self, context_module):
        """Sets the context_module of this LockInfo.

        (Optional) Context module causing the lock.  # noqa: E501

        :param context_module: The context_module of this LockInfo.  # noqa: E501
        :type: str
        """

        self._context_module = context_module

    @property
    def manually_locked(self):
        """Gets the manually_locked of this LockInfo.  # noqa: E501


        :return: The manually_locked of this LockInfo.  # noqa: E501
        :rtype: bool
        """
        return self._manually_locked

    @manually_locked.setter
    def manually_locked(self, manually_locked):
        """Sets the manually_locked of this LockInfo.


        :param manually_locked: The manually_locked of this LockInfo.  # noqa: E501
        :type: bool
        """

        self._manually_locked = manually_locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LockInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LockInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LockInfo):
            return True

        return self.to_dict() != other.to_dict()
