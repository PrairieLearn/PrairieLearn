# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class PageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'app_name': 'str',
        'url': 'str',
        'context_type': 'str',
        'asset_type': 'str',
        'controller': 'str',
        'action': 'str',
        'contributed': 'bool',
        'interaction_seconds': 'float',
        'created_at': 'ModelDatetime',
        'user_request': 'bool',
        'render_time': 'float',
        'user_agent': 'str',
        'participated': 'bool',
        'http_method': 'str',
        'remote_ip': 'str',
        'links': 'PageViewLinks'
    }

    attribute_map = {
        'id': 'id',
        'app_name': 'app_name',
        'url': 'url',
        'context_type': 'context_type',
        'asset_type': 'asset_type',
        'controller': 'controller',
        'action': 'action',
        'contributed': 'contributed',
        'interaction_seconds': 'interaction_seconds',
        'created_at': 'created_at',
        'user_request': 'user_request',
        'render_time': 'render_time',
        'user_agent': 'user_agent',
        'participated': 'participated',
        'http_method': 'http_method',
        'remote_ip': 'remote_ip',
        'links': 'links'
    }

    def __init__(self, id=None, app_name=None, url=None, context_type=None, asset_type=None, controller=None, action=None, contributed=None, interaction_seconds=None, created_at=None, user_request=None, render_time=None, user_agent=None, participated=None, http_method=None, remote_ip=None, links=None, _configuration=None):  # noqa: E501
        """PageView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._app_name = None
        self._url = None
        self._context_type = None
        self._asset_type = None
        self._controller = None
        self._action = None
        self._contributed = None
        self._interaction_seconds = None
        self._created_at = None
        self._user_request = None
        self._render_time = None
        self._user_agent = None
        self._participated = None
        self._http_method = None
        self._remote_ip = None
        self._links = None
        self.discriminator = None

        self.id = id
        if app_name is not None:
            self.app_name = app_name
        if url is not None:
            self.url = url
        if context_type is not None:
            self.context_type = context_type
        if asset_type is not None:
            self.asset_type = asset_type
        if controller is not None:
            self.controller = controller
        if action is not None:
            self.action = action
        if contributed is not None:
            self.contributed = contributed
        if interaction_seconds is not None:
            self.interaction_seconds = interaction_seconds
        if created_at is not None:
            self.created_at = created_at
        if user_request is not None:
            self.user_request = user_request
        if render_time is not None:
            self.render_time = render_time
        if user_agent is not None:
            self.user_agent = user_agent
        if participated is not None:
            self.participated = participated
        if http_method is not None:
            self.http_method = http_method
        if remote_ip is not None:
            self.remote_ip = remote_ip
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this PageView.  # noqa: E501

        A UUID representing the page view.  This is also the unique request id  # noqa: E501

        :return: The id of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PageView.

        A UUID representing the page view.  This is also the unique request id  # noqa: E501

        :param id: The id of this PageView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def app_name(self):
        """Gets the app_name of this PageView.  # noqa: E501

        If the request is from an API request, the app that generated the access token  # noqa: E501

        :return: The app_name of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this PageView.

        If the request is from an API request, the app that generated the access token  # noqa: E501

        :param app_name: The app_name of this PageView.  # noqa: E501
        :type: str
        """

        self._app_name = app_name

    @property
    def url(self):
        """Gets the url of this PageView.  # noqa: E501

        The URL requested  # noqa: E501

        :return: The url of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PageView.

        The URL requested  # noqa: E501

        :param url: The url of this PageView.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def context_type(self):
        """Gets the context_type of this PageView.  # noqa: E501

        The type of context for the request  # noqa: E501

        :return: The context_type of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type):
        """Sets the context_type of this PageView.

        The type of context for the request  # noqa: E501

        :param context_type: The context_type of this PageView.  # noqa: E501
        :type: str
        """

        self._context_type = context_type

    @property
    def asset_type(self):
        """Gets the asset_type of this PageView.  # noqa: E501

        The type of asset in the context for the request, if any  # noqa: E501

        :return: The asset_type of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this PageView.

        The type of asset in the context for the request, if any  # noqa: E501

        :param asset_type: The asset_type of this PageView.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def controller(self):
        """Gets the controller of this PageView.  # noqa: E501

        The rails controller that handled the request  # noqa: E501

        :return: The controller of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this PageView.

        The rails controller that handled the request  # noqa: E501

        :param controller: The controller of this PageView.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def action(self):
        """Gets the action of this PageView.  # noqa: E501

        The rails action that handled the request  # noqa: E501

        :return: The action of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PageView.

        The rails action that handled the request  # noqa: E501

        :param action: The action of this PageView.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def contributed(self):
        """Gets the contributed of this PageView.  # noqa: E501

        This field is deprecated, and will always be false  # noqa: E501

        :return: The contributed of this PageView.  # noqa: E501
        :rtype: bool
        """
        return self._contributed

    @contributed.setter
    def contributed(self, contributed):
        """Sets the contributed of this PageView.

        This field is deprecated, and will always be false  # noqa: E501

        :param contributed: The contributed of this PageView.  # noqa: E501
        :type: bool
        """

        self._contributed = contributed

    @property
    def interaction_seconds(self):
        """Gets the interaction_seconds of this PageView.  # noqa: E501

        An approximation of how long the user spent on the page, in seconds  # noqa: E501

        :return: The interaction_seconds of this PageView.  # noqa: E501
        :rtype: float
        """
        return self._interaction_seconds

    @interaction_seconds.setter
    def interaction_seconds(self, interaction_seconds):
        """Sets the interaction_seconds of this PageView.

        An approximation of how long the user spent on the page, in seconds  # noqa: E501

        :param interaction_seconds: The interaction_seconds of this PageView.  # noqa: E501
        :type: float
        """

        self._interaction_seconds = interaction_seconds

    @property
    def created_at(self):
        """Gets the created_at of this PageView.  # noqa: E501

        When the request was made  # noqa: E501

        :return: The created_at of this PageView.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PageView.

        When the request was made  # noqa: E501

        :param created_at: The created_at of this PageView.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def user_request(self):
        """Gets the user_request of this PageView.  # noqa: E501

        A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)  # noqa: E501

        :return: The user_request of this PageView.  # noqa: E501
        :rtype: bool
        """
        return self._user_request

    @user_request.setter
    def user_request(self, user_request):
        """Sets the user_request of this PageView.

        A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)  # noqa: E501

        :param user_request: The user_request of this PageView.  # noqa: E501
        :type: bool
        """

        self._user_request = user_request

    @property
    def render_time(self):
        """Gets the render_time of this PageView.  # noqa: E501

        How long the response took to render, in seconds  # noqa: E501

        :return: The render_time of this PageView.  # noqa: E501
        :rtype: float
        """
        return self._render_time

    @render_time.setter
    def render_time(self, render_time):
        """Sets the render_time of this PageView.

        How long the response took to render, in seconds  # noqa: E501

        :param render_time: The render_time of this PageView.  # noqa: E501
        :type: float
        """

        self._render_time = render_time

    @property
    def user_agent(self):
        """Gets the user_agent of this PageView.  # noqa: E501

        The user-agent of the browser or program that made the request  # noqa: E501

        :return: The user_agent of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this PageView.

        The user-agent of the browser or program that made the request  # noqa: E501

        :param user_agent: The user_agent of this PageView.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def participated(self):
        """Gets the participated of this PageView.  # noqa: E501

        True if the request counted as participating, such as submitting homework  # noqa: E501

        :return: The participated of this PageView.  # noqa: E501
        :rtype: bool
        """
        return self._participated

    @participated.setter
    def participated(self, participated):
        """Sets the participated of this PageView.

        True if the request counted as participating, such as submitting homework  # noqa: E501

        :param participated: The participated of this PageView.  # noqa: E501
        :type: bool
        """

        self._participated = participated

    @property
    def http_method(self):
        """Gets the http_method of this PageView.  # noqa: E501

        The HTTP method such as GET or POST  # noqa: E501

        :return: The http_method of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this PageView.

        The HTTP method such as GET or POST  # noqa: E501

        :param http_method: The http_method of this PageView.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def remote_ip(self):
        """Gets the remote_ip of this PageView.  # noqa: E501

        The origin IP address of the request  # noqa: E501

        :return: The remote_ip of this PageView.  # noqa: E501
        :rtype: str
        """
        return self._remote_ip

    @remote_ip.setter
    def remote_ip(self, remote_ip):
        """Sets the remote_ip of this PageView.

        The origin IP address of the request  # noqa: E501

        :param remote_ip: The remote_ip of this PageView.  # noqa: E501
        :type: str
        """

        self._remote_ip = remote_ip

    @property
    def links(self):
        """Gets the links of this PageView.  # noqa: E501

        The page view links to define the relationships  # noqa: E501

        :return: The links of this PageView.  # noqa: E501
        :rtype: PageViewLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PageView.

        The page view links to define the relationships  # noqa: E501

        :param links: The links of this PageView.  # noqa: E501
        :type: PageViewLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PageView):
            return True

        return self.to_dict() != other.to_dict()
