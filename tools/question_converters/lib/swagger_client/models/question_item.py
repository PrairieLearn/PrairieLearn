# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QuestionItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'item_body': 'str',
        'calculator_type': 'str',
        'feedback': 'QuestionFeedback',
        'interaction_type_slug': 'str',
        'interaction_data': 'object',
        'properties': 'object',
        'scoring_data': 'object',
        'answer_feedback': 'object',
        'scoring_algorithm': 'str'
    }

    attribute_map = {
        'title': 'title',
        'item_body': 'item_body',
        'calculator_type': 'calculator_type',
        'feedback': 'feedback',
        'interaction_type_slug': 'interaction_type_slug',
        'interaction_data': 'interaction_data',
        'properties': 'properties',
        'scoring_data': 'scoring_data',
        'answer_feedback': 'answer_feedback',
        'scoring_algorithm': 'scoring_algorithm'
    }

    def __init__(self, title=None, item_body=None, calculator_type=None, feedback=None, interaction_type_slug=None, interaction_data=None, properties=None, scoring_data=None, answer_feedback=None, scoring_algorithm=None, _configuration=None):  # noqa: E501
        """QuestionItem - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._title = None
        self._item_body = None
        self._calculator_type = None
        self._feedback = None
        self._interaction_type_slug = None
        self._interaction_data = None
        self._properties = None
        self._scoring_data = None
        self._answer_feedback = None
        self._scoring_algorithm = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if item_body is not None:
            self.item_body = item_body
        if calculator_type is not None:
            self.calculator_type = calculator_type
        if feedback is not None:
            self.feedback = feedback
        if interaction_type_slug is not None:
            self.interaction_type_slug = interaction_type_slug
        if interaction_data is not None:
            self.interaction_data = interaction_data
        if properties is not None:
            self.properties = properties
        if scoring_data is not None:
            self.scoring_data = scoring_data
        if answer_feedback is not None:
            self.answer_feedback = answer_feedback
        if scoring_algorithm is not None:
            self.scoring_algorithm = scoring_algorithm

    @property
    def title(self):
        """Gets the title of this QuestionItem.  # noqa: E501

        the question title  # noqa: E501

        :return: The title of this QuestionItem.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuestionItem.

        the question title  # noqa: E501

        :param title: The title of this QuestionItem.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def item_body(self):
        """Gets the item_body of this QuestionItem.  # noqa: E501

        the question content (can include html for rich content)  # noqa: E501

        :return: The item_body of this QuestionItem.  # noqa: E501
        :rtype: str
        """
        return self._item_body

    @item_body.setter
    def item_body(self, item_body):
        """Sets the item_body of this QuestionItem.

        the question content (can include html for rich content)  # noqa: E501

        :param item_body: The item_body of this QuestionItem.  # noqa: E501
        :type: str
        """

        self._item_body = item_body

    @property
    def calculator_type(self):
        """Gets the calculator_type of this QuestionItem.  # noqa: E501

        type of calculator the user will have access to during the question ('none', basic' or 'scientific')  # noqa: E501

        :return: The calculator_type of this QuestionItem.  # noqa: E501
        :rtype: str
        """
        return self._calculator_type

    @calculator_type.setter
    def calculator_type(self, calculator_type):
        """Sets the calculator_type of this QuestionItem.

        type of calculator the user will have access to during the question ('none', basic' or 'scientific')  # noqa: E501

        :param calculator_type: The calculator_type of this QuestionItem.  # noqa: E501
        :type: str
        """

        self._calculator_type = calculator_type

    @property
    def feedback(self):
        """Gets the feedback of this QuestionItem.  # noqa: E501

        correct, incorrect, and general feedback for the question (see QuestionFeedback)  # noqa: E501

        :return: The feedback of this QuestionItem.  # noqa: E501
        :rtype: QuestionFeedback
        """
        return self._feedback

    @feedback.setter
    def feedback(self, feedback):
        """Sets the feedback of this QuestionItem.

        correct, incorrect, and general feedback for the question (see QuestionFeedback)  # noqa: E501

        :param feedback: The feedback of this QuestionItem.  # noqa: E501
        :type: QuestionFeedback
        """

        self._feedback = feedback

    @property
    def interaction_type_slug(self):
        """Gets the interaction_type_slug of this QuestionItem.  # noqa: E501

        can be thought of as the question type. One of 'multi-answer', 'matching', 'categorization',       'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false',       'essay', or 'fill-blank' (deprecated). See Appendix: Question Types for more info about each type.  # noqa: E501

        :return: The interaction_type_slug of this QuestionItem.  # noqa: E501
        :rtype: str
        """
        return self._interaction_type_slug

    @interaction_type_slug.setter
    def interaction_type_slug(self, interaction_type_slug):
        """Sets the interaction_type_slug of this QuestionItem.

        can be thought of as the question type. One of 'multi-answer', 'matching', 'categorization',       'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false',       'essay', or 'fill-blank' (deprecated). See Appendix: Question Types for more info about each type.  # noqa: E501

        :param interaction_type_slug: The interaction_type_slug of this QuestionItem.  # noqa: E501
        :type: str
        """

        self._interaction_type_slug = interaction_type_slug

    @property
    def interaction_data(self):
        """Gets the interaction_data of this QuestionItem.  # noqa: E501

        an object that contains the question data. See Appendix: Question Types for more info about this field.  # noqa: E501

        :return: The interaction_data of this QuestionItem.  # noqa: E501
        :rtype: object
        """
        return self._interaction_data

    @interaction_data.setter
    def interaction_data(self, interaction_data):
        """Sets the interaction_data of this QuestionItem.

        an object that contains the question data. See Appendix: Question Types for more info about this field.  # noqa: E501

        :param interaction_data: The interaction_data of this QuestionItem.  # noqa: E501
        :type: object
        """

        self._interaction_data = interaction_data

    @property
    def properties(self):
        """Gets the properties of this QuestionItem.  # noqa: E501

        an object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.  # noqa: E501

        :return: The properties of this QuestionItem.  # noqa: E501
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this QuestionItem.

        an object that contains additional properties for some question types. See Appendix: Question Types for more info about this field.  # noqa: E501

        :param properties: The properties of this QuestionItem.  # noqa: E501
        :type: object
        """

        self._properties = properties

    @property
    def scoring_data(self):
        """Gets the scoring_data of this QuestionItem.  # noqa: E501

        describes how to score the question. See Appendix: Question Types for more info about this field.  # noqa: E501

        :return: The scoring_data of this QuestionItem.  # noqa: E501
        :rtype: object
        """
        return self._scoring_data

    @scoring_data.setter
    def scoring_data(self, scoring_data):
        """Sets the scoring_data of this QuestionItem.

        describes how to score the question. See Appendix: Question Types for more info about this field.  # noqa: E501

        :param scoring_data: The scoring_data of this QuestionItem.  # noqa: E501
        :type: object
        """

        self._scoring_data = scoring_data

    @property
    def answer_feedback(self):
        """Gets the answer_feedback of this QuestionItem.  # noqa: E501

        feedback provided for each answer (rich content, only available on 'choice' question types)  # noqa: E501

        :return: The answer_feedback of this QuestionItem.  # noqa: E501
        :rtype: object
        """
        return self._answer_feedback

    @answer_feedback.setter
    def answer_feedback(self, answer_feedback):
        """Sets the answer_feedback of this QuestionItem.

        feedback provided for each answer (rich content, only available on 'choice' question types)  # noqa: E501

        :param answer_feedback: The answer_feedback of this QuestionItem.  # noqa: E501
        :type: object
        """

        self._answer_feedback = answer_feedback

    @property
    def scoring_algorithm(self):
        """Gets the scoring_algorithm of this QuestionItem.  # noqa: E501

        the algorithm used to score the question. See Appendix: Question Types for more info about this field.  # noqa: E501

        :return: The scoring_algorithm of this QuestionItem.  # noqa: E501
        :rtype: str
        """
        return self._scoring_algorithm

    @scoring_algorithm.setter
    def scoring_algorithm(self, scoring_algorithm):
        """Sets the scoring_algorithm of this QuestionItem.

        the algorithm used to score the question. See Appendix: Question Types for more info about this field.  # noqa: E501

        :param scoring_algorithm: The scoring_algorithm of this QuestionItem.  # noqa: E501
        :type: str
        """

        self._scoring_algorithm = scoring_algorithm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuestionItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionItem):
            return True

        return self.to_dict() != other.to_dict()
