# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Feature(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature': 'str',
        'display_name': 'str',
        'applies_to': 'str',
        'feature_flag': 'FeatureFlag',
        'root_opt_in': 'bool',
        'beta': 'bool',
        'autoexpand': 'bool',
        'release_notes_url': 'str'
    }

    attribute_map = {
        'feature': 'feature',
        'display_name': 'display_name',
        'applies_to': 'applies_to',
        'feature_flag': 'feature_flag',
        'root_opt_in': 'root_opt_in',
        'beta': 'beta',
        'autoexpand': 'autoexpand',
        'release_notes_url': 'release_notes_url'
    }

    def __init__(self, feature=None, display_name=None, applies_to=None, feature_flag=None, root_opt_in=None, beta=None, autoexpand=None, release_notes_url=None, _configuration=None):  # noqa: E501
        """Feature - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._feature = None
        self._display_name = None
        self._applies_to = None
        self._feature_flag = None
        self._root_opt_in = None
        self._beta = None
        self._autoexpand = None
        self._release_notes_url = None
        self.discriminator = None

        if feature is not None:
            self.feature = feature
        if display_name is not None:
            self.display_name = display_name
        if applies_to is not None:
            self.applies_to = applies_to
        if feature_flag is not None:
            self.feature_flag = feature_flag
        if root_opt_in is not None:
            self.root_opt_in = root_opt_in
        if beta is not None:
            self.beta = beta
        if autoexpand is not None:
            self.autoexpand = autoexpand
        if release_notes_url is not None:
            self.release_notes_url = release_notes_url

    @property
    def feature(self):
        """Gets the feature of this Feature.  # noqa: E501

        The symbolic name of the feature, used in FeatureFlags  # noqa: E501

        :return: The feature of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this Feature.

        The symbolic name of the feature, used in FeatureFlags  # noqa: E501

        :param feature: The feature of this Feature.  # noqa: E501
        :type: str
        """

        self._feature = feature

    @property
    def display_name(self):
        """Gets the display_name of this Feature.  # noqa: E501

        The user-visible name of the feature  # noqa: E501

        :return: The display_name of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Feature.

        The user-visible name of the feature  # noqa: E501

        :param display_name: The display_name of this Feature.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def applies_to(self):
        """Gets the applies_to of this Feature.  # noqa: E501

        The type of object the feature applies to (RootAccount, Account, Course, or User):  * RootAccount features may only be controlled by flags on root accounts.  * Account features may be controlled by flags on accounts and their parent accounts.  * Course features may be controlled by flags on courses and their parent accounts.  * User features may be controlled by flags on users and site admin only.  # noqa: E501

        :return: The applies_to of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._applies_to

    @applies_to.setter
    def applies_to(self, applies_to):
        """Sets the applies_to of this Feature.

        The type of object the feature applies to (RootAccount, Account, Course, or User):  * RootAccount features may only be controlled by flags on root accounts.  * Account features may be controlled by flags on accounts and their parent accounts.  * Course features may be controlled by flags on courses and their parent accounts.  * User features may be controlled by flags on users and site admin only.  # noqa: E501

        :param applies_to: The applies_to of this Feature.  # noqa: E501
        :type: str
        """

        self._applies_to = applies_to

    @property
    def feature_flag(self):
        """Gets the feature_flag of this Feature.  # noqa: E501

        The FeatureFlag that applies to the caller  # noqa: E501

        :return: The feature_flag of this Feature.  # noqa: E501
        :rtype: FeatureFlag
        """
        return self._feature_flag

    @feature_flag.setter
    def feature_flag(self, feature_flag):
        """Sets the feature_flag of this Feature.

        The FeatureFlag that applies to the caller  # noqa: E501

        :param feature_flag: The feature_flag of this Feature.  # noqa: E501
        :type: FeatureFlag
        """

        self._feature_flag = feature_flag

    @property
    def root_opt_in(self):
        """Gets the root_opt_in of this Feature.  # noqa: E501

        If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action.  # noqa: E501

        :return: The root_opt_in of this Feature.  # noqa: E501
        :rtype: bool
        """
        return self._root_opt_in

    @root_opt_in.setter
    def root_opt_in(self, root_opt_in):
        """Sets the root_opt_in of this Feature.

        If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action.  # noqa: E501

        :param root_opt_in: The root_opt_in of this Feature.  # noqa: E501
        :type: bool
        """

        self._root_opt_in = root_opt_in

    @property
    def beta(self):
        """Gets the beta of this Feature.  # noqa: E501

        Whether the feature is a feature preview. If true, opting in includes ongoing updates outside the regular release schedule.  # noqa: E501

        :return: The beta of this Feature.  # noqa: E501
        :rtype: bool
        """
        return self._beta

    @beta.setter
    def beta(self, beta):
        """Sets the beta of this Feature.

        Whether the feature is a feature preview. If true, opting in includes ongoing updates outside the regular release schedule.  # noqa: E501

        :param beta: The beta of this Feature.  # noqa: E501
        :type: bool
        """

        self._beta = beta

    @property
    def autoexpand(self):
        """Gets the autoexpand of this Feature.  # noqa: E501

        Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand.  # noqa: E501

        :return: The autoexpand of this Feature.  # noqa: E501
        :rtype: bool
        """
        return self._autoexpand

    @autoexpand.setter
    def autoexpand(self, autoexpand):
        """Sets the autoexpand of this Feature.

        Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand.  # noqa: E501

        :param autoexpand: The autoexpand of this Feature.  # noqa: E501
        :type: bool
        """

        self._autoexpand = autoexpand

    @property
    def release_notes_url(self):
        """Gets the release_notes_url of this Feature.  # noqa: E501

        A URL to the release notes describing the feature  # noqa: E501

        :return: The release_notes_url of this Feature.  # noqa: E501
        :rtype: str
        """
        return self._release_notes_url

    @release_notes_url.setter
    def release_notes_url(self, release_notes_url):
        """Sets the release_notes_url of this Feature.

        A URL to the release notes describing the feature  # noqa: E501

        :param release_notes_url: The release_notes_url of this Feature.  # noqa: E501
        :type: str
        """

        self._release_notes_url = release_notes_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Feature, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Feature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Feature):
            return True

        return self.to_dict() != other.to_dict()
