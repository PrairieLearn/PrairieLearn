# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SisImportStatistic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'int',
        'concluded': 'int',
        'deactivated': 'int',
        'restored': 'int',
        'deleted': 'int'
    }

    attribute_map = {
        'created': 'created',
        'concluded': 'concluded',
        'deactivated': 'deactivated',
        'restored': 'restored',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, concluded=None, deactivated=None, restored=None, deleted=None, _configuration=None):  # noqa: E501
        """SisImportStatistic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._created = None
        self._concluded = None
        self._deactivated = None
        self._restored = None
        self._deleted = None
        self.discriminator = None

        if created is not None:
            self.created = created
        if concluded is not None:
            self.concluded = concluded
        if deactivated is not None:
            self.deactivated = deactivated
        if restored is not None:
            self.restored = restored
        if deleted is not None:
            self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this SisImportStatistic.  # noqa: E501

        This is the number of items that were created.  # noqa: E501

        :return: The created of this SisImportStatistic.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SisImportStatistic.

        This is the number of items that were created.  # noqa: E501

        :param created: The created of this SisImportStatistic.  # noqa: E501
        :type: int
        """

        self._created = created

    @property
    def concluded(self):
        """Gets the concluded of this SisImportStatistic.  # noqa: E501

        This is the number of items that marked as completed. This only applies to courses and enrollments.  # noqa: E501

        :return: The concluded of this SisImportStatistic.  # noqa: E501
        :rtype: int
        """
        return self._concluded

    @concluded.setter
    def concluded(self, concluded):
        """Sets the concluded of this SisImportStatistic.

        This is the number of items that marked as completed. This only applies to courses and enrollments.  # noqa: E501

        :param concluded: The concluded of this SisImportStatistic.  # noqa: E501
        :type: int
        """

        self._concluded = concluded

    @property
    def deactivated(self):
        """Gets the deactivated of this SisImportStatistic.  # noqa: E501

        This is the number of Enrollments that were marked as 'inactive'. This only applies to enrollments.  # noqa: E501

        :return: The deactivated of this SisImportStatistic.  # noqa: E501
        :rtype: int
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this SisImportStatistic.

        This is the number of Enrollments that were marked as 'inactive'. This only applies to enrollments.  # noqa: E501

        :param deactivated: The deactivated of this SisImportStatistic.  # noqa: E501
        :type: int
        """

        self._deactivated = deactivated

    @property
    def restored(self):
        """Gets the restored of this SisImportStatistic.  # noqa: E501

        This is the number of items that were set to an active state from a completed, inactive, or deleted state.  # noqa: E501

        :return: The restored of this SisImportStatistic.  # noqa: E501
        :rtype: int
        """
        return self._restored

    @restored.setter
    def restored(self, restored):
        """Sets the restored of this SisImportStatistic.

        This is the number of items that were set to an active state from a completed, inactive, or deleted state.  # noqa: E501

        :param restored: The restored of this SisImportStatistic.  # noqa: E501
        :type: int
        """

        self._restored = restored

    @property
    def deleted(self):
        """Gets the deleted of this SisImportStatistic.  # noqa: E501

        This is the number of items that were deleted.  # noqa: E501

        :return: The deleted of this SisImportStatistic.  # noqa: E501
        :rtype: int
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SisImportStatistic.

        This is the number of items that were deleted.  # noqa: E501

        :param deleted: The deleted of this SisImportStatistic.  # noqa: E501
        :type: int
        """

        self._deleted = deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SisImportStatistic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SisImportStatistic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SisImportStatistic):
            return True

        return self.to_dict() != other.to_dict()
