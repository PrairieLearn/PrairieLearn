# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class FederatedAttributesConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'admin_roles': 'str',
        'display_name': 'str',
        'email': 'str',
        'given_name': 'str',
        'integration_id': 'str',
        'locale': 'str',
        'name': 'str',
        'sis_user_id': 'str',
        'sortable_name': 'str',
        'surname': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'admin_roles': 'admin_roles',
        'display_name': 'display_name',
        'email': 'email',
        'given_name': 'given_name',
        'integration_id': 'integration_id',
        'locale': 'locale',
        'name': 'name',
        'sis_user_id': 'sis_user_id',
        'sortable_name': 'sortable_name',
        'surname': 'surname',
        'timezone': 'timezone'
    }

    def __init__(self, admin_roles=None, display_name=None, email=None, given_name=None, integration_id=None, locale=None, name=None, sis_user_id=None, sortable_name=None, surname=None, timezone=None, _configuration=None):  # noqa: E501
        """FederatedAttributesConfig - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._admin_roles = None
        self._display_name = None
        self._email = None
        self._given_name = None
        self._integration_id = None
        self._locale = None
        self._name = None
        self._sis_user_id = None
        self._sortable_name = None
        self._surname = None
        self._timezone = None
        self.discriminator = None

        if admin_roles is not None:
            self.admin_roles = admin_roles
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if given_name is not None:
            self.given_name = given_name
        if integration_id is not None:
            self.integration_id = integration_id
        if locale is not None:
            self.locale = locale
        if name is not None:
            self.name = name
        if sis_user_id is not None:
            self.sis_user_id = sis_user_id
        if sortable_name is not None:
            self.sortable_name = sortable_name
        if surname is not None:
            self.surname = surname
        if timezone is not None:
            self.timezone = timezone

    @property
    def admin_roles(self):
        """Gets the admin_roles of this FederatedAttributesConfig.  # noqa: E501

        A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.  # noqa: E501

        :return: The admin_roles of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._admin_roles

    @admin_roles.setter
    def admin_roles(self, admin_roles):
        """Sets the admin_roles of this FederatedAttributesConfig.

        A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.  # noqa: E501

        :param admin_roles: The admin_roles of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._admin_roles = admin_roles

    @property
    def display_name(self):
        """Gets the display_name of this FederatedAttributesConfig.  # noqa: E501

        The full display name of the user  # noqa: E501

        :return: The display_name of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this FederatedAttributesConfig.

        The full display name of the user  # noqa: E501

        :param display_name: The display_name of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this FederatedAttributesConfig.  # noqa: E501

        The user's e-mail address  # noqa: E501

        :return: The email of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FederatedAttributesConfig.

        The user's e-mail address  # noqa: E501

        :param email: The email of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def given_name(self):
        """Gets the given_name of this FederatedAttributesConfig.  # noqa: E501

        The first, or given, name of the user  # noqa: E501

        :return: The given_name of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._given_name

    @given_name.setter
    def given_name(self, given_name):
        """Sets the given_name of this FederatedAttributesConfig.

        The first, or given, name of the user  # noqa: E501

        :param given_name: The given_name of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._given_name = given_name

    @property
    def integration_id(self):
        """Gets the integration_id of this FederatedAttributesConfig.  # noqa: E501

        The secondary unique identifier for SIS purposes  # noqa: E501

        :return: The integration_id of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this FederatedAttributesConfig.

        The secondary unique identifier for SIS purposes  # noqa: E501

        :param integration_id: The integration_id of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def locale(self):
        """Gets the locale of this FederatedAttributesConfig.  # noqa: E501

        The user's preferred locale/language  # noqa: E501

        :return: The locale of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this FederatedAttributesConfig.

        The user's preferred locale/language  # noqa: E501

        :param locale: The locale of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this FederatedAttributesConfig.  # noqa: E501

        The full name of the user  # noqa: E501

        :return: The name of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FederatedAttributesConfig.

        The full name of the user  # noqa: E501

        :param name: The name of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sis_user_id(self):
        """Gets the sis_user_id of this FederatedAttributesConfig.  # noqa: E501

        The unique SIS identifier  # noqa: E501

        :return: The sis_user_id of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._sis_user_id

    @sis_user_id.setter
    def sis_user_id(self, sis_user_id):
        """Sets the sis_user_id of this FederatedAttributesConfig.

        The unique SIS identifier  # noqa: E501

        :param sis_user_id: The sis_user_id of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._sis_user_id = sis_user_id

    @property
    def sortable_name(self):
        """Gets the sortable_name of this FederatedAttributesConfig.  # noqa: E501

        The full name of the user for sorting purposes  # noqa: E501

        :return: The sortable_name of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._sortable_name

    @sortable_name.setter
    def sortable_name(self, sortable_name):
        """Sets the sortable_name of this FederatedAttributesConfig.

        The full name of the user for sorting purposes  # noqa: E501

        :param sortable_name: The sortable_name of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._sortable_name = sortable_name

    @property
    def surname(self):
        """Gets the surname of this FederatedAttributesConfig.  # noqa: E501

        The surname, or last name, of the user  # noqa: E501

        :return: The surname of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._surname

    @surname.setter
    def surname(self, surname):
        """Sets the surname of this FederatedAttributesConfig.

        The surname, or last name, of the user  # noqa: E501

        :param surname: The surname of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._surname = surname

    @property
    def timezone(self):
        """Gets the timezone of this FederatedAttributesConfig.  # noqa: E501

        The user's preferred time zone  # noqa: E501

        :return: The timezone of this FederatedAttributesConfig.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this FederatedAttributesConfig.

        The user's preferred time zone  # noqa: E501

        :param timezone: The timezone of this FederatedAttributesConfig.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FederatedAttributesConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FederatedAttributesConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FederatedAttributesConfig):
            return True

        return self.to_dict() != other.to_dict()
