# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AssignmentGroupGrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'global_id': 'int',
        'score': 'float',
        'possible': 'float',
        'weight': 'float',
        'grade': 'float',
        'dropped': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'global_id': 'global_id',
        'score': 'score',
        'possible': 'possible',
        'weight': 'weight',
        'grade': 'grade',
        'dropped': 'dropped'
    }

    def __init__(self, id=None, global_id=None, score=None, possible=None, weight=None, grade=None, dropped=None, _configuration=None):  # noqa: E501
        """AssignmentGroupGrade - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._global_id = None
        self._score = None
        self._possible = None
        self._weight = None
        self._grade = None
        self._dropped = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if global_id is not None:
            self.global_id = global_id
        if score is not None:
            self.score = score
        if possible is not None:
            self.possible = possible
        if weight is not None:
            self.weight = weight
        if grade is not None:
            self.grade = grade
        if dropped is not None:
            self.dropped = dropped

    @property
    def id(self):
        """Gets the id of this AssignmentGroupGrade.  # noqa: E501

        The ID of the Assignment Group  # noqa: E501

        :return: The id of this AssignmentGroupGrade.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentGroupGrade.

        The ID of the Assignment Group  # noqa: E501

        :param id: The id of this AssignmentGroupGrade.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def global_id(self):
        """Gets the global_id of this AssignmentGroupGrade.  # noqa: E501

        The global ID of the Assignment Group  # noqa: E501

        :return: The global_id of this AssignmentGroupGrade.  # noqa: E501
        :rtype: int
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this AssignmentGroupGrade.

        The global ID of the Assignment Group  # noqa: E501

        :param global_id: The global_id of this AssignmentGroupGrade.  # noqa: E501
        :type: int
        """

        self._global_id = global_id

    @property
    def score(self):
        """Gets the score of this AssignmentGroupGrade.  # noqa: E501

        The score for the Assignment Group  # noqa: E501

        :return: The score of this AssignmentGroupGrade.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this AssignmentGroupGrade.

        The score for the Assignment Group  # noqa: E501

        :param score: The score of this AssignmentGroupGrade.  # noqa: E501
        :type: float
        """

        self._score = score

    @property
    def possible(self):
        """Gets the possible of this AssignmentGroupGrade.  # noqa: E501

        The total points possible for the Assignment Group  # noqa: E501

        :return: The possible of this AssignmentGroupGrade.  # noqa: E501
        :rtype: float
        """
        return self._possible

    @possible.setter
    def possible(self, possible):
        """Sets the possible of this AssignmentGroupGrade.

        The total points possible for the Assignment Group  # noqa: E501

        :param possible: The possible of this AssignmentGroupGrade.  # noqa: E501
        :type: float
        """

        self._possible = possible

    @property
    def weight(self):
        """Gets the weight of this AssignmentGroupGrade.  # noqa: E501

        The weight for the Assignment Group  # noqa: E501

        :return: The weight of this AssignmentGroupGrade.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this AssignmentGroupGrade.

        The weight for the Assignment Group  # noqa: E501

        :param weight: The weight of this AssignmentGroupGrade.  # noqa: E501
        :type: float
        """

        self._weight = weight

    @property
    def grade(self):
        """Gets the grade of this AssignmentGroupGrade.  # noqa: E501

        The grade for the Assignment Group  # noqa: E501

        :return: The grade of this AssignmentGroupGrade.  # noqa: E501
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this AssignmentGroupGrade.

        The grade for the Assignment Group  # noqa: E501

        :param grade: The grade of this AssignmentGroupGrade.  # noqa: E501
        :type: float
        """

        self._grade = grade

    @property
    def dropped(self):
        """Gets the dropped of this AssignmentGroupGrade.  # noqa: E501

        The dropped grades for the Assignment Group  # noqa: E501

        :return: The dropped of this AssignmentGroupGrade.  # noqa: E501
        :rtype: list[object]
        """
        return self._dropped

    @dropped.setter
    def dropped(self, dropped):
        """Sets the dropped of this AssignmentGroupGrade.

        The dropped grades for the Assignment Group  # noqa: E501

        :param dropped: The dropped of this AssignmentGroupGrade.  # noqa: E501
        :type: list[object]
        """

        self._dropped = dropped

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentGroupGrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentGroupGrade):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentGroupGrade):
            return True

        return self.to_dict() != other.to_dict()
