# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Tab(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'html_url': 'str',
        'id': 'str',
        'label': 'str',
        'type': 'str',
        'hidden': 'bool',
        'visibility': 'str',
        'position': 'int'
    }

    attribute_map = {
        'html_url': 'html_url',
        'id': 'id',
        'label': 'label',
        'type': 'type',
        'hidden': 'hidden',
        'visibility': 'visibility',
        'position': 'position'
    }

    def __init__(self, html_url=None, id=None, label=None, type=None, hidden=None, visibility=None, position=None, _configuration=None):  # noqa: E501
        """Tab - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._html_url = None
        self._id = None
        self._label = None
        self._type = None
        self._hidden = None
        self._visibility = None
        self._position = None
        self.discriminator = None

        if html_url is not None:
            self.html_url = html_url
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if type is not None:
            self.type = type
        if hidden is not None:
            self.hidden = hidden
        if visibility is not None:
            self.visibility = visibility
        if position is not None:
            self.position = position

    @property
    def html_url(self):
        """Gets the html_url of this Tab.  # noqa: E501


        :return: The html_url of this Tab.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this Tab.


        :param html_url: The html_url of this Tab.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def id(self):
        """Gets the id of this Tab.  # noqa: E501


        :return: The id of this Tab.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tab.


        :param id: The id of this Tab.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this Tab.  # noqa: E501


        :return: The label of this Tab.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Tab.


        :param label: The label of this Tab.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this Tab.  # noqa: E501


        :return: The type of this Tab.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Tab.


        :param type: The type of this Tab.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def hidden(self):
        """Gets the hidden of this Tab.  # noqa: E501

        only included if true  # noqa: E501

        :return: The hidden of this Tab.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Tab.

        only included if true  # noqa: E501

        :param hidden: The hidden of this Tab.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def visibility(self):
        """Gets the visibility of this Tab.  # noqa: E501

        possible values are: public, members, admins, and none  # noqa: E501

        :return: The visibility of this Tab.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Tab.

        possible values are: public, members, admins, and none  # noqa: E501

        :param visibility: The visibility of this Tab.  # noqa: E501
        :type: str
        """

        self._visibility = visibility

    @property
    def position(self):
        """Gets the position of this Tab.  # noqa: E501

        1 based  # noqa: E501

        :return: The position of this Tab.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Tab.

        1 based  # noqa: E501

        :param position: The position of this Tab.  # noqa: E501
        :type: int
        """

        self._position = position

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tab, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tab):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Tab):
            return True

        return self.to_dict() != other.to_dict()
