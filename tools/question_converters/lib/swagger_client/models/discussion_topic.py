# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class DiscussionTopic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'message': 'str',
        'html_url': 'str',
        'posted_at': 'ModelDatetime',
        'last_reply_at': 'ModelDatetime',
        'require_initial_post': 'bool',
        'user_can_see_posts': 'bool',
        'discussion_subentry_count': 'int',
        'read_state': 'str',
        'unread_count': 'int',
        'subscribed': 'bool',
        'subscription_hold': 'str',
        'assignment_id': 'int',
        'delayed_post_at': 'ModelDatetime',
        'published': 'bool',
        'lock_at': 'ModelDatetime',
        'locked': 'bool',
        'pinned': 'bool',
        'locked_for_user': 'bool',
        'lock_info': 'LockInfo',
        'lock_explanation': 'str',
        'user_name': 'str',
        'topic_children': 'list[int]',
        'group_topic_children': 'list[object]',
        'root_topic_id': 'int',
        'podcast_url': 'str',
        'discussion_type': 'str',
        'group_category_id': 'int',
        'attachments': 'list[FileAttachment]',
        'permissions': 'object',
        'allow_rating': 'bool',
        'only_graders_can_rate': 'bool',
        'sort_by_rating': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'message': 'message',
        'html_url': 'html_url',
        'posted_at': 'posted_at',
        'last_reply_at': 'last_reply_at',
        'require_initial_post': 'require_initial_post',
        'user_can_see_posts': 'user_can_see_posts',
        'discussion_subentry_count': 'discussion_subentry_count',
        'read_state': 'read_state',
        'unread_count': 'unread_count',
        'subscribed': 'subscribed',
        'subscription_hold': 'subscription_hold',
        'assignment_id': 'assignment_id',
        'delayed_post_at': 'delayed_post_at',
        'published': 'published',
        'lock_at': 'lock_at',
        'locked': 'locked',
        'pinned': 'pinned',
        'locked_for_user': 'locked_for_user',
        'lock_info': 'lock_info',
        'lock_explanation': 'lock_explanation',
        'user_name': 'user_name',
        'topic_children': 'topic_children',
        'group_topic_children': 'group_topic_children',
        'root_topic_id': 'root_topic_id',
        'podcast_url': 'podcast_url',
        'discussion_type': 'discussion_type',
        'group_category_id': 'group_category_id',
        'attachments': 'attachments',
        'permissions': 'permissions',
        'allow_rating': 'allow_rating',
        'only_graders_can_rate': 'only_graders_can_rate',
        'sort_by_rating': 'sort_by_rating'
    }

    def __init__(self, id=None, title=None, message=None, html_url=None, posted_at=None, last_reply_at=None, require_initial_post=None, user_can_see_posts=None, discussion_subentry_count=None, read_state=None, unread_count=None, subscribed=None, subscription_hold=None, assignment_id=None, delayed_post_at=None, published=None, lock_at=None, locked=None, pinned=None, locked_for_user=None, lock_info=None, lock_explanation=None, user_name=None, topic_children=None, group_topic_children=None, root_topic_id=None, podcast_url=None, discussion_type=None, group_category_id=None, attachments=None, permissions=None, allow_rating=None, only_graders_can_rate=None, sort_by_rating=None, _configuration=None):  # noqa: E501
        """DiscussionTopic - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._title = None
        self._message = None
        self._html_url = None
        self._posted_at = None
        self._last_reply_at = None
        self._require_initial_post = None
        self._user_can_see_posts = None
        self._discussion_subentry_count = None
        self._read_state = None
        self._unread_count = None
        self._subscribed = None
        self._subscription_hold = None
        self._assignment_id = None
        self._delayed_post_at = None
        self._published = None
        self._lock_at = None
        self._locked = None
        self._pinned = None
        self._locked_for_user = None
        self._lock_info = None
        self._lock_explanation = None
        self._user_name = None
        self._topic_children = None
        self._group_topic_children = None
        self._root_topic_id = None
        self._podcast_url = None
        self._discussion_type = None
        self._group_category_id = None
        self._attachments = None
        self._permissions = None
        self._allow_rating = None
        self._only_graders_can_rate = None
        self._sort_by_rating = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if message is not None:
            self.message = message
        if html_url is not None:
            self.html_url = html_url
        if posted_at is not None:
            self.posted_at = posted_at
        if last_reply_at is not None:
            self.last_reply_at = last_reply_at
        if require_initial_post is not None:
            self.require_initial_post = require_initial_post
        if user_can_see_posts is not None:
            self.user_can_see_posts = user_can_see_posts
        if discussion_subentry_count is not None:
            self.discussion_subentry_count = discussion_subentry_count
        if read_state is not None:
            self.read_state = read_state
        if unread_count is not None:
            self.unread_count = unread_count
        if subscribed is not None:
            self.subscribed = subscribed
        if subscription_hold is not None:
            self.subscription_hold = subscription_hold
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if delayed_post_at is not None:
            self.delayed_post_at = delayed_post_at
        if published is not None:
            self.published = published
        if lock_at is not None:
            self.lock_at = lock_at
        if locked is not None:
            self.locked = locked
        if pinned is not None:
            self.pinned = pinned
        if locked_for_user is not None:
            self.locked_for_user = locked_for_user
        if lock_info is not None:
            self.lock_info = lock_info
        if lock_explanation is not None:
            self.lock_explanation = lock_explanation
        if user_name is not None:
            self.user_name = user_name
        if topic_children is not None:
            self.topic_children = topic_children
        if group_topic_children is not None:
            self.group_topic_children = group_topic_children
        if root_topic_id is not None:
            self.root_topic_id = root_topic_id
        if podcast_url is not None:
            self.podcast_url = podcast_url
        if discussion_type is not None:
            self.discussion_type = discussion_type
        if group_category_id is not None:
            self.group_category_id = group_category_id
        if attachments is not None:
            self.attachments = attachments
        if permissions is not None:
            self.permissions = permissions
        if allow_rating is not None:
            self.allow_rating = allow_rating
        if only_graders_can_rate is not None:
            self.only_graders_can_rate = only_graders_can_rate
        if sort_by_rating is not None:
            self.sort_by_rating = sort_by_rating

    @property
    def id(self):
        """Gets the id of this DiscussionTopic.  # noqa: E501

        The ID of this topic.  # noqa: E501

        :return: The id of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiscussionTopic.

        The ID of this topic.  # noqa: E501

        :param id: The id of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this DiscussionTopic.  # noqa: E501

        The topic title.  # noqa: E501

        :return: The title of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DiscussionTopic.

        The topic title.  # noqa: E501

        :param title: The title of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def message(self):
        """Gets the message of this DiscussionTopic.  # noqa: E501

        The HTML content of the message body.  # noqa: E501

        :return: The message of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DiscussionTopic.

        The HTML content of the message body.  # noqa: E501

        :param message: The message of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def html_url(self):
        """Gets the html_url of this DiscussionTopic.  # noqa: E501

        The URL to the discussion topic in canvas.  # noqa: E501

        :return: The html_url of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._html_url

    @html_url.setter
    def html_url(self, html_url):
        """Sets the html_url of this DiscussionTopic.

        The URL to the discussion topic in canvas.  # noqa: E501

        :param html_url: The html_url of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._html_url = html_url

    @property
    def posted_at(self):
        """Gets the posted_at of this DiscussionTopic.  # noqa: E501

        The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)  # noqa: E501

        :return: The posted_at of this DiscussionTopic.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._posted_at

    @posted_at.setter
    def posted_at(self, posted_at):
        """Sets the posted_at of this DiscussionTopic.

        The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)  # noqa: E501

        :param posted_at: The posted_at of this DiscussionTopic.  # noqa: E501
        :type: ModelDatetime
        """

        self._posted_at = posted_at

    @property
    def last_reply_at(self):
        """Gets the last_reply_at of this DiscussionTopic.  # noqa: E501

        The datetime for when the last reply was in the topic.  # noqa: E501

        :return: The last_reply_at of this DiscussionTopic.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._last_reply_at

    @last_reply_at.setter
    def last_reply_at(self, last_reply_at):
        """Sets the last_reply_at of this DiscussionTopic.

        The datetime for when the last reply was in the topic.  # noqa: E501

        :param last_reply_at: The last_reply_at of this DiscussionTopic.  # noqa: E501
        :type: ModelDatetime
        """

        self._last_reply_at = last_reply_at

    @property
    def require_initial_post(self):
        """Gets the require_initial_post of this DiscussionTopic.  # noqa: E501

        If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.  # noqa: E501

        :return: The require_initial_post of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._require_initial_post

    @require_initial_post.setter
    def require_initial_post(self, require_initial_post):
        """Sets the require_initial_post of this DiscussionTopic.

        If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.  # noqa: E501

        :param require_initial_post: The require_initial_post of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._require_initial_post = require_initial_post

    @property
    def user_can_see_posts(self):
        """Gets the user_can_see_posts of this DiscussionTopic.  # noqa: E501

        Whether or not posts in this topic are visible to the user.  # noqa: E501

        :return: The user_can_see_posts of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._user_can_see_posts

    @user_can_see_posts.setter
    def user_can_see_posts(self, user_can_see_posts):
        """Sets the user_can_see_posts of this DiscussionTopic.

        Whether or not posts in this topic are visible to the user.  # noqa: E501

        :param user_can_see_posts: The user_can_see_posts of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._user_can_see_posts = user_can_see_posts

    @property
    def discussion_subentry_count(self):
        """Gets the discussion_subentry_count of this DiscussionTopic.  # noqa: E501

        The count of entries in the topic.  # noqa: E501

        :return: The discussion_subentry_count of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._discussion_subentry_count

    @discussion_subentry_count.setter
    def discussion_subentry_count(self, discussion_subentry_count):
        """Sets the discussion_subentry_count of this DiscussionTopic.

        The count of entries in the topic.  # noqa: E501

        :param discussion_subentry_count: The discussion_subentry_count of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._discussion_subentry_count = discussion_subentry_count

    @property
    def read_state(self):
        """Gets the read_state of this DiscussionTopic.  # noqa: E501

        The read_state of the topic for the current user, 'read' or 'unread'.  # noqa: E501

        :return: The read_state of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._read_state

    @read_state.setter
    def read_state(self, read_state):
        """Sets the read_state of this DiscussionTopic.

        The read_state of the topic for the current user, 'read' or 'unread'.  # noqa: E501

        :param read_state: The read_state of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._read_state = read_state

    @property
    def unread_count(self):
        """Gets the unread_count of this DiscussionTopic.  # noqa: E501

        The count of unread entries of this topic for the current user.  # noqa: E501

        :return: The unread_count of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this DiscussionTopic.

        The count of unread entries of this topic for the current user.  # noqa: E501

        :param unread_count: The unread_count of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._unread_count = unread_count

    @property
    def subscribed(self):
        """Gets the subscribed of this DiscussionTopic.  # noqa: E501

        Whether or not the current user is subscribed to this topic.  # noqa: E501

        :return: The subscribed of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this DiscussionTopic.

        Whether or not the current user is subscribed to this topic.  # noqa: E501

        :param subscribed: The subscribed of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def subscription_hold(self):
        """Gets the subscription_hold of this DiscussionTopic.  # noqa: E501

        (Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement  # noqa: E501

        :return: The subscription_hold of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._subscription_hold

    @subscription_hold.setter
    def subscription_hold(self, subscription_hold):
        """Sets the subscription_hold of this DiscussionTopic.

        (Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement  # noqa: E501

        :param subscription_hold: The subscription_hold of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._subscription_hold = subscription_hold

    @property
    def assignment_id(self):
        """Gets the assignment_id of this DiscussionTopic.  # noqa: E501

        The unique identifier of the assignment if the topic is for grading, otherwise null.  # noqa: E501

        :return: The assignment_id of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this DiscussionTopic.

        The unique identifier of the assignment if the topic is for grading, otherwise null.  # noqa: E501

        :param assignment_id: The assignment_id of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def delayed_post_at(self):
        """Gets the delayed_post_at of this DiscussionTopic.  # noqa: E501

        The datetime to publish the topic (if not right away).  # noqa: E501

        :return: The delayed_post_at of this DiscussionTopic.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._delayed_post_at

    @delayed_post_at.setter
    def delayed_post_at(self, delayed_post_at):
        """Sets the delayed_post_at of this DiscussionTopic.

        The datetime to publish the topic (if not right away).  # noqa: E501

        :param delayed_post_at: The delayed_post_at of this DiscussionTopic.  # noqa: E501
        :type: ModelDatetime
        """

        self._delayed_post_at = delayed_post_at

    @property
    def published(self):
        """Gets the published of this DiscussionTopic.  # noqa: E501

        Whether this discussion topic is published (true) or draft state (false)  # noqa: E501

        :return: The published of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this DiscussionTopic.

        Whether this discussion topic is published (true) or draft state (false)  # noqa: E501

        :param published: The published of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._published = published

    @property
    def lock_at(self):
        """Gets the lock_at of this DiscussionTopic.  # noqa: E501

        The datetime to lock the topic (if ever).  # noqa: E501

        :return: The lock_at of this DiscussionTopic.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._lock_at

    @lock_at.setter
    def lock_at(self, lock_at):
        """Sets the lock_at of this DiscussionTopic.

        The datetime to lock the topic (if ever).  # noqa: E501

        :param lock_at: The lock_at of this DiscussionTopic.  # noqa: E501
        :type: ModelDatetime
        """

        self._lock_at = lock_at

    @property
    def locked(self):
        """Gets the locked of this DiscussionTopic.  # noqa: E501

        Whether or not the discussion is 'closed for comments'.  # noqa: E501

        :return: The locked of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DiscussionTopic.

        Whether or not the discussion is 'closed for comments'.  # noqa: E501

        :param locked: The locked of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def pinned(self):
        """Gets the pinned of this DiscussionTopic.  # noqa: E501

        Whether or not the discussion has been 'pinned' by an instructor  # noqa: E501

        :return: The pinned of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this DiscussionTopic.

        Whether or not the discussion has been 'pinned' by an instructor  # noqa: E501

        :param pinned: The pinned of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._pinned = pinned

    @property
    def locked_for_user(self):
        """Gets the locked_for_user of this DiscussionTopic.  # noqa: E501

        Whether or not this is locked for the user.  # noqa: E501

        :return: The locked_for_user of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._locked_for_user

    @locked_for_user.setter
    def locked_for_user(self, locked_for_user):
        """Sets the locked_for_user of this DiscussionTopic.

        Whether or not this is locked for the user.  # noqa: E501

        :param locked_for_user: The locked_for_user of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._locked_for_user = locked_for_user

    @property
    def lock_info(self):
        """Gets the lock_info of this DiscussionTopic.  # noqa: E501

        (Optional) Information for the user about the lock. Present when locked_for_user is true.  # noqa: E501

        :return: The lock_info of this DiscussionTopic.  # noqa: E501
        :rtype: LockInfo
        """
        return self._lock_info

    @lock_info.setter
    def lock_info(self, lock_info):
        """Sets the lock_info of this DiscussionTopic.

        (Optional) Information for the user about the lock. Present when locked_for_user is true.  # noqa: E501

        :param lock_info: The lock_info of this DiscussionTopic.  # noqa: E501
        :type: LockInfo
        """

        self._lock_info = lock_info

    @property
    def lock_explanation(self):
        """Gets the lock_explanation of this DiscussionTopic.  # noqa: E501

        (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.  # noqa: E501

        :return: The lock_explanation of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._lock_explanation

    @lock_explanation.setter
    def lock_explanation(self, lock_explanation):
        """Sets the lock_explanation of this DiscussionTopic.

        (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.  # noqa: E501

        :param lock_explanation: The lock_explanation of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._lock_explanation = lock_explanation

    @property
    def user_name(self):
        """Gets the user_name of this DiscussionTopic.  # noqa: E501

        The username of the topic creator.  # noqa: E501

        :return: The user_name of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DiscussionTopic.

        The username of the topic creator.  # noqa: E501

        :param user_name: The user_name of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def topic_children(self):
        """Gets the topic_children of this DiscussionTopic.  # noqa: E501

        DEPRECATED An array of topic_ids for the group discussions the user is a part of.  # noqa: E501

        :return: The topic_children of this DiscussionTopic.  # noqa: E501
        :rtype: list[int]
        """
        return self._topic_children

    @topic_children.setter
    def topic_children(self, topic_children):
        """Sets the topic_children of this DiscussionTopic.

        DEPRECATED An array of topic_ids for the group discussions the user is a part of.  # noqa: E501

        :param topic_children: The topic_children of this DiscussionTopic.  # noqa: E501
        :type: list[int]
        """

        self._topic_children = topic_children

    @property
    def group_topic_children(self):
        """Gets the group_topic_children of this DiscussionTopic.  # noqa: E501

        An array of group discussions the user is a part of. Fields include: id, group_id  # noqa: E501

        :return: The group_topic_children of this DiscussionTopic.  # noqa: E501
        :rtype: list[object]
        """
        return self._group_topic_children

    @group_topic_children.setter
    def group_topic_children(self, group_topic_children):
        """Sets the group_topic_children of this DiscussionTopic.

        An array of group discussions the user is a part of. Fields include: id, group_id  # noqa: E501

        :param group_topic_children: The group_topic_children of this DiscussionTopic.  # noqa: E501
        :type: list[object]
        """

        self._group_topic_children = group_topic_children

    @property
    def root_topic_id(self):
        """Gets the root_topic_id of this DiscussionTopic.  # noqa: E501

        If the topic is for grading and a group assignment this will point to the original topic in the course.  # noqa: E501

        :return: The root_topic_id of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._root_topic_id

    @root_topic_id.setter
    def root_topic_id(self, root_topic_id):
        """Sets the root_topic_id of this DiscussionTopic.

        If the topic is for grading and a group assignment this will point to the original topic in the course.  # noqa: E501

        :param root_topic_id: The root_topic_id of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._root_topic_id = root_topic_id

    @property
    def podcast_url(self):
        """Gets the podcast_url of this DiscussionTopic.  # noqa: E501

        If the topic is a podcast topic this is the feed url for the current user.  # noqa: E501

        :return: The podcast_url of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._podcast_url

    @podcast_url.setter
    def podcast_url(self, podcast_url):
        """Sets the podcast_url of this DiscussionTopic.

        If the topic is a podcast topic this is the feed url for the current user.  # noqa: E501

        :param podcast_url: The podcast_url of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._podcast_url = podcast_url

    @property
    def discussion_type(self):
        """Gets the discussion_type of this DiscussionTopic.  # noqa: E501

        The type of discussion. Values are 'side_comment' or 'not_threaded', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.  # noqa: E501

        :return: The discussion_type of this DiscussionTopic.  # noqa: E501
        :rtype: str
        """
        return self._discussion_type

    @discussion_type.setter
    def discussion_type(self, discussion_type):
        """Sets the discussion_type of this DiscussionTopic.

        The type of discussion. Values are 'side_comment' or 'not_threaded', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.  # noqa: E501

        :param discussion_type: The discussion_type of this DiscussionTopic.  # noqa: E501
        :type: str
        """

        self._discussion_type = discussion_type

    @property
    def group_category_id(self):
        """Gets the group_category_id of this DiscussionTopic.  # noqa: E501

        The unique identifier of the group category if the topic is a group discussion, otherwise null.  # noqa: E501

        :return: The group_category_id of this DiscussionTopic.  # noqa: E501
        :rtype: int
        """
        return self._group_category_id

    @group_category_id.setter
    def group_category_id(self, group_category_id):
        """Sets the group_category_id of this DiscussionTopic.

        The unique identifier of the group category if the topic is a group discussion, otherwise null.  # noqa: E501

        :param group_category_id: The group_category_id of this DiscussionTopic.  # noqa: E501
        :type: int
        """

        self._group_category_id = group_category_id

    @property
    def attachments(self):
        """Gets the attachments of this DiscussionTopic.  # noqa: E501

        Array of file attachments.  # noqa: E501

        :return: The attachments of this DiscussionTopic.  # noqa: E501
        :rtype: list[FileAttachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this DiscussionTopic.

        Array of file attachments.  # noqa: E501

        :param attachments: The attachments of this DiscussionTopic.  # noqa: E501
        :type: list[FileAttachment]
        """

        self._attachments = attachments

    @property
    def permissions(self):
        """Gets the permissions of this DiscussionTopic.  # noqa: E501

        The current user's permissions on this topic.  # noqa: E501

        :return: The permissions of this DiscussionTopic.  # noqa: E501
        :rtype: object
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DiscussionTopic.

        The current user's permissions on this topic.  # noqa: E501

        :param permissions: The permissions of this DiscussionTopic.  # noqa: E501
        :type: object
        """

        self._permissions = permissions

    @property
    def allow_rating(self):
        """Gets the allow_rating of this DiscussionTopic.  # noqa: E501

        Whether or not users can rate entries in this topic.  # noqa: E501

        :return: The allow_rating of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._allow_rating

    @allow_rating.setter
    def allow_rating(self, allow_rating):
        """Sets the allow_rating of this DiscussionTopic.

        Whether or not users can rate entries in this topic.  # noqa: E501

        :param allow_rating: The allow_rating of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._allow_rating = allow_rating

    @property
    def only_graders_can_rate(self):
        """Gets the only_graders_can_rate of this DiscussionTopic.  # noqa: E501

        Whether or not grade permissions are required to rate entries.  # noqa: E501

        :return: The only_graders_can_rate of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._only_graders_can_rate

    @only_graders_can_rate.setter
    def only_graders_can_rate(self, only_graders_can_rate):
        """Sets the only_graders_can_rate of this DiscussionTopic.

        Whether or not grade permissions are required to rate entries.  # noqa: E501

        :param only_graders_can_rate: The only_graders_can_rate of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._only_graders_can_rate = only_graders_can_rate

    @property
    def sort_by_rating(self):
        """Gets the sort_by_rating of this DiscussionTopic.  # noqa: E501

        Whether or not entries should be sorted by rating.  # noqa: E501

        :return: The sort_by_rating of this DiscussionTopic.  # noqa: E501
        :rtype: bool
        """
        return self._sort_by_rating

    @sort_by_rating.setter
    def sort_by_rating(self, sort_by_rating):
        """Sets the sort_by_rating of this DiscussionTopic.

        Whether or not entries should be sorted by rating.  # noqa: E501

        :param sort_by_rating: The sort_by_rating of this DiscussionTopic.  # noqa: E501
        :type: bool
        """

        self._sort_by_rating = sort_by_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiscussionTopic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiscussionTopic):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiscussionTopic):
            return True

        return self.to_dict() != other.to_dict()
