# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Report(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'report': 'str',
        'file_url': 'str',
        'attachment': 'File',
        'status': 'str',
        'created_at': 'ModelDatetime',
        'started_at': 'ModelDatetime',
        'ended_at': 'ModelDatetime',
        'parameters': 'ReportParameters',
        'progress': 'int',
        'current_line': 'int'
    }

    attribute_map = {
        'id': 'id',
        'report': 'report',
        'file_url': 'file_url',
        'attachment': 'attachment',
        'status': 'status',
        'created_at': 'created_at',
        'started_at': 'started_at',
        'ended_at': 'ended_at',
        'parameters': 'parameters',
        'progress': 'progress',
        'current_line': 'current_line'
    }

    def __init__(self, id=None, report=None, file_url=None, attachment=None, status=None, created_at=None, started_at=None, ended_at=None, parameters=None, progress=None, current_line=None, _configuration=None):  # noqa: E501
        """Report - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._report = None
        self._file_url = None
        self._attachment = None
        self._status = None
        self._created_at = None
        self._started_at = None
        self._ended_at = None
        self._parameters = None
        self._progress = None
        self._current_line = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if report is not None:
            self.report = report
        if file_url is not None:
            self.file_url = file_url
        if attachment is not None:
            self.attachment = attachment
        if status is not None:
            self.status = status
        if created_at is not None:
            self.created_at = created_at
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at
        if parameters is not None:
            self.parameters = parameters
        if progress is not None:
            self.progress = progress
        if current_line is not None:
            self.current_line = current_line

    @property
    def id(self):
        """Gets the id of this Report.  # noqa: E501

        The unique identifier for the report.  # noqa: E501

        :return: The id of this Report.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Report.

        The unique identifier for the report.  # noqa: E501

        :param id: The id of this Report.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def report(self):
        """Gets the report of this Report.  # noqa: E501

        The type of report.  # noqa: E501

        :return: The report of this Report.  # noqa: E501
        :rtype: str
        """
        return self._report

    @report.setter
    def report(self, report):
        """Sets the report of this Report.

        The type of report.  # noqa: E501

        :param report: The report of this Report.  # noqa: E501
        :type: str
        """

        self._report = report

    @property
    def file_url(self):
        """Gets the file_url of this Report.  # noqa: E501

        The url to the report download.  # noqa: E501

        :return: The file_url of this Report.  # noqa: E501
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this Report.

        The url to the report download.  # noqa: E501

        :param file_url: The file_url of this Report.  # noqa: E501
        :type: str
        """

        self._file_url = file_url

    @property
    def attachment(self):
        """Gets the attachment of this Report.  # noqa: E501

        The attachment api object of the report. Only available after the report has completed.  # noqa: E501

        :return: The attachment of this Report.  # noqa: E501
        :rtype: File
        """
        return self._attachment

    @attachment.setter
    def attachment(self, attachment):
        """Sets the attachment of this Report.

        The attachment api object of the report. Only available after the report has completed.  # noqa: E501

        :param attachment: The attachment of this Report.  # noqa: E501
        :type: File
        """

        self._attachment = attachment

    @property
    def status(self):
        """Gets the status of this Report.  # noqa: E501

        The status of the report  # noqa: E501

        :return: The status of this Report.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Report.

        The status of the report  # noqa: E501

        :param status: The status of this Report.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def created_at(self):
        """Gets the created_at of this Report.  # noqa: E501

        The date and time the report was created.  # noqa: E501

        :return: The created_at of this Report.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Report.

        The date and time the report was created.  # noqa: E501

        :param created_at: The created_at of this Report.  # noqa: E501
        :type: ModelDatetime
        """

        self._created_at = created_at

    @property
    def started_at(self):
        """Gets the started_at of this Report.  # noqa: E501

        The date and time the report started processing.  # noqa: E501

        :return: The started_at of this Report.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Report.

        The date and time the report started processing.  # noqa: E501

        :param started_at: The started_at of this Report.  # noqa: E501
        :type: ModelDatetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Report.  # noqa: E501

        The date and time the report finished processing.  # noqa: E501

        :return: The ended_at of this Report.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Report.

        The date and time the report finished processing.  # noqa: E501

        :param ended_at: The ended_at of this Report.  # noqa: E501
        :type: ModelDatetime
        """

        self._ended_at = ended_at

    @property
    def parameters(self):
        """Gets the parameters of this Report.  # noqa: E501

        The report parameters  # noqa: E501

        :return: The parameters of this Report.  # noqa: E501
        :rtype: ReportParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this Report.

        The report parameters  # noqa: E501

        :param parameters: The parameters of this Report.  # noqa: E501
        :type: ReportParameters
        """

        self._parameters = parameters

    @property
    def progress(self):
        """Gets the progress of this Report.  # noqa: E501

        The progress of the report  # noqa: E501

        :return: The progress of this Report.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Report.

        The progress of the report  # noqa: E501

        :param progress: The progress of this Report.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def current_line(self):
        """Gets the current_line of this Report.  # noqa: E501

        This is the current line count being written to the report. It updates every 1000 records.  # noqa: E501

        :return: The current_line of this Report.  # noqa: E501
        :rtype: int
        """
        return self._current_line

    @current_line.setter
    def current_line(self, current_line):
        """Sets the current_line of this Report.

        This is the current line count being written to the report. It updates every 1000 records.  # noqa: E501

        :param current_line: The current_line of this Report.  # noqa: E501
        :type: int
        """

        self._current_line = current_line

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Report, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Report):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Report):
            return True

        return self.to_dict() != other.to_dict()
