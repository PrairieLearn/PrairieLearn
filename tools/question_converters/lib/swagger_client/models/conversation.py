# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Conversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'subject': 'str',
        'workflow_state': 'str',
        'last_message': 'str',
        'start_at': 'ModelDatetime',
        'message_count': 'int',
        'subscribed': 'bool',
        'private': 'bool',
        'starred': 'bool',
        'properties': 'list[str]',
        'audience': 'list[int]',
        'audience_contexts': 'list[str]',
        'avatar_url': 'str',
        'participants': 'list[ConversationParticipant]',
        'visible': 'bool',
        'context_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'subject': 'subject',
        'workflow_state': 'workflow_state',
        'last_message': 'last_message',
        'start_at': 'start_at',
        'message_count': 'message_count',
        'subscribed': 'subscribed',
        'private': 'private',
        'starred': 'starred',
        'properties': 'properties',
        'audience': 'audience',
        'audience_contexts': 'audience_contexts',
        'avatar_url': 'avatar_url',
        'participants': 'participants',
        'visible': 'visible',
        'context_name': 'context_name'
    }

    def __init__(self, id=None, subject=None, workflow_state=None, last_message=None, start_at=None, message_count=None, subscribed=None, private=None, starred=None, properties=None, audience=None, audience_contexts=None, avatar_url=None, participants=None, visible=None, context_name=None, _configuration=None):  # noqa: E501
        """Conversation - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._subject = None
        self._workflow_state = None
        self._last_message = None
        self._start_at = None
        self._message_count = None
        self._subscribed = None
        self._private = None
        self._starred = None
        self._properties = None
        self._audience = None
        self._audience_contexts = None
        self._avatar_url = None
        self._participants = None
        self._visible = None
        self._context_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject is not None:
            self.subject = subject
        if workflow_state is not None:
            self.workflow_state = workflow_state
        if last_message is not None:
            self.last_message = last_message
        if start_at is not None:
            self.start_at = start_at
        if message_count is not None:
            self.message_count = message_count
        if subscribed is not None:
            self.subscribed = subscribed
        if private is not None:
            self.private = private
        if starred is not None:
            self.starred = starred
        if properties is not None:
            self.properties = properties
        if audience is not None:
            self.audience = audience
        if audience_contexts is not None:
            self.audience_contexts = audience_contexts
        if avatar_url is not None:
            self.avatar_url = avatar_url
        if participants is not None:
            self.participants = participants
        if visible is not None:
            self.visible = visible
        if context_name is not None:
            self.context_name = context_name

    @property
    def id(self):
        """Gets the id of this Conversation.  # noqa: E501

        the unique identifier for the conversation.  # noqa: E501

        :return: The id of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        the unique identifier for the conversation.  # noqa: E501

        :param id: The id of this Conversation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this Conversation.  # noqa: E501

        the subject of the conversation.  # noqa: E501

        :return: The subject of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this Conversation.

        the subject of the conversation.  # noqa: E501

        :param subject: The subject of this Conversation.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def workflow_state(self):
        """Gets the workflow_state of this Conversation.  # noqa: E501

        The current state of the conversation (read, unread or archived).  # noqa: E501

        :return: The workflow_state of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this Conversation.

        The current state of the conversation (read, unread or archived).  # noqa: E501

        :param workflow_state: The workflow_state of this Conversation.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    @property
    def last_message(self):
        """Gets the last_message of this Conversation.  # noqa: E501

        A <=100 character preview from the most recent message.  # noqa: E501

        :return: The last_message of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._last_message

    @last_message.setter
    def last_message(self, last_message):
        """Sets the last_message of this Conversation.

        A <=100 character preview from the most recent message.  # noqa: E501

        :param last_message: The last_message of this Conversation.  # noqa: E501
        :type: str
        """

        self._last_message = last_message

    @property
    def start_at(self):
        """Gets the start_at of this Conversation.  # noqa: E501

        the date and time at which the last message was sent.  # noqa: E501

        :return: The start_at of this Conversation.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Conversation.

        the date and time at which the last message was sent.  # noqa: E501

        :param start_at: The start_at of this Conversation.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def message_count(self):
        """Gets the message_count of this Conversation.  # noqa: E501

        the number of messages in the conversation.  # noqa: E501

        :return: The message_count of this Conversation.  # noqa: E501
        :rtype: int
        """
        return self._message_count

    @message_count.setter
    def message_count(self, message_count):
        """Sets the message_count of this Conversation.

        the number of messages in the conversation.  # noqa: E501

        :param message_count: The message_count of this Conversation.  # noqa: E501
        :type: int
        """

        self._message_count = message_count

    @property
    def subscribed(self):
        """Gets the subscribed of this Conversation.  # noqa: E501

        whether the current user is subscribed to the conversation.  # noqa: E501

        :return: The subscribed of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._subscribed

    @subscribed.setter
    def subscribed(self, subscribed):
        """Sets the subscribed of this Conversation.

        whether the current user is subscribed to the conversation.  # noqa: E501

        :param subscribed: The subscribed of this Conversation.  # noqa: E501
        :type: bool
        """

        self._subscribed = subscribed

    @property
    def private(self):
        """Gets the private of this Conversation.  # noqa: E501

        whether the conversation is private.  # noqa: E501

        :return: The private of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this Conversation.

        whether the conversation is private.  # noqa: E501

        :param private: The private of this Conversation.  # noqa: E501
        :type: bool
        """

        self._private = private

    @property
    def starred(self):
        """Gets the starred of this Conversation.  # noqa: E501

        whether the conversation is starred.  # noqa: E501

        :return: The starred of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._starred

    @starred.setter
    def starred(self, starred):
        """Sets the starred of this Conversation.

        whether the conversation is starred.  # noqa: E501

        :param starred: The starred of this Conversation.  # noqa: E501
        :type: bool
        """

        self._starred = starred

    @property
    def properties(self):
        """Gets the properties of this Conversation.  # noqa: E501

        Additional conversation flags (last_author, attachments, media_objects). Each listed property means the flag is set to true (i.e. the current user is the most recent author, there are attachments, or there are media objects)  # noqa: E501

        :return: The properties of this Conversation.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Conversation.

        Additional conversation flags (last_author, attachments, media_objects). Each listed property means the flag is set to true (i.e. the current user is the most recent author, there are attachments, or there are media objects)  # noqa: E501

        :param properties: The properties of this Conversation.  # noqa: E501
        :type: list[str]
        """

        self._properties = properties

    @property
    def audience(self):
        """Gets the audience of this Conversation.  # noqa: E501

        Array of user ids who are involved in the conversation, ordered by participation level, then alphabetical. Excludes current user, unless this is a monologue.  # noqa: E501

        :return: The audience of this Conversation.  # noqa: E501
        :rtype: list[int]
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this Conversation.

        Array of user ids who are involved in the conversation, ordered by participation level, then alphabetical. Excludes current user, unless this is a monologue.  # noqa: E501

        :param audience: The audience of this Conversation.  # noqa: E501
        :type: list[int]
        """

        self._audience = audience

    @property
    def audience_contexts(self):
        """Gets the audience_contexts of this Conversation.  # noqa: E501

        Most relevant shared contexts (courses and groups) between current user and other participants. If there is only one participant, it will also include that user's enrollment(s)/ membership type(s) in each course/group.  # noqa: E501

        :return: The audience_contexts of this Conversation.  # noqa: E501
        :rtype: list[str]
        """
        return self._audience_contexts

    @audience_contexts.setter
    def audience_contexts(self, audience_contexts):
        """Sets the audience_contexts of this Conversation.

        Most relevant shared contexts (courses and groups) between current user and other participants. If there is only one participant, it will also include that user's enrollment(s)/ membership type(s) in each course/group.  # noqa: E501

        :param audience_contexts: The audience_contexts of this Conversation.  # noqa: E501
        :type: list[str]
        """

        self._audience_contexts = audience_contexts

    @property
    def avatar_url(self):
        """Gets the avatar_url of this Conversation.  # noqa: E501

        URL to appropriate icon for this conversation (custom, individual or group avatar, depending on audience).  # noqa: E501

        :return: The avatar_url of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url):
        """Sets the avatar_url of this Conversation.

        URL to appropriate icon for this conversation (custom, individual or group avatar, depending on audience).  # noqa: E501

        :param avatar_url: The avatar_url of this Conversation.  # noqa: E501
        :type: str
        """

        self._avatar_url = avatar_url

    @property
    def participants(self):
        """Gets the participants of this Conversation.  # noqa: E501

        Array of users participating in the conversation. Includes current user.  # noqa: E501

        :return: The participants of this Conversation.  # noqa: E501
        :rtype: list[ConversationParticipant]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this Conversation.

        Array of users participating in the conversation. Includes current user.  # noqa: E501

        :param participants: The participants of this Conversation.  # noqa: E501
        :type: list[ConversationParticipant]
        """

        self._participants = participants

    @property
    def visible(self):
        """Gets the visible of this Conversation.  # noqa: E501

        indicates whether the conversation is visible under the current scope and filter. This attribute is always true in the index API response, and is primarily useful in create/update responses so that you can know if the record should be displayed in the UI. The default scope is assumed, unless a scope or filter is passed to the create/update API call.  # noqa: E501

        :return: The visible of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this Conversation.

        indicates whether the conversation is visible under the current scope and filter. This attribute is always true in the index API response, and is primarily useful in create/update responses so that you can know if the record should be displayed in the UI. The default scope is assumed, unless a scope or filter is passed to the create/update API call.  # noqa: E501

        :param visible: The visible of this Conversation.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def context_name(self):
        """Gets the context_name of this Conversation.  # noqa: E501

        Name of the course or group in which the conversation is occurring.  # noqa: E501

        :return: The context_name of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._context_name

    @context_name.setter
    def context_name(self, context_name):
        """Sets the context_name of this Conversation.

        Name of the course or group in which the conversation is occurring.  # noqa: E501

        :param context_name: The context_name of this Conversation.  # noqa: E501
        :type: str
        """

        self._context_name = context_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conversation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Conversation):
            return True

        return self.to_dict() != other.to_dict()
