# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SubmissionVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignment_id': 'int',
        'assignment_name': 'str',
        'body': 'str',
        'current_grade': 'str',
        'current_graded_at': 'ModelDatetime',
        'current_grader': 'str',
        'grade_matches_current_submission': 'bool',
        'graded_at': 'ModelDatetime',
        'grader': 'str',
        'grader_id': 'int',
        'id': 'int',
        'new_grade': 'str',
        'new_graded_at': 'ModelDatetime',
        'new_grader': 'str',
        'previous_grade': 'str',
        'previous_graded_at': 'ModelDatetime',
        'previous_grader': 'str',
        'score': 'int',
        'user_name': 'str',
        'submission_type': 'str',
        'url': 'str',
        'user_id': 'int',
        'workflow_state': 'str'
    }

    attribute_map = {
        'assignment_id': 'assignment_id',
        'assignment_name': 'assignment_name',
        'body': 'body',
        'current_grade': 'current_grade',
        'current_graded_at': 'current_graded_at',
        'current_grader': 'current_grader',
        'grade_matches_current_submission': 'grade_matches_current_submission',
        'graded_at': 'graded_at',
        'grader': 'grader',
        'grader_id': 'grader_id',
        'id': 'id',
        'new_grade': 'new_grade',
        'new_graded_at': 'new_graded_at',
        'new_grader': 'new_grader',
        'previous_grade': 'previous_grade',
        'previous_graded_at': 'previous_graded_at',
        'previous_grader': 'previous_grader',
        'score': 'score',
        'user_name': 'user_name',
        'submission_type': 'submission_type',
        'url': 'url',
        'user_id': 'user_id',
        'workflow_state': 'workflow_state'
    }

    def __init__(self, assignment_id=None, assignment_name=None, body=None, current_grade=None, current_graded_at=None, current_grader=None, grade_matches_current_submission=None, graded_at=None, grader=None, grader_id=None, id=None, new_grade=None, new_graded_at=None, new_grader=None, previous_grade=None, previous_graded_at=None, previous_grader=None, score=None, user_name=None, submission_type=None, url=None, user_id=None, workflow_state=None, _configuration=None):  # noqa: E501
        """SubmissionVersion - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._assignment_id = None
        self._assignment_name = None
        self._body = None
        self._current_grade = None
        self._current_graded_at = None
        self._current_grader = None
        self._grade_matches_current_submission = None
        self._graded_at = None
        self._grader = None
        self._grader_id = None
        self._id = None
        self._new_grade = None
        self._new_graded_at = None
        self._new_grader = None
        self._previous_grade = None
        self._previous_graded_at = None
        self._previous_grader = None
        self._score = None
        self._user_name = None
        self._submission_type = None
        self._url = None
        self._user_id = None
        self._workflow_state = None
        self.discriminator = None

        if assignment_id is not None:
            self.assignment_id = assignment_id
        if assignment_name is not None:
            self.assignment_name = assignment_name
        if body is not None:
            self.body = body
        if current_grade is not None:
            self.current_grade = current_grade
        if current_graded_at is not None:
            self.current_graded_at = current_graded_at
        if current_grader is not None:
            self.current_grader = current_grader
        if grade_matches_current_submission is not None:
            self.grade_matches_current_submission = grade_matches_current_submission
        if graded_at is not None:
            self.graded_at = graded_at
        if grader is not None:
            self.grader = grader
        if grader_id is not None:
            self.grader_id = grader_id
        if id is not None:
            self.id = id
        if new_grade is not None:
            self.new_grade = new_grade
        if new_graded_at is not None:
            self.new_graded_at = new_graded_at
        if new_grader is not None:
            self.new_grader = new_grader
        if previous_grade is not None:
            self.previous_grade = previous_grade
        if previous_graded_at is not None:
            self.previous_graded_at = previous_graded_at
        if previous_grader is not None:
            self.previous_grader = previous_grader
        if score is not None:
            self.score = score
        if user_name is not None:
            self.user_name = user_name
        if submission_type is not None:
            self.submission_type = submission_type
        if url is not None:
            self.url = url
        if user_id is not None:
            self.user_id = user_id
        if workflow_state is not None:
            self.workflow_state = workflow_state

    @property
    def assignment_id(self):
        """Gets the assignment_id of this SubmissionVersion.  # noqa: E501

        the id of the assignment this submissions is for  # noqa: E501

        :return: The assignment_id of this SubmissionVersion.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this SubmissionVersion.

        the id of the assignment this submissions is for  # noqa: E501

        :param assignment_id: The assignment_id of this SubmissionVersion.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def assignment_name(self):
        """Gets the assignment_name of this SubmissionVersion.  # noqa: E501

        the name of the assignment this submission is for  # noqa: E501

        :return: The assignment_name of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._assignment_name

    @assignment_name.setter
    def assignment_name(self, assignment_name):
        """Sets the assignment_name of this SubmissionVersion.

        the name of the assignment this submission is for  # noqa: E501

        :param assignment_name: The assignment_name of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._assignment_name = assignment_name

    @property
    def body(self):
        """Gets the body of this SubmissionVersion.  # noqa: E501

        the body text of the submission  # noqa: E501

        :return: The body of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this SubmissionVersion.

        the body text of the submission  # noqa: E501

        :param body: The body of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._body = body

    @property
    def current_grade(self):
        """Gets the current_grade of this SubmissionVersion.  # noqa: E501

        the most up to date grade for the current version of this submission  # noqa: E501

        :return: The current_grade of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._current_grade

    @current_grade.setter
    def current_grade(self, current_grade):
        """Sets the current_grade of this SubmissionVersion.

        the most up to date grade for the current version of this submission  # noqa: E501

        :param current_grade: The current_grade of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._current_grade = current_grade

    @property
    def current_graded_at(self):
        """Gets the current_graded_at of this SubmissionVersion.  # noqa: E501

        the latest time stamp for the grading of this submission  # noqa: E501

        :return: The current_graded_at of this SubmissionVersion.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._current_graded_at

    @current_graded_at.setter
    def current_graded_at(self, current_graded_at):
        """Sets the current_graded_at of this SubmissionVersion.

        the latest time stamp for the grading of this submission  # noqa: E501

        :param current_graded_at: The current_graded_at of this SubmissionVersion.  # noqa: E501
        :type: ModelDatetime
        """

        self._current_graded_at = current_graded_at

    @property
    def current_grader(self):
        """Gets the current_grader of this SubmissionVersion.  # noqa: E501

        the name of the most recent grader for this submission  # noqa: E501

        :return: The current_grader of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._current_grader

    @current_grader.setter
    def current_grader(self, current_grader):
        """Sets the current_grader of this SubmissionVersion.

        the name of the most recent grader for this submission  # noqa: E501

        :param current_grader: The current_grader of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._current_grader = current_grader

    @property
    def grade_matches_current_submission(self):
        """Gets the grade_matches_current_submission of this SubmissionVersion.  # noqa: E501

        boolean indicating whether the grade is equal to the current submission grade  # noqa: E501

        :return: The grade_matches_current_submission of this SubmissionVersion.  # noqa: E501
        :rtype: bool
        """
        return self._grade_matches_current_submission

    @grade_matches_current_submission.setter
    def grade_matches_current_submission(self, grade_matches_current_submission):
        """Sets the grade_matches_current_submission of this SubmissionVersion.

        boolean indicating whether the grade is equal to the current submission grade  # noqa: E501

        :param grade_matches_current_submission: The grade_matches_current_submission of this SubmissionVersion.  # noqa: E501
        :type: bool
        """

        self._grade_matches_current_submission = grade_matches_current_submission

    @property
    def graded_at(self):
        """Gets the graded_at of this SubmissionVersion.  # noqa: E501

        time stamp for the grading of this version of the submission  # noqa: E501

        :return: The graded_at of this SubmissionVersion.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._graded_at

    @graded_at.setter
    def graded_at(self, graded_at):
        """Sets the graded_at of this SubmissionVersion.

        time stamp for the grading of this version of the submission  # noqa: E501

        :param graded_at: The graded_at of this SubmissionVersion.  # noqa: E501
        :type: ModelDatetime
        """

        self._graded_at = graded_at

    @property
    def grader(self):
        """Gets the grader of this SubmissionVersion.  # noqa: E501

        the name of the user who graded this version of the submission  # noqa: E501

        :return: The grader of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._grader

    @grader.setter
    def grader(self, grader):
        """Sets the grader of this SubmissionVersion.

        the name of the user who graded this version of the submission  # noqa: E501

        :param grader: The grader of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._grader = grader

    @property
    def grader_id(self):
        """Gets the grader_id of this SubmissionVersion.  # noqa: E501

        the user id of the user who graded this version of the submission  # noqa: E501

        :return: The grader_id of this SubmissionVersion.  # noqa: E501
        :rtype: int
        """
        return self._grader_id

    @grader_id.setter
    def grader_id(self, grader_id):
        """Sets the grader_id of this SubmissionVersion.

        the user id of the user who graded this version of the submission  # noqa: E501

        :param grader_id: The grader_id of this SubmissionVersion.  # noqa: E501
        :type: int
        """

        self._grader_id = grader_id

    @property
    def id(self):
        """Gets the id of this SubmissionVersion.  # noqa: E501

        the id of the submission of which this is a version  # noqa: E501

        :return: The id of this SubmissionVersion.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmissionVersion.

        the id of the submission of which this is a version  # noqa: E501

        :param id: The id of this SubmissionVersion.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def new_grade(self):
        """Gets the new_grade of this SubmissionVersion.  # noqa: E501

        the updated grade provided in this version of the submission  # noqa: E501

        :return: The new_grade of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._new_grade

    @new_grade.setter
    def new_grade(self, new_grade):
        """Sets the new_grade of this SubmissionVersion.

        the updated grade provided in this version of the submission  # noqa: E501

        :param new_grade: The new_grade of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._new_grade = new_grade

    @property
    def new_graded_at(self):
        """Gets the new_graded_at of this SubmissionVersion.  # noqa: E501

        the timestamp for the grading of this version of the submission (alias for graded_at)  # noqa: E501

        :return: The new_graded_at of this SubmissionVersion.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._new_graded_at

    @new_graded_at.setter
    def new_graded_at(self, new_graded_at):
        """Sets the new_graded_at of this SubmissionVersion.

        the timestamp for the grading of this version of the submission (alias for graded_at)  # noqa: E501

        :param new_graded_at: The new_graded_at of this SubmissionVersion.  # noqa: E501
        :type: ModelDatetime
        """

        self._new_graded_at = new_graded_at

    @property
    def new_grader(self):
        """Gets the new_grader of this SubmissionVersion.  # noqa: E501

        alias for 'grader'  # noqa: E501

        :return: The new_grader of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._new_grader

    @new_grader.setter
    def new_grader(self, new_grader):
        """Sets the new_grader of this SubmissionVersion.

        alias for 'grader'  # noqa: E501

        :param new_grader: The new_grader of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._new_grader = new_grader

    @property
    def previous_grade(self):
        """Gets the previous_grade of this SubmissionVersion.  # noqa: E501

        the grade for the submission version immediately preceding this one  # noqa: E501

        :return: The previous_grade of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._previous_grade

    @previous_grade.setter
    def previous_grade(self, previous_grade):
        """Sets the previous_grade of this SubmissionVersion.

        the grade for the submission version immediately preceding this one  # noqa: E501

        :param previous_grade: The previous_grade of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._previous_grade = previous_grade

    @property
    def previous_graded_at(self):
        """Gets the previous_graded_at of this SubmissionVersion.  # noqa: E501

        the timestamp for the grading of the submission version immediately preceding this one  # noqa: E501

        :return: The previous_graded_at of this SubmissionVersion.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._previous_graded_at

    @previous_graded_at.setter
    def previous_graded_at(self, previous_graded_at):
        """Sets the previous_graded_at of this SubmissionVersion.

        the timestamp for the grading of the submission version immediately preceding this one  # noqa: E501

        :param previous_graded_at: The previous_graded_at of this SubmissionVersion.  # noqa: E501
        :type: ModelDatetime
        """

        self._previous_graded_at = previous_graded_at

    @property
    def previous_grader(self):
        """Gets the previous_grader of this SubmissionVersion.  # noqa: E501

        the name of the grader who graded the version of this submission immediately preceding this one  # noqa: E501

        :return: The previous_grader of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._previous_grader

    @previous_grader.setter
    def previous_grader(self, previous_grader):
        """Sets the previous_grader of this SubmissionVersion.

        the name of the grader who graded the version of this submission immediately preceding this one  # noqa: E501

        :param previous_grader: The previous_grader of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._previous_grader = previous_grader

    @property
    def score(self):
        """Gets the score of this SubmissionVersion.  # noqa: E501

        the score for this version of the submission  # noqa: E501

        :return: The score of this SubmissionVersion.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this SubmissionVersion.

        the score for this version of the submission  # noqa: E501

        :param score: The score of this SubmissionVersion.  # noqa: E501
        :type: int
        """

        self._score = score

    @property
    def user_name(self):
        """Gets the user_name of this SubmissionVersion.  # noqa: E501

        the name of the student who created this submission  # noqa: E501

        :return: The user_name of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this SubmissionVersion.

        the name of the student who created this submission  # noqa: E501

        :param user_name: The user_name of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def submission_type(self):
        """Gets the submission_type of this SubmissionVersion.  # noqa: E501

        the type of submission  # noqa: E501

        :return: The submission_type of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._submission_type

    @submission_type.setter
    def submission_type(self, submission_type):
        """Sets the submission_type of this SubmissionVersion.

        the type of submission  # noqa: E501

        :param submission_type: The submission_type of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._submission_type = submission_type

    @property
    def url(self):
        """Gets the url of this SubmissionVersion.  # noqa: E501

        the url of the submission, if there is one  # noqa: E501

        :return: The url of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SubmissionVersion.

        the url of the submission, if there is one  # noqa: E501

        :param url: The url of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this SubmissionVersion.  # noqa: E501

        the user ID of the student who created this submission  # noqa: E501

        :return: The user_id of this SubmissionVersion.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SubmissionVersion.

        the user ID of the student who created this submission  # noqa: E501

        :param user_id: The user_id of this SubmissionVersion.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def workflow_state(self):
        """Gets the workflow_state of this SubmissionVersion.  # noqa: E501

        the state of the submission at this version  # noqa: E501

        :return: The workflow_state of this SubmissionVersion.  # noqa: E501
        :rtype: str
        """
        return self._workflow_state

    @workflow_state.setter
    def workflow_state(self, workflow_state):
        """Sets the workflow_state of this SubmissionVersion.

        the state of the submission at this version  # noqa: E501

        :param workflow_state: The workflow_state of this SubmissionVersion.  # noqa: E501
        :type: str
        """

        self._workflow_state = workflow_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmissionVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmissionVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubmissionVersion):
            return True

        return self.to_dict() != other.to_dict()
