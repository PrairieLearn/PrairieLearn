# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class Section(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'sis_section_id': 'str',
        'integration_id': 'str',
        'sis_import_id': 'int',
        'course_id': 'int',
        'sis_course_id': 'str',
        'start_at': 'ModelDatetime',
        'end_at': 'ModelDatetime',
        'restrict_enrollments_to_section_dates': 'bool',
        'nonxlist_course_id': 'int',
        'total_students': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sis_section_id': 'sis_section_id',
        'integration_id': 'integration_id',
        'sis_import_id': 'sis_import_id',
        'course_id': 'course_id',
        'sis_course_id': 'sis_course_id',
        'start_at': 'start_at',
        'end_at': 'end_at',
        'restrict_enrollments_to_section_dates': 'restrict_enrollments_to_section_dates',
        'nonxlist_course_id': 'nonxlist_course_id',
        'total_students': 'total_students'
    }

    def __init__(self, id=None, name=None, sis_section_id=None, integration_id=None, sis_import_id=None, course_id=None, sis_course_id=None, start_at=None, end_at=None, restrict_enrollments_to_section_dates=None, nonxlist_course_id=None, total_students=None, _configuration=None):  # noqa: E501
        """Section - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._sis_section_id = None
        self._integration_id = None
        self._sis_import_id = None
        self._course_id = None
        self._sis_course_id = None
        self._start_at = None
        self._end_at = None
        self._restrict_enrollments_to_section_dates = None
        self._nonxlist_course_id = None
        self._total_students = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if sis_section_id is not None:
            self.sis_section_id = sis_section_id
        if integration_id is not None:
            self.integration_id = integration_id
        if sis_import_id is not None:
            self.sis_import_id = sis_import_id
        if course_id is not None:
            self.course_id = course_id
        if sis_course_id is not None:
            self.sis_course_id = sis_course_id
        if start_at is not None:
            self.start_at = start_at
        if end_at is not None:
            self.end_at = end_at
        if restrict_enrollments_to_section_dates is not None:
            self.restrict_enrollments_to_section_dates = restrict_enrollments_to_section_dates
        if nonxlist_course_id is not None:
            self.nonxlist_course_id = nonxlist_course_id
        if total_students is not None:
            self.total_students = total_students

    @property
    def id(self):
        """Gets the id of this Section.  # noqa: E501

        The unique identifier for the section.  # noqa: E501

        :return: The id of this Section.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Section.

        The unique identifier for the section.  # noqa: E501

        :param id: The id of this Section.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Section.  # noqa: E501

        The name of the section.  # noqa: E501

        :return: The name of this Section.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Section.

        The name of the section.  # noqa: E501

        :param name: The name of this Section.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sis_section_id(self):
        """Gets the sis_section_id of this Section.  # noqa: E501

        The sis id of the section. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_section_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._sis_section_id

    @sis_section_id.setter
    def sis_section_id(self, sis_section_id):
        """Sets the sis_section_id of this Section.

        The sis id of the section. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_section_id: The sis_section_id of this Section.  # noqa: E501
        :type: str
        """

        self._sis_section_id = sis_section_id

    @property
    def integration_id(self):
        """Gets the integration_id of this Section.  # noqa: E501

        Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The integration_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._integration_id

    @integration_id.setter
    def integration_id(self, integration_id):
        """Sets the integration_id of this Section.

        Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param integration_id: The integration_id of this Section.  # noqa: E501
        :type: str
        """

        self._integration_id = integration_id

    @property
    def sis_import_id(self):
        """Gets the sis_import_id of this Section.  # noqa: E501

        The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :return: The sis_import_id of this Section.  # noqa: E501
        :rtype: int
        """
        return self._sis_import_id

    @sis_import_id.setter
    def sis_import_id(self, sis_import_id):
        """Sets the sis_import_id of this Section.

        The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.  # noqa: E501

        :param sis_import_id: The sis_import_id of this Section.  # noqa: E501
        :type: int
        """

        self._sis_import_id = sis_import_id

    @property
    def course_id(self):
        """Gets the course_id of this Section.  # noqa: E501

        The unique Canvas identifier for the course in which the section belongs  # noqa: E501

        :return: The course_id of this Section.  # noqa: E501
        :rtype: int
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Section.

        The unique Canvas identifier for the course in which the section belongs  # noqa: E501

        :param course_id: The course_id of this Section.  # noqa: E501
        :type: int
        """

        self._course_id = course_id

    @property
    def sis_course_id(self):
        """Gets the sis_course_id of this Section.  # noqa: E501

        The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :return: The sis_course_id of this Section.  # noqa: E501
        :rtype: str
        """
        return self._sis_course_id

    @sis_course_id.setter
    def sis_course_id(self, sis_course_id):
        """Sets the sis_course_id of this Section.

        The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.  # noqa: E501

        :param sis_course_id: The sis_course_id of this Section.  # noqa: E501
        :type: str
        """

        self._sis_course_id = sis_course_id

    @property
    def start_at(self):
        """Gets the start_at of this Section.  # noqa: E501

        the start date for the section, if applicable  # noqa: E501

        :return: The start_at of this Section.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this Section.

        the start date for the section, if applicable  # noqa: E501

        :param start_at: The start_at of this Section.  # noqa: E501
        :type: ModelDatetime
        """

        self._start_at = start_at

    @property
    def end_at(self):
        """Gets the end_at of this Section.  # noqa: E501

        the end date for the section, if applicable  # noqa: E501

        :return: The end_at of this Section.  # noqa: E501
        :rtype: ModelDatetime
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this Section.

        the end date for the section, if applicable  # noqa: E501

        :param end_at: The end_at of this Section.  # noqa: E501
        :type: ModelDatetime
        """

        self._end_at = end_at

    @property
    def restrict_enrollments_to_section_dates(self):
        """Gets the restrict_enrollments_to_section_dates of this Section.  # noqa: E501

        Restrict user enrollments to the start and end dates of the section  # noqa: E501

        :return: The restrict_enrollments_to_section_dates of this Section.  # noqa: E501
        :rtype: bool
        """
        return self._restrict_enrollments_to_section_dates

    @restrict_enrollments_to_section_dates.setter
    def restrict_enrollments_to_section_dates(self, restrict_enrollments_to_section_dates):
        """Sets the restrict_enrollments_to_section_dates of this Section.

        Restrict user enrollments to the start and end dates of the section  # noqa: E501

        :param restrict_enrollments_to_section_dates: The restrict_enrollments_to_section_dates of this Section.  # noqa: E501
        :type: bool
        """

        self._restrict_enrollments_to_section_dates = restrict_enrollments_to_section_dates

    @property
    def nonxlist_course_id(self):
        """Gets the nonxlist_course_id of this Section.  # noqa: E501

        The unique identifier of the original course of a cross-listed section  # noqa: E501

        :return: The nonxlist_course_id of this Section.  # noqa: E501
        :rtype: int
        """
        return self._nonxlist_course_id

    @nonxlist_course_id.setter
    def nonxlist_course_id(self, nonxlist_course_id):
        """Sets the nonxlist_course_id of this Section.

        The unique identifier of the original course of a cross-listed section  # noqa: E501

        :param nonxlist_course_id: The nonxlist_course_id of this Section.  # noqa: E501
        :type: int
        """

        self._nonxlist_course_id = nonxlist_course_id

    @property
    def total_students(self):
        """Gets the total_students of this Section.  # noqa: E501

        optional: the total number of active and invited students in the section  # noqa: E501

        :return: The total_students of this Section.  # noqa: E501
        :rtype: int
        """
        return self._total_students

    @total_students.setter
    def total_students(self, total_students):
        """Sets the total_students of this Section.

        optional: the total number of active and invited students in the section  # noqa: E501

        :param total_students: The total_students of this Section.  # noqa: E501
        :type: int
        """

        self._total_students = total_students

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Section, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Section):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Section):
            return True

        return self.to_dict() != other.to_dict()
