# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OutcomeImportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ids_of_outcome_groups_created_after_successful_import_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get IDs of outcome groups created after successful import  # noqa: E501

        Get the IDs of the outcome groups created after a successful import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ids_of_outcome_groups_created_after_successful_import_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: ArrayOfOutcomeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ids_of_outcome_groups_created_after_successful_import_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ids_of_outcome_groups_created_after_successful_import_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_ids_of_outcome_groups_created_after_successful_import_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get IDs of outcome groups created after successful import  # noqa: E501

        Get the IDs of the outcome groups created after a successful import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ids_of_outcome_groups_created_after_successful_import_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: ArrayOfOutcomeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ids_of_outcome_groups_created_after_successful_import_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_ids_of_outcome_groups_created_after_successful_import_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_ids_of_outcome_groups_created_after_successful_import_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_imports/{id}/created_group_ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfOutcomeIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ids_of_outcome_groups_created_after_successful_import_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get IDs of outcome groups created after successful import  # noqa: E501

        Get the IDs of the outcome groups created after a successful import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ids_of_outcome_groups_created_after_successful_import_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: ArrayOfOutcomeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ids_of_outcome_groups_created_after_successful_import_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ids_of_outcome_groups_created_after_successful_import_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_ids_of_outcome_groups_created_after_successful_import_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get IDs of outcome groups created after successful import  # noqa: E501

        Get the IDs of the outcome groups created after a successful import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/outcomes_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/outcome_group_ids/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ids_of_outcome_groups_created_after_successful_import_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: ArrayOfOutcomeIds
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ids_of_outcome_groups_created_after_successful_import_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_ids_of_outcome_groups_created_after_successful_import_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_ids_of_outcome_groups_created_after_successful_import_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_imports/{id}/created_group_ids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ArrayOfOutcomeIds',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outcome_import_status_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get Outcome import status  # noqa: E501

        Get the status of an already created Outcome import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_import_status_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outcome_import_status_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outcome_import_status_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_outcome_import_status_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get Outcome import status  # noqa: E501

        Get the status of an already created Outcome import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_import_status_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outcome_import_status_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_outcome_import_status_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_outcome_import_status_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_imports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outcome_import_status_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get Outcome import status  # noqa: E501

        Get the status of an already created Outcome import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_import_status_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outcome_import_status_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outcome_import_status_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_outcome_import_status_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get Outcome import status  # noqa: E501

        Get the status of an already created Outcome import. Pass 'latest' for the outcome import id for the latest import.    Examples:     curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"     curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\         -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_import_status_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outcome_import_status_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_outcome_import_status_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_outcome_import_status_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_imports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_outcomes_accounts(self, account_id, **kwargs):  # noqa: E501
        """Import Outcomes  # noqa: E501

        Import outcomes into Canvas.  For more information on the format that's expected here, please see the \"Outcomes CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcomes_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str import_type: Choose the data format for reading outcome data. With a standard Canvas install, this option can only be 'instructure_csv', and if unprovided, will be assumed to be so. Can be part of the query string.
        :param str attachment: There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'    curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'
        :param str extension: Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_outcomes_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_outcomes_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def import_outcomes_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Import Outcomes  # noqa: E501

        Import outcomes into Canvas.  For more information on the format that's expected here, please see the \"Outcomes CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcomes_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str import_type: Choose the data format for reading outcome data. With a standard Canvas install, this option can only be 'instructure_csv', and if unprovided, will be assumed to be so. Can be part of the query string.
        :param str attachment: There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'    curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'
        :param str extension: Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'import_type', 'attachment', 'extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_outcomes_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `import_outcomes_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'import_type' in params:
            form_params.append(('import_type', params['import_type']))  # noqa: E501
        if 'attachment' in params:
            form_params.append(('attachment', params['attachment']))  # noqa: E501
        if 'extension' in params:
            form_params.append(('extension', params['extension']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_imports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_outcomes_courses(self, course_id, **kwargs):  # noqa: E501
        """Import Outcomes  # noqa: E501

        Import outcomes into Canvas.  For more information on the format that's expected here, please see the \"Outcomes CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcomes_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str import_type: Choose the data format for reading outcome data. With a standard Canvas install, this option can only be 'instructure_csv', and if unprovided, will be assumed to be so. Can be part of the query string.
        :param str attachment: There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'    curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'
        :param str extension: Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_outcomes_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_outcomes_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def import_outcomes_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Import Outcomes  # noqa: E501

        Import outcomes into Canvas.  For more information on the format that's expected here, please see the \"Outcomes CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcomes_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str import_type: Choose the data format for reading outcome data. With a standard Canvas install, this option can only be 'instructure_csv', and if unprovided, will be assumed to be so. Can be part of the query string.
        :param str attachment: There are two ways to post outcome import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'    curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'
        :param str extension: Recommended for raw post request style imports. This field will be used to distinguish between csv and other file format extensions that would usually be provided with the filename in the multipart post request scenario. If not provided, this value will be inferred from the Content-Type, falling back to csv-file format if all else fails.
        :return: OutcomeImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'import_type', 'attachment', 'extension']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_outcomes_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `import_outcomes_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'import_type' in params:
            form_params.append(('import_type', params['import_type']))  # noqa: E501
        if 'attachment' in params:
            form_params.append(('attachment', params['attachment']))  # noqa: E501
        if 'extension' in params:
            form_params.append(('extension', params['extension']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_imports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
