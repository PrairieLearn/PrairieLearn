# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RolesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate_role(self, account_id, id, role_id, **kwargs):  # noqa: E501
        """Activate a role  # noqa: E501

        Re-activates an inactive role (allowing it to be assigned to new users)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_role(account_id, id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int role_id: The unique identifier for the role (required)
        :param Object role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_role_with_http_info(account_id, id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_role_with_http_info(account_id, id, role_id, **kwargs)  # noqa: E501
            return data

    def activate_role_with_http_info(self, account_id, id, role_id, **kwargs):  # noqa: E501
        """Activate a role  # noqa: E501

        Re-activates an inactive role (allowing it to be assigned to new users)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_role_with_http_info(account_id, id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int role_id: The unique identifier for the role (required)
        :param Object role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'role_id', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `activate_role`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `activate_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and ('role_id' not in params or
                                                       params['role_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_id` when calling `activate_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'role_id' in params:
            form_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            form_params.append(('role', params['role']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles/{id}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_role(self, account_id, label, **kwargs):  # noqa: E501
        """Create a new role  # noqa: E501

        Create a new course-level or account-level role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_role(account_id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str label: Label for the role. (required)
        :param str role: Deprecated alias for label.
        :param str base_role_type: Specifies the role type that will be used as a base for the permissions granted to this role.  Defaults to 'AccountMembership' if absent
        :param bool permissions_x_explicit: no description
        :param bool permissions_x_enabled: If explicit is 1 and enabled is 1, permission <X> will be explicitly granted to this role. If explicit is 1 and enabled has any other value (typically 0), permission <X> will be explicitly denied to this role. If explicit is any other value (typically 0) or absent, or if enabled is absent, the value for permission <X> will be inherited from upstream. Ignored if permission <X> is locked upstream (in an ancestor account).  May occur multiple times with unique values for <X>. Recognized permission names for <X> are:    [For Account-Level Roles Only]   become_user                      -- Users - act as   import_sis                       -- SIS Data - import   manage_account_memberships       -- Admins - add / remove   manage_account_settings          -- Account-level settings - manage   manage_alerts                    -- Global announcements - add / edit / delete   manage_catalog                   -- Catalog - manage   Manage Course Templates granular permissions       add_course_template          -- Course Templates - add       delete_course_template       -- Course Templates - delete       edit_course_template         -- Course Templates - edit   manage_courses_add               -- Courses - add   manage_courses_admin             -- Courses - manage / update   manage_developer_keys            -- Developer keys - manage   manage_feature_flags             -- Feature Options - enable / disable   manage_master_courses            -- Blueprint Courses - add / edit / associate / delete   manage_role_overrides            -- Permissions - manage   manage_storage_quotas            -- Storage Quotas - manage   manage_sis                       -- SIS data - manage   Manage Temporary Enrollments granular permissions       temporary_enrollments_add     -- Temporary Enrollments - add       temporary_enrollments_edit    -- Temporary Enrollments - edit       temporary_enrollments_delete  -- Temporary Enrollments - delete   manage_user_logins               -- Users - manage login details   manage_user_observers            -- Users - manage observers   moderate_user_content            -- Users - moderate content   read_course_content              -- Course Content - view   read_course_list                 -- Courses - view list   view_course_changes              -- Courses - view change logs   view_feature_flags               -- Feature Options - view   view_grade_changes               -- Grades - view change logs   view_notifications               -- Notifications - view   view_quiz_answer_audits          -- Quizzes - view submission log   view_statistics                  -- Statistics - view   undelete_courses                 -- Courses - undelete    [For both Account-Level and Course-Level roles]    Note: Applicable enrollment types for course-level roles are given in brackets:          S = student, T = teacher (instructor), A = TA, D = designer, O = observer.          Lower-case letters indicate permissions that are off by default.          A missing letter indicates the permission cannot be enabled for the role          or any derived custom roles.   allow_course_admin_actions       -- [ Tad ] Users - allow administrative actions in courses   create_collaborations            -- [STADo] Student Collaborations - create   create_conferences               -- [STADo] Web conferences - create   create_forum                     -- [STADo] Discussions - create   generate_observer_pairing_code   -- [ tado] Users - Generate observer pairing codes for students   import_outcomes                  -- [ TaDo] Learning Outcomes - import   lti_add_edit                     -- [ TAD ] LTI - add / edit / delete   manage_account_banks             -- [ td  ] Item Banks - manage account   share_banks_with_subaccounts     -- [ tad ] Item Banks - share with subaccounts   manage_assignments               -- [ TADo] Assignments and Quizzes - add / edit / delete (deprecated)   Manage Assignments and Quizzes granular permissions       manage_assignments_add       -- [ TADo] Assignments and Quizzes - add       manage_assignments_edit      -- [ TADo] Assignments and Quizzes - edit / manage       manage_assignments_delete    -- [ TADo] Assignments and Quizzes - delete   manage_calendar                  -- [sTADo] Course Calendar - add / edit / delete   manage_content                   -- [ TADo] Course Content - add / edit / delete   manage_course_visibility         -- [ TAD ] Course - change visibility   Manage Courses granular permissions       manage_courses_conclude      -- [ TaD ] Courses - conclude       manage_courses_delete        -- [ TaD ] Courses - delete       manage_courses_publish       -- [ TaD ] Courses - publish       manage_courses_reset         -- [ TaD ] Courses - reset   Manage Files granular permissions       manage_files_add             -- [ TADo] Course Files - add       manage_files_edit            -- [ TADo] Course Files - edit       manage_files_delete          -- [ TADo] Course Files - delete   manage_grades                    -- [ TA  ] Grades - edit   Manage Groups granular permissions       manage_groups_add            -- [ TAD ] Groups - add       manage_groups_delete         -- [ TAD ] Groups - delete       manage_groups_manage         -- [ TAD ] Groups - manage   manage_interaction_alerts        -- [ Ta  ] Alerts - add / edit / delete   manage_outcomes                  -- [sTaDo] Learning Outcomes - add / edit / delete   manage_proficiency_calculations  -- [ t d ] Outcome Proficiency Calculations - add / edit / delete   manage_proficiency_scales        -- [ t d ] Outcome Proficiency/Mastery Scales - add / edit / delete   Manage Sections granular permissions       manage_sections_add          -- [ TaD ] Course Sections - add       manage_sections_edit         -- [ TaD ] Course Sections - edit       manage_sections_delete       -- [ TaD ] Course Sections - delete   manage_students                  -- [ TAD ] Users - manage students in courses   manage_user_notes                -- [ TA  ] Faculty Journal - manage entries   manage_rubrics                   -- [ TAD ] Rubrics - add / edit / delete   Manage Pages granular permissions       manage_wiki_create           -- [ TADo] Pages - create       manage_wiki_delete           -- [ TADo] Pages - delete       manage_wiki_update           -- [ TADo] Pages - update   moderate_forum                   -- [sTADo] Discussions - moderate   post_to_forum                    -- [STADo] Discussions - post   read_announcements               -- [STADO] Announcements - view   read_email_addresses             -- [sTAdo] Users - view primary email address   read_forum                       -- [STADO] Discussions - view   read_question_banks              -- [ TADo] Question banks - view and link   read_reports                     -- [ TAD ] Reports - manage   read_roster                      -- [STADo] Users - view list   read_sis                         -- [sTa  ] SIS Data - read   select_final_grade               -- [ TA  ] Grades - select final grade for moderation   send_messages                    -- [STADo] Conversations - send messages to individual course members   send_messages_all                -- [sTADo] Conversations - send messages to entire class   Users - Teacher granular permissions       add_teacher_to_course        -- [ Tad ] Add a teacher enrollment to a course       remove_teacher_from_course   -- [ Tad ] Remove a Teacher enrollment from a course   Users - TA granular permissions       add_ta_to_course             -- [ Tad ] Add a TA enrollment to a course       remove_ta_from_course        -- [ Tad ] Remove a TA enrollment from a course   Users - Designer granular permissions       add_designer_to_course       -- [ Tad ] Add a designer enrollment to a course       remove_designer_from_course  -- [ Tad ] Remove a designer enrollment from a course   Users - Observer granular permissions       add_observer_to_course       -- [ Tad ] Add an observer enrollment to a course       remove_observer_from_course  -- [ Tad ] Remove an observer enrollment from a course   Users - Student granular permissions       add_student_to_course        -- [ Tad ] Add a student enrollment to a course       remove_student_from_course   -- [ Tad ] Remove a student enrollment from a course   view_all_grades                  -- [ TAd ] Grades - view all grades   view_analytics                   -- [sTA  ] Analytics - view pages   view_audit_trail                 -- [ t   ] Grades - view audit trail   view_group_pages                 -- [sTADo] Groups - view all student groups   view_user_logins                 -- [ TA  ] Users - view login IDs  Some of these permissions are applicable only for roles on the site admin account, on a root account, or for course-level roles with a particular base role type; if a specified permission is inapplicable, it will be ignored.  Additional permissions may exist based on installed plugins.  A comprehensive list of all permissions are available:  Course Permissions PDF: http://bit.ly/cnvs-course-permissions  Account Permissions PDF: http://bit.ly/cnvs-acct-permissions
        :param bool permissions_x_locked: If the value is 1, permission <X> will be locked downstream (new roles in subaccounts cannot override the setting). For any other value, permission <X> is left unlocked. Ignored if permission <X> is already locked upstream. May occur multiple times with unique values for <X>.
        :param bool permissions_x_applies_to_self: If the value is 1, permission <X> applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        :param bool permissions_x_applies_to_descendants: If the value is 1, permission <X> cascades down to sub accounts of the account this role is in. The default value is 1.  Must be true if applies_to_self is false.This value is only returned if enabled is true.
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_role_with_http_info(account_id, label, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_role_with_http_info(account_id, label, **kwargs)  # noqa: E501
            return data

    def create_new_role_with_http_info(self, account_id, label, **kwargs):  # noqa: E501
        """Create a new role  # noqa: E501

        Create a new course-level or account-level role.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_role_with_http_info(account_id, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str label: Label for the role. (required)
        :param str role: Deprecated alias for label.
        :param str base_role_type: Specifies the role type that will be used as a base for the permissions granted to this role.  Defaults to 'AccountMembership' if absent
        :param bool permissions_x_explicit: no description
        :param bool permissions_x_enabled: If explicit is 1 and enabled is 1, permission <X> will be explicitly granted to this role. If explicit is 1 and enabled has any other value (typically 0), permission <X> will be explicitly denied to this role. If explicit is any other value (typically 0) or absent, or if enabled is absent, the value for permission <X> will be inherited from upstream. Ignored if permission <X> is locked upstream (in an ancestor account).  May occur multiple times with unique values for <X>. Recognized permission names for <X> are:    [For Account-Level Roles Only]   become_user                      -- Users - act as   import_sis                       -- SIS Data - import   manage_account_memberships       -- Admins - add / remove   manage_account_settings          -- Account-level settings - manage   manage_alerts                    -- Global announcements - add / edit / delete   manage_catalog                   -- Catalog - manage   Manage Course Templates granular permissions       add_course_template          -- Course Templates - add       delete_course_template       -- Course Templates - delete       edit_course_template         -- Course Templates - edit   manage_courses_add               -- Courses - add   manage_courses_admin             -- Courses - manage / update   manage_developer_keys            -- Developer keys - manage   manage_feature_flags             -- Feature Options - enable / disable   manage_master_courses            -- Blueprint Courses - add / edit / associate / delete   manage_role_overrides            -- Permissions - manage   manage_storage_quotas            -- Storage Quotas - manage   manage_sis                       -- SIS data - manage   Manage Temporary Enrollments granular permissions       temporary_enrollments_add     -- Temporary Enrollments - add       temporary_enrollments_edit    -- Temporary Enrollments - edit       temporary_enrollments_delete  -- Temporary Enrollments - delete   manage_user_logins               -- Users - manage login details   manage_user_observers            -- Users - manage observers   moderate_user_content            -- Users - moderate content   read_course_content              -- Course Content - view   read_course_list                 -- Courses - view list   view_course_changes              -- Courses - view change logs   view_feature_flags               -- Feature Options - view   view_grade_changes               -- Grades - view change logs   view_notifications               -- Notifications - view   view_quiz_answer_audits          -- Quizzes - view submission log   view_statistics                  -- Statistics - view   undelete_courses                 -- Courses - undelete    [For both Account-Level and Course-Level roles]    Note: Applicable enrollment types for course-level roles are given in brackets:          S = student, T = teacher (instructor), A = TA, D = designer, O = observer.          Lower-case letters indicate permissions that are off by default.          A missing letter indicates the permission cannot be enabled for the role          or any derived custom roles.   allow_course_admin_actions       -- [ Tad ] Users - allow administrative actions in courses   create_collaborations            -- [STADo] Student Collaborations - create   create_conferences               -- [STADo] Web conferences - create   create_forum                     -- [STADo] Discussions - create   generate_observer_pairing_code   -- [ tado] Users - Generate observer pairing codes for students   import_outcomes                  -- [ TaDo] Learning Outcomes - import   lti_add_edit                     -- [ TAD ] LTI - add / edit / delete   manage_account_banks             -- [ td  ] Item Banks - manage account   share_banks_with_subaccounts     -- [ tad ] Item Banks - share with subaccounts   manage_assignments               -- [ TADo] Assignments and Quizzes - add / edit / delete (deprecated)   Manage Assignments and Quizzes granular permissions       manage_assignments_add       -- [ TADo] Assignments and Quizzes - add       manage_assignments_edit      -- [ TADo] Assignments and Quizzes - edit / manage       manage_assignments_delete    -- [ TADo] Assignments and Quizzes - delete   manage_calendar                  -- [sTADo] Course Calendar - add / edit / delete   manage_content                   -- [ TADo] Course Content - add / edit / delete   manage_course_visibility         -- [ TAD ] Course - change visibility   Manage Courses granular permissions       manage_courses_conclude      -- [ TaD ] Courses - conclude       manage_courses_delete        -- [ TaD ] Courses - delete       manage_courses_publish       -- [ TaD ] Courses - publish       manage_courses_reset         -- [ TaD ] Courses - reset   Manage Files granular permissions       manage_files_add             -- [ TADo] Course Files - add       manage_files_edit            -- [ TADo] Course Files - edit       manage_files_delete          -- [ TADo] Course Files - delete   manage_grades                    -- [ TA  ] Grades - edit   Manage Groups granular permissions       manage_groups_add            -- [ TAD ] Groups - add       manage_groups_delete         -- [ TAD ] Groups - delete       manage_groups_manage         -- [ TAD ] Groups - manage   manage_interaction_alerts        -- [ Ta  ] Alerts - add / edit / delete   manage_outcomes                  -- [sTaDo] Learning Outcomes - add / edit / delete   manage_proficiency_calculations  -- [ t d ] Outcome Proficiency Calculations - add / edit / delete   manage_proficiency_scales        -- [ t d ] Outcome Proficiency/Mastery Scales - add / edit / delete   Manage Sections granular permissions       manage_sections_add          -- [ TaD ] Course Sections - add       manage_sections_edit         -- [ TaD ] Course Sections - edit       manage_sections_delete       -- [ TaD ] Course Sections - delete   manage_students                  -- [ TAD ] Users - manage students in courses   manage_user_notes                -- [ TA  ] Faculty Journal - manage entries   manage_rubrics                   -- [ TAD ] Rubrics - add / edit / delete   Manage Pages granular permissions       manage_wiki_create           -- [ TADo] Pages - create       manage_wiki_delete           -- [ TADo] Pages - delete       manage_wiki_update           -- [ TADo] Pages - update   moderate_forum                   -- [sTADo] Discussions - moderate   post_to_forum                    -- [STADo] Discussions - post   read_announcements               -- [STADO] Announcements - view   read_email_addresses             -- [sTAdo] Users - view primary email address   read_forum                       -- [STADO] Discussions - view   read_question_banks              -- [ TADo] Question banks - view and link   read_reports                     -- [ TAD ] Reports - manage   read_roster                      -- [STADo] Users - view list   read_sis                         -- [sTa  ] SIS Data - read   select_final_grade               -- [ TA  ] Grades - select final grade for moderation   send_messages                    -- [STADo] Conversations - send messages to individual course members   send_messages_all                -- [sTADo] Conversations - send messages to entire class   Users - Teacher granular permissions       add_teacher_to_course        -- [ Tad ] Add a teacher enrollment to a course       remove_teacher_from_course   -- [ Tad ] Remove a Teacher enrollment from a course   Users - TA granular permissions       add_ta_to_course             -- [ Tad ] Add a TA enrollment to a course       remove_ta_from_course        -- [ Tad ] Remove a TA enrollment from a course   Users - Designer granular permissions       add_designer_to_course       -- [ Tad ] Add a designer enrollment to a course       remove_designer_from_course  -- [ Tad ] Remove a designer enrollment from a course   Users - Observer granular permissions       add_observer_to_course       -- [ Tad ] Add an observer enrollment to a course       remove_observer_from_course  -- [ Tad ] Remove an observer enrollment from a course   Users - Student granular permissions       add_student_to_course        -- [ Tad ] Add a student enrollment to a course       remove_student_from_course   -- [ Tad ] Remove a student enrollment from a course   view_all_grades                  -- [ TAd ] Grades - view all grades   view_analytics                   -- [sTA  ] Analytics - view pages   view_audit_trail                 -- [ t   ] Grades - view audit trail   view_group_pages                 -- [sTADo] Groups - view all student groups   view_user_logins                 -- [ TA  ] Users - view login IDs  Some of these permissions are applicable only for roles on the site admin account, on a root account, or for course-level roles with a particular base role type; if a specified permission is inapplicable, it will be ignored.  Additional permissions may exist based on installed plugins.  A comprehensive list of all permissions are available:  Course Permissions PDF: http://bit.ly/cnvs-course-permissions  Account Permissions PDF: http://bit.ly/cnvs-acct-permissions
        :param bool permissions_x_locked: If the value is 1, permission <X> will be locked downstream (new roles in subaccounts cannot override the setting). For any other value, permission <X> is left unlocked. Ignored if permission <X> is already locked upstream. May occur multiple times with unique values for <X>.
        :param bool permissions_x_applies_to_self: If the value is 1, permission <X> applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        :param bool permissions_x_applies_to_descendants: If the value is 1, permission <X> cascades down to sub accounts of the account this role is in. The default value is 1.  Must be true if applies_to_self is false.This value is only returned if enabled is true.
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'label', 'role', 'base_role_type', 'permissions_x_explicit', 'permissions_x_enabled', 'permissions_x_locked', 'permissions_x_applies_to_self', 'permissions_x_applies_to_descendants']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_new_role`")  # noqa: E501
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and ('label' not in params or
                                                       params['label'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `label` when calling `create_new_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'role' in params:
            form_params.append(('role', params['role']))  # noqa: E501
        if 'base_role_type' in params:
            form_params.append(('base_role_type', params['base_role_type']))  # noqa: E501
        if 'permissions_x_explicit' in params:
            form_params.append(('permissions[&lt;X&gt;][explicit]', params['permissions_x_explicit']))  # noqa: E501
        if 'permissions_x_enabled' in params:
            form_params.append(('permissions[&lt;X&gt;][enabled]', params['permissions_x_enabled']))  # noqa: E501
        if 'permissions_x_locked' in params:
            form_params.append(('permissions[&lt;X&gt;][locked]', params['permissions_x_locked']))  # noqa: E501
        if 'permissions_x_applies_to_self' in params:
            form_params.append(('permissions[&lt;X&gt;][applies_to_self]', params['permissions_x_applies_to_self']))  # noqa: E501
        if 'permissions_x_applies_to_descendants' in params:
            form_params.append(('permissions[&lt;X&gt;][applies_to_descendants]', params['permissions_x_applies_to_descendants']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate_role(self, account_id, id, role_id, **kwargs):  # noqa: E501
        """Deactivate a role  # noqa: E501

        Deactivates a custom role.  This hides it in the user interface and prevents it from being assigned to new users.  Existing users assigned to the role will continue to function with the same permissions they had previously. Built-in roles cannot be deactivated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_role(account_id, id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int role_id: The unique identifier for the role (required)
        :param str role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_role_with_http_info(account_id, id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_role_with_http_info(account_id, id, role_id, **kwargs)  # noqa: E501
            return data

    def deactivate_role_with_http_info(self, account_id, id, role_id, **kwargs):  # noqa: E501
        """Deactivate a role  # noqa: E501

        Deactivates a custom role.  This hides it in the user interface and prevents it from being assigned to new users.  Existing users assigned to the role will continue to function with the same permissions they had previously. Built-in roles cannot be deactivated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_role_with_http_info(account_id, id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int role_id: The unique identifier for the role (required)
        :param str role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'role_id', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `deactivate_role`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `deactivate_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and ('role_id' not in params or
                                                       params['role_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_id` when calling `deactivate_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_role(self, id, account_id, role_id, **kwargs):  # noqa: E501
        """Get a single role  # noqa: E501

        Retrieve information about a single role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_role(id, account_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str account_id: The id of the account containing the role (required)
        :param int role_id: The unique identifier for the role (required)
        :param str role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_role_with_http_info(id, account_id, role_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_role_with_http_info(id, account_id, role_id, **kwargs)  # noqa: E501
            return data

    def get_single_role_with_http_info(self, id, account_id, role_id, **kwargs):  # noqa: E501
        """Get a single role  # noqa: E501

        Retrieve information about a single role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_role_with_http_info(id, account_id, role_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str account_id: The id of the account containing the role (required)
        :param int role_id: The unique identifier for the role (required)
        :param str role: The name for the role
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'account_id', 'role_id', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_role`")  # noqa: E501
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_single_role`")  # noqa: E501
        # verify the required parameter 'role_id' is set
        if self.api_client.client_side_validation and ('role_id' not in params or
                                                       params['role_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `role_id` when calling `get_single_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'role_id' in params:
            query_params.append(('role_id', params['role_id']))  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_roles(self, account_id, **kwargs):  # noqa: E501
        """List roles  # noqa: E501

        A paginated list of the roles available to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The id of the account to retrieve roles for. (required)
        :param list[str] state: Filter by role state. If this argument is omitted, only 'active' roles are returned.
        :param bool show_inherited: If this argument is true, all roles inherited from parent accounts will be included.
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_roles_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_roles_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_roles_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List roles  # noqa: E501

        A paginated list of the roles available to an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_roles_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: The id of the account to retrieve roles for. (required)
        :param list[str] state: Filter by role state. If this argument is omitted, only 'active' roles are returned.
        :param bool show_inherited: If this argument is true, all roles inherited from parent accounts will be included.
        :return: list[Role]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'state', 'show_inherited']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_roles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_roles`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'show_inherited' in params:
            query_params.append(('show_inherited', params['show_inherited']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Role]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_role(self, account_id, id, **kwargs):  # noqa: E501
        """Update a role  # noqa: E501

        Update permissions for an existing role.  Recognized roles are: * TeacherEnrollment * StudentEnrollment * TaEnrollment * ObserverEnrollment * DesignerEnrollment * AccountAdmin * Any previously created custom role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str label: The label for the role. Can only change the label of a custom role that belongs directly to the account.
        :param bool permissions_x_explicit: no description
        :param bool permissions_x_enabled: These arguments are described in the documentation for the {api:RoleOverridesController#add_role add_role method}.
        :param bool permissions_x_applies_to_self: If the value is 1, permission <X> applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        :param bool permissions_x_applies_to_descendants: If the value is 1, permission <X> cascades down to sub accounts of the account this role is in. The default value is 1.  Must be true if applies_to_self is false.This value is only returned if enabled is true.
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_role_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_role_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def update_role_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Update a role  # noqa: E501

        Update permissions for an existing role.  Recognized roles are: * TeacherEnrollment * StudentEnrollment * TaEnrollment * ObserverEnrollment * DesignerEnrollment * AccountAdmin * Any previously created custom role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str label: The label for the role. Can only change the label of a custom role that belongs directly to the account.
        :param bool permissions_x_explicit: no description
        :param bool permissions_x_enabled: These arguments are described in the documentation for the {api:RoleOverridesController#add_role add_role method}.
        :param bool permissions_x_applies_to_self: If the value is 1, permission <X> applies to the account this role is in. The default value is 1. Must be true if applies_to_descendants is false. This value is only returned if enabled is true.
        :param bool permissions_x_applies_to_descendants: If the value is 1, permission <X> cascades down to sub accounts of the account this role is in. The default value is 1.  Must be true if applies_to_self is false.This value is only returned if enabled is true.
        :return: Role
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'label', 'permissions_x_explicit', 'permissions_x_enabled', 'permissions_x_applies_to_self', 'permissions_x_applies_to_descendants']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_role`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'permissions_x_explicit' in params:
            form_params.append(('permissions[&lt;X&gt;][explicit]', params['permissions_x_explicit']))  # noqa: E501
        if 'permissions_x_enabled' in params:
            form_params.append(('permissions[&lt;X&gt;][enabled]', params['permissions_x_enabled']))  # noqa: E501
        if 'permissions_x_applies_to_self' in params:
            form_params.append(('permissions[&lt;X&gt;][applies_to_self]', params['permissions_x_applies_to_self']))  # noqa: E501
        if 'permissions_x_applies_to_descendants' in params:
            form_params.append(('permissions[&lt;X&gt;][applies_to_descendants]', params['permissions_x_applies_to_descendants']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/roles/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Role',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
