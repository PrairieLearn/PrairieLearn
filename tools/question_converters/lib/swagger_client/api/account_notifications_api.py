# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountNotificationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def close_notification_for_user(self, account_id, id, **kwargs):  # noqa: E501
        """Close notification for user  # noqa: E501

        If the current user no long wants to see this notification it can be excused with this call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_notification_for_user(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AccountNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_notification_for_user_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.close_notification_for_user_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def close_notification_for_user_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Close notification for user  # noqa: E501

        If the current user no long wants to see this notification it can be excused with this call  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_notification_for_user_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AccountNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_notification_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `close_notification_for_user`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `close_notification_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/account_notifications/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_global_notification(self, account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, **kwargs):  # noqa: E501
        """Create a global notification  # noqa: E501

        Create and return a new global notification for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_global_notification(account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str account_notification_subject: The subject of the notification. (required)
        :param str account_notification_message: The message body of the notification. (required)
        :param Object account_notification_start_at: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z (required)
        :param Object account_notification_end_at: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z (required)
        :param str account_notification_icon: The icon to display with the notification. Note: Defaults to warning.
        :param list[str] account_notification_roles: The role(s) to send global notification to.  Note:  ommitting this field will send to everyone Example:   account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_global_notification_with_http_info(account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, **kwargs)  # noqa: E501
        else:
            (data) = self.create_global_notification_with_http_info(account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, **kwargs)  # noqa: E501
            return data

    def create_global_notification_with_http_info(self, account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, **kwargs):  # noqa: E501
        """Create a global notification  # noqa: E501

        Create and return a new global notification for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_global_notification_with_http_info(account_id, account_notification_subject, account_notification_message, account_notification_start_at, account_notification_end_at, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str account_notification_subject: The subject of the notification. (required)
        :param str account_notification_message: The message body of the notification. (required)
        :param Object account_notification_start_at: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z (required)
        :param Object account_notification_end_at: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z (required)
        :param str account_notification_icon: The icon to display with the notification. Note: Defaults to warning.
        :param list[str] account_notification_roles: The role(s) to send global notification to.  Note:  ommitting this field will send to everyone Example:   account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'account_notification_subject', 'account_notification_message', 'account_notification_start_at', 'account_notification_end_at', 'account_notification_icon', 'account_notification_roles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_global_notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_global_notification`")  # noqa: E501
        # verify the required parameter 'account_notification_subject' is set
        if self.api_client.client_side_validation and ('account_notification_subject' not in params or
                                                       params['account_notification_subject'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_notification_subject` when calling `create_global_notification`")  # noqa: E501
        # verify the required parameter 'account_notification_message' is set
        if self.api_client.client_side_validation and ('account_notification_message' not in params or
                                                       params['account_notification_message'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_notification_message` when calling `create_global_notification`")  # noqa: E501
        # verify the required parameter 'account_notification_start_at' is set
        if self.api_client.client_side_validation and ('account_notification_start_at' not in params or
                                                       params['account_notification_start_at'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_notification_start_at` when calling `create_global_notification`")  # noqa: E501
        # verify the required parameter 'account_notification_end_at' is set
        if self.api_client.client_side_validation and ('account_notification_end_at' not in params or
                                                       params['account_notification_end_at'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_notification_end_at` when calling `create_global_notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'account_notification_subject' in params:
            form_params.append(('account_notification[subject]', params['account_notification_subject']))  # noqa: E501
        if 'account_notification_message' in params:
            form_params.append(('account_notification[message]', params['account_notification_message']))  # noqa: E501
        if 'account_notification_start_at' in params:
            form_params.append(('account_notification[start_at]', params['account_notification_start_at']))  # noqa: E501
        if 'account_notification_end_at' in params:
            form_params.append(('account_notification[end_at]', params['account_notification_end_at']))  # noqa: E501
        if 'account_notification_icon' in params:
            form_params.append(('account_notification[icon]', params['account_notification_icon']))  # noqa: E501
        if 'account_notification_roles' in params:
            form_params.append(('account_notification_roles', params['account_notification_roles']))  # noqa: E501
            collection_formats['account_notification_roles'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/account_notifications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def index_of_active_global_notification_for_user(self, account_id, **kwargs):  # noqa: E501
        """Index of active global notification for the user  # noqa: E501

        Returns a list of all global notifications in the account for the current user Any notifications that have been closed by the user will not be returned, unless a include_past parameter is passed in as true.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_of_active_global_notification_for_user(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param bool include_past: Include past and dismissed global announcements.
        :return: list[AccountNotification]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.index_of_active_global_notification_for_user_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.index_of_active_global_notification_for_user_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def index_of_active_global_notification_for_user_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Index of active global notification for the user  # noqa: E501

        Returns a list of all global notifications in the account for the current user Any notifications that have been closed by the user will not be returned, unless a include_past parameter is passed in as true.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.index_of_active_global_notification_for_user_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param bool include_past: Include past and dismissed global announcements.
        :return: list[AccountNotification]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'include_past']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method index_of_active_global_notification_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `index_of_active_global_notification_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'include_past' in params:
            query_params.append(('include_past', params['include_past']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/account_notifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AccountNotification]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_global_notification(self, account_id, id, **kwargs):  # noqa: E501
        """Show a global notification  # noqa: E501

        Returns a global notification for the current user A notification that has been closed by the user will not be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_global_notification(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AccountNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_global_notification_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_global_notification_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def show_global_notification_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Show a global notification  # noqa: E501

        Returns a global notification for the current user A notification that has been closed by the user will not be returned  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_global_notification_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AccountNotification
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_global_notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `show_global_notification`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_global_notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/account_notifications/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccountNotification',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_global_notification(self, account_id, id, **kwargs):  # noqa: E501
        """Update a global notification  # noqa: E501

        Update global notification for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_global_notification(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str account_notification_subject: The subject of the notification.
        :param str account_notification_message: The message body of the notification.
        :param Object account_notification_start_at: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
        :param Object account_notification_end_at: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
        :param str account_notification_icon: The icon to display with the notification.
        :param list[str] account_notification_roles: The role(s) to send global notification to.  Note:  ommitting this field will send to everyone Example:   account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_global_notification_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_global_notification_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def update_global_notification_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Update a global notification  # noqa: E501

        Update global notification for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_global_notification_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str account_notification_subject: The subject of the notification.
        :param str account_notification_message: The message body of the notification.
        :param Object account_notification_start_at: The start date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
        :param Object account_notification_end_at: The end date and time of the notification in ISO8601 format. e.g. 2014-01-01T01:00Z
        :param str account_notification_icon: The icon to display with the notification.
        :param list[str] account_notification_roles: The role(s) to send global notification to.  Note:  ommitting this field will send to everyone Example:   account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'account_notification_subject', 'account_notification_message', 'account_notification_start_at', 'account_notification_end_at', 'account_notification_icon', 'account_notification_roles']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_global_notification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_global_notification`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_global_notification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'account_notification_subject' in params:
            form_params.append(('account_notification[subject]', params['account_notification_subject']))  # noqa: E501
        if 'account_notification_message' in params:
            form_params.append(('account_notification[message]', params['account_notification_message']))  # noqa: E501
        if 'account_notification_start_at' in params:
            form_params.append(('account_notification[start_at]', params['account_notification_start_at']))  # noqa: E501
        if 'account_notification_end_at' in params:
            form_params.append(('account_notification[end_at]', params['account_notification_end_at']))  # noqa: E501
        if 'account_notification_icon' in params:
            form_params.append(('account_notification[icon]', params['account_notification_icon']))  # noqa: E501
        if 'account_notification_roles' in params:
            form_params.append(('account_notification_roles', params['account_notification_roles']))  # noqa: E501
            collection_formats['account_notification_roles'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/account_notifications/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
