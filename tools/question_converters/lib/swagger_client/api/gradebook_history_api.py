# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GradebookHistoryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def days_in_gradebook_history_for_this_course(self, course_id, **kwargs):  # noqa: E501
        """Days in gradebook history for this course  # noqa: E501

        Returns a map of dates to grader/assignment groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.days_in_gradebook_history_for_this_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :return: list[Day]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.days_in_gradebook_history_for_this_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.days_in_gradebook_history_for_this_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def days_in_gradebook_history_for_this_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Days in gradebook history for this course  # noqa: E501

        Returns a map of dates to grader/assignment groups  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.days_in_gradebook_history_for_this_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :return: list[Day]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method days_in_gradebook_history_for_this_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `days_in_gradebook_history_for_this_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/gradebook_history/days', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Day]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def details_for_given_date_in_gradebook_history_for_this_course(self, course_id, _date, **kwargs):  # noqa: E501
        """Details for a given date in gradebook history for this course  # noqa: E501

        Returns the graders who worked on this day, along with the assignments they worked on. More details can be obtained by selecting a grader and assignment and calling the 'submissions' api endpoint for a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.details_for_given_date_in_gradebook_history_for_this_course(course_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param str _date: The date for which you would like to see detailed information (required)
        :return: list[Grader]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.details_for_given_date_in_gradebook_history_for_this_course_with_http_info(course_id, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.details_for_given_date_in_gradebook_history_for_this_course_with_http_info(course_id, _date, **kwargs)  # noqa: E501
            return data

    def details_for_given_date_in_gradebook_history_for_this_course_with_http_info(self, course_id, _date, **kwargs):  # noqa: E501
        """Details for a given date in gradebook history for this course  # noqa: E501

        Returns the graders who worked on this day, along with the assignments they worked on. More details can be obtained by selecting a grader and assignment and calling the 'submissions' api endpoint for a given date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.details_for_given_date_in_gradebook_history_for_this_course_with_http_info(course_id, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param str _date: The date for which you would like to see detailed information (required)
        :return: list[Grader]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method details_for_given_date_in_gradebook_history_for_this_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `details_for_given_date_in_gradebook_history_for_this_course`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `details_for_given_date_in_gradebook_history_for_this_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/gradebook_history/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Grader]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_uncollated_submission_versions(self, course_id, **kwargs):  # noqa: E501
        """List uncollated submission versions  # noqa: E501

        Gives a paginated, uncollated list of submission versions for all matching submissions in the context. This SubmissionVersion objects will not include the +new_grade+ or +previous_grade+ keys, only the +grade+; same for +graded_at+ and +grader+.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_uncollated_submission_versions(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param int assignment_id: The ID of the assignment for which you want to see submissions. If absent, versions of submissions from any assignment in the course are included.
        :param int user_id: The ID of the user for which you want to see submissions. If absent, versions of submissions from any user in the course are included.
        :param bool ascending: Returns submission versions in ascending date order (oldest first). If absent, returns submission versions in descending date order (newest first).
        :return: list[SubmissionVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_uncollated_submission_versions_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_uncollated_submission_versions_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_uncollated_submission_versions_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List uncollated submission versions  # noqa: E501

        Gives a paginated, uncollated list of submission versions for all matching submissions in the context. This SubmissionVersion objects will not include the +new_grade+ or +previous_grade+ keys, only the +grade+; same for +graded_at+ and +grader+.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_uncollated_submission_versions_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param int assignment_id: The ID of the assignment for which you want to see submissions. If absent, versions of submissions from any assignment in the course are included.
        :param int user_id: The ID of the user for which you want to see submissions. If absent, versions of submissions from any user in the course are included.
        :param bool ascending: Returns submission versions in ascending date order (oldest first). If absent, returns submission versions in descending date order (newest first).
        :return: list[SubmissionVersion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id', 'ascending']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_uncollated_submission_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_uncollated_submission_versions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'assignment_id' in params:
            query_params.append(('assignment_id', params['assignment_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'ascending' in params:
            query_params.append(('ascending', params['ascending']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/gradebook_history/feed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SubmissionVersion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def lists_submissions(self, course_id, _date, grader_id, assignment_id, **kwargs):  # noqa: E501
        """Lists submissions  # noqa: E501

        Gives a nested list of submission versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lists_submissions(course_id, _date, grader_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param str _date: The date for which you would like to see submissions (required)
        :param int grader_id: The ID of the grader for which you want to see submissions (required)
        :param int assignment_id: The ID of the assignment for which you want to see submissions (required)
        :return: list[SubmissionHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.lists_submissions_with_http_info(course_id, _date, grader_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.lists_submissions_with_http_info(course_id, _date, grader_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def lists_submissions_with_http_info(self, course_id, _date, grader_id, assignment_id, **kwargs):  # noqa: E501
        """Lists submissions  # noqa: E501

        Gives a nested list of submission versions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.lists_submissions_with_http_info(course_id, _date, grader_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the contextual course for this API call (required)
        :param str _date: The date for which you would like to see submissions (required)
        :param int grader_id: The ID of the grader for which you want to see submissions (required)
        :param int assignment_id: The ID of the assignment for which you want to see submissions (required)
        :return: list[SubmissionHistory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', '_date', 'grader_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method lists_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `lists_submissions`")  # noqa: E501
        # verify the required parameter '_date' is set
        if self.api_client.client_side_validation and ('_date' not in params or
                                                       params['_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `_date` when calling `lists_submissions`")  # noqa: E501
        # verify the required parameter 'grader_id' is set
        if self.api_client.client_side_validation and ('grader_id' not in params or
                                                       params['grader_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grader_id` when calling `lists_submissions`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `lists_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501
        if 'grader_id' in params:
            path_params['grader_id'] = params['grader_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SubmissionHistory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
