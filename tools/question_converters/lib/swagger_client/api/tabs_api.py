# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TabsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_available_tabs_for_course_or_group_accounts(self, account_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_tabs_for_course_or_group_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_available_tabs_for_course_or_group_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_available_tabs_for_course_or_group_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_tabs_for_course_or_group_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_available_tabs_for_course_or_group_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_tabs_for_course_or_group_courses(self, course_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_tabs_for_course_or_group_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_available_tabs_for_course_or_group_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_available_tabs_for_course_or_group_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_tabs_for_course_or_group_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_available_tabs_for_course_or_group_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_tabs_for_course_or_group_groups(self, group_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_groups(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_tabs_for_course_or_group_groups_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_available_tabs_for_course_or_group_groups_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def list_available_tabs_for_course_or_group_groups_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_groups_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_tabs_for_course_or_group_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `list_available_tabs_for_course_or_group_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_available_tabs_for_course_or_group_users(self, user_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_users(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_available_tabs_for_course_or_group_users_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_available_tabs_for_course_or_group_users_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_available_tabs_for_course_or_group_users_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List available tabs for a course or group  # noqa: E501

        Returns a paginated list of navigation tabs available in the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_available_tabs_for_course_or_group_users_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: - \"course_subject_tabs\": Optional flag to return the tabs associated with a canvas_for_elementary subject course's   home page instead of the typical sidebar navigation. Only takes effect if this request is for a course context   in a canvas_for_elementary-enabled account or sub-account.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_available_tabs_for_course_or_group_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_available_tabs_for_course_or_group_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/tabs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_tab_for_course(self, course_id, tab_id, **kwargs):  # noqa: E501
        """Update a tab for a course  # noqa: E501

        Home and Settings tabs are not manageable, and can't be hidden or moved  Returns a tab object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tab_for_course(course_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str tab_id: ID (required)
        :param int position: The new position of the tab, 1-based
        :param bool hidden: no description
        :return: Tab
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_tab_for_course_with_http_info(course_id, tab_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_tab_for_course_with_http_info(course_id, tab_id, **kwargs)  # noqa: E501
            return data

    def update_tab_for_course_with_http_info(self, course_id, tab_id, **kwargs):  # noqa: E501
        """Update a tab for a course  # noqa: E501

        Home and Settings tabs are not manageable, and can't be hidden or moved  Returns a tab object  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_tab_for_course_with_http_info(course_id, tab_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str tab_id: ID (required)
        :param int position: The new position of the tab, 1-based
        :param bool hidden: no description
        :return: Tab
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'tab_id', 'position', 'hidden']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tab_for_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_tab_for_course`")  # noqa: E501
        # verify the required parameter 'tab_id' is set
        if self.api_client.client_side_validation and ('tab_id' not in params or
                                                       params['tab_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `tab_id` when calling `update_tab_for_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'tab_id' in params:
            path_params['tab_id'] = params['tab_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'position' in params:
            form_params.append(('position', params['position']))  # noqa: E501
        if 'hidden' in params:
            form_params.append(('hidden', params['hidden']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/tabs/{tab_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Tab',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
