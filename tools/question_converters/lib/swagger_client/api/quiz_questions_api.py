# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizQuestionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_single_quiz_question(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Create a single quiz question  # noqa: E501

        Create a new quiz question for this quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_quiz_question(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str question_question_name: The name of the question.
        :param str question_question_text: The text of the question.
        :param int question_quiz_group_id: The id of the quiz group to assign the question to.
        :param str question_question_type: The type of question. Multiple optional fields depend upon the type of question to be used.
        :param int question_position: The order in which the question will be displayed in the quiz in relation to other questions.
        :param int question_points_possible: The maximum amount of points received for answering this question correctly.
        :param str question_correct_comments: The comment to display if the student answers the question correctly.
        :param str question_incorrect_comments: The comment to display if the student answers incorrectly.
        :param str question_neutral_comments: The comment to display regardless of how the student answered.
        :param str question_text_after_answers: no description
        :param Object question_answers: no description
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_single_quiz_question_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_single_quiz_question_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def create_single_quiz_question_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Create a single quiz question  # noqa: E501

        Create a new quiz question for this quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_quiz_question_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str question_question_name: The name of the question.
        :param str question_question_text: The text of the question.
        :param int question_quiz_group_id: The id of the quiz group to assign the question to.
        :param str question_question_type: The type of question. Multiple optional fields depend upon the type of question to be used.
        :param int question_position: The order in which the question will be displayed in the quiz in relation to other questions.
        :param int question_points_possible: The maximum amount of points received for answering this question correctly.
        :param str question_correct_comments: The comment to display if the student answers the question correctly.
        :param str question_incorrect_comments: The comment to display if the student answers incorrectly.
        :param str question_neutral_comments: The comment to display regardless of how the student answered.
        :param str question_text_after_answers: no description
        :param Object question_answers: no description
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'question_question_name', 'question_question_text', 'question_quiz_group_id', 'question_question_type', 'question_position', 'question_points_possible', 'question_correct_comments', 'question_incorrect_comments', 'question_neutral_comments', 'question_text_after_answers', 'question_answers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_quiz_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_single_quiz_question`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `create_single_quiz_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question_question_name' in params:
            form_params.append(('question[question_name]', params['question_question_name']))  # noqa: E501
        if 'question_question_text' in params:
            form_params.append(('question[question_text]', params['question_question_text']))  # noqa: E501
        if 'question_quiz_group_id' in params:
            form_params.append(('question[quiz_group_id]', params['question_quiz_group_id']))  # noqa: E501
        if 'question_question_type' in params:
            form_params.append(('question[question_type]', params['question_question_type']))  # noqa: E501
        if 'question_position' in params:
            form_params.append(('question[position]', params['question_position']))  # noqa: E501
        if 'question_points_possible' in params:
            form_params.append(('question[points_possible]', params['question_points_possible']))  # noqa: E501
        if 'question_correct_comments' in params:
            form_params.append(('question[correct_comments]', params['question_correct_comments']))  # noqa: E501
        if 'question_incorrect_comments' in params:
            form_params.append(('question[incorrect_comments]', params['question_incorrect_comments']))  # noqa: E501
        if 'question_neutral_comments' in params:
            form_params.append(('question[neutral_comments]', params['question_neutral_comments']))  # noqa: E501
        if 'question_text_after_answers' in params:
            form_params.append(('question[text_after_answers]', params['question_text_after_answers']))  # noqa: E501
        if 'question_answers' in params:
            form_params.append(('question[answers]', params['question_answers']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/questions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizQuestion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_quiz_question(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Delete a quiz question  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz_question(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int quiz_id: The associated quiz's unique identifier (required)
        :param int id: The quiz question's unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def delete_quiz_question_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Delete a quiz question  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz_question_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int quiz_id: The associated quiz's unique identifier (required)
        :param int id: The quiz question's unique identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quiz_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_quiz_question`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `delete_quiz_question`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_quiz_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_quiz_question(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a single quiz question  # noqa: E501

        Returns the quiz question with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz_question(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param int id: The quiz question unique identifier. (required)
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_quiz_question_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a single quiz question  # noqa: E501

        Returns the quiz question with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz_question_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param int id: The quiz question unique identifier. (required)
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_quiz_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_quiz_question`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_single_quiz_question`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_quiz_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizQuestion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_questions_in_quiz_or_submission(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """List questions in a quiz or a submission  # noqa: E501

        Returns the paginated list of QuizQuestions in this quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_questions_in_quiz_or_submission(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param int quiz_submission_id: If specified, the endpoint will return the questions that were presented for that submission. This is useful if the quiz has been modified after the submission was created and the latest quiz version's set of questions does not match the submission's. NOTE: you must specify quiz_submission_attempt as well if you specify this parameter.
        :param int quiz_submission_attempt: The attempt of the submission you want the questions for.
        :return: list[QuizQuestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_questions_in_quiz_or_submission_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_questions_in_quiz_or_submission_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def list_questions_in_quiz_or_submission_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """List questions in a quiz or a submission  # noqa: E501

        Returns the paginated list of QuizQuestions in this quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_questions_in_quiz_or_submission_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param int quiz_submission_id: If specified, the endpoint will return the questions that were presented for that submission. This is useful if the quiz has been modified after the submission was created and the latest quiz version's set of questions does not match the submission's. NOTE: you must specify quiz_submission_attempt as well if you specify this parameter.
        :param int quiz_submission_attempt: The attempt of the submission you want the questions for.
        :return: list[QuizQuestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'quiz_submission_id', 'quiz_submission_attempt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_questions_in_quiz_or_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_questions_in_quiz_or_submission`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `list_questions_in_quiz_or_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []
        if 'quiz_submission_id' in params:
            query_params.append(('quiz_submission_id', params['quiz_submission_id']))  # noqa: E501
        if 'quiz_submission_attempt' in params:
            query_params.append(('quiz_submission_attempt', params['quiz_submission_attempt']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QuizQuestion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_existing_quiz_question(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Update an existing quiz question  # noqa: E501

        Updates an existing quiz question for this quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_existing_quiz_question(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int quiz_id: The associated quiz's unique identifier. (required)
        :param int id: The quiz question's unique identifier. (required)
        :param str question_question_name: The name of the question.
        :param str question_question_text: The text of the question.
        :param int question_quiz_group_id: The id of the quiz group to assign the question to.
        :param str question_question_type: The type of question. Multiple optional fields depend upon the type of question to be used.
        :param int question_position: The order in which the question will be displayed in the quiz in relation to other questions.
        :param int question_points_possible: The maximum amount of points received for answering this question correctly.
        :param str question_correct_comments: The comment to display if the student answers the question correctly.
        :param str question_incorrect_comments: The comment to display if the student answers incorrectly.
        :param str question_neutral_comments: The comment to display regardless of how the student answered.
        :param str question_text_after_answers: no description
        :param Object question_answers: no description
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_existing_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_existing_quiz_question_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def update_existing_quiz_question_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Update an existing quiz question  # noqa: E501

        Updates an existing quiz question for this quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_existing_quiz_question_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int quiz_id: The associated quiz's unique identifier. (required)
        :param int id: The quiz question's unique identifier. (required)
        :param str question_question_name: The name of the question.
        :param str question_question_text: The text of the question.
        :param int question_quiz_group_id: The id of the quiz group to assign the question to.
        :param str question_question_type: The type of question. Multiple optional fields depend upon the type of question to be used.
        :param int question_position: The order in which the question will be displayed in the quiz in relation to other questions.
        :param int question_points_possible: The maximum amount of points received for answering this question correctly.
        :param str question_correct_comments: The comment to display if the student answers the question correctly.
        :param str question_incorrect_comments: The comment to display if the student answers incorrectly.
        :param str question_neutral_comments: The comment to display regardless of how the student answered.
        :param str question_text_after_answers: no description
        :param Object question_answers: no description
        :return: QuizQuestion
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id', 'question_question_name', 'question_question_text', 'question_quiz_group_id', 'question_question_type', 'question_position', 'question_points_possible', 'question_correct_comments', 'question_incorrect_comments', 'question_neutral_comments', 'question_text_after_answers', 'question_answers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_existing_quiz_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_existing_quiz_question`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `update_existing_quiz_question`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_existing_quiz_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'question_question_name' in params:
            form_params.append(('question[question_name]', params['question_question_name']))  # noqa: E501
        if 'question_question_text' in params:
            form_params.append(('question[question_text]', params['question_question_text']))  # noqa: E501
        if 'question_quiz_group_id' in params:
            form_params.append(('question[quiz_group_id]', params['question_quiz_group_id']))  # noqa: E501
        if 'question_question_type' in params:
            form_params.append(('question[question_type]', params['question_question_type']))  # noqa: E501
        if 'question_position' in params:
            form_params.append(('question[position]', params['question_position']))  # noqa: E501
        if 'question_points_possible' in params:
            form_params.append(('question[points_possible]', params['question_points_possible']))  # noqa: E501
        if 'question_correct_comments' in params:
            form_params.append(('question[correct_comments]', params['question_correct_comments']))  # noqa: E501
        if 'question_incorrect_comments' in params:
            form_params.append(('question[incorrect_comments]', params['question_incorrect_comments']))  # noqa: E501
        if 'question_neutral_comments' in params:
            form_params.append(('question[neutral_comments]', params['question_neutral_comments']))  # noqa: E501
        if 'question_text_after_answers' in params:
            form_params.append(('question[text_after_answers]', params['question_text_after_answers']))  # noqa: E501
        if 'question_answers' in params:
            form_params.append(('question[answers]', params['question_answers']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizQuestion',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
