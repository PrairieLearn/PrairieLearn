# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationPreferencesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_preference_communication_channel_id(self, user_id, communication_channel_id, notification, **kwargs):  # noqa: E501
        """Get a preference  # noqa: E501

        Fetch the preference for the given notification for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preference_communication_channel_id(user_id, communication_channel_id, notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :param str notification: ID (required)
        :return: NotificationPreference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_preference_communication_channel_id_with_http_info(user_id, communication_channel_id, notification, **kwargs)  # noqa: E501
        else:
            (data) = self.get_preference_communication_channel_id_with_http_info(user_id, communication_channel_id, notification, **kwargs)  # noqa: E501
            return data

    def get_preference_communication_channel_id_with_http_info(self, user_id, communication_channel_id, notification, **kwargs):  # noqa: E501
        """Get a preference  # noqa: E501

        Fetch the preference for the given notification for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preference_communication_channel_id_with_http_info(user_id, communication_channel_id, notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :param str notification: ID (required)
        :return: NotificationPreference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'communication_channel_id', 'notification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preference_communication_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_preference_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `get_preference_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `get_preference_communication_channel_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501
        if 'notification' in params:
            path_params['notification'] = params['notification']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationPreference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_preference_type(self, user_id, type, address, notification, **kwargs):  # noqa: E501
        """Get a preference  # noqa: E501

        Fetch the preference for the given notification for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preference_type(user_id, type, address, notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification: ID (required)
        :return: NotificationPreference
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_preference_type_with_http_info(user_id, type, address, notification, **kwargs)  # noqa: E501
        else:
            (data) = self.get_preference_type_with_http_info(user_id, type, address, notification, **kwargs)  # noqa: E501
            return data

    def get_preference_type_with_http_info(self, user_id, type, address, notification, **kwargs):  # noqa: E501
        """Get a preference  # noqa: E501

        Fetch the preference for the given notification for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_preference_type_with_http_info(user_id, type, address, notification, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification: ID (required)
        :return: NotificationPreference
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'address', 'notification']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_preference_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_preference_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `get_preference_type`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `get_preference_type`")  # noqa: E501
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `get_preference_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501
        if 'notification' in params:
            path_params['notification'] = params['notification']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NotificationPreference',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_of_preference_categories(self, user_id, communication_channel_id, **kwargs):  # noqa: E501
        """List of preference categories  # noqa: E501

        Fetch all notification preference categories for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_of_preference_categories(user_id, communication_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_of_preference_categories_with_http_info(user_id, communication_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_of_preference_categories_with_http_info(user_id, communication_channel_id, **kwargs)  # noqa: E501
            return data

    def list_of_preference_categories_with_http_info(self, user_id, communication_channel_id, **kwargs):  # noqa: E501
        """List of preference categories  # noqa: E501

        Fetch all notification preference categories for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_of_preference_categories_with_http_info(user_id, communication_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'communication_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_of_preference_categories" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_of_preference_categories`")  # noqa: E501
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `list_of_preference_categories`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_preferences_communication_channel_id(self, user_id, communication_channel_id, **kwargs):  # noqa: E501
        """List preferences  # noqa: E501

        Fetch all preferences for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_preferences_communication_channel_id(user_id, communication_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :return: list[NotificationPreference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_preferences_communication_channel_id_with_http_info(user_id, communication_channel_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_preferences_communication_channel_id_with_http_info(user_id, communication_channel_id, **kwargs)  # noqa: E501
            return data

    def list_preferences_communication_channel_id_with_http_info(self, user_id, communication_channel_id, **kwargs):  # noqa: E501
        """List preferences  # noqa: E501

        Fetch all preferences for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_preferences_communication_channel_id_with_http_info(user_id, communication_channel_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_id: ID (required)
        :return: list[NotificationPreference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'communication_channel_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_preferences_communication_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_preferences_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `list_preferences_communication_channel_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NotificationPreference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_preferences_type(self, user_id, type, address, **kwargs):  # noqa: E501
        """List preferences  # noqa: E501

        Fetch all preferences for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_preferences_type(user_id, type, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :return: list[NotificationPreference]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_preferences_type_with_http_info(user_id, type, address, **kwargs)  # noqa: E501
        else:
            (data) = self.list_preferences_type_with_http_info(user_id, type, address, **kwargs)  # noqa: E501
            return data

    def list_preferences_type_with_http_info(self, user_id, type, address, **kwargs):  # noqa: E501
        """List preferences  # noqa: E501

        Fetch all preferences for the given communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_preferences_type_with_http_info(user_id, type, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :return: list[NotificationPreference]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_preferences_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_preferences_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `list_preferences_type`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `list_preferences_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NotificationPreference]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_multiple_preferences_communication_channel_id(self, communication_channel_id, notification_preferences_x_frequency, **kwargs):  # noqa: E501
        """Update multiple preferences  # noqa: E501

        Change the preferences for multiple notifications for a single communication channel at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_preferences_communication_channel_id(communication_channel_id, notification_preferences_x_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str notification_preferences_x_frequency: The desired frequency for <X> notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_multiple_preferences_communication_channel_id_with_http_info(communication_channel_id, notification_preferences_x_frequency, **kwargs)  # noqa: E501
        else:
            (data) = self.update_multiple_preferences_communication_channel_id_with_http_info(communication_channel_id, notification_preferences_x_frequency, **kwargs)  # noqa: E501
            return data

    def update_multiple_preferences_communication_channel_id_with_http_info(self, communication_channel_id, notification_preferences_x_frequency, **kwargs):  # noqa: E501
        """Update multiple preferences  # noqa: E501

        Change the preferences for multiple notifications for a single communication channel at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_preferences_communication_channel_id_with_http_info(communication_channel_id, notification_preferences_x_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str notification_preferences_x_frequency: The desired frequency for <X> notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['communication_channel_id', 'notification_preferences_x_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_multiple_preferences_communication_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `update_multiple_preferences_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'notification_preferences_x_frequency' is set
        if self.api_client.client_side_validation and ('notification_preferences_x_frequency' not in params or
                                                       params['notification_preferences_x_frequency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_preferences_x_frequency` when calling `update_multiple_preferences_communication_channel_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_preferences_x_frequency' in params:
            form_params.append(('notification_preferences[&lt;X&gt;][frequency]', params['notification_preferences_x_frequency']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_multiple_preferences_type(self, type, address, notification_preferences_x_frequency, **kwargs):  # noqa: E501
        """Update multiple preferences  # noqa: E501

        Change the preferences for multiple notifications for a single communication channel at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_preferences_type(type, address, notification_preferences_x_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification_preferences_x_frequency: The desired frequency for <X> notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_multiple_preferences_type_with_http_info(type, address, notification_preferences_x_frequency, **kwargs)  # noqa: E501
        else:
            (data) = self.update_multiple_preferences_type_with_http_info(type, address, notification_preferences_x_frequency, **kwargs)  # noqa: E501
            return data

    def update_multiple_preferences_type_with_http_info(self, type, address, notification_preferences_x_frequency, **kwargs):  # noqa: E501
        """Update multiple preferences  # noqa: E501

        Change the preferences for multiple notifications for a single communication channel at once  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_multiple_preferences_type_with_http_info(type, address, notification_preferences_x_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification_preferences_x_frequency: The desired frequency for <X> notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'address', 'notification_preferences_x_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_multiple_preferences_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `update_multiple_preferences_type`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `update_multiple_preferences_type`")  # noqa: E501
        # verify the required parameter 'notification_preferences_x_frequency' is set
        if self.api_client.client_side_validation and ('notification_preferences_x_frequency' not in params or
                                                       params['notification_preferences_x_frequency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_preferences_x_frequency` when calling `update_multiple_preferences_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_preferences_x_frequency' in params:
            form_params.append(('notification_preferences[&lt;X&gt;][frequency]', params['notification_preferences_x_frequency']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/{type}/{address}/notification_preferences', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_preference_communication_channel_id(self, communication_channel_id, notification, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update a preference  # noqa: E501

        Change the preference for a single notification for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preference_communication_channel_id(communication_channel_id, notification, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str notification: ID (required)
        :param str notification_preferences_frequency: The desired frequency for this notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_preference_communication_channel_id_with_http_info(communication_channel_id, notification, notification_preferences_frequency, **kwargs)  # noqa: E501
        else:
            (data) = self.update_preference_communication_channel_id_with_http_info(communication_channel_id, notification, notification_preferences_frequency, **kwargs)  # noqa: E501
            return data

    def update_preference_communication_channel_id_with_http_info(self, communication_channel_id, notification, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update a preference  # noqa: E501

        Change the preference for a single notification for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preference_communication_channel_id_with_http_info(communication_channel_id, notification, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str notification: ID (required)
        :param str notification_preferences_frequency: The desired frequency for this notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['communication_channel_id', 'notification', 'notification_preferences_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_preference_communication_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `update_preference_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `update_preference_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'notification_preferences_frequency' is set
        if self.api_client.client_side_validation and ('notification_preferences_frequency' not in params or
                                                       params['notification_preferences_frequency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_preferences_frequency` when calling `update_preference_communication_channel_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501
        if 'notification' in params:
            path_params['notification'] = params['notification']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_preferences_frequency' in params:
            form_params.append(('notification_preferences[frequency]', params['notification_preferences_frequency']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_preference_type(self, type, address, notification, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update a preference  # noqa: E501

        Change the preference for a single notification for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preference_type(type, address, notification, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification: ID (required)
        :param str notification_preferences_frequency: The desired frequency for this notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_preference_type_with_http_info(type, address, notification, notification_preferences_frequency, **kwargs)  # noqa: E501
        else:
            (data) = self.update_preference_type_with_http_info(type, address, notification, notification_preferences_frequency, **kwargs)  # noqa: E501
            return data

    def update_preference_type_with_http_info(self, type, address, notification, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update a preference  # noqa: E501

        Change the preference for a single notification for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preference_type_with_http_info(type, address, notification, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str type: ID (required)
        :param str address: ID (required)
        :param str notification: ID (required)
        :param str notification_preferences_frequency: The desired frequency for this notification (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'address', 'notification', 'notification_preferences_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_preference_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `update_preference_type`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `update_preference_type`")  # noqa: E501
        # verify the required parameter 'notification' is set
        if self.api_client.client_side_validation and ('notification' not in params or
                                                       params['notification'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification` when calling `update_preference_type`")  # noqa: E501
        # verify the required parameter 'notification_preferences_frequency' is set
        if self.api_client.client_side_validation and ('notification_preferences_frequency' not in params or
                                                       params['notification_preferences_frequency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_preferences_frequency` when calling `update_preference_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501
        if 'notification' in params:
            path_params['notification'] = params['notification']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_preferences_frequency' in params:
            form_params.append(('notification_preferences[frequency]', params['notification_preferences_frequency']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_preferences_by_category(self, communication_channel_id, category, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update preferences by category  # noqa: E501

        Change the preferences for multiple notifications based on the category for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preferences_by_category(communication_channel_id, category, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str category: The name of the category. Must be parameterized (e.g. The category \"Course Content\" should be \"course_content\") (required)
        :param str notification_preferences_frequency: The desired frequency for each notification in the category (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_preferences_by_category_with_http_info(communication_channel_id, category, notification_preferences_frequency, **kwargs)  # noqa: E501
        else:
            (data) = self.update_preferences_by_category_with_http_info(communication_channel_id, category, notification_preferences_frequency, **kwargs)  # noqa: E501
            return data

    def update_preferences_by_category_with_http_info(self, communication_channel_id, category, notification_preferences_frequency, **kwargs):  # noqa: E501
        """Update preferences by category  # noqa: E501

        Change the preferences for multiple notifications based on the category for a single communication channel  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_preferences_by_category_with_http_info(communication_channel_id, category, notification_preferences_frequency, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str communication_channel_id: ID (required)
        :param str category: The name of the category. Must be parameterized (e.g. The category \"Course Content\" should be \"course_content\") (required)
        :param str notification_preferences_frequency: The desired frequency for each notification in the category (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['communication_channel_id', 'category', 'notification_preferences_frequency']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_preferences_by_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'communication_channel_id' is set
        if self.api_client.client_side_validation and ('communication_channel_id' not in params or
                                                       params['communication_channel_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_id` when calling `update_preferences_by_category`")  # noqa: E501
        # verify the required parameter 'category' is set
        if self.api_client.client_side_validation and ('category' not in params or
                                                       params['category'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `category` when calling `update_preferences_by_category`")  # noqa: E501
        # verify the required parameter 'notification_preferences_frequency' is set
        if self.api_client.client_side_validation and ('notification_preferences_frequency' not in params or
                                                       params['notification_preferences_frequency'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `notification_preferences_frequency` when calling `update_preferences_by_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'communication_channel_id' in params:
            path_params['communication_channel_id'] = params['communication_channel_id']  # noqa: E501
        if 'category' in params:
            path_params['category'] = params['category']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'notification_preferences_frequency' in params:
            form_params.append(('notification_preferences[frequency]', params['notification_preferences_frequency']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
