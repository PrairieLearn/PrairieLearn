# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MediaObjectsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_media_objects_courses_media_attachments(self, course_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_courses_media_attachments(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_courses_media_attachments_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_courses_media_attachments_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_media_objects_courses_media_attachments_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_courses_media_attachments_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_courses_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_media_objects_courses_media_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/media_attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_objects_courses_media_objects(self, course_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_courses_media_objects(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_courses_media_objects_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_courses_media_objects_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_media_objects_courses_media_objects_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_courses_media_objects_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_courses_media_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_media_objects_courses_media_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/media_objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_objects_groups_media_attachments(self, group_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_groups_media_attachments(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_groups_media_attachments_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_groups_media_attachments_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def list_media_objects_groups_media_attachments_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_groups_media_attachments_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_groups_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `list_media_objects_groups_media_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/media_attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_objects_groups_media_objects(self, group_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_groups_media_objects(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_groups_media_objects_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_groups_media_objects_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def list_media_objects_groups_media_objects_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_groups_media_objects_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_groups_media_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `list_media_objects_groups_media_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/media_objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_objects_media_attachments(self, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_media_attachments(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_media_attachments_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_media_attachments_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_media_objects_media_attachments_with_http_info(self, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_media_attachments_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_objects_media_objects(self, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_media_objects(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_objects_media_objects_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_media_objects_media_objects_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_media_objects_media_objects_with_http_info(self, **kwargs):  # noqa: E501
        """List Media Objects  # noqa: E501

        Returns media objects created by the user making the request. When using the second version, returns media objects associated with the given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_objects_media_objects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sort: Field to sort on. Default is \"title\"  title:: sorts on user_entered_title if available, title if not.  created_at:: sorts on the object's creation time.
        :param str order: Sort direction. Default is \"asc\"
        :param list[str] exclude: Array of data to exclude. By excluding \"sources\" and \"tracks\", the api will not need to query kaltura, which greatly speeds up its response.  sources:: Do not query kaltura for media_sources tracks:: Do not query kaltura for media_tracks
        :return: list[MediaObject]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sort', 'order', 'exclude']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_objects_media_objects" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_objects', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaObject]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_tracks_for_media_object_or_attachment_media_attachments(self, attachment_id, **kwargs):  # noqa: E501
        """List media tracks for a Media Object or Attachment  # noqa: E501

        List the media tracks associated with a media object or attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_tracks_for_media_object_or_attachment_media_attachments(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param list[str] include: By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_tracks_for_media_object_or_attachment_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_tracks_for_media_object_or_attachment_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
            return data

    def list_media_tracks_for_media_object_or_attachment_media_attachments_with_http_info(self, attachment_id, **kwargs):  # noqa: E501
        """List media tracks for a Media Object or Attachment  # noqa: E501

        List the media tracks associated with a media object or attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_tracks_for_media_object_or_attachment_media_attachments_with_http_info(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param list[str] include: By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attachment_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_tracks_for_media_object_or_attachment_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `list_media_tracks_for_media_object_or_attachment_media_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_attachments/{attachment_id}/media_tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaTrack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_media_tracks_for_media_object_or_attachment_media_objects(self, media_object_id, **kwargs):  # noqa: E501
        """List media tracks for a Media Object or Attachment  # noqa: E501

        List the media tracks associated with a media object or attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_tracks_for_media_object_or_attachment_media_objects(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param list[str] include: By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_media_tracks_for_media_object_or_attachment_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_media_tracks_for_media_object_or_attachment_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
            return data

    def list_media_tracks_for_media_object_or_attachment_media_objects_with_http_info(self, media_object_id, **kwargs):  # noqa: E501
        """List media tracks for a Media Object or Attachment  # noqa: E501

        List the media tracks associated with a media object or attachment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_media_tracks_for_media_object_or_attachment_media_objects_with_http_info(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param list[str] include: By default, index returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_object_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_media_tracks_for_media_object_or_attachment_media_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_object_id' is set
        if self.api_client.client_side_validation and ('media_object_id' not in params or
                                                       params['media_object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_object_id` when calling `list_media_tracks_for_media_object_or_attachment_media_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_object_id' in params:
            path_params['media_object_id'] = params['media_object_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_objects/{media_object_id}/media_tracks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaTrack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_media_object_media_attachments(self, attachment_id, **kwargs):  # noqa: E501
        """Update Media Object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_object_media_attachments(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param str user_entered_title: The new title.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_media_object_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_media_object_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
            return data

    def update_media_object_media_attachments_with_http_info(self, attachment_id, **kwargs):  # noqa: E501
        """Update Media Object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_object_media_attachments_with_http_info(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param str user_entered_title: The new title.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attachment_id', 'user_entered_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_media_object_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `update_media_object_media_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_entered_title' in params:
            form_params.append(('user_entered_title', params['user_entered_title']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_attachments/{attachment_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_media_object_media_objects(self, media_object_id, **kwargs):  # noqa: E501
        """Update Media Object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_object_media_objects(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param str user_entered_title: The new title.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_media_object_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_media_object_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
            return data

    def update_media_object_media_objects_with_http_info(self, media_object_id, **kwargs):  # noqa: E501
        """Update Media Object  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_object_media_objects_with_http_info(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param str user_entered_title: The new title.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_object_id', 'user_entered_title']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_media_object_media_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_object_id' is set
        if self.api_client.client_side_validation and ('media_object_id' not in params or
                                                       params['media_object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_object_id` when calling `update_media_object_media_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_object_id' in params:
            path_params['media_object_id'] = params['media_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_entered_title' in params:
            form_params.append(('user_entered_title', params['user_entered_title']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_objects/{media_object_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_media_tracks_media_attachments(self, attachment_id, **kwargs):  # noqa: E501
        """Update Media Tracks  # noqa: E501

        Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_tracks_media_attachments(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param list[str] include: By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_media_tracks_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_media_tracks_media_attachments_with_http_info(attachment_id, **kwargs)  # noqa: E501
            return data

    def update_media_tracks_media_attachments_with_http_info(self, attachment_id, **kwargs):  # noqa: E501
        """Update Media Tracks  # noqa: E501

        Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_tracks_media_attachments_with_http_info(attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attachment_id: ID (required)
        :param list[str] include: By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attachment_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_media_tracks_media_attachments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `update_media_tracks_media_attachments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'include' in params:
            form_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_attachments/{attachment_id}/media_tracks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaTrack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_media_tracks_media_objects(self, media_object_id, **kwargs):  # noqa: E501
        """Update Media Tracks  # noqa: E501

        Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_tracks_media_objects(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param list[str] include: By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_media_tracks_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_media_tracks_media_objects_with_http_info(media_object_id, **kwargs)  # noqa: E501
            return data

    def update_media_tracks_media_objects_with_http_info(self, media_object_id, **kwargs):  # noqa: E501
        """Update Media Tracks  # noqa: E501

        Replace the media tracks associated with a media object or attachment with the array of tracks provided in the body. Update will delete any existing tracks not listed, leave untouched any tracks with no content field, and update or create tracks with a content field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_media_tracks_media_objects_with_http_info(media_object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str media_object_id: ID (required)
        :param list[str] include: By default, an update returns id, locale, kind, media_object_id, and user_id for each of the result MediaTracks. Use include[] to add additional fields. For example include[]=content
        :return: list[MediaTrack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['media_object_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_media_tracks_media_objects" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'media_object_id' is set
        if self.api_client.client_side_validation and ('media_object_id' not in params or
                                                       params['media_object_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `media_object_id` when calling `update_media_tracks_media_objects`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'media_object_id' in params:
            path_params['media_object_id'] = params['media_object_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'include' in params:
            form_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/media_objects/{media_object_id}/media_tracks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MediaTrack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
