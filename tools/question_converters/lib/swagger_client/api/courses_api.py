# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CoursesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_course_content(self, course_id, **kwargs):  # noqa: E501
        """Copy course content  # noqa: E501

        DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the 'except' option or the 'only' option.  The response is the same as the course copy status endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_course_content(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str source_course: ID or SIS-ID of the course to copy the content from
        :param list[str] _except: A list of the course content types to exclude, all areas not listed will be copied.
        :param list[str] only: A list of the course content types to copy, all areas not listed will not be copied.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.copy_course_content_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.copy_course_content_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def copy_course_content_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Copy course content  # noqa: E501

        DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Copies content from one course into another. The default is to copy all course content. You can control specific types to copy by using either the 'except' option or the 'only' option.  The response is the same as the course copy status endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_course_content_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str source_course: ID or SIS-ID of the course to copy the content from
        :param list[str] _except: A list of the course content types to exclude, all areas not listed will be copied.
        :param list[str] only: A list of the course content types to copy, all areas not listed will not be copied.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'source_course', '_except', 'only']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_course_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `copy_course_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_course' in params:
            form_params.append(('source_course', params['source_course']))  # noqa: E501
        if '_except' in params:
            form_params.append(('except', params['_except']))  # noqa: E501
            collection_formats['except'] = 'csv'  # noqa: E501
        if 'only' in params:
            form_params.append(('only', params['only']))  # noqa: E501
            collection_formats['only'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def course_activity_stream(self, course_id, **kwargs):  # noqa: E501
        """Course activity stream  # noqa: E501

        Returns the current user's course-specific activity stream, paginated.  For full documentation, see the API documentation for the user activity stream, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_activity_stream(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.course_activity_stream_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.course_activity_stream_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def course_activity_stream_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Course activity stream  # noqa: E501

        Returns the current user's course-specific activity stream, paginated.  For full documentation, see the API documentation for the user activity stream, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_activity_stream_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method course_activity_stream" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `course_activity_stream`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/activity_stream', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def course_activity_stream_summary(self, course_id, **kwargs):  # noqa: E501
        """Course activity stream summary  # noqa: E501

        Returns a summary of the current user's course-specific activity stream.  For full documentation, see the API documentation for the user activity stream summary, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_activity_stream_summary(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.course_activity_stream_summary_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.course_activity_stream_summary_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def course_activity_stream_summary_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Course activity stream summary  # noqa: E501

        Returns a summary of the current user's course-specific activity stream.  For full documentation, see the API documentation for the user activity stream summary, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_activity_stream_summary_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method course_activity_stream_summary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `course_activity_stream_summary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/activity_stream/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def course_todo_items(self, course_id, **kwargs):  # noqa: E501
        """Course TODO items  # noqa: E501

        Returns the current user's course-specific todo items.  For full documentation, see the API documentation for the user todo items, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_todo_items(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.course_todo_items_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.course_todo_items_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def course_todo_items_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Course TODO items  # noqa: E501

        Returns the current user's course-specific todo items.  For full documentation, see the API documentation for the user todo items, in the user api.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.course_todo_items_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method course_todo_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `course_todo_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/todo', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_course(self, account_id, **kwargs):  # noqa: E501
        """Create a new course  # noqa: E501

        Create a new course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_course(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str course_name: The name of the course. If omitted, the course will be named \"Unnamed Course.\"
        :param str course_course_code: The course code for the course.
        :param Object course_start_at: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param Object course_end_at: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param str course_license: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).
        :param bool course_is_public: Set to true if course is public to both authenticated and unauthenticated users.
        :param bool course_is_public_to_auth_users: Set to true if course is public only to authenticated users.
        :param bool course_public_syllabus: Set to true to make the course syllabus public.
        :param bool course_public_syllabus_to_auth: Set to true to make the course syllabus public for authenticated users.
        :param str course_public_description: A publicly visible description of the course.
        :param bool course_allow_student_wiki_edits: If true, students will be able to modify the course wiki.
        :param bool course_allow_wiki_comments: If true, course members will be able to comment on wiki pages.
        :param bool course_allow_student_forum_attachments: If true, students can attach files to forum posts.
        :param bool course_open_enrollment: Set to true if the course is open enrollment.
        :param bool course_self_enrollment: Set to true if the course is self enrollment.
        :param bool course_restrict_enrollments_to_course_dates: Set to true to restrict user enrollments to the start and end dates of the course. This value must be set to true in order to specify a course start date and/or end date.
        :param str course_term_id: The unique ID of the term to create to course in.
        :param str course_sis_course_id: The unique SIS identifier.
        :param str course_integration_id: The unique Integration identifier.
        :param bool course_hide_final_grades: If this option is set to true, the totals in student grades summary will be hidden.
        :param bool course_apply_assignment_group_weights: Set to true to weight final grade based on assignment groups percentages.
        :param str course_time_zone: The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
        :param bool offer: If this option is set to true, the course will be available to students immediately.
        :param bool enroll_me: Set to true to enroll the current user as the teacher.
        :param str course_default_view: The type of page that users will see when they first visit the course * 'feed' Recent Activity Dashboard * 'modules' Course Modules/Sections Page * 'assignments' Course Assignments List * 'syllabus' Course Syllabus Page other types may be added in the future
        :param str course_syllabus_body: The syllabus body for the course
        :param int course_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
        :param str course_grade_passback_setting: Optional. The grade_passback_setting for the course. Only 'nightly_sync', 'disabled', and '' are allowed
        :param str course_course_format: Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')
        :param bool enable_sis_reactivation: When true, will first try to re-activate a deleted course with matching sis_course_id if possible.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_course_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_course_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def create_new_course_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Create a new course  # noqa: E501

        Create a new course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_course_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str course_name: The name of the course. If omitted, the course will be named \"Unnamed Course.\"
        :param str course_course_code: The course code for the course.
        :param Object course_start_at: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param Object course_end_at: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param str course_license: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).
        :param bool course_is_public: Set to true if course is public to both authenticated and unauthenticated users.
        :param bool course_is_public_to_auth_users: Set to true if course is public only to authenticated users.
        :param bool course_public_syllabus: Set to true to make the course syllabus public.
        :param bool course_public_syllabus_to_auth: Set to true to make the course syllabus public for authenticated users.
        :param str course_public_description: A publicly visible description of the course.
        :param bool course_allow_student_wiki_edits: If true, students will be able to modify the course wiki.
        :param bool course_allow_wiki_comments: If true, course members will be able to comment on wiki pages.
        :param bool course_allow_student_forum_attachments: If true, students can attach files to forum posts.
        :param bool course_open_enrollment: Set to true if the course is open enrollment.
        :param bool course_self_enrollment: Set to true if the course is self enrollment.
        :param bool course_restrict_enrollments_to_course_dates: Set to true to restrict user enrollments to the start and end dates of the course. This value must be set to true in order to specify a course start date and/or end date.
        :param str course_term_id: The unique ID of the term to create to course in.
        :param str course_sis_course_id: The unique SIS identifier.
        :param str course_integration_id: The unique Integration identifier.
        :param bool course_hide_final_grades: If this option is set to true, the totals in student grades summary will be hidden.
        :param bool course_apply_assignment_group_weights: Set to true to weight final grade based on assignment groups percentages.
        :param str course_time_zone: The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
        :param bool offer: If this option is set to true, the course will be available to students immediately.
        :param bool enroll_me: Set to true to enroll the current user as the teacher.
        :param str course_default_view: The type of page that users will see when they first visit the course * 'feed' Recent Activity Dashboard * 'modules' Course Modules/Sections Page * 'assignments' Course Assignments List * 'syllabus' Course Syllabus Page other types may be added in the future
        :param str course_syllabus_body: The syllabus body for the course
        :param int course_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
        :param str course_grade_passback_setting: Optional. The grade_passback_setting for the course. Only 'nightly_sync', 'disabled', and '' are allowed
        :param str course_course_format: Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')
        :param bool enable_sis_reactivation: When true, will first try to re-activate a deleted course with matching sis_course_id if possible.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'course_name', 'course_course_code', 'course_start_at', 'course_end_at', 'course_license', 'course_is_public', 'course_is_public_to_auth_users', 'course_public_syllabus', 'course_public_syllabus_to_auth', 'course_public_description', 'course_allow_student_wiki_edits', 'course_allow_wiki_comments', 'course_allow_student_forum_attachments', 'course_open_enrollment', 'course_self_enrollment', 'course_restrict_enrollments_to_course_dates', 'course_term_id', 'course_sis_course_id', 'course_integration_id', 'course_hide_final_grades', 'course_apply_assignment_group_weights', 'course_time_zone', 'offer', 'enroll_me', 'course_default_view', 'course_syllabus_body', 'course_grading_standard_id', 'course_grade_passback_setting', 'course_course_format', 'enable_sis_reactivation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_new_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_name' in params:
            form_params.append(('course[name]', params['course_name']))  # noqa: E501
        if 'course_course_code' in params:
            form_params.append(('course[course_code]', params['course_course_code']))  # noqa: E501
        if 'course_start_at' in params:
            form_params.append(('course[start_at]', params['course_start_at']))  # noqa: E501
        if 'course_end_at' in params:
            form_params.append(('course[end_at]', params['course_end_at']))  # noqa: E501
        if 'course_license' in params:
            form_params.append(('course[license]', params['course_license']))  # noqa: E501
        if 'course_is_public' in params:
            form_params.append(('course[is_public]', params['course_is_public']))  # noqa: E501
        if 'course_is_public_to_auth_users' in params:
            form_params.append(('course[is_public_to_auth_users]', params['course_is_public_to_auth_users']))  # noqa: E501
        if 'course_public_syllabus' in params:
            form_params.append(('course[public_syllabus]', params['course_public_syllabus']))  # noqa: E501
        if 'course_public_syllabus_to_auth' in params:
            form_params.append(('course[public_syllabus_to_auth]', params['course_public_syllabus_to_auth']))  # noqa: E501
        if 'course_public_description' in params:
            form_params.append(('course[public_description]', params['course_public_description']))  # noqa: E501
        if 'course_allow_student_wiki_edits' in params:
            form_params.append(('course[allow_student_wiki_edits]', params['course_allow_student_wiki_edits']))  # noqa: E501
        if 'course_allow_wiki_comments' in params:
            form_params.append(('course[allow_wiki_comments]', params['course_allow_wiki_comments']))  # noqa: E501
        if 'course_allow_student_forum_attachments' in params:
            form_params.append(('course[allow_student_forum_attachments]', params['course_allow_student_forum_attachments']))  # noqa: E501
        if 'course_open_enrollment' in params:
            form_params.append(('course[open_enrollment]', params['course_open_enrollment']))  # noqa: E501
        if 'course_self_enrollment' in params:
            form_params.append(('course[self_enrollment]', params['course_self_enrollment']))  # noqa: E501
        if 'course_restrict_enrollments_to_course_dates' in params:
            form_params.append(('course[restrict_enrollments_to_course_dates]', params['course_restrict_enrollments_to_course_dates']))  # noqa: E501
        if 'course_term_id' in params:
            form_params.append(('course[term_id]', params['course_term_id']))  # noqa: E501
        if 'course_sis_course_id' in params:
            form_params.append(('course[sis_course_id]', params['course_sis_course_id']))  # noqa: E501
        if 'course_integration_id' in params:
            form_params.append(('course[integration_id]', params['course_integration_id']))  # noqa: E501
        if 'course_hide_final_grades' in params:
            form_params.append(('course[hide_final_grades]', params['course_hide_final_grades']))  # noqa: E501
        if 'course_apply_assignment_group_weights' in params:
            form_params.append(('course[apply_assignment_group_weights]', params['course_apply_assignment_group_weights']))  # noqa: E501
        if 'course_time_zone' in params:
            form_params.append(('course[time_zone]', params['course_time_zone']))  # noqa: E501
        if 'offer' in params:
            form_params.append(('offer', params['offer']))  # noqa: E501
        if 'enroll_me' in params:
            form_params.append(('enroll_me', params['enroll_me']))  # noqa: E501
        if 'course_default_view' in params:
            form_params.append(('course[default_view]', params['course_default_view']))  # noqa: E501
        if 'course_syllabus_body' in params:
            form_params.append(('course[syllabus_body]', params['course_syllabus_body']))  # noqa: E501
        if 'course_grading_standard_id' in params:
            form_params.append(('course[grading_standard_id]', params['course_grading_standard_id']))  # noqa: E501
        if 'course_grade_passback_setting' in params:
            form_params.append(('course[grade_passback_setting]', params['course_grade_passback_setting']))  # noqa: E501
        if 'course_course_format' in params:
            form_params.append(('course[course_format]', params['course_course_format']))  # noqa: E501
        if 'enable_sis_reactivation' in params:
            form_params.append(('enable_sis_reactivation', params['enable_sis_reactivation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/courses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Course',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_conclude_course(self, id, event, **kwargs):  # noqa: E501
        """Delete/Conclude a course  # noqa: E501

        Delete or conclude an existing course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_conclude_course(id, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str event: The action to take on the course. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_conclude_course_with_http_info(id, event, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_conclude_course_with_http_info(id, event, **kwargs)  # noqa: E501
            return data

    def delete_conclude_course_with_http_info(self, id, event, **kwargs):  # noqa: E501
        """Delete/Conclude a course  # noqa: E501

        Delete or conclude an existing course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_conclude_course_with_http_info(id, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str event: The action to take on the course. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'event']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_conclude_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_conclude_course`")  # noqa: E501
        # verify the required parameter 'event' is set
        if self.api_client.client_side_validation and ('event' not in params or
                                                       params['event'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event` when calling `delete_conclude_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bulk_user_progress(self, course_id, **kwargs):  # noqa: E501
        """Get bulk user progress  # noqa: E501

        Returns progress information for all users enrolled in the given course.  You must be a user who has permission to view all grades in the course (such as a teacher or administrator).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_user_progress(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_bulk_user_progress_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bulk_user_progress_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_bulk_user_progress_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get bulk user progress  # noqa: E501

        Returns progress information for all users enrolled in the given course.  You must be a user who has permission to view all grades in the course (such as a teacher or administrator).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_bulk_user_progress_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bulk_user_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_bulk_user_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/bulk_user_progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_course_copy_status(self, course_id, id, **kwargs):  # noqa: E501
        """Get course copy status  # noqa: E501

        DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Retrieve the status of a course copy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_copy_status(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_course_copy_status_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_course_copy_status_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_course_copy_status_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get course copy status  # noqa: E501

        DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}  Retrieve the status of a course copy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_copy_status_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_course_copy_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_course_copy_status`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_course_copy_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_copy/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_course_settings(self, course_id, **kwargs):  # noqa: E501
        """Get course settings  # noqa: E501

        Returns some of a course's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_settings(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_course_settings_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_course_settings_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_course_settings_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get course settings  # noqa: E501

        Returns some of a course's settings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_course_settings_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_course_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_course_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_effective_due_dates(self, course_id, **kwargs):  # noqa: E501
        """Get effective due dates  # noqa: E501

        For each assignment in the course, returns each assigned student's ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student's effective due_at, the grading_period_id of which the due_at falls in, and whether or not the grading period is closed (in_closed_grading_period)  The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_effective_due_dates(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_effective_due_dates_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_effective_due_dates_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_effective_due_dates_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get effective due dates  # noqa: E501

        For each assignment in the course, returns each assigned student's ID and their corresponding due date along with some grading period data. Returns a collection with keys representing assignment IDs and values as a collection containing keys representing student IDs and values representing the student's effective due_at, the grading_period_id of which the due_at falls in, and whether or not the grading period is closed (in_closed_grading_period)  The list of assignment IDs for which effective student due dates are requested. If not provided, all assignments in the course will be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_effective_due_dates_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_effective_due_dates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_effective_due_dates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/effective_due_dates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_course_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get a single course  # noqa: E501

        Return information on a single course.  Accepts the same include[] parameters as the list action plus:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_course_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: - \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has   for the course. - \"observed_users\": Include observed users in the enrollments - \"course_image\": Include course image url if a course image has been set - \"banner_image\": Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \"concluded\": Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"lti_context_id\": Include course LTI tool id. - \"post_manually\": Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
        :param int teacher_limit: The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_course_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_course_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_course_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get a single course  # noqa: E501

        Return information on a single course.  Accepts the same include[] parameters as the list action plus:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_course_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: - \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has   for the course. - \"observed_users\": Include observed users in the enrollments - \"course_image\": Include course image url if a course image has been set - \"banner_image\": Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \"concluded\": Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"lti_context_id\": Include course LTI tool id. - \"post_manually\": Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
        :param int teacher_limit: The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'include', 'teacher_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_course_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_single_course_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_course_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'teacher_limit' in params:
            query_params.append(('teacher_limit', params['teacher_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/courses/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Course',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_course_courses(self, id, **kwargs):  # noqa: E501
        """Get a single course  # noqa: E501

        Return information on a single course.  Accepts the same include[] parameters as the list action plus:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_course_courses(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param list[str] include: - \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has   for the course. - \"observed_users\": Include observed users in the enrollments - \"course_image\": Include course image url if a course image has been set - \"banner_image\": Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \"concluded\": Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"lti_context_id\": Include course LTI tool id. - \"post_manually\": Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
        :param int teacher_limit: The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_course_courses_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_course_courses_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_single_course_courses_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a single course  # noqa: E501

        Return information on a single course.  Accepts the same include[] parameters as the list action plus:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_course_courses_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param list[str] include: - \"all_courses\": Also search recently deleted courses. - \"permissions\": Include permissions the current user has   for the course. - \"observed_users\": Include observed users in the enrollments - \"course_image\": Include course image url if a course image has been set - \"banner_image\": Include course banner image url if the course is a Canvas for   Elementary subject and a banner image has been set - \"concluded\": Optional information to include with Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"lti_context_id\": Include course LTI tool id. - \"post_manually\": Include course post policy. If the post policy is manually post grades,   the value will be true. If the post policy is automatically post grades, the value will be false.
        :param int teacher_limit: The maximum number of teacher enrollments to show. If the course contains more teachers than this, instead of giving the teacher enrollments, the count of teachers will be given under a _teacher_count_ key.
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include', 'teacher_limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_course_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_course_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'teacher_limit' in params:
            query_params.append(('teacher_limit', params['teacher_limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Course',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_user(self, course_id, id, **kwargs):  # noqa: E501
        """Get single user  # noqa: E501

        Return information on a single user.  Accepts the same include[] parameters as the :users: action, and returns a single user with the same fields as that action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_user(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_user_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_user_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_user_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get single user  # noqa: E501

        Return information on a single user.  Accepts the same include[] parameters as the :users: action, and returns a single user with the same fields as that action.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_user_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_user`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/users/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user_progress(self, course_id, user_id, **kwargs):  # noqa: E501
        """Get user progress  # noqa: E501

        Return progress information for the user and course  You can supply +self+ as the user_id to query your own progress in a course. To query another user's progress, you must be a teacher in the course, an administrator, or a linked observer of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_progress(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :return: CourseProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_progress_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_progress_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_user_progress_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Get user progress  # noqa: E501

        Return progress information for the user and course  You can supply +self+ as the user_id to query your own progress in a course. To query another user's progress, you must be a teacher in the course, an administrator, or a linked observer of the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_progress_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :return: CourseProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user_progress" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_user_progress`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_user_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/users/{user_id}/progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CourseProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_courses_for_user(self, user_id, **kwargs):  # noqa: E501
        """List courses for a user  # noqa: E501

        Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_courses_for_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: - \"needs_grading_count\": Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \"syllabus_body\": Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \"public_description\": Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \"total_scores\": Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields 'computed_current_score', 'computed_final_score',   'computed_current_grade', and 'computed_final_grade' (see Enrollment   documentation for more information on these fields). This argument   is ignored if the course is configured to hide final grades. - \"current_grading_period_scores\": Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   'has_grading_periods',   'totals_for_all_grading_periods_option', 'current_grading_period_title',   'current_grading_period_id', current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade', and   'current_period_computed_final_grade', as well as (if the user has permission)   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a 'has_grading_periods' attribute   on it. This argument is ignored if the course is configured to hide final   grades or if the total_scores argument is not included. - \"grading_periods\": Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \"term\": Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \"account\": Optional information to include with each Course. When   account is given, the account json for each course is returned. - \"course_progress\": Optional information to include with each Course.   When course_progress is given, each course will include a   'course_progress' object with the fields: 'requirement_count', an integer   specifying the total number of requirements in the course,   'requirement_completed_count', an integer specifying the total number of   requirements in this course that have been completed, and   'next_requirement_url', a string url to the next requirement item, and   'completed_at', the date the course was completed (null if incomplete).   'next_requirement_url' will be null if all requirements have been   completed or the current module does not require sequential progress.   \"course_progress\" will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \"sections\": Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. 'StudentEnrollment'). - \"storage_quota_used_mb\": The amount of storage space used by the files in this course - \"total_students\": Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \"passback_status\": Include the grade passback_status - \"favorites\": Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \"teachers\": Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \"observed_users\": Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \"tabs\": Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \"course_image\": Optional information to include with each Course. Returns course   image url if a course image has been set. - \"banner_image\": Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \"concluded\": Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"post_manually\": Optional information to include with each Course. Returns true if   the course post policy is set to \"Manually\". Returns false if the the course post   policy is set to \"Automatically\".
        :param list[str] state: If set, only return courses that are in the given state(s). By default, \"available\" is returned for students and observers, and anything except \"deleted\", for all other enrollment types
        :param str enrollment_state: When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
        :param bool homeroom: If set, only return homeroom courses.
        :param str account_id: If set, only include courses associated with this account
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_courses_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_courses_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_courses_for_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List courses for a user  # noqa: E501

        Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_courses_for_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: - \"needs_grading_count\": Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \"syllabus_body\": Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \"public_description\": Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \"total_scores\": Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields 'computed_current_score', 'computed_final_score',   'computed_current_grade', and 'computed_final_grade' (see Enrollment   documentation for more information on these fields). This argument   is ignored if the course is configured to hide final grades. - \"current_grading_period_scores\": Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   'has_grading_periods',   'totals_for_all_grading_periods_option', 'current_grading_period_title',   'current_grading_period_id', current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade', and   'current_period_computed_final_grade', as well as (if the user has permission)   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a 'has_grading_periods' attribute   on it. This argument is ignored if the course is configured to hide final   grades or if the total_scores argument is not included. - \"grading_periods\": Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \"term\": Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \"account\": Optional information to include with each Course. When   account is given, the account json for each course is returned. - \"course_progress\": Optional information to include with each Course.   When course_progress is given, each course will include a   'course_progress' object with the fields: 'requirement_count', an integer   specifying the total number of requirements in the course,   'requirement_completed_count', an integer specifying the total number of   requirements in this course that have been completed, and   'next_requirement_url', a string url to the next requirement item, and   'completed_at', the date the course was completed (null if incomplete).   'next_requirement_url' will be null if all requirements have been   completed or the current module does not require sequential progress.   \"course_progress\" will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \"sections\": Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. 'StudentEnrollment'). - \"storage_quota_used_mb\": The amount of storage space used by the files in this course - \"total_students\": Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \"passback_status\": Include the grade passback_status - \"favorites\": Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \"teachers\": Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \"observed_users\": Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \"tabs\": Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \"course_image\": Optional information to include with each Course. Returns course   image url if a course image has been set. - \"banner_image\": Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \"concluded\": Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"post_manually\": Optional information to include with each Course. Returns true if   the course post policy is set to \"Manually\". Returns false if the the course post   policy is set to \"Automatically\".
        :param list[str] state: If set, only return courses that are in the given state(s). By default, \"available\" is returned for students and observers, and anything except \"deleted\", for all other enrollment types
        :param str enrollment_state: When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
        :param bool homeroom: If set, only return homeroom courses.
        :param str account_id: If set, only include courses associated with this account
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'include', 'state', 'enrollment_state', 'homeroom', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_courses_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_courses_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
        if 'homeroom' in params:
            query_params.append(('homeroom', params['homeroom']))  # noqa: E501
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/courses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Course]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_recently_logged_in_students(self, course_id, **kwargs):  # noqa: E501
        """List recently logged in students  # noqa: E501

        Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the 'last_login' field which contains a timestamp of the last time that user logged into canvas.  The querying user must have the 'View usage reports' permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_recently_logged_in_students(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_recently_logged_in_students_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_recently_logged_in_students_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_recently_logged_in_students_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List recently logged in students  # noqa: E501

        Returns the paginated list of users in this course, ordered by how recently they have logged in. The records include the 'last_login' field which contains a timestamp of the last time that user logged into canvas.  The querying user must have the 'View usage reports' permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_recently_logged_in_students_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_recently_logged_in_students" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_recently_logged_in_students`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/recent_students', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_students(self, course_id, **kwargs):  # noqa: E501
        """List students  # noqa: E501

        Returns the paginated list of students enrolled in this course.  DEPRECATED: Please use the {api:CoursesController#users course users} endpoint and pass \"student\" as the enrollment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_students(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_students_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_students_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_students_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List students  # noqa: E501

        Returns the paginated list of students enrolled in this course.  DEPRECATED: Please use the {api:CoursesController#users course users} endpoint and pass \"student\" as the enrollment_type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_students_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_students" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_students`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/students', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_users_in_course_search_users(self, course_id, **kwargs):  # noqa: E501
        """List users in course  # noqa: E501

        Returns the paginated list of users in this course. And optionally the user's enrollments in the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_course_search_users(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list.
        :param str sort: When set, sort the results of the search based on the given field.
        :param list[str] enrollment_type: When set, only return users where the user is enrolled as this type. \"student_view\" implies include[]=test_student. This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param list[str] include: - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student. - \"custom_links\": Optionally include plugin-supplied custom links for each student, such as analytics information - \"current_grading_period_scores\": if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A 'grading_period_id' value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \"uuid\": Optionally include the users uuid
        :param str user_id: If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
        :param list[int] user_ids: If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \"user_id\" argument but multiple user_ids can be included.
        :param list[str] enrollment_state: When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_users_in_course_search_users_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_users_in_course_search_users_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_users_in_course_search_users_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List users in course  # noqa: E501

        Returns the paginated list of users in this course. And optionally the user's enrollments in the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_course_search_users_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list.
        :param str sort: When set, sort the results of the search based on the given field.
        :param list[str] enrollment_type: When set, only return users where the user is enrolled as this type. \"student_view\" implies include[]=test_student. This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param list[str] include: - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student. - \"custom_links\": Optionally include plugin-supplied custom links for each student, such as analytics information - \"current_grading_period_scores\": if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A 'grading_period_id' value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \"uuid\": Optionally include the users uuid
        :param str user_id: If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
        :param list[int] user_ids: If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \"user_id\" argument but multiple user_ids can be included.
        :param list[str] enrollment_state: When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'search_term', 'sort', 'enrollment_type', 'enrollment_role', 'enrollment_role_id', 'include', 'user_id', 'user_ids', 'enrollment_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_users_in_course_search_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_users_in_course_search_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'enrollment_type' in params:
            query_params.append(('enrollment_type', params['enrollment_type']))  # noqa: E501
            collection_formats['enrollment_type'] = 'csv'  # noqa: E501
        if 'enrollment_role' in params:
            query_params.append(('enrollment_role', params['enrollment_role']))  # noqa: E501
        if 'enrollment_role_id' in params:
            query_params.append(('enrollment_role_id', params['enrollment_role_id']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('user_ids', params['user_ids']))  # noqa: E501
            collection_formats['user_ids'] = 'csv'  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
            collection_formats['enrollment_state'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/search_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_users_in_course_users(self, course_id, **kwargs):  # noqa: E501
        """List users in course  # noqa: E501

        Returns the paginated list of users in this course. And optionally the user's enrollments in the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_course_users(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list.
        :param str sort: When set, sort the results of the search based on the given field.
        :param list[str] enrollment_type: When set, only return users where the user is enrolled as this type. \"student_view\" implies include[]=test_student. This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param list[str] include: - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student. - \"custom_links\": Optionally include plugin-supplied custom links for each student, such as analytics information - \"current_grading_period_scores\": if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A 'grading_period_id' value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \"uuid\": Optionally include the users uuid
        :param str user_id: If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
        :param list[int] user_ids: If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \"user_id\" argument but multiple user_ids can be included.
        :param list[str] enrollment_state: When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_users_in_course_users_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_users_in_course_users_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_users_in_course_users_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List users in course  # noqa: E501

        Returns the paginated list of users in this course. And optionally the user's enrollments in the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_course_users_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list.
        :param str sort: When set, sort the results of the search based on the given field.
        :param list[str] enrollment_type: When set, only return users where the user is enrolled as this type. \"student_view\" implies include[]=test_student. This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return users enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role id with type 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param list[str] include: - \"enrollments\": Optionally include with each Course the user's current and invited enrollments. If the user is enrolled as a student, and the account has permission to manage or view all grades, each enrollment will include a 'grades' key with 'current_score', 'final_score', 'current_grade' and 'final_grade' values. - \"locked\": Optionally include whether an enrollment is locked. - \"avatar_url\": Optionally include avatar_url. - \"bio\": Optionally include each user's bio. - \"test_student\": Optionally include the course's Test Student, if present. Default is to not include Test Student. - \"custom_links\": Optionally include plugin-supplied custom links for each student, such as analytics information - \"current_grading_period_scores\": if enrollments is included as well as this directive, the scores returned in the enrollment will be for the current grading period if there is one. A 'grading_period_id' value will also be included with the scores. if grading_period_id is nil there is no current grading period and the score is a total score. - \"uuid\": Optionally include the users uuid
        :param str user_id: If this parameter is given and it corresponds to a user in the course, the +page+ parameter will be ignored and the page containing the specified user will be returned instead.
        :param list[int] user_ids: If included, the course users set will only include users with IDs specified by the param. Note: this will not work in conjunction with the \"user_id\" argument but multiple user_ids can be included.
        :param list[str] enrollment_state: When set, only return users where the enrollment workflow state is of one of the given types. \"active\" and \"invited\" enrollments are returned by default.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'search_term', 'sort', 'enrollment_type', 'enrollment_role', 'enrollment_role_id', 'include', 'user_id', 'user_ids', 'enrollment_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_users_in_course_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_users_in_course_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'enrollment_type' in params:
            query_params.append(('enrollment_type', params['enrollment_type']))  # noqa: E501
            collection_formats['enrollment_type'] = 'csv'  # noqa: E501
        if 'enrollment_role' in params:
            query_params.append(('enrollment_role', params['enrollment_role']))  # noqa: E501
        if 'enrollment_role_id' in params:
            query_params.append(('enrollment_role_id', params['enrollment_role_id']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('user_ids', params['user_ids']))  # noqa: E501
            collection_formats['user_ids'] = 'csv'  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
            collection_formats['enrollment_state'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_your_courses(self, **kwargs):  # noqa: E501
        """List your courses  # noqa: E501

        Returns the paginated list of active courses for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_your_courses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrollment_type: When set, only return courses where the user is enrolled as this type. For example, set to \"teacher\" to return only courses where the user is enrolled as a Teacher.  This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param str enrollment_state: When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
        :param bool exclude_blueprint_courses: When set, only return courses that are not configured as blueprint courses.
        :param list[str] include: - \"needs_grading_count\": Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \"syllabus_body\": Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \"public_description\": Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \"total_scores\": Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields 'computed_current_score', 'computed_final_score',   'computed_current_grade', and 'computed_final_grade', as well as (if   the user has permission) 'unposted_current_score',   'unposted_final_score', 'unposted_current_grade', and   'unposted_final_grade' (see Enrollment documentation for more   information on these fields). This argument is ignored if the course is   configured to hide final grades. - \"current_grading_period_scores\": Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   'has_grading_periods',   'totals_for_all_grading_periods_option', 'current_grading_period_title',   'current_grading_period_id', current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade', and   'current_period_computed_final_grade', as well as (if the user has permission)   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a 'has_grading_periods' attribute   on it. This argument is ignored if the total_scores argument is not   included. If the course is configured to hide final grades, the   following fields are not returned:   'totals_for_all_grading_periods_option',   'current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade',   'current_period_computed_final_grade',   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' - \"grading_periods\": Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \"term\": Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \"account\": Optional information to include with each Course. When   account is given, the account json for each course is returned. - \"course_progress\": Optional information to include with each Course.   When course_progress is given, each course will include a   'course_progress' object with the fields: 'requirement_count', an integer   specifying the total number of requirements in the course,   'requirement_completed_count', an integer specifying the total number of   requirements in this course that have been completed, and   'next_requirement_url', a string url to the next requirement item, and   'completed_at', the date the course was completed (null if incomplete).   'next_requirement_url' will be null if all requirements have been   completed or the current module does not require sequential progress.   \"course_progress\" will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \"sections\": Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. 'StudentEnrollment'). - \"storage_quota_used_mb\": The amount of storage space used by the files in this course - \"total_students\": Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \"passback_status\": Include the grade passback_status - \"favorites\": Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \"teachers\": Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \"observed_users\": Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \"tabs\": Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \"course_image\": Optional information to include with each Course. Returns course   image url if a course image has been set. - \"banner_image\": Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \"concluded\": Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"post_manually\": Optional information to include with each Course. Returns true if   the course post policy is set to Manually post grades. Returns false if the the course   post policy is set to Automatically post grades.
        :param list[str] state: If set, only return courses that are in the given state(s). By default, \"available\" is returned for students and observers, and anything except \"deleted\", for all other enrollment types
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_your_courses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_your_courses_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_your_courses_with_http_info(self, **kwargs):  # noqa: E501
        """List your courses  # noqa: E501

        Returns the paginated list of active courses for the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_your_courses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str enrollment_type: When set, only return courses where the user is enrolled as this type. For example, set to \"teacher\" to return only courses where the user is enrolled as a Teacher.  This argument is ignored if enrollment_role is given.
        :param str enrollment_role: Deprecated When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a base role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param int enrollment_role_id: When set, only return courses where the user is enrolled with the specified course-level role.  This can be a role created with the {api:RoleOverridesController#add_role Add Role API} or a built_in role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment', or 'DesignerEnrollment'.
        :param str enrollment_state: When set, only return courses where the user has an enrollment with the given state. This will respect section/course/term date overrides.
        :param bool exclude_blueprint_courses: When set, only return courses that are not configured as blueprint courses.
        :param list[str] include: - \"needs_grading_count\": Optional information to include with each Course.   When needs_grading_count is given, and the current user has grading   rights, the total number of submissions needing grading for all   assignments is returned. - \"syllabus_body\": Optional information to include with each Course.   When syllabus_body is given the user-generated html for the course   syllabus is returned. - \"public_description\": Optional information to include with each Course.   When public_description is given the user-generated text for the course   public description is returned. - \"total_scores\": Optional information to include with each Course.   When total_scores is given, any student enrollments will also   include the fields 'computed_current_score', 'computed_final_score',   'computed_current_grade', and 'computed_final_grade', as well as (if   the user has permission) 'unposted_current_score',   'unposted_final_score', 'unposted_current_grade', and   'unposted_final_grade' (see Enrollment documentation for more   information on these fields). This argument is ignored if the course is   configured to hide final grades. - \"current_grading_period_scores\": Optional information to include with   each Course. When current_grading_period_scores is given and total_scores   is given, any student enrollments will also include the fields   'has_grading_periods',   'totals_for_all_grading_periods_option', 'current_grading_period_title',   'current_grading_period_id', current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade', and   'current_period_computed_final_grade', as well as (if the user has permission)   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' (see Enrollment documentation for   more information on these fields). In addition, when this argument is   passed, the course will have a 'has_grading_periods' attribute   on it. This argument is ignored if the total_scores argument is not   included. If the course is configured to hide final grades, the   following fields are not returned:   'totals_for_all_grading_periods_option',   'current_period_computed_current_score',   'current_period_computed_final_score',   'current_period_computed_current_grade',   'current_period_computed_final_grade',   'current_period_unposted_current_score',   'current_period_unposted_final_score',   'current_period_unposted_current_grade', and   'current_period_unposted_final_grade' - \"grading_periods\": Optional information to include with each Course. When   grading_periods is given, a list of the grading periods associated with   each course is returned. - \"term\": Optional information to include with each Course. When   term is given, the information for the enrollment term for each course   is returned. - \"account\": Optional information to include with each Course. When   account is given, the account json for each course is returned. - \"course_progress\": Optional information to include with each Course.   When course_progress is given, each course will include a   'course_progress' object with the fields: 'requirement_count', an integer   specifying the total number of requirements in the course,   'requirement_completed_count', an integer specifying the total number of   requirements in this course that have been completed, and   'next_requirement_url', a string url to the next requirement item, and   'completed_at', the date the course was completed (null if incomplete).   'next_requirement_url' will be null if all requirements have been   completed or the current module does not require sequential progress.   \"course_progress\" will return an error message if the course is not   module based or the user is not enrolled as a student in the course. - \"sections\": Section enrollment information to include with each Course.   Returns an array of hashes containing the section ID (id), section name   (name), start and end dates (start_at, end_at), as well as the enrollment   type (enrollment_role, e.g. 'StudentEnrollment'). - \"storage_quota_used_mb\": The amount of storage space used by the files in this course - \"total_students\": Optional information to include with each Course.   Returns an integer for the total amount of active and invited students. - \"passback_status\": Include the grade passback_status - \"favorites\": Optional information to include with each Course.   Indicates if the user has marked the course as a favorite course. - \"teachers\": Teacher information to include with each Course.   Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information   for each teacher in the course. - \"observed_users\": Optional information to include with each Course.   Will include data for observed users if the current user has an   observer enrollment. - \"tabs\": Optional information to include with each Course.   Will include the list of tabs configured for each course.  See the   {api:TabsController#index List available tabs API} for more information. - \"course_image\": Optional information to include with each Course. Returns course   image url if a course image has been set. - \"banner_image\": Optional information to include with each Course. Returns course   banner image url if the course is a Canvas for Elementary subject and a banner   image has been set. - \"concluded\": Optional information to include with each Course. Indicates whether   the course has been concluded, taking course and term dates into account. - \"post_manually\": Optional information to include with each Course. Returns true if   the course post policy is set to Manually post grades. Returns false if the the course   post policy is set to Automatically post grades.
        :param list[str] state: If set, only return courses that are in the given state(s). By default, \"available\" is returned for students and observers, and anything except \"deleted\", for all other enrollment types
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['enrollment_type', 'enrollment_role', 'enrollment_role_id', 'enrollment_state', 'exclude_blueprint_courses', 'include', 'state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_your_courses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'enrollment_type' in params:
            query_params.append(('enrollment_type', params['enrollment_type']))  # noqa: E501
        if 'enrollment_role' in params:
            query_params.append(('enrollment_role', params['enrollment_role']))  # noqa: E501
        if 'enrollment_role_id' in params:
            query_params.append(('enrollment_role_id', params['enrollment_role_id']))  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
        if 'exclude_blueprint_courses' in params:
            query_params.append(('exclude_blueprint_courses', params['exclude_blueprint_courses']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Course]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def permissions(self, course_id, **kwargs):  # noqa: E501
        """Permissions  # noqa: E501

        Returns permission information for the calling user in the given course. See also the {api:AccountsController#permissions Account} and {api:GroupsController#permissions Group} counterparts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] permissions: List of permissions to check against the authenticated user. Permission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.permissions_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.permissions_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def permissions_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Permissions  # noqa: E501

        Returns permission information for the calling user in the given course. See also the {api:AccountsController#permissions Account} and {api:GroupsController#permissions Group} counterparts.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.permissions_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] permissions: List of permissions to check against the authenticated user. Permission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'permissions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method permissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'permissions' in params:
            query_params.append(('permissions', params['permissions']))  # noqa: E501
            collection_formats['permissions'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/permissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def preview_processed_html(self, course_id, **kwargs):  # noqa: E501
        """Preview processed html  # noqa: E501

        Preview html content processed for this course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_processed_html(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str html: The html content to process
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.preview_processed_html_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.preview_processed_html_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def preview_processed_html_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Preview processed html  # noqa: E501

        Preview html content processed for this course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.preview_processed_html_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str html: The html content to process
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'html']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method preview_processed_html" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `preview_processed_html`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'html' in params:
            form_params.append(('html', params['html']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/preview_html', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_quiz_migration_alert(self, id, **kwargs):  # noqa: E501
        """Remove quiz migration alert  # noqa: E501

        Remove alert about the limitations of quiz migrations that is displayed to a user in a course  you must be logged in to use this endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_quiz_migration_alert(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_quiz_migration_alert_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_quiz_migration_alert_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def remove_quiz_migration_alert_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove quiz migration alert  # noqa: E501

        Remove alert about the limitations of quiz migrations that is displayed to a user in a course  you must be logged in to use this endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_quiz_migration_alert_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_quiz_migration_alert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_quiz_migration_alert`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{id}/dismiss_migration_limitation_message', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset_course(self, course_id, **kwargs):  # noqa: E501
        """Reset a course  # noqa: E501

        Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reset_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def reset_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Reset a course  # noqa: E501

        Deletes the current course, and creates a new equivalent course with no content, but all sections and users moved over.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Course
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `reset_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/reset_content', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Course',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def return_test_student_for_course(self, course_id, **kwargs):  # noqa: E501
        """Return test student for course  # noqa: E501

        Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course's student view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.return_test_student_for_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.return_test_student_for_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.return_test_student_for_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def return_test_student_for_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Return test student for course  # noqa: E501

        Returns information for a test student in this course. Creates a test student if one does not already exist for the course. The caller must have permission to access the course's student view.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.return_test_student_for_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: User
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method return_test_student_for_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `return_test_student_for_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/student_view_student', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='User',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_for_content_share_users(self, course_id, search_term, **kwargs):  # noqa: E501
        """Search for content share users  # noqa: E501

        Returns a paginated list of users you can share content with.  Requires the content share feature and the user must have the manage content permission for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_for_content_share_users(course_id, search_term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: Term used to find users.  Will search available share users with the search term in their name. (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_for_content_share_users_with_http_info(course_id, search_term, **kwargs)  # noqa: E501
        else:
            (data) = self.search_for_content_share_users_with_http_info(course_id, search_term, **kwargs)  # noqa: E501
            return data

    def search_for_content_share_users_with_http_info(self, course_id, search_term, **kwargs):  # noqa: E501
        """Search for content share users  # noqa: E501

        Returns a paginated list of users you can share content with.  Requires the content share feature and the user must have the manage content permission for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_for_content_share_users_with_http_info(course_id, search_term, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: Term used to find users.  Will search available share users with the search term in their name. (required)
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'search_term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_for_content_share_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `search_for_content_share_users`")  # noqa: E501
        # verify the required parameter 'search_term' is set
        if self.api_client.client_side_validation and ('search_term' not in params or
                                                       params['search_term'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `search_term` when calling `search_for_content_share_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/content_share_users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_course(self, id, **kwargs):  # noqa: E501
        """Update a course  # noqa: E501

        Update an existing course.  Arguments are the same as Courses#create, with a few exceptions (enroll_me).  If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be \"syllabus_body\"  If an account has set prevent_course_availability_editing_by_teachers, a teacher cannot change course[start_at], course[conclude_at], or course[restrict_enrollments_to_course_dates] here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_account_id: The unique ID of the account to move the course to.
        :param str course_name: The name of the course. If omitted, the course will be named \"Unnamed Course.\"
        :param str course_course_code: The course code for the course.
        :param Object course_start_at: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true, or the course is already published.
        :param Object course_end_at: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param str course_license: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).
        :param bool course_is_public: Set to true if course is public to both authenticated and unauthenticated users.
        :param bool course_is_public_to_auth_users: Set to true if course is public only to authenticated users.
        :param bool course_public_syllabus: Set to true to make the course syllabus public.
        :param bool course_public_syllabus_to_auth: Set to true to make the course syllabus to public for authenticated users.
        :param str course_public_description: A publicly visible description of the course.
        :param bool course_allow_student_wiki_edits: If true, students will be able to modify the course wiki.
        :param bool course_allow_wiki_comments: If true, course members will be able to comment on wiki pages.
        :param bool course_allow_student_forum_attachments: If true, students can attach files to forum posts.
        :param bool course_open_enrollment: Set to true if the course is open enrollment.
        :param bool course_self_enrollment: Set to true if the course is self enrollment.
        :param bool course_restrict_enrollments_to_course_dates: Set to true to restrict user enrollments to the start and end dates of the course. Setting this value to false will remove the course end date (if it exists), as well as the course start date (if the course is unpublished).
        :param int course_term_id: The unique ID of the term to create to course in.
        :param str course_sis_course_id: The unique SIS identifier.
        :param str course_integration_id: The unique Integration identifier.
        :param bool course_hide_final_grades: If this option is set to true, the totals in student grades summary will be hidden.
        :param str course_time_zone: The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
        :param bool course_apply_assignment_group_weights: Set to true to weight final grade based on assignment groups percentages.
        :param int course_storage_quota_mb: Set the storage quota for the course, in megabytes. The caller must have the \"Manage storage quotas\" account permission.
        :param bool offer: If this option is set to true, the course will be available to students immediately.
        :param str course_event: The action to take on each course. * 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.   A course cannot be unpublished if students have received graded submissions. * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site. * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * 'undelete' attempts to recover a course that has been deleted. This action requires account administrative rights.   (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course   will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.
        :param str course_default_view: The type of page that users will see when they first visit the course * 'feed' Recent Activity Dashboard * 'wiki' Wiki Front Page * 'modules' Course Modules/Sections Page * 'assignments' Course Assignments List * 'syllabus' Course Syllabus Page other types may be added in the future
        :param str course_syllabus_body: The syllabus body for the course
        :param bool course_syllabus_course_summary: Optional. Indicates whether the Course Summary (consisting of the course's assignments and calendar events) is displayed on the syllabus page. Defaults to +true+.
        :param int course_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
        :param str course_grade_passback_setting: Optional. The grade_passback_setting for the course. Only 'nightly_sync' and '' are allowed
        :param str course_course_format: Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')
        :param int course_image_id: This is a file ID corresponding to an image file in the course that will be used as the course image. This will clear the course's image_url setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
        :param str course_image_url: This is a URL to an image to be used as the course image. This will clear the course's image_id setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
        :param bool course_remove_image: If this option is set to true, the course image url and course image ID are both set to nil
        :param bool course_remove_banner_image: If this option is set to true, the course banner image url and course banner image ID are both set to nil
        :param bool course_blueprint: Sets the course as a blueprint course.
        :param Object course_blueprint_restrictions: Sets a default set to apply to blueprint course objects when restricted, unless _use_blueprint_restrictions_by_object_type_ is enabled. See the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation
        :param bool course_use_blueprint_restrictions_by_object_type: When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of the _blueprint_restrictions_by_object_type_ parameter
        :param Object course_blueprint_restrictions_by_object_type: Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} to apply to blueprint course objects of the matching type when restricted. The possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\". Example usage:   course[blueprint_restrictions_by_object_type][assignment][content]=1
        :param bool course_homeroom_course: Sets the course as a homeroom course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        :param str course_sync_enrollments_from_homeroom: Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        :param str course_homeroom_course_id: Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        :param bool course_template: Enable or disable the course as a template that can be selected by an account
        :param str course_course_color: Sets a color in hex code format to be associated with the course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        :param str course_friendly_name: Set a friendly name for the course. If this is provided and the course is associated with a Canvas for Elementary account, it will be shown instead of the course name. This setting takes priority over course nicknames defined by individual users.
        :param bool course_enable_course_paces: Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is enabled for the sub-account. Otherwise, Course Pacing are always disabled.   Note: Course Pacing is in active development.
        :param bool course_conditional_release: Enable or disable individual learning paths for students based on assessment
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_course_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_course_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_course_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a course  # noqa: E501

        Update an existing course.  Arguments are the same as Courses#create, with a few exceptions (enroll_me).  If a user has content management rights, but not full course editing rights, the only attribute editable through this endpoint will be \"syllabus_body\"  If an account has set prevent_course_availability_editing_by_teachers, a teacher cannot change course[start_at], course[conclude_at], or course[restrict_enrollments_to_course_dates] here.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_account_id: The unique ID of the account to move the course to.
        :param str course_name: The name of the course. If omitted, the course will be named \"Unnamed Course.\"
        :param str course_course_code: The course code for the course.
        :param Object course_start_at: Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true, or the course is already published.
        :param Object course_end_at: Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z This value is ignored unless 'restrict_enrollments_to_course_dates' is set to true.
        :param str course_license: The name of the licensing. Should be one of the following abbreviations (a descriptive name is included in parenthesis for reference): - 'private' (Private Copyrighted) - 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives) - 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike) - 'cc_by_nc' (CC Attribution Non-Commercial) - 'cc_by_nd' (CC Attribution No Derivatives) - 'cc_by_sa' (CC Attribution Share Alike) - 'cc_by' (CC Attribution) - 'public_domain' (Public Domain).
        :param bool course_is_public: Set to true if course is public to both authenticated and unauthenticated users.
        :param bool course_is_public_to_auth_users: Set to true if course is public only to authenticated users.
        :param bool course_public_syllabus: Set to true to make the course syllabus public.
        :param bool course_public_syllabus_to_auth: Set to true to make the course syllabus to public for authenticated users.
        :param str course_public_description: A publicly visible description of the course.
        :param bool course_allow_student_wiki_edits: If true, students will be able to modify the course wiki.
        :param bool course_allow_wiki_comments: If true, course members will be able to comment on wiki pages.
        :param bool course_allow_student_forum_attachments: If true, students can attach files to forum posts.
        :param bool course_open_enrollment: Set to true if the course is open enrollment.
        :param bool course_self_enrollment: Set to true if the course is self enrollment.
        :param bool course_restrict_enrollments_to_course_dates: Set to true to restrict user enrollments to the start and end dates of the course. Setting this value to false will remove the course end date (if it exists), as well as the course start date (if the course is unpublished).
        :param int course_term_id: The unique ID of the term to create to course in.
        :param str course_sis_course_id: The unique SIS identifier.
        :param str course_integration_id: The unique Integration identifier.
        :param bool course_hide_final_grades: If this option is set to true, the totals in student grades summary will be hidden.
        :param str course_time_zone: The time zone for the course. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.
        :param bool course_apply_assignment_group_weights: Set to true to weight final grade based on assignment groups percentages.
        :param int course_storage_quota_mb: Set the storage quota for the course, in megabytes. The caller must have the \"Manage storage quotas\" account permission.
        :param bool offer: If this option is set to true, the course will be available to students immediately.
        :param str course_event: The action to take on each course. * 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.   A course cannot be unpublished if students have received graded submissions. * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site. * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * 'undelete' attempts to recover a course that has been deleted. This action requires account administrative rights.   (Recovery is not guaranteed; please conclude rather than delete a course if there is any possibility the course   will be used again.) The recovered course will be unpublished. Deleted enrollments will not be recovered.
        :param str course_default_view: The type of page that users will see when they first visit the course * 'feed' Recent Activity Dashboard * 'wiki' Wiki Front Page * 'modules' Course Modules/Sections Page * 'assignments' Course Assignments List * 'syllabus' Course Syllabus Page other types may be added in the future
        :param str course_syllabus_body: The syllabus body for the course
        :param bool course_syllabus_course_summary: Optional. Indicates whether the Course Summary (consisting of the course's assignments and calendar events) is displayed on the syllabus page. Defaults to +true+.
        :param int course_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.
        :param str course_grade_passback_setting: Optional. The grade_passback_setting for the course. Only 'nightly_sync' and '' are allowed
        :param str course_course_format: Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')
        :param int course_image_id: This is a file ID corresponding to an image file in the course that will be used as the course image. This will clear the course's image_url setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
        :param str course_image_url: This is a URL to an image to be used as the course image. This will clear the course's image_id setting if set.  If you attempt to provide image_url and image_id in a request it will fail.
        :param bool course_remove_image: If this option is set to true, the course image url and course image ID are both set to nil
        :param bool course_remove_banner_image: If this option is set to true, the course banner image url and course banner image ID are both set to nil
        :param bool course_blueprint: Sets the course as a blueprint course.
        :param Object course_blueprint_restrictions: Sets a default set to apply to blueprint course objects when restricted, unless _use_blueprint_restrictions_by_object_type_ is enabled. See the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation
        :param bool course_use_blueprint_restrictions_by_object_type: When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of the _blueprint_restrictions_by_object_type_ parameter
        :param Object course_blueprint_restrictions_by_object_type: Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} to apply to blueprint course objects of the matching type when restricted. The possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\". Example usage:   course[blueprint_restrictions_by_object_type][assignment][content]=1
        :param bool course_homeroom_course: Sets the course as a homeroom course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        :param str course_sync_enrollments_from_homeroom: Syncs enrollments from the homeroom that is set in homeroom_course_id. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        :param str course_homeroom_course_id: Sets the Homeroom Course id to be used with sync_enrollments_from_homeroom. The setting only takes effect when the course is associated with a Canvas for Elementary-enabled account and sync_enrollments_from_homeroom is enabled.
        :param bool course_template: Enable or disable the course as a template that can be selected by an account
        :param str course_course_color: Sets a color in hex code format to be associated with the course. The setting takes effect only when the course is associated with a Canvas for Elementary-enabled account.
        :param str course_friendly_name: Set a friendly name for the course. If this is provided and the course is associated with a Canvas for Elementary account, it will be shown instead of the course name. This setting takes priority over course nicknames defined by individual users.
        :param bool course_enable_course_paces: Enable or disable Course Pacing for the course. This setting only has an effect when the Course Pacing feature flag is enabled for the sub-account. Otherwise, Course Pacing are always disabled.   Note: Course Pacing is in active development.
        :param bool course_conditional_release: Enable or disable individual learning paths for students based on assessment
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_account_id', 'course_name', 'course_course_code', 'course_start_at', 'course_end_at', 'course_license', 'course_is_public', 'course_is_public_to_auth_users', 'course_public_syllabus', 'course_public_syllabus_to_auth', 'course_public_description', 'course_allow_student_wiki_edits', 'course_allow_wiki_comments', 'course_allow_student_forum_attachments', 'course_open_enrollment', 'course_self_enrollment', 'course_restrict_enrollments_to_course_dates', 'course_term_id', 'course_sis_course_id', 'course_integration_id', 'course_hide_final_grades', 'course_time_zone', 'course_apply_assignment_group_weights', 'course_storage_quota_mb', 'offer', 'course_event', 'course_default_view', 'course_syllabus_body', 'course_syllabus_course_summary', 'course_grading_standard_id', 'course_grade_passback_setting', 'course_course_format', 'course_image_id', 'course_image_url', 'course_remove_image', 'course_remove_banner_image', 'course_blueprint', 'course_blueprint_restrictions', 'course_use_blueprint_restrictions_by_object_type', 'course_blueprint_restrictions_by_object_type', 'course_homeroom_course', 'course_sync_enrollments_from_homeroom', 'course_homeroom_course_id', 'course_template', 'course_course_color', 'course_friendly_name', 'course_enable_course_paces', 'course_conditional_release', 'override_sis_stickiness']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_account_id' in params:
            form_params.append(('course[account_id]', params['course_account_id']))  # noqa: E501
        if 'course_name' in params:
            form_params.append(('course[name]', params['course_name']))  # noqa: E501
        if 'course_course_code' in params:
            form_params.append(('course[course_code]', params['course_course_code']))  # noqa: E501
        if 'course_start_at' in params:
            form_params.append(('course[start_at]', params['course_start_at']))  # noqa: E501
        if 'course_end_at' in params:
            form_params.append(('course[end_at]', params['course_end_at']))  # noqa: E501
        if 'course_license' in params:
            form_params.append(('course[license]', params['course_license']))  # noqa: E501
        if 'course_is_public' in params:
            form_params.append(('course[is_public]', params['course_is_public']))  # noqa: E501
        if 'course_is_public_to_auth_users' in params:
            form_params.append(('course[is_public_to_auth_users]', params['course_is_public_to_auth_users']))  # noqa: E501
        if 'course_public_syllabus' in params:
            form_params.append(('course[public_syllabus]', params['course_public_syllabus']))  # noqa: E501
        if 'course_public_syllabus_to_auth' in params:
            form_params.append(('course[public_syllabus_to_auth]', params['course_public_syllabus_to_auth']))  # noqa: E501
        if 'course_public_description' in params:
            form_params.append(('course[public_description]', params['course_public_description']))  # noqa: E501
        if 'course_allow_student_wiki_edits' in params:
            form_params.append(('course[allow_student_wiki_edits]', params['course_allow_student_wiki_edits']))  # noqa: E501
        if 'course_allow_wiki_comments' in params:
            form_params.append(('course[allow_wiki_comments]', params['course_allow_wiki_comments']))  # noqa: E501
        if 'course_allow_student_forum_attachments' in params:
            form_params.append(('course[allow_student_forum_attachments]', params['course_allow_student_forum_attachments']))  # noqa: E501
        if 'course_open_enrollment' in params:
            form_params.append(('course[open_enrollment]', params['course_open_enrollment']))  # noqa: E501
        if 'course_self_enrollment' in params:
            form_params.append(('course[self_enrollment]', params['course_self_enrollment']))  # noqa: E501
        if 'course_restrict_enrollments_to_course_dates' in params:
            form_params.append(('course[restrict_enrollments_to_course_dates]', params['course_restrict_enrollments_to_course_dates']))  # noqa: E501
        if 'course_term_id' in params:
            form_params.append(('course[term_id]', params['course_term_id']))  # noqa: E501
        if 'course_sis_course_id' in params:
            form_params.append(('course[sis_course_id]', params['course_sis_course_id']))  # noqa: E501
        if 'course_integration_id' in params:
            form_params.append(('course[integration_id]', params['course_integration_id']))  # noqa: E501
        if 'course_hide_final_grades' in params:
            form_params.append(('course[hide_final_grades]', params['course_hide_final_grades']))  # noqa: E501
        if 'course_time_zone' in params:
            form_params.append(('course[time_zone]', params['course_time_zone']))  # noqa: E501
        if 'course_apply_assignment_group_weights' in params:
            form_params.append(('course[apply_assignment_group_weights]', params['course_apply_assignment_group_weights']))  # noqa: E501
        if 'course_storage_quota_mb' in params:
            form_params.append(('course[storage_quota_mb]', params['course_storage_quota_mb']))  # noqa: E501
        if 'offer' in params:
            form_params.append(('offer', params['offer']))  # noqa: E501
        if 'course_event' in params:
            form_params.append(('course[event]', params['course_event']))  # noqa: E501
        if 'course_default_view' in params:
            form_params.append(('course[default_view]', params['course_default_view']))  # noqa: E501
        if 'course_syllabus_body' in params:
            form_params.append(('course[syllabus_body]', params['course_syllabus_body']))  # noqa: E501
        if 'course_syllabus_course_summary' in params:
            form_params.append(('course[syllabus_course_summary]', params['course_syllabus_course_summary']))  # noqa: E501
        if 'course_grading_standard_id' in params:
            form_params.append(('course[grading_standard_id]', params['course_grading_standard_id']))  # noqa: E501
        if 'course_grade_passback_setting' in params:
            form_params.append(('course[grade_passback_setting]', params['course_grade_passback_setting']))  # noqa: E501
        if 'course_course_format' in params:
            form_params.append(('course[course_format]', params['course_course_format']))  # noqa: E501
        if 'course_image_id' in params:
            form_params.append(('course[image_id]', params['course_image_id']))  # noqa: E501
        if 'course_image_url' in params:
            form_params.append(('course[image_url]', params['course_image_url']))  # noqa: E501
        if 'course_remove_image' in params:
            form_params.append(('course[remove_image]', params['course_remove_image']))  # noqa: E501
        if 'course_remove_banner_image' in params:
            form_params.append(('course[remove_banner_image]', params['course_remove_banner_image']))  # noqa: E501
        if 'course_blueprint' in params:
            form_params.append(('course[blueprint]', params['course_blueprint']))  # noqa: E501
        if 'course_blueprint_restrictions' in params:
            form_params.append(('course[blueprint_restrictions]', params['course_blueprint_restrictions']))  # noqa: E501
        if 'course_use_blueprint_restrictions_by_object_type' in params:
            form_params.append(('course[use_blueprint_restrictions_by_object_type]', params['course_use_blueprint_restrictions_by_object_type']))  # noqa: E501
        if 'course_blueprint_restrictions_by_object_type' in params:
            form_params.append(('course[blueprint_restrictions_by_object_type]', params['course_blueprint_restrictions_by_object_type']))  # noqa: E501
        if 'course_homeroom_course' in params:
            form_params.append(('course[homeroom_course]', params['course_homeroom_course']))  # noqa: E501
        if 'course_sync_enrollments_from_homeroom' in params:
            form_params.append(('course[sync_enrollments_from_homeroom]', params['course_sync_enrollments_from_homeroom']))  # noqa: E501
        if 'course_homeroom_course_id' in params:
            form_params.append(('course[homeroom_course_id]', params['course_homeroom_course_id']))  # noqa: E501
        if 'course_template' in params:
            form_params.append(('course[template]', params['course_template']))  # noqa: E501
        if 'course_course_color' in params:
            form_params.append(('course[course_color]', params['course_course_color']))  # noqa: E501
        if 'course_friendly_name' in params:
            form_params.append(('course[friendly_name]', params['course_friendly_name']))  # noqa: E501
        if 'course_enable_course_paces' in params:
            form_params.append(('course[enable_course_paces]', params['course_enable_course_paces']))  # noqa: E501
        if 'course_conditional_release' in params:
            form_params.append(('course[conditional_release]', params['course_conditional_release']))  # noqa: E501
        if 'override_sis_stickiness' in params:
            form_params.append(('override_sis_stickiness', params['override_sis_stickiness']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_course_settings(self, course_id, **kwargs):  # noqa: E501
        """Update course settings  # noqa: E501

        Can update the following course settings:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_settings(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param bool allow_final_grade_override: Let student final grades for a grading period or the total grades for the course be overridden
        :param bool allow_student_discussion_topics: Let students create discussion topics
        :param bool allow_student_forum_attachments: Let students attach files to discussions
        :param bool allow_student_discussion_editing: Let students edit or delete their own discussion replies
        :param bool allow_student_organized_groups: Let students organize their own groups
        :param bool allow_student_discussion_reporting: Let students report offensive discussion content
        :param bool allow_student_anonymous_discussion_topics: Let students create anonymous discussion topics
        :param bool filter_speed_grader_by_student_group: Filter SpeedGrader to only the selected student group
        :param bool hide_final_grades: Hide totals in student grades summary
        :param bool hide_distribution_graphs: Hide grade distribution graphs from students
        :param bool hide_sections_on_course_users_page: Disallow students from viewing students in sections they do not belong to
        :param bool lock_all_announcements: Disable comments on announcements
        :param bool usage_rights_required: Copyright and license information must be provided for files before they are published.
        :param bool restrict_student_past_view: Restrict students from viewing courses after end date
        :param bool restrict_student_future_view: Restrict students from viewing courses before start date
        :param bool show_announcements_on_home_page: Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit). Canvas for Elementary subjects ignore this setting.
        :param int home_page_announcement_limit: Limit the number of announcements on the home page if enabled via show_announcements_on_home_page
        :param bool syllabus_course_summary: Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.
        :param str default_due_time: Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface when setting a due date for an assignment. It does not change when any existing assignment is due. It should be given in 24-hour HH:MM:SS format. The default is \"23:59:59\". Use \"inherit\" to inherit the account setting.
        :param bool conditional_release: Enable or disable individual learning paths for students based on assessment
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_course_settings_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_course_settings_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def update_course_settings_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Update course settings  # noqa: E501

        Can update the following course settings:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_settings_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param bool allow_final_grade_override: Let student final grades for a grading period or the total grades for the course be overridden
        :param bool allow_student_discussion_topics: Let students create discussion topics
        :param bool allow_student_forum_attachments: Let students attach files to discussions
        :param bool allow_student_discussion_editing: Let students edit or delete their own discussion replies
        :param bool allow_student_organized_groups: Let students organize their own groups
        :param bool allow_student_discussion_reporting: Let students report offensive discussion content
        :param bool allow_student_anonymous_discussion_topics: Let students create anonymous discussion topics
        :param bool filter_speed_grader_by_student_group: Filter SpeedGrader to only the selected student group
        :param bool hide_final_grades: Hide totals in student grades summary
        :param bool hide_distribution_graphs: Hide grade distribution graphs from students
        :param bool hide_sections_on_course_users_page: Disallow students from viewing students in sections they do not belong to
        :param bool lock_all_announcements: Disable comments on announcements
        :param bool usage_rights_required: Copyright and license information must be provided for files before they are published.
        :param bool restrict_student_past_view: Restrict students from viewing courses after end date
        :param bool restrict_student_future_view: Restrict students from viewing courses before start date
        :param bool show_announcements_on_home_page: Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit). Canvas for Elementary subjects ignore this setting.
        :param int home_page_announcement_limit: Limit the number of announcements on the home page if enabled via show_announcements_on_home_page
        :param bool syllabus_course_summary: Show the course summary (list of assignments and calendar events) on the syllabus page. Default is true.
        :param str default_due_time: Set the default due time for assignments. This is the time that will be pre-selected in the Canvas user interface when setting a due date for an assignment. It does not change when any existing assignment is due. It should be given in 24-hour HH:MM:SS format. The default is \"23:59:59\". Use \"inherit\" to inherit the account setting.
        :param bool conditional_release: Enable or disable individual learning paths for students based on assessment
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'allow_final_grade_override', 'allow_student_discussion_topics', 'allow_student_forum_attachments', 'allow_student_discussion_editing', 'allow_student_organized_groups', 'allow_student_discussion_reporting', 'allow_student_anonymous_discussion_topics', 'filter_speed_grader_by_student_group', 'hide_final_grades', 'hide_distribution_graphs', 'hide_sections_on_course_users_page', 'lock_all_announcements', 'usage_rights_required', 'restrict_student_past_view', 'restrict_student_future_view', 'show_announcements_on_home_page', 'home_page_announcement_limit', 'syllabus_course_summary', 'default_due_time', 'conditional_release']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_course_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_course_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'allow_final_grade_override' in params:
            form_params.append(('allow_final_grade_override', params['allow_final_grade_override']))  # noqa: E501
        if 'allow_student_discussion_topics' in params:
            form_params.append(('allow_student_discussion_topics', params['allow_student_discussion_topics']))  # noqa: E501
        if 'allow_student_forum_attachments' in params:
            form_params.append(('allow_student_forum_attachments', params['allow_student_forum_attachments']))  # noqa: E501
        if 'allow_student_discussion_editing' in params:
            form_params.append(('allow_student_discussion_editing', params['allow_student_discussion_editing']))  # noqa: E501
        if 'allow_student_organized_groups' in params:
            form_params.append(('allow_student_organized_groups', params['allow_student_organized_groups']))  # noqa: E501
        if 'allow_student_discussion_reporting' in params:
            form_params.append(('allow_student_discussion_reporting', params['allow_student_discussion_reporting']))  # noqa: E501
        if 'allow_student_anonymous_discussion_topics' in params:
            form_params.append(('allow_student_anonymous_discussion_topics', params['allow_student_anonymous_discussion_topics']))  # noqa: E501
        if 'filter_speed_grader_by_student_group' in params:
            form_params.append(('filter_speed_grader_by_student_group', params['filter_speed_grader_by_student_group']))  # noqa: E501
        if 'hide_final_grades' in params:
            form_params.append(('hide_final_grades', params['hide_final_grades']))  # noqa: E501
        if 'hide_distribution_graphs' in params:
            form_params.append(('hide_distribution_graphs', params['hide_distribution_graphs']))  # noqa: E501
        if 'hide_sections_on_course_users_page' in params:
            form_params.append(('hide_sections_on_course_users_page', params['hide_sections_on_course_users_page']))  # noqa: E501
        if 'lock_all_announcements' in params:
            form_params.append(('lock_all_announcements', params['lock_all_announcements']))  # noqa: E501
        if 'usage_rights_required' in params:
            form_params.append(('usage_rights_required', params['usage_rights_required']))  # noqa: E501
        if 'restrict_student_past_view' in params:
            form_params.append(('restrict_student_past_view', params['restrict_student_past_view']))  # noqa: E501
        if 'restrict_student_future_view' in params:
            form_params.append(('restrict_student_future_view', params['restrict_student_future_view']))  # noqa: E501
        if 'show_announcements_on_home_page' in params:
            form_params.append(('show_announcements_on_home_page', params['show_announcements_on_home_page']))  # noqa: E501
        if 'home_page_announcement_limit' in params:
            form_params.append(('home_page_announcement_limit', params['home_page_announcement_limit']))  # noqa: E501
        if 'syllabus_course_summary' in params:
            form_params.append(('syllabus_course_summary', params['syllabus_course_summary']))  # noqa: E501
        if 'default_due_time' in params:
            form_params.append(('default_due_time', params['default_due_time']))  # noqa: E501
        if 'conditional_release' in params:
            form_params.append(('conditional_release', params['conditional_release']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_courses(self, account_id, course_ids, event, **kwargs):  # noqa: E501
        """Update courses  # noqa: E501

        Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint} to query the status of an operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_courses(account_id, course_ids, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] course_ids: List of ids of courses to update. At most 500 courses may be updated in one call. (required)
        :param str event: The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'. * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site. * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude   rather than delete a course if there is any possibility the course will be used again.) The recovered course   will be unpublished. Deleted enrollments will not be recovered. (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_courses_with_http_info(account_id, course_ids, event, **kwargs)  # noqa: E501
        else:
            (data) = self.update_courses_with_http_info(account_id, course_ids, event, **kwargs)  # noqa: E501
            return data

    def update_courses_with_http_info(self, account_id, course_ids, event, **kwargs):  # noqa: E501
        """Update courses  # noqa: E501

        Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint} to query the status of an operation.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_courses_with_http_info(account_id, course_ids, event, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] course_ids: List of ids of courses to update. At most 500 courses may be updated in one call. (required)
        :param str event: The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'. * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site. * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears   in prior-enrollment lists. * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).   All enrollments are deleted. Course content may be physically deleted at a future date. * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude   rather than delete a course if there is any possibility the course will be used again.) The recovered course   will be unpublished. Deleted enrollments will not be recovered. (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'course_ids', 'event']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_courses`")  # noqa: E501
        # verify the required parameter 'course_ids' is set
        if self.api_client.client_side_validation and ('course_ids' not in params or
                                                       params['course_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_ids` when calling `update_courses`")  # noqa: E501
        # verify the required parameter 'event' is set
        if self.api_client.client_side_validation and ('event' not in params or
                                                       params['event'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `event` when calling `update_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_ids' in params:
            form_params.append(('course_ids', params['course_ids']))  # noqa: E501
            collection_formats['course_ids'] = 'csv'  # noqa: E501
        if 'event' in params:
            form_params.append(('event', params['event']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/courses', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file(self, course_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to the course.  This API endpoint is the first step in uploading a file to a course. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  Only those with the \"Manage Files\" permission on a course can upload files to the course. By default, this is Teachers, TAs and Designers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def upload_file_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to the course.  This API endpoint is the first step in uploading a file to a course. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  Only those with the \"Manage Files\" permission on a course can upload files to the course. By default, this is Teachers, TAs and Designers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `upload_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
