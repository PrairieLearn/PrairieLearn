# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssignmentGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_assignment_group(self, course_id, **kwargs):  # noqa: E501
        """Create an Assignment Group  # noqa: E501

        Create a new assignment group for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_group(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str name: The assignment group's name
        :param int position: The position of this assignment group in relation to the other assignment groups
        :param float group_weight: The percent of the total grade that this assignment group represents
        :param str sis_source_id: The sis source id of the Assignment Group
        :param Object integration_data: The integration data of the Assignment Group
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assignment_group_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assignment_group_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_assignment_group_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create an Assignment Group  # noqa: E501

        Create a new assignment group for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_group_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str name: The assignment group's name
        :param int position: The position of this assignment group in relation to the other assignment groups
        :param float group_weight: The percent of the total grade that this assignment group represents
        :param str sis_source_id: The sis source id of the Assignment Group
        :param Object integration_data: The integration data of the Assignment Group
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'name', 'position', 'group_weight', 'sis_source_id', 'integration_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignment_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_assignment_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'position' in params:
            form_params.append(('position', params['position']))  # noqa: E501
        if 'group_weight' in params:
            form_params.append(('group_weight', params['group_weight']))  # noqa: E501
        if 'sis_source_id' in params:
            form_params.append(('sis_source_id', params['sis_source_id']))  # noqa: E501
        if 'integration_data' in params:
            form_params.append(('integration_data', params['integration_data']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_assignment_group(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Destroy an Assignment Group  # noqa: E501

        Deletes the assignment group with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_assignment_group(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param int move_assignments_to: The ID of an active Assignment Group to which the assignments that are currently assigned to the destroyed Assignment Group will be assigned. NOTE: If this argument is not provided, any assignments in this Assignment Group will be deleted.
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
            return data

    def destroy_assignment_group_with_http_info(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Destroy an Assignment Group  # noqa: E501

        Deletes the assignment group with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_assignment_group_with_http_info(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param int move_assignments_to: The ID of an active Assignment Group to which the assignments that are currently assigned to the destroyed Assignment Group will be assigned. NOTE: If this argument is not provided, any assignments in this Assignment Group will be deleted.
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_group_id', 'move_assignments_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_assignment_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `destroy_assignment_group`")  # noqa: E501
        # verify the required parameter 'assignment_group_id' is set
        if self.api_client.client_side_validation and ('assignment_group_id' not in params or
                                                       params['assignment_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_group_id` when calling `destroy_assignment_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_group_id' in params:
            path_params['assignment_group_id'] = params['assignment_group_id']  # noqa: E501

        query_params = []
        if 'move_assignments_to' in params:
            query_params.append(('move_assignments_to', params['move_assignments_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_assignment_group(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Edit an Assignment Group  # noqa: E501

        Modify an existing Assignment Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_assignment_group(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param str name: The assignment group's name
        :param int position: The position of this assignment group in relation to the other assignment groups
        :param float group_weight: The percent of the total grade that this assignment group represents
        :param str sis_source_id: The sis source id of the Assignment Group
        :param Object integration_data: The integration data of the Assignment Group
        :param str rules: The grading rules that are applied within this assignment group See the Assignment Group object definition for format
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
            return data

    def edit_assignment_group_with_http_info(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Edit an Assignment Group  # noqa: E501

        Modify an existing Assignment Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_assignment_group_with_http_info(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param str name: The assignment group's name
        :param int position: The position of this assignment group in relation to the other assignment groups
        :param float group_weight: The percent of the total grade that this assignment group represents
        :param str sis_source_id: The sis source id of the Assignment Group
        :param Object integration_data: The integration data of the Assignment Group
        :param str rules: The grading rules that are applied within this assignment group See the Assignment Group object definition for format
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_group_id', 'name', 'position', 'group_weight', 'sis_source_id', 'integration_data', 'rules']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_assignment_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `edit_assignment_group`")  # noqa: E501
        # verify the required parameter 'assignment_group_id' is set
        if self.api_client.client_side_validation and ('assignment_group_id' not in params or
                                                       params['assignment_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_group_id` when calling `edit_assignment_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_group_id' in params:
            path_params['assignment_group_id'] = params['assignment_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'position' in params:
            form_params.append(('position', params['position']))  # noqa: E501
        if 'group_weight' in params:
            form_params.append(('group_weight', params['group_weight']))  # noqa: E501
        if 'sis_source_id' in params:
            form_params.append(('sis_source_id', params['sis_source_id']))  # noqa: E501
        if 'integration_data' in params:
            form_params.append(('integration_data', params['integration_data']))  # noqa: E501
        if 'rules' in params:
            form_params.append(('rules', params['rules']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assignment_group(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Get an Assignment Group  # noqa: E501

        Returns the assignment group with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assignment_group(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param list[str] include: Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\" are only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and \"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param int grading_period_id: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist on the account)
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assignment_group_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
            return data

    def get_assignment_group_with_http_info(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """Get an Assignment Group  # noqa: E501

        Returns the assignment group with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assignment_group_with_http_info(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param list[str] include: Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\" are only valid if \"assignments\" is also included. \"score_statistics\" is only valid if \"submission\" and \"assignments\" are also included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param int grading_period_id: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist on the account)
        :return: AssignmentGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_group_id', 'include', 'override_assignment_dates', 'grading_period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assignment_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_assignment_group`")  # noqa: E501
        # verify the required parameter 'assignment_group_id' is set
        if self.api_client.client_side_validation and ('assignment_group_id' not in params or
                                                       params['assignment_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_group_id` when calling `get_assignment_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_group_id' in params:
            path_params['assignment_group_id'] = params['assignment_group_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'override_assignment_dates' in params:
            query_params.append(('override_assignment_dates', params['override_assignment_dates']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignment_groups(self, course_id, **kwargs):  # noqa: E501
        """List assignment groups  # noqa: E501

        Returns the paginated list of assignment groups for the current context. The returned groups are sorted by their position field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_groups(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\", \"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included. \"score_statistics\" requires that the \"assignments\" and \"submission\" options are included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on. If \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.
        :param list[str] assignment_ids: If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as a comma separated string.
        :param list[str] exclude_assignment_submission_types: If \"assignments\" are included, those with the specified submission types will be excluded from the assignment groups.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param int grading_period_id: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist.)
        :param bool scope_assignments_to_student: If true, all assignments returned will apply to the current user in the specified grading period. If assignments apply to other students in the specified grading period, but not the current user, they will not be returned. (Requires the grading_period_id argument and grading periods to exist. In addition, the current user must be a student.)
        :return: list[AssignmentGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignment_groups_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignment_groups_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_assignment_groups_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List assignment groups  # noqa: E501

        Returns the paginated list of assignment groups for the current context. The returned groups are sorted by their position field.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_groups_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: Associations to include with the group. \"discussion_topic\", \"all_dates\", \"can_edit\", \"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included. \"score_statistics\" requires that the \"assignments\" and \"submission\" options are included. The \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on. If \"observed_users\" is passed along with \"assignments\" and \"submission\", submissions for observed users will also be included as an array.
        :param list[str] assignment_ids: If \"assignments\" are included, optionally return only assignments having their ID in this array. This argument may also be passed as a comma separated string.
        :param list[str] exclude_assignment_submission_types: If \"assignments\" are included, those with the specified submission types will be excluded from the assignment groups.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param int grading_period_id: The id of the grading period in which assignment groups are being requested (Requires grading periods to exist.)
        :param bool scope_assignments_to_student: If true, all assignments returned will apply to the current user in the specified grading period. If assignments apply to other students in the specified grading period, but not the current user, they will not be returned. (Requires the grading_period_id argument and grading periods to exist. In addition, the current user must be a student.)
        :return: list[AssignmentGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'include', 'assignment_ids', 'exclude_assignment_submission_types', 'override_assignment_dates', 'grading_period_id', 'scope_assignments_to_student']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignment_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignment_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501
        if 'exclude_assignment_submission_types' in params:
            query_params.append(('exclude_assignment_submission_types', params['exclude_assignment_submission_types']))  # noqa: E501
            collection_formats['exclude_assignment_submission_types'] = 'csv'  # noqa: E501
        if 'override_assignment_dates' in params:
            query_params.append(('override_assignment_dates', params['override_assignment_dates']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'scope_assignments_to_student' in params:
            query_params.append(('scope_assignments_to_student', params['scope_assignments_to_student']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssignmentGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
