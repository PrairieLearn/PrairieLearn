# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class JwTsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_jwt(self, **kwargs):  # noqa: E501
        """Create JWT  # noqa: E501

        Create a unique jwt for using with other Canvas services  Generates a different JWT each time it's called, each one expires after a short window (1 hour)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_jwt(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] workflows: Adds additional data to the JWT to be used by the consuming service workflow
        :param str context_type: The type of the context in case a specified workflow uses it to consuming the service. Case insensitive.
        :param int context_id: The id of the context in case a specified workflow uses it to consuming the service.
        :param str context_uuid: The uuid of the context in case a specified workflow uses it to consuming the service.
        :param bool canvas_audience: Defaults to true. If false, the JWT will be signed, but not encrypted, for use in downstream services. The default encrypted behaviour can be used to talk to canvas itself.
        :return: JWT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_jwt_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_jwt_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_jwt_with_http_info(self, **kwargs):  # noqa: E501
        """Create JWT  # noqa: E501

        Create a unique jwt for using with other Canvas services  Generates a different JWT each time it's called, each one expires after a short window (1 hour)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_jwt_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] workflows: Adds additional data to the JWT to be used by the consuming service workflow
        :param str context_type: The type of the context in case a specified workflow uses it to consuming the service. Case insensitive.
        :param int context_id: The id of the context in case a specified workflow uses it to consuming the service.
        :param str context_uuid: The uuid of the context in case a specified workflow uses it to consuming the service.
        :param bool canvas_audience: Defaults to true. If false, the JWT will be signed, but not encrypted, for use in downstream services. The default encrypted behaviour can be used to talk to canvas itself.
        :return: JWT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['workflows', 'context_type', 'context_id', 'context_uuid', 'canvas_audience']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_jwt" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'workflows' in params:
            form_params.append(('workflows', params['workflows']))  # noqa: E501
            collection_formats['workflows'] = 'csv'  # noqa: E501
        if 'context_type' in params:
            form_params.append(('context_type', params['context_type']))  # noqa: E501
        if 'context_id' in params:
            form_params.append(('context_id', params['context_id']))  # noqa: E501
        if 'context_uuid' in params:
            form_params.append(('context_uuid', params['context_uuid']))  # noqa: E501
        if 'canvas_audience' in params:
            form_params.append(('canvas_audience', params['canvas_audience']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/jwts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JWT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def refresh_jwt(self, jwt, **kwargs):  # noqa: E501
        """Refresh JWT  # noqa: E501

        Refresh a JWT for use with other canvas services  Generates a different JWT each time it's called, each one expires after a short window (1 hour).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_jwt(jwt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt: An existing JWT token to be refreshed. The new token will have the same context and workflows as the existing token. (required)
        :return: JWT
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.refresh_jwt_with_http_info(jwt, **kwargs)  # noqa: E501
        else:
            (data) = self.refresh_jwt_with_http_info(jwt, **kwargs)  # noqa: E501
            return data

    def refresh_jwt_with_http_info(self, jwt, **kwargs):  # noqa: E501
        """Refresh JWT  # noqa: E501

        Refresh a JWT for use with other canvas services  Generates a different JWT each time it's called, each one expires after a short window (1 hour).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refresh_jwt_with_http_info(jwt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str jwt: An existing JWT token to be refreshed. The new token will have the same context and workflows as the existing token. (required)
        :return: JWT
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['jwt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh_jwt" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'jwt' is set
        if self.api_client.client_side_validation and ('jwt' not in params or
                                                       params['jwt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `jwt` when calling `refresh_jwt`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'jwt' in params:
            form_params.append(('jwt', params['jwt']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/jwts/refresh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JWT',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
