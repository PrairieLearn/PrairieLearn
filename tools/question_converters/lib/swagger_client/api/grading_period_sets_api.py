# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GradingPeriodSetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_grading_period_set(self, account_id, grading_period_set_title, **kwargs):  # noqa: E501
        """Create a grading period set  # noqa: E501

        Create and return a new grading period set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_grading_period_set(account_id, grading_period_set_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] grading_period_set_title: The title of the grading period set (required)
        :param list[Array] enrollment_term_ids: A list of associated term ids for the grading period set
        :param list[bool] grading_period_set_weighted: A boolean to determine whether the grading periods in the set are weighted
        :param list[bool] grading_period_set_display_totals_for_all_grading_periods: A boolean to determine whether the totals for all grading periods in the set are displayed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_grading_period_set_with_http_info(account_id, grading_period_set_title, **kwargs)  # noqa: E501
        else:
            (data) = self.create_grading_period_set_with_http_info(account_id, grading_period_set_title, **kwargs)  # noqa: E501
            return data

    def create_grading_period_set_with_http_info(self, account_id, grading_period_set_title, **kwargs):  # noqa: E501
        """Create a grading period set  # noqa: E501

        Create and return a new grading period set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_grading_period_set_with_http_info(account_id, grading_period_set_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] grading_period_set_title: The title of the grading period set (required)
        :param list[Array] enrollment_term_ids: A list of associated term ids for the grading period set
        :param list[bool] grading_period_set_weighted: A boolean to determine whether the grading periods in the set are weighted
        :param list[bool] grading_period_set_display_totals_for_all_grading_periods: A boolean to determine whether the totals for all grading periods in the set are displayed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'grading_period_set_title', 'enrollment_term_ids', 'grading_period_set_weighted', 'grading_period_set_display_totals_for_all_grading_periods']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_grading_period_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_grading_period_set`")  # noqa: E501
        # verify the required parameter 'grading_period_set_title' is set
        if self.api_client.client_side_validation and ('grading_period_set_title' not in params or
                                                       params['grading_period_set_title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_period_set_title` when calling `create_grading_period_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_term_ids' in params:
            form_params.append(('enrollment_term_ids', params['enrollment_term_ids']))  # noqa: E501
            collection_formats['enrollment_term_ids'] = 'csv'  # noqa: E501
        if 'grading_period_set_title' in params:
            form_params.append(('grading_period_set[title]', params['grading_period_set_title']))  # noqa: E501
            collection_formats['grading_period_set[title]'] = 'csv'  # noqa: E501
        if 'grading_period_set_weighted' in params:
            form_params.append(('grading_period_set[weighted]', params['grading_period_set_weighted']))  # noqa: E501
            collection_formats['grading_period_set[weighted]'] = 'csv'  # noqa: E501
        if 'grading_period_set_display_totals_for_all_grading_periods' in params:
            form_params.append(('grading_period_set[display_totals_for_all_grading_periods]', params['grading_period_set_display_totals_for_all_grading_periods']))  # noqa: E501
            collection_formats['grading_period_set[display_totals_for_all_grading_periods]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_period_sets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_grading_period_set(self, account_id, id, **kwargs):  # noqa: E501
        """Delete a grading period set  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_set(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_grading_period_set_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_grading_period_set_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def delete_grading_period_set_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Delete a grading period set  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_set_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_grading_period_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_grading_period_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_grading_period_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_period_sets/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grading_period_sets(self, account_id, **kwargs):  # noqa: E501
        """List grading period sets  # noqa: E501

        Returns the paginated list of grading period sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_period_sets(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grading_period_sets_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grading_period_sets_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_grading_period_sets_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List grading period sets  # noqa: E501

        Returns the paginated list of grading period sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_period_sets_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grading_period_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_grading_period_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_period_sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_grading_period_set(self, account_id, id, grading_period_set_title, **kwargs):  # noqa: E501
        """Update a grading period set  # noqa: E501

        Update an existing grading period set  <b>204 No Content</b> response code is returned if the update was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_grading_period_set(account_id, id, grading_period_set_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] grading_period_set_title: The title of the grading period set (required)
        :param list[Array] enrollment_term_ids: A list of associated term ids for the grading period set
        :param list[bool] grading_period_set_weighted: A boolean to determine whether the grading periods in the set are weighted
        :param list[bool] grading_period_set_display_totals_for_all_grading_periods: A boolean to determine whether the totals for all grading periods in the set are displayed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_grading_period_set_with_http_info(account_id, id, grading_period_set_title, **kwargs)  # noqa: E501
        else:
            (data) = self.update_grading_period_set_with_http_info(account_id, id, grading_period_set_title, **kwargs)  # noqa: E501
            return data

    def update_grading_period_set_with_http_info(self, account_id, id, grading_period_set_title, **kwargs):  # noqa: E501
        """Update a grading period set  # noqa: E501

        Update an existing grading period set  <b>204 No Content</b> response code is returned if the update was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_grading_period_set_with_http_info(account_id, id, grading_period_set_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] grading_period_set_title: The title of the grading period set (required)
        :param list[Array] enrollment_term_ids: A list of associated term ids for the grading period set
        :param list[bool] grading_period_set_weighted: A boolean to determine whether the grading periods in the set are weighted
        :param list[bool] grading_period_set_display_totals_for_all_grading_periods: A boolean to determine whether the totals for all grading periods in the set are displayed
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'grading_period_set_title', 'enrollment_term_ids', 'grading_period_set_weighted', 'grading_period_set_display_totals_for_all_grading_periods']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_grading_period_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_grading_period_set`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_grading_period_set`")  # noqa: E501
        # verify the required parameter 'grading_period_set_title' is set
        if self.api_client.client_side_validation and ('grading_period_set_title' not in params or
                                                       params['grading_period_set_title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_period_set_title` when calling `update_grading_period_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_term_ids' in params:
            form_params.append(('enrollment_term_ids', params['enrollment_term_ids']))  # noqa: E501
            collection_formats['enrollment_term_ids'] = 'csv'  # noqa: E501
        if 'grading_period_set_title' in params:
            form_params.append(('grading_period_set[title]', params['grading_period_set_title']))  # noqa: E501
            collection_formats['grading_period_set[title]'] = 'csv'  # noqa: E501
        if 'grading_period_set_weighted' in params:
            form_params.append(('grading_period_set[weighted]', params['grading_period_set_weighted']))  # noqa: E501
            collection_formats['grading_period_set[weighted]'] = 'csv'  # noqa: E501
        if 'grading_period_set_display_totals_for_all_grading_periods' in params:
            form_params.append(('grading_period_set[display_totals_for_all_grading_periods]', params['grading_period_set_display_totals_for_all_grading_periods']))  # noqa: E501
            collection_formats['grading_period_set[display_totals_for_all_grading_periods]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_period_sets/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
