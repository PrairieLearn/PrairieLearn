# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AuthenticationProvidersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_authentication_provider(self, account_id, **kwargs):  # noqa: E501
        """Add authentication provider  # noqa: E501

        Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, SAML, or X.com.  Each authentication provider is specified as a set of parameters as described below. A provider specification must include an 'auth_type' parameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook', 'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect', 'saml', or 'twitter'. The other recognized parameters depend on this auth_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth_type are ignored.  You can set the 'position' for any provider. The config in the 1st position is considered the default. You can set 'jit_provisioning' for any provider besides Canvas. You can set 'mfa_required' for any provider.  For Apple, the additional recognized parameters are:  - client_id [Required]    The developerâ€™s client identifier, as provided by WWDR. Not available if   configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'sub' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'firstName', 'lastName', and 'sub'.  For Canvas, the additional recognized parameter is:  - self_registration    'all', 'none', or 'observer' - who is allowed to register as a new user  For CAS, the additional recognized parameters are:  - auth_base    The CAS server's URL.  - log_in_url [Optional]    An alternate SSO URL for logging into CAS. You probably should not set   this.  For Clever, the additional recognized parameters are:  - client_id [Required]    The Clever application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Clever application's Client Secret. Not available if configured   globally for Canvas.  - district_id [Optional]    A district's Clever ID. Leave this blank to let Clever handle the details   with its District Picker. This is required for Clever Instant Login to   work in a multi-tenant environment.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), 'sis_id', 'email', 'student_number', or   'teacher_number'. Note that some fields may not be populated for   all users at Clever.  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'id',   'sis_id', 'email', 'student_number', and 'teacher_number'.  For Facebook, the additional recognized parameters are:  - app_id [Required]    The Facebook App ID. Not available if configured globally for Canvas.  - app_secret [Required]    The Facebook App Secret. Not available if configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'first_name', 'id', 'last_name', 'locale', and 'name'.  For GitHub, the additional recognized parameters are:  - domain [Optional]    The domain of a GitHub Enterprise installation. I.e.   github.mycompany.com. If not set, it will default to the public   github.com.  - client_id [Required]    The GitHub application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The GitHub application's Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'login'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'id', 'login', and 'name'.  For Google, the additional recognized parameters are:  - client_id [Required]    The Google application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Google application's Client Secret. Not available if configured   globally for Canvas.  - hosted_domain [Optional]    A Google Apps domain to restrict logins to. See   https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'sub' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'family_name', 'given_name', 'locale', 'name', and 'sub'.  For LDAP, the additional recognized parameters are:  - auth_host    The LDAP server's URL.  - auth_port [Optional, Integer]    The LDAP server's TCP port. (default: 389)  - auth_over_tls [Optional]    Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards   compatibility, booleans are also accepted, with true meaning simple_tls.   If not provided, it will default to start_tls.  - auth_base [Optional]    A default treebase parameter for searches performed against the LDAP   server.  - auth_filter    LDAP search filter. Use !{{login}} as a placeholder for the username   supplied by the user. For example: \"(sAMAccountName=!{{login}})\".  - identifier_format [Optional]    The LDAP attribute to use to look up the Canvas login. Omit to use   the username supplied by the user.  - auth_username    Username  - auth_password    Password  For LinkedIn, the additional recognized parameters are:  - client_id [Required]    The LinkedIn application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The LinkedIn application's Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'emailAddress'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',   'firstName', 'id', 'formattedName', and 'lastName'.  For Microsoft, the additional recognized parameters are:  - application_id [Required]    The application's ID.  - application_secret [Required]    The application's Client Secret (Password)  - tenant [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/   Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant   (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'  - login_attribute [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens   Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note   that email may not always be populated in the user's profile at   Microsoft. Oid will not be populated for personal Microsoft accounts.   Defaults to 'sub'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'name', 'preferred_username', 'oid', and 'sub'.  For OpenID Connect, the additional recognized parameters are:  - client_id [Required]    The application's Client ID.  - client_secret [Required]    The application's Client Secret.  - authorize_url [Required]    The URL for getting starting the OAuth 2.0 web flow  - token_url [Required]    The URL for exchanging the OAuth 2.0 authorization code for an Access   Token and ID Token  - scope [Optional]    Space separated additional scopes to request for the token. Note that   you need not specify the 'openid' scope, or any scopes that can be   automatically inferred by the rules defined at   http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims  - end_session_endpoint [Optional]    URL to send the end user to after logging out of Canvas. See   https://openid.net/specs/openid-connect-session-1_0.html#RPLogout  - userinfo_endpoint [Optional]    URL to request additional claims from. If the initial ID Token received   from the provider cannot be used to satisfy the login_attribute and   all federated_attributes, this endpoint will be queried for additional   information.  - login_attribute [Optional]    The attribute of the ID Token to look up the user's login in Canvas.   Defaults to 'sub'.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider   attribute names, but standard claims are listed at   http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims  For SAML, the additional recognized parameters are:  - metadata [Optional]    An XML document to parse as SAML metadata, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format  - metadata_uri [Optional]    A URI to download the SAML metadata from, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI   will also be saved, and the metadata periodically refreshed, automatically. If   the metadata contains multiple entities, also supply idp_entity_id to distinguish   which one you want (otherwise the only entity in the metadata will be inferred).   If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',   the InCommon or UK Access Management Federation metadata aggregate, respectively,   will be used instead, and additional validation checks will happen (including   validating that the metadata has been properly signed with the   appropriate key).  - idp_entity_id    The SAML IdP's entity ID  - log_in_url    The SAML service's SSO target URL  - log_out_url [Optional]    The SAML service's SLO target URL  - certificate_fingerprint    The SAML service's certificate fingerprint.  - identifier_format    The SAML service's identifier format. Must be one of:    - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress   - urn:oasis:names:tc:SAML:2.0:nameid-format:entity   - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos   - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent   - urn:oasis:names:tc:SAML:2.0:nameid-format:transient   - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified   - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName   - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName  - requested_authn_context [Optional]    The SAML AuthnContext  - sig_alg [Optional]    If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages   are signed with the corresponding algorithm. Supported algorithms are:    - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}   - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}    RSA-SHA1 and RSA-SHA256 are acceptable aliases.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider attribute names.  For X.com, the additional recognized parameters are:  - consumer_key [Required]    The X.com Consumer Key. Not available if configured globally for Canvas.  - consumer_secret [Required]    The X.com Consumer Secret. Not available if configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'user_id' (the default), or 'screen_name'  - parent_registration [Optional] - DEPRECATED 2017-11-03    Accepts a boolean value, true designates the authentication service   for use on parent registrations.  Only one service can be selected   at a time so if set to true all others will be set to false  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'name',   'screen_name', 'time_zone', and 'user_id'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_authentication_provider(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_authentication_provider_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_authentication_provider_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def add_authentication_provider_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Add authentication provider  # noqa: E501

        Add external authentication provider(s) for the account. Services may be Apple, CAS, Facebook, GitHub, Google, LDAP, LinkedIn, Microsoft, OpenID Connect, SAML, or X.com.  Each authentication provider is specified as a set of parameters as described below. A provider specification must include an 'auth_type' parameter with a value of 'apple', 'canvas', 'cas', 'clever', 'facebook', 'github', 'google', 'ldap', 'linkedin', 'microsoft', 'openid_connect', 'saml', or 'twitter'. The other recognized parameters depend on this auth_type; unrecognized parameters are discarded. Provider specifications not specifying a valid auth_type are ignored.  You can set the 'position' for any provider. The config in the 1st position is considered the default. You can set 'jit_provisioning' for any provider besides Canvas. You can set 'mfa_required' for any provider.  For Apple, the additional recognized parameters are:  - client_id [Required]    The developerâ€™s client identifier, as provided by WWDR. Not available if   configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'sub' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'firstName', 'lastName', and 'sub'.  For Canvas, the additional recognized parameter is:  - self_registration    'all', 'none', or 'observer' - who is allowed to register as a new user  For CAS, the additional recognized parameters are:  - auth_base    The CAS server's URL.  - log_in_url [Optional]    An alternate SSO URL for logging into CAS. You probably should not set   this.  For Clever, the additional recognized parameters are:  - client_id [Required]    The Clever application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Clever application's Client Secret. Not available if configured   globally for Canvas.  - district_id [Optional]    A district's Clever ID. Leave this blank to let Clever handle the details   with its District Picker. This is required for Clever Instant Login to   work in a multi-tenant environment.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), 'sis_id', 'email', 'student_number', or   'teacher_number'. Note that some fields may not be populated for   all users at Clever.  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'id',   'sis_id', 'email', 'student_number', and 'teacher_number'.  For Facebook, the additional recognized parameters are:  - app_id [Required]    The Facebook App ID. Not available if configured globally for Canvas.  - app_secret [Required]    The Facebook App Secret. Not available if configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'first_name', 'id', 'last_name', 'locale', and 'name'.  For GitHub, the additional recognized parameters are:  - domain [Optional]    The domain of a GitHub Enterprise installation. I.e.   github.mycompany.com. If not set, it will default to the public   github.com.  - client_id [Required]    The GitHub application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The GitHub application's Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'login'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'id', 'login', and 'name'.  For Google, the additional recognized parameters are:  - client_id [Required]    The Google application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The Google application's Client Secret. Not available if configured   globally for Canvas.  - hosted_domain [Optional]    A Google Apps domain to restrict logins to. See   https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'sub' (the default), or 'email'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'family_name', 'given_name', 'locale', 'name', and 'sub'.  For LDAP, the additional recognized parameters are:  - auth_host    The LDAP server's URL.  - auth_port [Optional, Integer]    The LDAP server's TCP port. (default: 389)  - auth_over_tls [Optional]    Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards   compatibility, booleans are also accepted, with true meaning simple_tls.   If not provided, it will default to start_tls.  - auth_base [Optional]    A default treebase parameter for searches performed against the LDAP   server.  - auth_filter    LDAP search filter. Use !{{login}} as a placeholder for the username   supplied by the user. For example: \"(sAMAccountName=!{{login}})\".  - identifier_format [Optional]    The LDAP attribute to use to look up the Canvas login. Omit to use   the username supplied by the user.  - auth_username    Username  - auth_password    Password  For LinkedIn, the additional recognized parameters are:  - client_id [Required]    The LinkedIn application's Client ID. Not available if configured globally   for Canvas.  - client_secret [Required]    The LinkedIn application's Client Secret. Not available if configured   globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'id' (the default), or 'emailAddress'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',   'firstName', 'id', 'formattedName', and 'lastName'.  For Microsoft, the additional recognized parameters are:  - application_id [Required]    The application's ID.  - application_secret [Required]    The application's Client Secret (Password)  - tenant [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/   Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant   (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'  - login_attribute [Optional]    See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens   Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note   that email may not always be populated in the user's profile at   Microsoft. Oid will not be populated for personal Microsoft accounts.   Defaults to 'sub'  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'email',   'name', 'preferred_username', 'oid', and 'sub'.  For OpenID Connect, the additional recognized parameters are:  - client_id [Required]    The application's Client ID.  - client_secret [Required]    The application's Client Secret.  - authorize_url [Required]    The URL for getting starting the OAuth 2.0 web flow  - token_url [Required]    The URL for exchanging the OAuth 2.0 authorization code for an Access   Token and ID Token  - scope [Optional]    Space separated additional scopes to request for the token. Note that   you need not specify the 'openid' scope, or any scopes that can be   automatically inferred by the rules defined at   http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims  - end_session_endpoint [Optional]    URL to send the end user to after logging out of Canvas. See   https://openid.net/specs/openid-connect-session-1_0.html#RPLogout  - userinfo_endpoint [Optional]    URL to request additional claims from. If the initial ID Token received   from the provider cannot be used to satisfy the login_attribute and   all federated_attributes, this endpoint will be queried for additional   information.  - login_attribute [Optional]    The attribute of the ID Token to look up the user's login in Canvas.   Defaults to 'sub'.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider   attribute names, but standard claims are listed at   http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims  For SAML, the additional recognized parameters are:  - metadata [Optional]    An XML document to parse as SAML metadata, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format  - metadata_uri [Optional]    A URI to download the SAML metadata from, and automatically populate idp_entity_id,   log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI   will also be saved, and the metadata periodically refreshed, automatically. If   the metadata contains multiple entities, also supply idp_entity_id to distinguish   which one you want (otherwise the only entity in the metadata will be inferred).   If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',   the InCommon or UK Access Management Federation metadata aggregate, respectively,   will be used instead, and additional validation checks will happen (including   validating that the metadata has been properly signed with the   appropriate key).  - idp_entity_id    The SAML IdP's entity ID  - log_in_url    The SAML service's SSO target URL  - log_out_url [Optional]    The SAML service's SLO target URL  - certificate_fingerprint    The SAML service's certificate fingerprint.  - identifier_format    The SAML service's identifier format. Must be one of:    - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress   - urn:oasis:names:tc:SAML:2.0:nameid-format:entity   - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos   - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent   - urn:oasis:names:tc:SAML:2.0:nameid-format:transient   - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified   - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName   - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName  - requested_authn_context [Optional]    The SAML AuthnContext  - sig_alg [Optional]    If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages   are signed with the corresponding algorithm. Supported algorithms are:    - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}   - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}    RSA-SHA1 and RSA-SHA256 are acceptable aliases.  - federated_attributes [Optional]    See FederatedAttributesConfig. Any value is allowed for the provider attribute names.  For X.com, the additional recognized parameters are:  - consumer_key [Required]    The X.com Consumer Key. Not available if configured globally for Canvas.  - consumer_secret [Required]    The X.com Consumer Secret. Not available if configured globally for Canvas.  - login_attribute [Optional]    The attribute to use to look up the user's login in Canvas. Either   'user_id' (the default), or 'screen_name'  - parent_registration [Optional] - DEPRECATED 2017-11-03    Accepts a boolean value, true designates the authentication service   for use on parent registrations.  Only one service can be selected   at a time so if set to true all others will be set to false  - federated_attributes [Optional]    See FederatedAttributesConfig. Valid provider attributes are 'name',   'screen_name', 'time_zone', and 'user_id'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_authentication_provider_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_authentication_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `add_authentication_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/authentication_providers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authentication_provider(self, account_id, id, **kwargs):  # noqa: E501
        """Delete authentication provider  # noqa: E501

        Delete the config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authentication_provider(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def delete_authentication_provider_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Delete authentication provider  # noqa: E501

        Delete the config  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authentication_provider_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authentication_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_authentication_provider`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_authentication_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/authentication_providers/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_authentication_provider(self, account_id, id, **kwargs):  # noqa: E501
        """Get authentication provider  # noqa: E501

        Get the specified authentication provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authentication_provider(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_authentication_provider_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get authentication provider  # noqa: E501

        Get the specified authentication provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_authentication_provider_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authentication_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_authentication_provider`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_authentication_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/authentication_providers/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_authentication_providers(self, account_id, **kwargs):  # noqa: E501
        """List authentication providers  # noqa: E501

        Returns a paginated list of authentication providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authentication_providers(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[AuthenticationProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_authentication_providers_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_authentication_providers_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_authentication_providers_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List authentication providers  # noqa: E501

        Returns a paginated list of authentication providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_authentication_providers_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[AuthenticationProvider]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_authentication_providers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_authentication_providers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/authentication_providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AuthenticationProvider]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_account_auth_settings(self, account_id, **kwargs):  # noqa: E501
        """show account auth settings  # noqa: E501

        The way to get the current state of each account level setting that's relevant to Single Sign On configuration  You can list the current state of each setting with \"update_sso_settings\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_account_auth_settings(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: SSOSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_account_auth_settings_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_account_auth_settings_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def show_account_auth_settings_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """show account auth settings  # noqa: E501

        The way to get the current state of each account level setting that's relevant to Single Sign On configuration  You can list the current state of each setting with \"update_sso_settings\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_account_auth_settings_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: SSOSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_account_auth_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `show_account_auth_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/sso_settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SSOSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_account_auth_settings(self, account_id, **kwargs):  # noqa: E501
        """update account auth settings  # noqa: E501

        For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup.  This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is.  Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set.  You can list the current state of each setting with \"show_sso_settings\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_auth_settings(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: SSOSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_account_auth_settings_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_account_auth_settings_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def update_account_auth_settings_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """update account auth settings  # noqa: E501

        For various cases of mixed SSO configurations, you may need to set some configuration at the account level to handle the particulars of your setup.  This endpoint accepts a PUT request to set several possible account settings. All setting are optional on each request, any that are not provided at all are simply retained as is.  Any that provide the key but a null-ish value (blank string, null, undefined) will be UN-set.  You can list the current state of each setting with \"show_sso_settings\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_account_auth_settings_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: SSOSettings
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_account_auth_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_account_auth_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/sso_settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SSOSettings',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_authentication_provider(self, account_id, id, **kwargs):  # noqa: E501
        """Update authentication provider  # noqa: E501

        Update an authentication provider using the same options as the create endpoint. You can not update an existing provider to a new authentication type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authentication_provider(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_authentication_provider_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def update_authentication_provider_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Update authentication provider  # noqa: E501

        Update an authentication provider using the same options as the create endpoint. You can not update an existing provider to a new authentication type.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_authentication_provider_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: AuthenticationProvider
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_authentication_provider" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_authentication_provider`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_authentication_provider`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/authentication_providers/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AuthenticationProvider',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
