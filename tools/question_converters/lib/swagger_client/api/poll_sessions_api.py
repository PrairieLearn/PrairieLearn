# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PollSessionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def close_opened_poll_session(self, poll_id, id, **kwargs):  # noqa: E501
        """Close an opened poll session  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_opened_poll_session(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.close_opened_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.close_opened_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
            return data

    def close_opened_poll_session_with_http_info(self, poll_id, id, **kwargs):  # noqa: E501
        """Close an opened poll session  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.close_opened_poll_session_with_http_info(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method close_opened_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `close_opened_poll_session`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `close_opened_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions/{id}/close', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_single_poll_session(self, poll_id, poll_sessions_course_id, **kwargs):  # noqa: E501
        """Create a single poll session  # noqa: E501

        Create a new poll session for this poll  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_poll_session(poll_id, poll_sessions_course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param list[int] poll_sessions_course_id: The id of the course this session is associated with. (required)
        :param list[int] poll_sessions_course_section_id: The id of the course section this session is associated with.
        :param list[bool] poll_sessions_has_public_results: Whether or not results are viewable by students.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_single_poll_session_with_http_info(poll_id, poll_sessions_course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_single_poll_session_with_http_info(poll_id, poll_sessions_course_id, **kwargs)  # noqa: E501
            return data

    def create_single_poll_session_with_http_info(self, poll_id, poll_sessions_course_id, **kwargs):  # noqa: E501
        """Create a single poll session  # noqa: E501

        Create a new poll session for this poll  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_poll_session_with_http_info(poll_id, poll_sessions_course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param list[int] poll_sessions_course_id: The id of the course this session is associated with. (required)
        :param list[int] poll_sessions_course_section_id: The id of the course section this session is associated with.
        :param list[bool] poll_sessions_has_public_results: Whether or not results are viewable by students.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'poll_sessions_course_id', 'poll_sessions_course_section_id', 'poll_sessions_has_public_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `create_single_poll_session`")  # noqa: E501
        # verify the required parameter 'poll_sessions_course_id' is set
        if self.api_client.client_side_validation and ('poll_sessions_course_id' not in params or
                                                       params['poll_sessions_course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_sessions_course_id` when calling `create_single_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'poll_sessions_course_id' in params:
            form_params.append(('poll_sessions[course_id]', params['poll_sessions_course_id']))  # noqa: E501
            collection_formats['poll_sessions[course_id]'] = 'csv'  # noqa: E501
        if 'poll_sessions_course_section_id' in params:
            form_params.append(('poll_sessions[course_section_id]', params['poll_sessions_course_section_id']))  # noqa: E501
            collection_formats['poll_sessions[course_section_id]'] = 'csv'  # noqa: E501
        if 'poll_sessions_has_public_results' in params:
            form_params.append(('poll_sessions[has_public_results]', params['poll_sessions_has_public_results']))  # noqa: E501
            collection_formats['poll_sessions[has_public_results]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_poll_session(self, poll_id, id, **kwargs):  # noqa: E501
        """Delete a poll session  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_poll_session(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
            return data

    def delete_poll_session_with_http_info(self, poll_id, id, **kwargs):  # noqa: E501
        """Delete a poll session  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_poll_session_with_http_info(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `delete_poll_session`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_results_for_single_poll_session(self, poll_id, id, **kwargs):  # noqa: E501
        """Get the results for a single poll session  # noqa: E501

        Returns the poll session with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results_for_single_poll_session(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_results_for_single_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_results_for_single_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
            return data

    def get_results_for_single_poll_session_with_http_info(self, poll_id, id, **kwargs):  # noqa: E501
        """Get the results for a single poll session  # noqa: E501

        Returns the poll session with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_results_for_single_poll_session_with_http_info(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_results_for_single_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `get_results_for_single_poll_session`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_results_for_single_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_closed_poll_sessions(self, **kwargs):  # noqa: E501
        """List closed poll sessions  # noqa: E501

        A paginated list of all closed poll sessions available to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_closed_poll_sessions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_closed_poll_sessions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_closed_poll_sessions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_closed_poll_sessions_with_http_info(self, **kwargs):  # noqa: E501
        """List closed poll sessions  # noqa: E501

        A paginated list of all closed poll sessions available to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_closed_poll_sessions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_closed_poll_sessions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/poll_sessions/closed', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_opened_poll_sessions(self, **kwargs):  # noqa: E501
        """List opened poll sessions  # noqa: E501

        A paginated list of all opened poll sessions available to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opened_poll_sessions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_opened_poll_sessions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_opened_poll_sessions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_opened_poll_sessions_with_http_info(self, **kwargs):  # noqa: E501
        """List opened poll sessions  # noqa: E501

        A paginated list of all opened poll sessions available to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_opened_poll_sessions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_opened_poll_sessions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/poll_sessions/opened', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_poll_sessions_for_poll(self, poll_id, **kwargs):  # noqa: E501
        """List poll sessions for a poll  # noqa: E501

        Returns the paginated list of PollSessions in this poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_poll_sessions_for_poll(poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_poll_sessions_for_poll_with_http_info(poll_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_poll_sessions_for_poll_with_http_info(poll_id, **kwargs)  # noqa: E501
            return data

    def list_poll_sessions_for_poll_with_http_info(self, poll_id, **kwargs):  # noqa: E501
        """List poll sessions for a poll  # noqa: E501

        Returns the paginated list of PollSessions in this poll.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_poll_sessions_for_poll_with_http_info(poll_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_poll_sessions_for_poll" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `list_poll_sessions_for_poll`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def open_poll_session(self, poll_id, id, **kwargs):  # noqa: E501
        """Open a poll session  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_poll_session(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.open_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.open_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
            return data

    def open_poll_session_with_http_info(self, poll_id, id, **kwargs):  # noqa: E501
        """Open a poll session  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.open_poll_session_with_http_info(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method open_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `open_poll_session`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `open_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions/{id}/open', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_single_poll_session(self, poll_id, id, **kwargs):  # noqa: E501
        """Update a single poll session  # noqa: E501

        Update an existing poll session for this poll  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_poll_session(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :param list[int] poll_sessions_course_id: The id of the course this session is associated with.
        :param list[int] poll_sessions_course_section_id: The id of the course section this session is associated with.
        :param list[bool] poll_sessions_has_public_results: Whether or not results are viewable by students.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_single_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_single_poll_session_with_http_info(poll_id, id, **kwargs)  # noqa: E501
            return data

    def update_single_poll_session_with_http_info(self, poll_id, id, **kwargs):  # noqa: E501
        """Update a single poll session  # noqa: E501

        Update an existing poll session for this poll  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_poll_session_with_http_info(poll_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str poll_id: ID (required)
        :param str id: ID (required)
        :param list[int] poll_sessions_course_id: The id of the course this session is associated with.
        :param list[int] poll_sessions_course_section_id: The id of the course section this session is associated with.
        :param list[bool] poll_sessions_has_public_results: Whether or not results are viewable by students.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['poll_id', 'id', 'poll_sessions_course_id', 'poll_sessions_course_section_id', 'poll_sessions_has_public_results']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_single_poll_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'poll_id' is set
        if self.api_client.client_side_validation and ('poll_id' not in params or
                                                       params['poll_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `poll_id` when calling `update_single_poll_session`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_single_poll_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'poll_id' in params:
            path_params['poll_id'] = params['poll_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'poll_sessions_course_id' in params:
            form_params.append(('poll_sessions[course_id]', params['poll_sessions_course_id']))  # noqa: E501
            collection_formats['poll_sessions[course_id]'] = 'csv'  # noqa: E501
        if 'poll_sessions_course_section_id' in params:
            form_params.append(('poll_sessions[course_section_id]', params['poll_sessions_course_section_id']))  # noqa: E501
            collection_formats['poll_sessions[course_section_id]'] = 'csv'  # noqa: E501
        if 'poll_sessions_has_public_results' in params:
            form_params.append(('poll_sessions[has_public_results]', params['poll_sessions_has_public_results']))  # noqa: E501
            collection_formats['poll_sessions[has_public_results]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/polls/{poll_id}/poll_sessions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
