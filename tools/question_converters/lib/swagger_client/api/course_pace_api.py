# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CoursePaceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_course_pace(self, course_id, **kwargs):  # noqa: E501
        """Create a Course pace  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course_pace(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param Object end_date: End date of the course pace
        :param str end_date_context: End date context (course, section, hupothetical)
        :param Object start_date: Start date of the course pace
        :param str start_date_context: Start date context (course, section, hupothetical)
        :param bool exclude_weekends: Course pace dates excludes weekends if true
        :param bool hard_end_dates: Course pace uess hard end dates if true
        :param str workflow_state: The state of the course pace
        :param list[str] course_pace_module_item_attributes: Module Items attributes
        :param int context_id: Pace Context ID
        :param str context_type: Pace Context Type (Course, Section, User)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_course_pace_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_course_pace_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_course_pace_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create a Course pace  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course_pace_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param Object end_date: End date of the course pace
        :param str end_date_context: End date context (course, section, hupothetical)
        :param Object start_date: Start date of the course pace
        :param str start_date_context: Start date context (course, section, hupothetical)
        :param bool exclude_weekends: Course pace dates excludes weekends if true
        :param bool hard_end_dates: Course pace uess hard end dates if true
        :param str workflow_state: The state of the course pace
        :param list[str] course_pace_module_item_attributes: Module Items attributes
        :param int context_id: Pace Context ID
        :param str context_type: Pace Context Type (Course, Section, User)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'end_date', 'end_date_context', 'start_date', 'start_date_context', 'exclude_weekends', 'hard_end_dates', 'workflow_state', 'course_pace_module_item_attributes', 'context_id', 'context_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_course_pace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_course_pace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'end_date' in params:
            form_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'end_date_context' in params:
            form_params.append(('end_date_context', params['end_date_context']))  # noqa: E501
        if 'start_date' in params:
            form_params.append(('start_date', params['start_date']))  # noqa: E501
        if 'start_date_context' in params:
            form_params.append(('start_date_context', params['start_date_context']))  # noqa: E501
        if 'exclude_weekends' in params:
            form_params.append(('exclude_weekends', params['exclude_weekends']))  # noqa: E501
        if 'hard_end_dates' in params:
            form_params.append(('hard_end_dates', params['hard_end_dates']))  # noqa: E501
        if 'workflow_state' in params:
            form_params.append(('workflow_state', params['workflow_state']))  # noqa: E501
        if 'course_pace_module_item_attributes' in params:
            form_params.append(('course_pace_module_item_attributes', params['course_pace_module_item_attributes']))  # noqa: E501
            collection_formats['course_pace_module_item_attributes'] = 'csv'  # noqa: E501
        if 'context_id' in params:
            form_params.append(('context_id', params['context_id']))  # noqa: E501
        if 'context_type' in params:
            form_params.append(('context_type', params['context_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_pacing', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursePace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_course_pace(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Delete a Course pace  # noqa: E501

        Returns the updated course pace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_pace(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course_pace (required)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
            return data

    def delete_course_pace_with_http_info(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Delete a Course pace  # noqa: E501

        Returns the updated course pace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_course_pace_with_http_info(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course_pace (required)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_id', 'course_pace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_course_pace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_course_pace`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_course_pace`")  # noqa: E501
        # verify the required parameter 'course_pace_id' is set
        if self.api_client.client_side_validation and ('course_pace_id' not in params or
                                                       params['course_pace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_pace_id` when calling `delete_course_pace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'course_pace_id' in params:
            query_params.append(('course_pace_id', params['course_pace_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_pacing/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursePace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_course_pace(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Show a Course pace  # noqa: E501

        Returns a course pace for the course and pace id provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_course_pace(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course_pace (required)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
            return data

    def show_course_pace_with_http_info(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Show a Course pace  # noqa: E501

        Returns a course pace for the course and pace id provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_course_pace_with_http_info(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course_pace (required)
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_id', 'course_pace_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_course_pace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_course_pace`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `show_course_pace`")  # noqa: E501
        # verify the required parameter 'course_pace_id' is set
        if self.api_client.client_side_validation and ('course_pace_id' not in params or
                                                       params['course_pace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_pace_id` when calling `show_course_pace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'course_pace_id' in params:
            query_params.append(('course_pace_id', params['course_pace_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_pacing/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursePace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_course_pace(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Update a Course pace  # noqa: E501

        Returns the updated course pace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_pace(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course pace (required)
        :param Object end_date: End date of the course pace
        :param bool exclude_weekends: Course pace dates excludes weekends if true
        :param bool hard_end_dates: Course pace uess hard end dates if true
        :param str workflow_state: The state of the course pace
        :param list[str] course_pace_module_item_attributes: Module Items attributes
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_course_pace_with_http_info(id, course_id, course_pace_id, **kwargs)  # noqa: E501
            return data

    def update_course_pace_with_http_info(self, id, course_id, course_pace_id, **kwargs):  # noqa: E501
        """Update a Course pace  # noqa: E501

        Returns the updated course pace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_course_pace_with_http_info(id, course_id, course_pace_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int course_id: The id of the course (required)
        :param int course_pace_id: The id of the course pace (required)
        :param Object end_date: End date of the course pace
        :param bool exclude_weekends: Course pace dates excludes weekends if true
        :param bool hard_end_dates: Course pace uess hard end dates if true
        :param str workflow_state: The state of the course pace
        :param list[str] course_pace_module_item_attributes: Module Items attributes
        :return: CoursePace
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_id', 'course_pace_id', 'end_date', 'exclude_weekends', 'hard_end_dates', 'workflow_state', 'course_pace_module_item_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_course_pace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_course_pace`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_course_pace`")  # noqa: E501
        # verify the required parameter 'course_pace_id' is set
        if self.api_client.client_side_validation and ('course_pace_id' not in params or
                                                       params['course_pace_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_pace_id` when calling `update_course_pace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_pace_id' in params:
            form_params.append(('course_pace_id', params['course_pace_id']))  # noqa: E501
        if 'end_date' in params:
            form_params.append(('end_date', params['end_date']))  # noqa: E501
        if 'exclude_weekends' in params:
            form_params.append(('exclude_weekends', params['exclude_weekends']))  # noqa: E501
        if 'hard_end_dates' in params:
            form_params.append(('hard_end_dates', params['hard_end_dates']))  # noqa: E501
        if 'workflow_state' in params:
            form_params.append(('workflow_state', params['workflow_state']))  # noqa: E501
        if 'course_pace_module_item_attributes' in params:
            form_params.append(('course_pace_module_item_attributes', params['course_pace_module_item_attributes']))  # noqa: E501
            collection_formats['course_pace_module_item_attributes'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/course_pacing/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CoursePace',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
