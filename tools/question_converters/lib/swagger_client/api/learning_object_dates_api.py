# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LearningObjectDatesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_learning_object_s_date_information_assignments(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_assignments(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_assignments_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_assignments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_learning_object_s_date_information_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learning_object_s_date_information_discussion_topics(self, course_id, discussion_topic_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_discussion_topics(course_id, discussion_topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str discussion_topic_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_discussion_topics_with_http_info(self, course_id, discussion_topic_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str discussion_topic_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'discussion_topic_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_discussion_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_discussion_topics`")  # noqa: E501
        # verify the required parameter 'discussion_topic_id' is set
        if self.api_client.client_side_validation and ('discussion_topic_id' not in params or
                                                       params['discussion_topic_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `discussion_topic_id` when calling `get_learning_object_s_date_information_discussion_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'discussion_topic_id' in params:
            path_params['discussion_topic_id'] = params['discussion_topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/discussion_topics/{discussion_topic_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learning_object_s_date_information_files(self, course_id, attachment_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_files(course_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str attachment_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_files_with_http_info(self, course_id, attachment_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str attachment_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'attachment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_files`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `get_learning_object_s_date_information_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/files/{attachment_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learning_object_s_date_information_modules(self, course_id, context_module_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_modules(course_id, context_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str context_module_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_modules_with_http_info(course_id, context_module_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_modules_with_http_info(course_id, context_module_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_modules_with_http_info(self, course_id, context_module_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_modules_with_http_info(course_id, context_module_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str context_module_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'context_module_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_modules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_modules`")  # noqa: E501
        # verify the required parameter 'context_module_id' is set
        if self.api_client.client_side_validation and ('context_module_id' not in params or
                                                       params['context_module_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `context_module_id` when calling `get_learning_object_s_date_information_modules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'context_module_id' in params:
            path_params['context_module_id'] = params['context_module_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/modules/{context_module_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learning_object_s_date_information_pages(self, course_id, url_or_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_pages(course_id, url_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str url_or_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_pages_with_http_info(self, course_id, url_or_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str url_or_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'url_or_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_pages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_pages`")  # noqa: E501
        # verify the required parameter 'url_or_id' is set
        if self.api_client.client_side_validation and ('url_or_id' not in params or
                                                       params['url_or_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `url_or_id` when calling `get_learning_object_s_date_information_pages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'url_or_id' in params:
            path_params['url_or_id'] = params['url_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/pages/{url_or_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_learning_object_s_date_information_quizzes(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_quizzes(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def get_learning_object_s_date_information_quizzes_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get a learning object's date information  # noqa: E501

        Get a learning object's date-related information, including due date, availability dates, override status, and a paginated list of all assignment overrides for the item.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :return: LearningObjectDates
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_learning_object_s_date_information_quizzes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_learning_object_s_date_information_quizzes`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_learning_object_s_date_information_quizzes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/date_details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LearningObjectDates',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_learning_object_s_date_information_assignments(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_assignments(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def update_learning_object_s_date_information_assignments_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_assignments_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'due_at', 'unlock_at', 'lock_at', 'only_visible_to_overrides', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learning_object_s_date_information_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_learning_object_s_date_information_assignments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `update_learning_object_s_date_information_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_at' in params:
            form_params.append(('due_at', params['due_at']))  # noqa: E501
        if 'unlock_at' in params:
            form_params.append(('unlock_at', params['unlock_at']))  # noqa: E501
        if 'lock_at' in params:
            form_params.append(('lock_at', params['lock_at']))  # noqa: E501
        if 'only_visible_to_overrides' in params:
            form_params.append(('only_visible_to_overrides', params['only_visible_to_overrides']))  # noqa: E501
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/date_details', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_learning_object_s_date_information_discussion_topics(self, course_id, discussion_topic_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_discussion_topics(course_id, discussion_topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str discussion_topic_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, **kwargs)  # noqa: E501
            return data

    def update_learning_object_s_date_information_discussion_topics_with_http_info(self, course_id, discussion_topic_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_discussion_topics_with_http_info(course_id, discussion_topic_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str discussion_topic_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'discussion_topic_id', 'due_at', 'unlock_at', 'lock_at', 'only_visible_to_overrides', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learning_object_s_date_information_discussion_topics" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_learning_object_s_date_information_discussion_topics`")  # noqa: E501
        # verify the required parameter 'discussion_topic_id' is set
        if self.api_client.client_side_validation and ('discussion_topic_id' not in params or
                                                       params['discussion_topic_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `discussion_topic_id` when calling `update_learning_object_s_date_information_discussion_topics`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'discussion_topic_id' in params:
            path_params['discussion_topic_id'] = params['discussion_topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_at' in params:
            form_params.append(('due_at', params['due_at']))  # noqa: E501
        if 'unlock_at' in params:
            form_params.append(('unlock_at', params['unlock_at']))  # noqa: E501
        if 'lock_at' in params:
            form_params.append(('lock_at', params['lock_at']))  # noqa: E501
        if 'only_visible_to_overrides' in params:
            form_params.append(('only_visible_to_overrides', params['only_visible_to_overrides']))  # noqa: E501
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/discussion_topics/{discussion_topic_id}/date_details', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_learning_object_s_date_information_files(self, course_id, attachment_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_files(course_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str attachment_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, **kwargs)  # noqa: E501
            return data

    def update_learning_object_s_date_information_files_with_http_info(self, course_id, attachment_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_files_with_http_info(course_id, attachment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str attachment_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'attachment_id', 'due_at', 'unlock_at', 'lock_at', 'only_visible_to_overrides', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learning_object_s_date_information_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_learning_object_s_date_information_files`")  # noqa: E501
        # verify the required parameter 'attachment_id' is set
        if self.api_client.client_side_validation and ('attachment_id' not in params or
                                                       params['attachment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attachment_id` when calling `update_learning_object_s_date_information_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'attachment_id' in params:
            path_params['attachment_id'] = params['attachment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_at' in params:
            form_params.append(('due_at', params['due_at']))  # noqa: E501
        if 'unlock_at' in params:
            form_params.append(('unlock_at', params['unlock_at']))  # noqa: E501
        if 'lock_at' in params:
            form_params.append(('lock_at', params['lock_at']))  # noqa: E501
        if 'only_visible_to_overrides' in params:
            form_params.append(('only_visible_to_overrides', params['only_visible_to_overrides']))  # noqa: E501
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/files/{attachment_id}/date_details', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_learning_object_s_date_information_pages(self, course_id, url_or_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_pages(course_id, url_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str url_or_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, **kwargs)  # noqa: E501
            return data

    def update_learning_object_s_date_information_pages_with_http_info(self, course_id, url_or_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_pages_with_http_info(course_id, url_or_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str url_or_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'url_or_id', 'due_at', 'unlock_at', 'lock_at', 'only_visible_to_overrides', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learning_object_s_date_information_pages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_learning_object_s_date_information_pages`")  # noqa: E501
        # verify the required parameter 'url_or_id' is set
        if self.api_client.client_side_validation and ('url_or_id' not in params or
                                                       params['url_or_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `url_or_id` when calling `update_learning_object_s_date_information_pages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'url_or_id' in params:
            path_params['url_or_id'] = params['url_or_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_at' in params:
            form_params.append(('due_at', params['due_at']))  # noqa: E501
        if 'unlock_at' in params:
            form_params.append(('unlock_at', params['unlock_at']))  # noqa: E501
        if 'lock_at' in params:
            form_params.append(('lock_at', params['lock_at']))  # noqa: E501
        if 'only_visible_to_overrides' in params:
            form_params.append(('only_visible_to_overrides', params['only_visible_to_overrides']))  # noqa: E501
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/pages/{url_or_id}/date_details', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_learning_object_s_date_information_quizzes(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_quizzes(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def update_learning_object_s_date_information_quizzes_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Update a learning object's date information  # noqa: E501

        Updates date-related information for learning objects, including due date, availability dates, override status, and assignment overrides.  Returns 204 No Content response code if successful.  Note: this API is still under development and will not function until the feature is enabled.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_learning_object_s_date_information_quizzes_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param Object due_at: The learning object's due date. Not applicable for ungraded discussions, pages, and files.
        :param Object unlock_at: The learning object's unlock date. Must be before the due date if there is one.
        :param Object lock_at: The learning object's lock date. Must be after the due date if there is one.
        :param bool only_visible_to_overrides: Whether the learning object is only assigned to students who are targeted by an override.
        :param list[Array] assignment_overrides: List of overrides to apply to the learning object. Overrides that already exist should include an ID and will be updated if needed. New overrides will be created for overrides in the list without an ID. Overrides not included in the list will be deleted. Providing an empty list will delete all of the object's overrides. Keys for each override object can include: 'id', 'title', 'due_at', 'unlock_at', 'lock_at', 'student_ids', and 'course_section_id', 'course_id', 'noop_id', and 'unassign_item'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'due_at', 'unlock_at', 'lock_at', 'only_visible_to_overrides', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_learning_object_s_date_information_quizzes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_learning_object_s_date_information_quizzes`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `update_learning_object_s_date_information_quizzes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'due_at' in params:
            form_params.append(('due_at', params['due_at']))  # noqa: E501
        if 'unlock_at' in params:
            form_params.append(('unlock_at', params['unlock_at']))  # noqa: E501
        if 'lock_at' in params:
            form_params.append(('lock_at', params['lock_at']))  # noqa: E501
        if 'only_visible_to_overrides' in params:
            form_params.append(('only_visible_to_overrides', params['only_visible_to_overrides']))  # noqa: E501
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/date_details', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
