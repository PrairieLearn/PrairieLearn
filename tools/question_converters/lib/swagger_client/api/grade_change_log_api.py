# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GradeChangeLogApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def advanced_query(self, **kwargs):  # noqa: E501
        """Advanced query  # noqa: E501

        List grade change events satisfying all given parameters. Teachers may query for events in courses they teach. Queries without +course_id+ require account administrator rights.  At least one of +course_id+, +assignment_id+, +student_id+, or +grader_id+ must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_query(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: Restrict query to events in the specified course.
        :param int assignment_id: Restrict query to the given assignment. If \"override\" is given, query the course final grade override instead.
        :param int student_id: User id of a student to search grading events for.
        :param int grader_id: User id of a grader to search grading events for.
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.advanced_query_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.advanced_query_with_http_info(**kwargs)  # noqa: E501
            return data

    def advanced_query_with_http_info(self, **kwargs):  # noqa: E501
        """Advanced query  # noqa: E501

        List grade change events satisfying all given parameters. Teachers may query for events in courses they teach. Queries without +course_id+ require account administrator rights.  At least one of +course_id+, +assignment_id+, +student_id+, or +grader_id+ must be specified.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.advanced_query_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: Restrict query to events in the specified course.
        :param int assignment_id: Restrict query to the given assignment. If \"override\" is given, query the course final grade override instead.
        :param int student_id: User id of a student to search grading events for.
        :param int grader_id: User id of a grader to search grading events for.
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'student_id', 'grader_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method advanced_query" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'course_id' in params:
            query_params.append(('course_id', params['course_id']))  # noqa: E501
        if 'assignment_id' in params:
            query_params.append(('assignment_id', params['assignment_id']))  # noqa: E501
        if 'student_id' in params:
            query_params.append(('student_id', params['student_id']))  # noqa: E501
        if 'grader_id' in params:
            query_params.append(('grader_id', params['grader_id']))  # noqa: E501
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/grade_change', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradeChangeEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_by_assignment(self, assignment_id, **kwargs):  # noqa: E501
        """Query by assignment  # noqa: E501

        List grade change events for a given assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_assignment(assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_by_assignment_with_http_info(assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_by_assignment_with_http_info(assignment_id, **kwargs)  # noqa: E501
            return data

    def query_by_assignment_with_http_info(self, assignment_id, **kwargs):  # noqa: E501
        """Query by assignment  # noqa: E501

        List grade change events for a given assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_assignment_with_http_info(assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_by_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `query_by_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/grade_change/assignments/{assignment_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradeChangeEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_by_course(self, course_id, **kwargs):  # noqa: E501
        """Query by course  # noqa: E501

        List grade change events for a given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_by_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_by_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def query_by_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Query by course  # noqa: E501

        List grade change events for a given course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_by_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `query_by_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/grade_change/courses/{course_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradeChangeEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_by_grader(self, grader_id, **kwargs):  # noqa: E501
        """Query by grader  # noqa: E501

        List grade change events for a given grader.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_grader(grader_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grader_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_by_grader_with_http_info(grader_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_by_grader_with_http_info(grader_id, **kwargs)  # noqa: E501
            return data

    def query_by_grader_with_http_info(self, grader_id, **kwargs):  # noqa: E501
        """Query by grader  # noqa: E501

        List grade change events for a given grader.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_grader_with_http_info(grader_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str grader_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['grader_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_by_grader" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'grader_id' is set
        if self.api_client.client_side_validation and ('grader_id' not in params or
                                                       params['grader_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grader_id` when calling `query_by_grader`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'grader_id' in params:
            path_params['grader_id'] = params['grader_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/grade_change/graders/{grader_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradeChangeEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def query_by_student(self, student_id, **kwargs):  # noqa: E501
        """Query by student  # noqa: E501

        List grade change events for a given student.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_student(student_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str student_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.query_by_student_with_http_info(student_id, **kwargs)  # noqa: E501
        else:
            (data) = self.query_by_student_with_http_info(student_id, **kwargs)  # noqa: E501
            return data

    def query_by_student_with_http_info(self, student_id, **kwargs):  # noqa: E501
        """Query by student  # noqa: E501

        List grade change events for a given student.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.query_by_student_with_http_info(student_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str student_id: ID (required)
        :param Object start_time: The beginning of the time range from which you want events.
        :param Object end_time: The end of the time range from which you want events.
        :return: list[GradeChangeEvent]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['student_id', 'start_time', 'end_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method query_by_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'student_id' is set
        if self.api_client.client_side_validation and ('student_id' not in params or
                                                       params['student_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `student_id` when calling `query_by_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'student_id' in params:
            path_params['student_id'] = params['student_id']  # noqa: E501

        query_params = []
        if 'start_time' in params:
            query_params.append(('start_time', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('end_time', params['end_time']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/audit/grade_change/students/{student_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradeChangeEvent]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
