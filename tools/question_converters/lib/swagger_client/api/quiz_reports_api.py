# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def abort_generation_of_report_or_remove_previously_generated_one(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Abort the generation of a report, or remove a previously generated one  # noqa: E501

        This API allows you to cancel a previous request you issued for a report to be generated. Or in the case of an already generated report, you'd like to remove it, perhaps to generate it another time with an updated version that provides new features.  You must check the report's generation status before attempting to use this interface. See the \"workflow_state\" property of the QuizReport's Progress object for more information. Only when the progress reports itself in a \"queued\" state can the generation be aborted.  *Responses*  - <code>204 No Content</code> if your request was accepted - <code>422 Unprocessable Entity</code> if the report is not being generated   or can not be aborted at this stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_generation_of_report_or_remove_previously_generated_one(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.abort_generation_of_report_or_remove_previously_generated_one_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.abort_generation_of_report_or_remove_previously_generated_one_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def abort_generation_of_report_or_remove_previously_generated_one_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Abort the generation of a report, or remove a previously generated one  # noqa: E501

        This API allows you to cancel a previous request you issued for a report to be generated. Or in the case of an already generated report, you'd like to remove it, perhaps to generate it another time with an updated version that provides new features.  You must check the report's generation status before attempting to use this interface. See the \"workflow_state\" property of the QuizReport's Progress object for more information. Only when the progress reports itself in a \"queued\" state can the generation be aborted.  *Responses*  - <code>204 No Content</code> if your request was accepted - <code>422 Unprocessable Entity</code> if the report is not being generated   or can not be aborted at this stage  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.abort_generation_of_report_or_remove_previously_generated_one_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method abort_generation_of_report_or_remove_previously_generated_one" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `abort_generation_of_report_or_remove_previously_generated_one`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `abort_generation_of_report_or_remove_previously_generated_one`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `abort_generation_of_report_or_remove_previously_generated_one`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_quiz_report(self, course_id, quiz_id, quiz_report_report_type, **kwargs):  # noqa: E501
        """Create a quiz report  # noqa: E501

        Create and return a new report for this quiz. If a previously generated report matches the arguments and is still current (i.e. there have been no new submissions), it will be returned.  *Responses*  * <code>400 Bad Request</code> if the specified report type is invalid * <code>409 Conflict</code> if a quiz report of the specified type is already being   generated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_report(course_id, quiz_id, quiz_report_report_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str quiz_report_report_type: The type of report to be generated. (required)
        :param bool quiz_report_includes_all_versions: Whether the report should consider all submissions or only the most recent. Defaults to false, ignored for item_analysis.
        :param Object include: Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)
        :return: QuizReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quiz_report_with_http_info(course_id, quiz_id, quiz_report_report_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quiz_report_with_http_info(course_id, quiz_id, quiz_report_report_type, **kwargs)  # noqa: E501
            return data

    def create_quiz_report_with_http_info(self, course_id, quiz_id, quiz_report_report_type, **kwargs):  # noqa: E501
        """Create a quiz report  # noqa: E501

        Create and return a new report for this quiz. If a previously generated report matches the arguments and is still current (i.e. there have been no new submissions), it will be returned.  *Responses*  * <code>400 Bad Request</code> if the specified report type is invalid * <code>409 Conflict</code> if a quiz report of the specified type is already being   generated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_report_with_http_info(course_id, quiz_id, quiz_report_report_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str quiz_report_report_type: The type of report to be generated. (required)
        :param bool quiz_report_includes_all_versions: Whether the report should consider all submissions or only the most recent. Defaults to false, ignored for item_analysis.
        :param Object include: Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)
        :return: QuizReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'quiz_report_report_type', 'quiz_report_includes_all_versions', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quiz_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_quiz_report`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `create_quiz_report`")  # noqa: E501
        # verify the required parameter 'quiz_report_report_type' is set
        if self.api_client.client_side_validation and ('quiz_report_report_type' not in params or
                                                       params['quiz_report_report_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_report_report_type` when calling `create_quiz_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_report_report_type' in params:
            form_params.append(('quiz_report[report_type]', params['quiz_report_report_type']))  # noqa: E501
        if 'quiz_report_includes_all_versions' in params:
            form_params.append(('quiz_report[includes_all_versions]', params['quiz_report_includes_all_versions']))  # noqa: E501
        if 'include' in params:
            form_params.append(('include', params['include']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quiz_report(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a quiz report  # noqa: E501

        Returns the data for a single quiz report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_report(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param Object include: Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)
        :return: QuizReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quiz_report_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quiz_report_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def get_quiz_report_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a quiz report  # noqa: E501

        Returns the data for a single quiz report.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_report_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param Object include: Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)
        :return: QuizReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quiz_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_quiz_report`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_quiz_report`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_quiz_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_all_quiz_reports(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Retrieve all quiz reports  # noqa: E501

        Returns a list of all available reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_quiz_reports(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param bool includes_all_versions: Whether to retrieve reports that consider all the submissions or only the most recent. Defaults to false, ignored for item_analysis reports.
        :return: list[QuizReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_all_quiz_reports_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_all_quiz_reports_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def retrieve_all_quiz_reports_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Retrieve all quiz reports  # noqa: E501

        Returns a list of all available reports.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_all_quiz_reports_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param bool includes_all_versions: Whether to retrieve reports that consider all the submissions or only the most recent. Defaults to false, ignored for item_analysis reports.
        :return: list[QuizReport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'includes_all_versions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_all_quiz_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `retrieve_all_quiz_reports`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `retrieve_all_quiz_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []
        if 'includes_all_versions' in params:
            query_params.append(('includes_all_versions', params['includes_all_versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/reports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QuizReport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
