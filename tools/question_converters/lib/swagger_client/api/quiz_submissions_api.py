# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizSubmissionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def complete_quiz_submission_turn_it_in(self, course_id, quiz_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Complete the quiz submission (turn it in).  # noqa: E501

        Complete the quiz submission by marking it as complete and grading it. When the quiz submission has been marked as complete, no further modifications will be allowed.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if an invalid access code is specified * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass * <b>403 Forbidden</b> if an invalid token is specified * <b>400 Bad Request</b> if the QS is already complete * <b>400 Bad Request</b> if the attempt parameter is missing * <b>400 Bad Request</b> if the attempt parameter is not the latest attempt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_quiz_submission_turn_it_in(course_id, quiz_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission that should be completed. Note that this must be the latest attempt index, as earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when this Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.complete_quiz_submission_turn_it_in_with_http_info(course_id, quiz_id, id, attempt, validation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.complete_quiz_submission_turn_it_in_with_http_info(course_id, quiz_id, id, attempt, validation_token, **kwargs)  # noqa: E501
            return data

    def complete_quiz_submission_turn_it_in_with_http_info(self, course_id, quiz_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Complete the quiz submission (turn it in).  # noqa: E501

        Complete the quiz submission by marking it as complete and grading it. When the quiz submission has been marked as complete, no further modifications will be allowed.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if an invalid access code is specified * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass * <b>403 Forbidden</b> if an invalid token is specified * <b>400 Bad Request</b> if the QS is already complete * <b>400 Bad Request</b> if the attempt parameter is missing * <b>400 Bad Request</b> if the attempt parameter is not the latest attempt  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.complete_quiz_submission_turn_it_in_with_http_info(course_id, quiz_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission that should be completed. Note that this must be the latest attempt index, as earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when this Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id', 'attempt', 'validation_token', 'access_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method complete_quiz_submission_turn_it_in" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `complete_quiz_submission_turn_it_in`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `complete_quiz_submission_turn_it_in`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `complete_quiz_submission_turn_it_in`")  # noqa: E501
        # verify the required parameter 'attempt' is set
        if self.api_client.client_side_validation and ('attempt' not in params or
                                                       params['attempt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attempt` when calling `complete_quiz_submission_turn_it_in`")  # noqa: E501
        # verify the required parameter 'validation_token' is set
        if self.api_client.client_side_validation and ('validation_token' not in params or
                                                       params['validation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `validation_token` when calling `complete_quiz_submission_turn_it_in`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attempt' in params:
            form_params.append(('attempt', params['attempt']))  # noqa: E501
        if 'validation_token' in params:
            form_params.append(('validation_token', params['validation_token']))  # noqa: E501
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_quiz_submission_start_quiz_taking_session(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Create the quiz submission (start a quiz-taking session)  # noqa: E501

        Start taking a Quiz by creating a QuizSubmission which you can use to answer questions and submit your answers.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>400 Bad Request</b> if the quiz is locked * <b>403 Forbidden</b> if an invalid access code is specified * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass * <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_submission_start_quiz_taking_session(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str access_code: Access code for the Quiz, if any.
        :param bool preview: Whether this should be a preview QuizSubmission and not count towards the user's course record. Teachers only.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quiz_submission_start_quiz_taking_session_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quiz_submission_start_quiz_taking_session_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def create_quiz_submission_start_quiz_taking_session_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Create the quiz submission (start a quiz-taking session)  # noqa: E501

        Start taking a Quiz by creating a QuizSubmission which you can use to answer questions and submit your answers.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>400 Bad Request</b> if the quiz is locked * <b>403 Forbidden</b> if an invalid access code is specified * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass * <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_submission_start_quiz_taking_session_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str access_code: Access code for the Quiz, if any.
        :param bool preview: Whether this should be a preview QuizSubmission and not count towards the user's course record. Teachers only.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'access_code', 'preview']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quiz_submission_start_quiz_taking_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_quiz_submission_start_quiz_taking_session`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `create_quiz_submission_start_quiz_taking_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501
        if 'preview' in params:
            form_params.append(('preview', params['preview']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_quiz_submissions(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get all quiz submissions.  # noqa: E501

        Get a list of all submissions for this quiz. Users who can view or manage grades for a course will have submissions from multiple users returned. A user who can only submit will have only their own submissions returned. When a user has an in-progress submission, only that submission is returned. When there isn't an in-progress quiz_submission, all completed submissions, including previous attempts, are returned.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_quiz_submissions(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_quiz_submissions_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_quiz_submissions_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def get_all_quiz_submissions_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get all quiz submissions.  # noqa: E501

        Get a list of all submissions for this quiz. Users who can view or manage grades for a course will have submissions from multiple users returned. A user who can only submit will have only their own submissions returned. When a user has an in-progress submission, only that submission is returned. When there isn't an in-progress quiz_submission, all completed submissions, including previous attempts, are returned.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_quiz_submissions_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_quiz_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_all_quiz_submissions`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_all_quiz_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_current_quiz_submission_times(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get current quiz submission times.  # noqa: E501

        Get the current timing data for the quiz attempt, both the end_at timestamp and the time_left parameter.  <b>Responses</b>  * <b>200 OK</b> if the request was successful  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_quiz_submission_times(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_current_quiz_submission_times_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_current_quiz_submission_times_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def get_current_quiz_submission_times_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get current quiz submission times.  # noqa: E501

        Get the current timing data for the quiz attempt, both the end_at timestamp and the time_left parameter.  <b>Responses</b>  * <b>200 OK</b> if the request was successful  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_current_quiz_submission_times_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_current_quiz_submission_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_current_quiz_submission_times`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_current_quiz_submission_times`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_current_quiz_submission_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quiz_submission(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get the quiz submission.  # noqa: E501

        Get the submission for this quiz for the current user.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_submission(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quiz_submission_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quiz_submission_with_http_info(course_id, quiz_id, **kwargs)  # noqa: E501
            return data

    def get_quiz_submission_with_http_info(self, course_id, quiz_id, **kwargs):  # noqa: E501
        """Get the quiz submission.  # noqa: E501

        Get the submission for this quiz for the current user.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_submission_with_http_info(course_id, quiz_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quiz_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_quiz_submission`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_quiz_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submission', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_quiz_submission(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a single quiz submission.  # noqa: E501

        Get a single quiz submission.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz_submission(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_quiz_submission_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_quiz_submission_with_http_info(course_id, quiz_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_quiz_submission_with_http_info(self, course_id, quiz_id, id, **kwargs):  # noqa: E501
        """Get a single quiz submission.  # noqa: E501

        Get a single quiz submission.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz_submission_with_http_info(course_id, quiz_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Associations to include with the quiz submission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_quiz_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_quiz_submission`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `get_single_quiz_submission`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_quiz_submission`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_student_question_scores_and_comments(self, course_id, quiz_id, id, quiz_submissions_attempt, **kwargs):  # noqa: E501
        """Update student question scores and comments.  # noqa: E501

        Update the amount of points a student has scored for questions they've answered, provide comments for the student about their answer(s), or simply fudge the total score by a specific amount of points.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if you are not a teacher in this course * <b>400 Bad Request</b> if the attempt parameter is missing or invalid * <b>400 Bad Request</b> if the specified QS attempt is not yet complete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_student_question_scores_and_comments(course_id, quiz_id, id, quiz_submissions_attempt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param list[int] quiz_submissions_attempt: The attempt number of the quiz submission that should be updated. This attempt MUST be already completed. (required)
        :param list[float] quiz_submissions_fudge_points: Amount of positive or negative points to fudge the total score by.
        :param list[Hash] quiz_submissions_questions: A set of scores and comments for each question answered by the student. The keys are the question IDs, and the values are hashes of `score` and `comment` entries. See {Appendix: Manual Scoring} for more on this parameter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_student_question_scores_and_comments_with_http_info(course_id, quiz_id, id, quiz_submissions_attempt, **kwargs)  # noqa: E501
        else:
            (data) = self.update_student_question_scores_and_comments_with_http_info(course_id, quiz_id, id, quiz_submissions_attempt, **kwargs)  # noqa: E501
            return data

    def update_student_question_scores_and_comments_with_http_info(self, course_id, quiz_id, id, quiz_submissions_attempt, **kwargs):  # noqa: E501
        """Update student question scores and comments.  # noqa: E501

        Update the amount of points a student has scored for questions they've answered, provide comments for the student about their answer(s), or simply fudge the total score by a specific amount of points.  <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if you are not a teacher in this course * <b>400 Bad Request</b> if the attempt parameter is missing or invalid * <b>400 Bad Request</b> if the specified QS attempt is not yet complete  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_student_question_scores_and_comments_with_http_info(course_id, quiz_id, id, quiz_submissions_attempt, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param str id: ID (required)
        :param list[int] quiz_submissions_attempt: The attempt number of the quiz submission that should be updated. This attempt MUST be already completed. (required)
        :param list[float] quiz_submissions_fudge_points: Amount of positive or negative points to fudge the total score by.
        :param list[Hash] quiz_submissions_questions: A set of scores and comments for each question answered by the student. The keys are the question IDs, and the values are hashes of `score` and `comment` entries. See {Appendix: Manual Scoring} for more on this parameter.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'id', 'quiz_submissions_attempt', 'quiz_submissions_fudge_points', 'quiz_submissions_questions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_student_question_scores_and_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_student_question_scores_and_comments`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `update_student_question_scores_and_comments`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_student_question_scores_and_comments`")  # noqa: E501
        # verify the required parameter 'quiz_submissions_attempt' is set
        if self.api_client.client_side_validation and ('quiz_submissions_attempt' not in params or
                                                       params['quiz_submissions_attempt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submissions_attempt` when calling `update_student_question_scores_and_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_submissions_attempt' in params:
            form_params.append(('quiz_submissions[attempt]', params['quiz_submissions_attempt']))  # noqa: E501
            collection_formats['quiz_submissions[attempt]'] = 'csv'  # noqa: E501
        if 'quiz_submissions_fudge_points' in params:
            form_params.append(('quiz_submissions[fudge_points]', params['quiz_submissions_fudge_points']))  # noqa: E501
            collection_formats['quiz_submissions[fudge_points]'] = 'csv'  # noqa: E501
        if 'quiz_submissions_questions' in params:
            form_params.append(('quiz_submissions[questions]', params['quiz_submissions_questions']))  # noqa: E501
            collection_formats['quiz_submissions[questions]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
