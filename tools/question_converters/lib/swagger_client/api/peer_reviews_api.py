# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PeerReviewsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_peer_review_courses(self, course_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Create Peer Review  # noqa: E501

        Create a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_peer_review_courses(course_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to assign as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
            return data

    def create_peer_review_courses_with_http_info(self, course_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Create Peer Review  # noqa: E501

        Create a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to assign as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'submission_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_peer_review_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `create_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `create_peer_review_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('user_id', params['user_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeerReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_peer_review_sections(self, section_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Create Peer Review  # noqa: E501

        Create a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_peer_review_sections(section_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to assign as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
            return data

    def create_peer_review_sections_with_http_info(self, section_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Create Peer Review  # noqa: E501

        Create a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to assign as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'submission_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_peer_review_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `create_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `create_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `create_peer_review_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('user_id', params['user_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeerReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_peer_review_courses(self, course_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Delete Peer Review  # noqa: E501

        Delete a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_peer_review_courses(course_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to delete as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
            return data

    def delete_peer_review_courses_with_http_info(self, course_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Delete Peer Review  # noqa: E501

        Delete a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_peer_review_courses_with_http_info(course_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to delete as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'submission_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_peer_review_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `delete_peer_review_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `delete_peer_review_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeerReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_peer_review_sections(self, section_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Delete Peer Review  # noqa: E501

        Delete a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_peer_review_sections(section_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to delete as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, **kwargs)  # noqa: E501
            return data

    def delete_peer_review_sections_with_http_info(self, section_id, assignment_id, submission_id, user_id, **kwargs):  # noqa: E501
        """Delete Peer Review  # noqa: E501

        Delete a peer review for the assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_peer_review_sections_with_http_info(section_id, assignment_id, submission_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param int user_id: user_id to delete as reviewer on this assignment (required)
        :return: PeerReview
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'submission_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_peer_review_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `delete_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `delete_peer_review_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `delete_peer_review_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PeerReview',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_peer_reviews_courses_peer_reviews(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_courses_peer_reviews(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_peer_reviews_courses_peer_reviews_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_peer_reviews_courses_peer_reviews_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_all_peer_reviews_courses_peer_reviews_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_courses_peer_reviews_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_peer_reviews_courses_peer_reviews" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_all_peer_reviews_courses_peer_reviews`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_all_peer_reviews_courses_peer_reviews`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeerReview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_peer_reviews_courses_submissions(self, course_id, assignment_id, submission_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_courses_submissions(course_id, assignment_id, submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_peer_reviews_courses_submissions_with_http_info(course_id, assignment_id, submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_peer_reviews_courses_submissions_with_http_info(course_id, assignment_id, submission_id, **kwargs)  # noqa: E501
            return data

    def get_all_peer_reviews_courses_submissions_with_http_info(self, course_id, assignment_id, submission_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_courses_submissions_with_http_info(course_id, assignment_id, submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'submission_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_peer_reviews_courses_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_all_peer_reviews_courses_submissions`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_all_peer_reviews_courses_submissions`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `get_all_peer_reviews_courses_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeerReview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_peer_reviews_sections_peer_reviews(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_sections_peer_reviews(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_peer_reviews_sections_peer_reviews_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_peer_reviews_sections_peer_reviews_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_all_peer_reviews_sections_peer_reviews_with_http_info(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_sections_peer_reviews_with_http_info(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_peer_reviews_sections_peer_reviews" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_all_peer_reviews_sections_peer_reviews`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_all_peer_reviews_sections_peer_reviews`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeerReview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_peer_reviews_sections_submissions(self, section_id, assignment_id, submission_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_sections_submissions(section_id, assignment_id, submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_peer_reviews_sections_submissions_with_http_info(section_id, assignment_id, submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_peer_reviews_sections_submissions_with_http_info(section_id, assignment_id, submission_id, **kwargs)  # noqa: E501
            return data

    def get_all_peer_reviews_sections_submissions_with_http_info(self, section_id, assignment_id, submission_id, **kwargs):  # noqa: E501
        """Get all Peer Reviews  # noqa: E501

        Get a list of all Peer Reviews for this assignment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_peer_reviews_sections_submissions_with_http_info(section_id, assignment_id, submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param list[str] include: Associations to include with the peer review.
        :return: list[PeerReview]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'submission_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_peer_reviews_sections_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_all_peer_reviews_sections_submissions`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_all_peer_reviews_sections_submissions`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `get_all_peer_reviews_sections_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PeerReview]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
