# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BlueprintCoursesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def begin_migration_to_push_to_associated_courses(self, course_id, template_id, **kwargs):  # noqa: E501
        """Begin a migration to push to associated courses  # noqa: E501

        Begins a migration to push recently updated content to all associated courses. Only one migration can be running at a time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.begin_migration_to_push_to_associated_courses(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str comment: An optional comment to be included in the sync history.
        :param bool send_notification: Send a notification to the calling user when the sync completes.
        :param bool copy_settings: Whether course settings should be copied over to associated courses. Defaults to true for newly associated courses.
        :param bool publish_after_initial_sync: If set, newly associated courses will be automatically published after the sync completes
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.begin_migration_to_push_to_associated_courses_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.begin_migration_to_push_to_associated_courses_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def begin_migration_to_push_to_associated_courses_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Begin a migration to push to associated courses  # noqa: E501

        Begins a migration to push recently updated content to all associated courses. Only one migration can be running at a time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.begin_migration_to_push_to_associated_courses_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str comment: An optional comment to be included in the sync history.
        :param bool send_notification: Send a notification to the calling user when the sync completes.
        :param bool copy_settings: Whether course settings should be copied over to associated courses. Defaults to true for newly associated courses.
        :param bool publish_after_initial_sync: If set, newly associated courses will be automatically published after the sync completes
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id', 'comment', 'send_notification', 'copy_settings', 'publish_after_initial_sync']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method begin_migration_to_push_to_associated_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `begin_migration_to_push_to_associated_courses`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `begin_migration_to_push_to_associated_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'send_notification' in params:
            form_params.append(('send_notification', params['send_notification']))  # noqa: E501
        if 'copy_settings' in params:
            form_params.append(('copy_settings', params['copy_settings']))  # noqa: E501
        if 'publish_after_initial_sync' in params:
            form_params.append(('publish_after_initial_sync', params['publish_after_initial_sync']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_associated_course_information(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get associated course information  # noqa: E501

        Returns a list of courses that are configured to receive updates from this blueprint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associated_course_information(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_associated_course_information_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_associated_course_information_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def get_associated_course_information_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get associated course information  # noqa: E501

        Returns a list of courses that are configured to receive updates from this blueprint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_associated_course_information_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[Course]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associated_course_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_associated_course_information`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `get_associated_course_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Course]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_blueprint_information(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get blueprint information  # noqa: E501

        Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course). However, using specific template ids may become necessary in the future  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blueprint_information(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: BlueprintTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_blueprint_information_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_blueprint_information_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def get_blueprint_information_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get blueprint information  # noqa: E501

        Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course). However, using specific template ids may become necessary in the future  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_blueprint_information_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: BlueprintTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_blueprint_information" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_blueprint_information`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `get_blueprint_information`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_import_details(self, course_id, subscription_id, id, **kwargs):  # noqa: E501
        """Get import details  # noqa: E501

        Show the changes that were propagated to a course associated with a blueprint.  See also {api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_details(course_id, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :param str id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_import_details_with_http_info(course_id, subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_import_details_with_http_info(course_id, subscription_id, id, **kwargs)  # noqa: E501
            return data

    def get_import_details_with_http_info(self, course_id, subscription_id, id, **kwargs):  # noqa: E501
        """Get import details  # noqa: E501

        Show the changes that were propagated to a course associated with a blueprint.  See also {api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_import_details_with_http_info(course_id, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :param str id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_import_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_import_details`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and ('subscription_id' not in params or
                                                       params['subscription_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_id` when calling `get_import_details`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_import_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChangeRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_migration_details(self, course_id, template_id, id, **kwargs):  # noqa: E501
        """Get migration details  # noqa: E501

        Show the changes that were propagated in a blueprint migration. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_details(course_id, template_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_migration_details_with_http_info(course_id, template_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_migration_details_with_http_info(course_id, template_id, id, **kwargs)  # noqa: E501
            return data

    def get_migration_details_with_http_info(self, course_id, template_id, id, **kwargs):  # noqa: E501
        """Get migration details  # noqa: E501

        Show the changes that were propagated in a blueprint migration. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_migration_details_with_http_info(course_id, template_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_migration_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_migration_details`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `get_migration_details`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_migration_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChangeRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unsynced_changes(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get unsynced changes  # noqa: E501

        Retrieve a list of learning objects that have changed since the last blueprint sync operation. If no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unsynced_changes(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unsynced_changes_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unsynced_changes_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def get_unsynced_changes_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Get unsynced changes  # noqa: E501

        Retrieve a list of learning objects that have changed since the last blueprint sync operation. If no syncs have been completed, a ChangeRecord with a change_type of +initial_sync+ is returned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unsynced_changes_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[ChangeRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unsynced_changes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_unsynced_changes`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `get_unsynced_changes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ChangeRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_blueprint_imports(self, course_id, subscription_id, **kwargs):  # noqa: E501
        """List blueprint imports  # noqa: E501

        Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also {api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.  Use 'default' as the subscription_id to use the currently active blueprint subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_imports(course_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :return: list[BlueprintMigration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_blueprint_imports_with_http_info(course_id, subscription_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_blueprint_imports_with_http_info(course_id, subscription_id, **kwargs)  # noqa: E501
            return data

    def list_blueprint_imports_with_http_info(self, course_id, subscription_id, **kwargs):  # noqa: E501
        """List blueprint imports  # noqa: E501

        Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also {api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.  Use 'default' as the subscription_id to use the currently active blueprint subscription.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_imports_with_http_info(course_id, subscription_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :return: list[BlueprintMigration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'subscription_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_blueprint_imports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_blueprint_imports`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and ('subscription_id' not in params or
                                                       params['subscription_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_id` when calling `list_blueprint_imports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintMigration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_blueprint_migrations(self, course_id, template_id, **kwargs):  # noqa: E501
        """List blueprint migrations  # noqa: E501

        Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_migrations(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[BlueprintMigration]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_blueprint_migrations_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_blueprint_migrations_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def list_blueprint_migrations_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """List blueprint migrations  # noqa: E501

        Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_migrations_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :return: list[BlueprintMigration]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_blueprint_migrations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_blueprint_migrations`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `list_blueprint_migrations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintMigration]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_blueprint_subscriptions(self, course_id, **kwargs):  # noqa: E501
        """List blueprint subscriptions  # noqa: E501

        Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_subscriptions(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[BlueprintSubscription]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_blueprint_subscriptions_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_blueprint_subscriptions_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_blueprint_subscriptions_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List blueprint subscriptions  # noqa: E501

        Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blueprint_subscriptions_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[BlueprintSubscription]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_blueprint_subscriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_blueprint_subscriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlueprintSubscription]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_or_remove_restrictions_on_blueprint_course_object(self, course_id, template_id, **kwargs):  # noqa: E501
        """Set or remove restrictions on a blueprint course object  # noqa: E501

        If a blueprint course object is restricted, editing will be limited for copies in associated courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_or_remove_restrictions_on_blueprint_course_object(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str content_type: [String, \"assignment\"|\"attachment\"|\"discussion_topic\"|\"external_tool\"|\"lti-quiz\"|\"quiz\"|\"wiki_page\"] The type of the object.
        :param int content_id: The ID of the object.
        :param bool restricted: Whether to apply restrictions.
        :param Object restrictions: (Optional) If the object is restricted, this specifies a set of restrictions. If not specified, the course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_or_remove_restrictions_on_blueprint_course_object_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_or_remove_restrictions_on_blueprint_course_object_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def set_or_remove_restrictions_on_blueprint_course_object_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Set or remove restrictions on a blueprint course object  # noqa: E501

        If a blueprint course object is restricted, editing will be limited for copies in associated courses.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_or_remove_restrictions_on_blueprint_course_object_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str content_type: [String, \"assignment\"|\"attachment\"|\"discussion_topic\"|\"external_tool\"|\"lti-quiz\"|\"quiz\"|\"wiki_page\"] The type of the object.
        :param int content_id: The ID of the object.
        :param bool restricted: Whether to apply restrictions.
        :param Object restrictions: (Optional) If the object is restricted, this specifies a set of restrictions. If not specified, the course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id', 'content_type', 'content_id', 'restricted', 'restrictions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_or_remove_restrictions_on_blueprint_course_object" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `set_or_remove_restrictions_on_blueprint_course_object`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `set_or_remove_restrictions_on_blueprint_course_object`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'content_type' in params:
            form_params.append(('content_type', params['content_type']))  # noqa: E501
        if 'content_id' in params:
            form_params.append(('content_id', params['content_id']))  # noqa: E501
        if 'restricted' in params:
            form_params.append(('restricted', params['restricted']))  # noqa: E501
        if 'restrictions' in params:
            form_params.append(('restrictions', params['restrictions']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_blueprint_import(self, course_id, subscription_id, id, **kwargs):  # noqa: E501
        """Show a blueprint import  # noqa: E501

        Shows the status of an import into a course associated with a blueprint. See also {api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_blueprint_import(course_id, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :param str id: ID (required)
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_blueprint_import_with_http_info(course_id, subscription_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_blueprint_import_with_http_info(course_id, subscription_id, id, **kwargs)  # noqa: E501
            return data

    def show_blueprint_import_with_http_info(self, course_id, subscription_id, id, **kwargs):  # noqa: E501
        """Show a blueprint import  # noqa: E501

        Shows the status of an import into a course associated with a blueprint. See also {api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_blueprint_import_with_http_info(course_id, subscription_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str subscription_id: ID (required)
        :param str id: ID (required)
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'subscription_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_blueprint_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `show_blueprint_import`")  # noqa: E501
        # verify the required parameter 'subscription_id' is set
        if self.api_client.client_side_validation and ('subscription_id' not in params or
                                                       params['subscription_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_id` when calling `show_blueprint_import`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_blueprint_import`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'subscription_id' in params:
            path_params['subscription_id'] = params['subscription_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_blueprint_migration(self, course_id, template_id, id, **kwargs):  # noqa: E501
        """Show a blueprint migration  # noqa: E501

        Shows the status of a migration. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_blueprint_migration(course_id, template_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str id: ID (required)
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_blueprint_migration_with_http_info(course_id, template_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_blueprint_migration_with_http_info(course_id, template_id, id, **kwargs)  # noqa: E501
            return data

    def show_blueprint_migration_with_http_info(self, course_id, template_id, id, **kwargs):  # noqa: E501
        """Show a blueprint migration  # noqa: E501

        Shows the status of a migration. This endpoint can be called on a blueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_blueprint_migration_with_http_info(course_id, template_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param str id: ID (required)
        :return: BlueprintMigration
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_blueprint_migration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `show_blueprint_migration`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `show_blueprint_migration`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_blueprint_migration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlueprintMigration',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_associated_courses(self, course_id, template_id, **kwargs):  # noqa: E501
        """Update associated courses  # noqa: E501

        Send a list of course ids to add or remove new associations for the template. Cannot add courses that do not belong to the blueprint course's account. Also cannot add other blueprint courses or courses that already have an association with another blueprint course.  After associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_associated_courses(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param Object course_ids_to_add: Courses to add as associated courses
        :param Object course_ids_to_remove: Courses to remove as associated courses
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_associated_courses_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_associated_courses_with_http_info(course_id, template_id, **kwargs)  # noqa: E501
            return data

    def update_associated_courses_with_http_info(self, course_id, template_id, **kwargs):  # noqa: E501
        """Update associated courses  # noqa: E501

        Send a list of course ids to add or remove new associations for the template. Cannot add courses that do not belong to the blueprint course's account. Also cannot add other blueprint courses or courses that already have an association with another blueprint course.  After associating new courses, {api:MasterCourses::MasterTemplatesController#queue_migration start a sync} to populate their contents from the blueprint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_associated_courses_with_http_info(course_id, template_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str template_id: ID (required)
        :param Object course_ids_to_add: Courses to add as associated courses
        :param Object course_ids_to_remove: Courses to remove as associated courses
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'template_id', 'course_ids_to_add', 'course_ids_to_remove']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_associated_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_associated_courses`")  # noqa: E501
        # verify the required parameter 'template_id' is set
        if self.api_client.client_side_validation and ('template_id' not in params or
                                                       params['template_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `template_id` when calling `update_associated_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'template_id' in params:
            path_params['template_id'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_ids_to_add' in params:
            form_params.append(('course_ids_to_add', params['course_ids_to_add']))  # noqa: E501
        if 'course_ids_to_remove' in params:
            form_params.append(('course_ids_to_remove', params['course_ids_to_remove']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
