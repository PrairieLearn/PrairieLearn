# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SectionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_course_section(self, course_id, **kwargs):  # noqa: E501
        """Create course section  # noqa: E501

        Creates a new section for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course_section(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str course_section_name: The name of the section
        :param str course_section_sis_section_id: The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        :param str course_section_integration_id: The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        :param Object course_section_start_at: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
        :param Object course_section_end_at: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
        :param bool course_section_restrict_enrollments_to_section_dates: Set to true to restrict user enrollments to the start and end dates of the section.
        :param bool enable_sis_reactivation: When true, will first try to re-activate a deleted section with matching sis_section_id if possible.
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_course_section_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_course_section_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_course_section_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create course section  # noqa: E501

        Creates a new section for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_course_section_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str course_section_name: The name of the section
        :param str course_section_sis_section_id: The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        :param str course_section_integration_id: The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.
        :param Object course_section_start_at: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
        :param Object course_section_end_at: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
        :param bool course_section_restrict_enrollments_to_section_dates: Set to true to restrict user enrollments to the start and end dates of the section.
        :param bool enable_sis_reactivation: When true, will first try to re-activate a deleted section with matching sis_section_id if possible.
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'course_section_name', 'course_section_sis_section_id', 'course_section_integration_id', 'course_section_start_at', 'course_section_end_at', 'course_section_restrict_enrollments_to_section_dates', 'enable_sis_reactivation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_course_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_course_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_section_name' in params:
            form_params.append(('course_section[name]', params['course_section_name']))  # noqa: E501
        if 'course_section_sis_section_id' in params:
            form_params.append(('course_section[sis_section_id]', params['course_section_sis_section_id']))  # noqa: E501
        if 'course_section_integration_id' in params:
            form_params.append(('course_section[integration_id]', params['course_section_integration_id']))  # noqa: E501
        if 'course_section_start_at' in params:
            form_params.append(('course_section[start_at]', params['course_section_start_at']))  # noqa: E501
        if 'course_section_end_at' in params:
            form_params.append(('course_section[end_at]', params['course_section_end_at']))  # noqa: E501
        if 'course_section_restrict_enrollments_to_section_dates' in params:
            form_params.append(('course_section[restrict_enrollments_to_section_dates]', params['course_section_restrict_enrollments_to_section_dates']))  # noqa: E501
        if 'enable_sis_reactivation' in params:
            form_params.append(('enable_sis_reactivation', params['enable_sis_reactivation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/sections', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cross_list_section(self, id, new_course_id, **kwargs):  # noqa: E501
        """Cross-list a Section  # noqa: E501

        Move the Section to another course.  The new course may be in a different account (department), but must belong to the same root account (institution).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cross_list_section(id, new_course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str new_course_id: ID (required)
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cross_list_section_with_http_info(id, new_course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cross_list_section_with_http_info(id, new_course_id, **kwargs)  # noqa: E501
            return data

    def cross_list_section_with_http_info(self, id, new_course_id, **kwargs):  # noqa: E501
        """Cross-list a Section  # noqa: E501

        Move the Section to another course.  The new course may be in a different account (department), but must belong to the same root account (institution).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cross_list_section_with_http_info(id, new_course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str new_course_id: ID (required)
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'new_course_id', 'override_sis_stickiness']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cross_list_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `cross_list_section`")  # noqa: E501
        # verify the required parameter 'new_course_id' is set
        if self.api_client.client_side_validation and ('new_course_id' not in params or
                                                       params['new_course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `new_course_id` when calling `cross_list_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'new_course_id' in params:
            path_params['new_course_id'] = params['new_course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'override_sis_stickiness' in params:
            form_params.append(('override_sis_stickiness', params['override_sis_stickiness']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{id}/crosslist/{new_course_id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def de_cross_list_section(self, id, **kwargs):  # noqa: E501
        """De-cross-list a Section  # noqa: E501

        Undo cross-listing of a Section, returning it to its original course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.de_cross_list_section(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.de_cross_list_section_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.de_cross_list_section_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def de_cross_list_section_with_http_info(self, id, **kwargs):  # noqa: E501
        """De-cross-list a Section  # noqa: E501

        Undo cross-listing of a Section, returning it to its original course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.de_cross_list_section_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'override_sis_stickiness']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method de_cross_list_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `de_cross_list_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'override_sis_stickiness' in params:
            query_params.append(('override_sis_stickiness', params['override_sis_stickiness']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{id}/crosslist', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_section(self, id, **kwargs):  # noqa: E501
        """Delete a section  # noqa: E501

        Delete an existing section.  Returns the former Section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_section(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_section_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_section_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_section_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a section  # noqa: E501

        Delete an existing section.  Returns the former Section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_section_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_section(self, id, **kwargs):  # noqa: E501
        """Edit a section  # noqa: E501

        Modify an existing section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_section(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str course_section_name: The name of the section
        :param str course_section_sis_section_id: The sis ID of the section. Must have manage_sis permission to set.
        :param str course_section_integration_id: The integration_id of the section. Must have manage_sis permission to set.
        :param Object course_section_start_at: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
        :param Object course_section_end_at: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
        :param bool course_section_restrict_enrollments_to_section_dates: Set to true to restrict user enrollments to the start and end dates of the section.
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_section_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_section_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def edit_section_with_http_info(self, id, **kwargs):  # noqa: E501
        """Edit a section  # noqa: E501

        Modify an existing section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_section_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str course_section_name: The name of the section
        :param str course_section_sis_section_id: The sis ID of the section. Must have manage_sis permission to set.
        :param str course_section_integration_id: The integration_id of the section. Must have manage_sis permission to set.
        :param Object course_section_start_at: Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z
        :param Object course_section_end_at: Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z
        :param bool course_section_restrict_enrollments_to_section_dates: Set to true to restrict user enrollments to the start and end dates of the section.
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_section_name', 'course_section_sis_section_id', 'course_section_integration_id', 'course_section_start_at', 'course_section_end_at', 'course_section_restrict_enrollments_to_section_dates', 'override_sis_stickiness']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edit_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'course_section_name' in params:
            form_params.append(('course_section[name]', params['course_section_name']))  # noqa: E501
        if 'course_section_sis_section_id' in params:
            form_params.append(('course_section[sis_section_id]', params['course_section_sis_section_id']))  # noqa: E501
        if 'course_section_integration_id' in params:
            form_params.append(('course_section[integration_id]', params['course_section_integration_id']))  # noqa: E501
        if 'course_section_start_at' in params:
            form_params.append(('course_section[start_at]', params['course_section_start_at']))  # noqa: E501
        if 'course_section_end_at' in params:
            form_params.append(('course_section[end_at]', params['course_section_end_at']))  # noqa: E501
        if 'course_section_restrict_enrollments_to_section_dates' in params:
            form_params.append(('course_section[restrict_enrollments_to_section_dates]', params['course_section_restrict_enrollments_to_section_dates']))  # noqa: E501
        if 'override_sis_stickiness' in params:
            form_params.append(('override_sis_stickiness', params['override_sis_stickiness']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_section_information_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get section information  # noqa: E501

        Gets details about a specific section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_section_information_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_section_information_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_section_information_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_section_information_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get section information  # noqa: E501

        Gets details about a specific section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_section_information_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_section_information_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_section_information_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_section_information_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/sections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_section_information_sections(self, id, **kwargs):  # noqa: E501
        """Get section information  # noqa: E501

        Gets details about a specific section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_section_information_sections(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_section_information_sections_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_section_information_sections_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_section_information_sections_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get section information  # noqa: E501

        Gets details about a specific section  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_section_information_sections_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :return: Section
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_section_information_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_section_information_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Section',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_course_sections(self, course_id, **kwargs):  # noqa: E501
        """List course sections  # noqa: E501

        A paginated list of the list of sections for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_course_sections(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :param str search_term: When included, searches course sections for the term. Returns only matching results. Term must be at least 2 characters.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_course_sections_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_course_sections_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_course_sections_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List course sections  # noqa: E501

        A paginated list of the list of sections for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_course_sections_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: - \"students\": Associations to include with the group. Note: this is only   available if you have permission to view users or grades in the course - \"avatar_url\": Include the avatar URLs for students returned. - \"enrollments\": If 'students' is also included, return the section   enrollment for each student - \"total_students\": Returns the total amount of active and invited students   for the course section - \"passback_status\": Include the grade passback status. - \"permissions\": Include whether section grants :manage_calendar permission   to the caller
        :param str search_term: When included, searches course sections for the term. Returns only matching results. Term must be at least 2 characters.
        :return: list[Section]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'include', 'search_term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_course_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_course_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/sections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Section]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
