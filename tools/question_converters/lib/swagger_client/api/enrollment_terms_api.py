# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EnrollmentTermsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_enrollment_term(self, account_id, **kwargs):  # noqa: E501
        """Create enrollment term  # noqa: E501

        Create a new enrollment term for the specified account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_enrollment_term(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str enrollment_term_name: The name of the term.
        :param Object enrollment_term_start_at: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param Object enrollment_term_end_at: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param str enrollment_term_sis_term_id: The unique SIS identifier for the term.
        :param Object enrollment_term_overrides_enrollment_type_start_at: The day/time the term starts, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param Object enrollment_term_overrides_enrollment_type_end_at: The day/time the term ends, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_enrollment_term_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_enrollment_term_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def create_enrollment_term_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Create enrollment term  # noqa: E501

        Create a new enrollment term for the specified account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_enrollment_term_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str enrollment_term_name: The name of the term.
        :param Object enrollment_term_start_at: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param Object enrollment_term_end_at: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param str enrollment_term_sis_term_id: The unique SIS identifier for the term.
        :param Object enrollment_term_overrides_enrollment_type_start_at: The day/time the term starts, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param Object enrollment_term_overrides_enrollment_type_end_at: The day/time the term ends, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'enrollment_term_name', 'enrollment_term_start_at', 'enrollment_term_end_at', 'enrollment_term_sis_term_id', 'enrollment_term_overrides_enrollment_type_start_at', 'enrollment_term_overrides_enrollment_type_end_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_enrollment_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_enrollment_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_term_name' in params:
            form_params.append(('enrollment_term[name]', params['enrollment_term_name']))  # noqa: E501
        if 'enrollment_term_start_at' in params:
            form_params.append(('enrollment_term[start_at]', params['enrollment_term_start_at']))  # noqa: E501
        if 'enrollment_term_end_at' in params:
            form_params.append(('enrollment_term[end_at]', params['enrollment_term_end_at']))  # noqa: E501
        if 'enrollment_term_sis_term_id' in params:
            form_params.append(('enrollment_term[sis_term_id]', params['enrollment_term_sis_term_id']))  # noqa: E501
        if 'enrollment_term_overrides_enrollment_type_start_at' in params:
            form_params.append(('enrollment_term[overrides][enrollment_type][start_at]', params['enrollment_term_overrides_enrollment_type_start_at']))  # noqa: E501
        if 'enrollment_term_overrides_enrollment_type_end_at' in params:
            form_params.append(('enrollment_term[overrides][enrollment_type][end_at]', params['enrollment_term_overrides_enrollment_type_end_at']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/terms', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTerm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_enrollment_term(self, account_id, id, **kwargs):  # noqa: E501
        """Delete enrollment term  # noqa: E501

        Delete the specified enrollment term.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrollment_term(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def delete_enrollment_term_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Delete enrollment term  # noqa: E501

        Delete the specified enrollment term.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_enrollment_term_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_enrollment_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_enrollment_term`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_enrollment_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/terms/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTerm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_enrollment_terms(self, account_id, **kwargs):  # noqa: E501
        """List enrollment terms  # noqa: E501

        An object with a paginated list of all of the terms in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollment_terms(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] workflow_state: If set, only returns terms that are in the given state. Defaults to 'active'.
        :param list[str] include: Array of additional information to include.  \"overrides\":: term start/end dates overridden for different enrollment types \"course_count\":: the number of courses in each term
        :param str term_name: If set, only returns terms that match the given search keyword. Search keyword is matched against term name.
        :return: EnrollmentTermsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_enrollment_terms_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_enrollment_terms_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_enrollment_terms_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List enrollment terms  # noqa: E501

        An object with a paginated list of all of the terms in the account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollment_terms_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] workflow_state: If set, only returns terms that are in the given state. Defaults to 'active'.
        :param list[str] include: Array of additional information to include.  \"overrides\":: term start/end dates overridden for different enrollment types \"course_count\":: the number of courses in each term
        :param str term_name: If set, only returns terms that match the given search keyword. Search keyword is matched against term name.
        :return: EnrollmentTermsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'workflow_state', 'include', 'term_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_enrollment_terms" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_enrollment_terms`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'workflow_state' in params:
            query_params.append(('workflow_state', params['workflow_state']))  # noqa: E501
            collection_formats['workflow_state'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'term_name' in params:
            query_params.append(('term_name', params['term_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/terms', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTermsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_enrollment_term(self, account_id, id, **kwargs):  # noqa: E501
        """Retrieve enrollment term  # noqa: E501

        Retrieves the details for an enrollment term in the account. Includes overrides by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_enrollment_term(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def retrieve_enrollment_term_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Retrieve enrollment term  # noqa: E501

        Retrieves the details for an enrollment term in the account. Includes overrides by default.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_enrollment_term_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_enrollment_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `retrieve_enrollment_term`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `retrieve_enrollment_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/terms/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTerm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_enrollment_term(self, account_id, id, **kwargs):  # noqa: E501
        """Update enrollment term  # noqa: E501

        Update an existing enrollment term for the specified account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrollment_term(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str enrollment_term_name: The name of the term.
        :param Object enrollment_term_start_at: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param Object enrollment_term_end_at: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param str enrollment_term_sis_term_id: The unique SIS identifier for the term.
        :param Object enrollment_term_overrides_enrollment_type_start_at: The day/time the term starts, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param Object enrollment_term_overrides_enrollment_type_end_at: The day/time the term ends, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_enrollment_term_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def update_enrollment_term_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Update enrollment term  # noqa: E501

        Update an existing enrollment term for the specified account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_enrollment_term_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str enrollment_term_name: The name of the term.
        :param Object enrollment_term_start_at: The day/time the term starts. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param Object enrollment_term_end_at: The day/time the term ends. Accepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.
        :param str enrollment_term_sis_term_id: The unique SIS identifier for the term.
        :param Object enrollment_term_overrides_enrollment_type_start_at: The day/time the term starts, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param Object enrollment_term_overrides_enrollment_type_end_at: The day/time the term ends, overridden for the given enrollment type. *enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment
        :param bool override_sis_stickiness: Default is true. If false, any fields containing “sticky” changes will not be updated. See SIS CSV Format documentation for information on which fields can have SIS stickiness
        :return: EnrollmentTerm
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'enrollment_term_name', 'enrollment_term_start_at', 'enrollment_term_end_at', 'enrollment_term_sis_term_id', 'enrollment_term_overrides_enrollment_type_start_at', 'enrollment_term_overrides_enrollment_type_end_at', 'override_sis_stickiness']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_enrollment_term" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_enrollment_term`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_enrollment_term`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_term_name' in params:
            form_params.append(('enrollment_term[name]', params['enrollment_term_name']))  # noqa: E501
        if 'enrollment_term_start_at' in params:
            form_params.append(('enrollment_term[start_at]', params['enrollment_term_start_at']))  # noqa: E501
        if 'enrollment_term_end_at' in params:
            form_params.append(('enrollment_term[end_at]', params['enrollment_term_end_at']))  # noqa: E501
        if 'enrollment_term_sis_term_id' in params:
            form_params.append(('enrollment_term[sis_term_id]', params['enrollment_term_sis_term_id']))  # noqa: E501
        if 'enrollment_term_overrides_enrollment_type_start_at' in params:
            form_params.append(('enrollment_term[overrides][enrollment_type][start_at]', params['enrollment_term_overrides_enrollment_type_start_at']))  # noqa: E501
        if 'enrollment_term_overrides_enrollment_type_end_at' in params:
            form_params.append(('enrollment_term[overrides][enrollment_type][end_at]', params['enrollment_term_overrides_enrollment_type_end_at']))  # noqa: E501
        if 'override_sis_stickiness' in params:
            form_params.append(('override_sis_stickiness', params['override_sis_stickiness']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/terms/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EnrollmentTerm',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
