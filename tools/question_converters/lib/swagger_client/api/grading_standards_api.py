# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GradingStandardsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_new_grading_standard_accounts(self, account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs):  # noqa: E501
        """Create a new grading standard  # noqa: E501

        Create a new grading standard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_grading_standard_accounts(account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str title: The title for the Grading Standard. (required)
        :param list[str] grading_scheme_entry_name: The name for an entry value within a GradingStandard that describes the range of the value e.g. A- (required)
        :param list[int] grading_scheme_entry_value: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93 (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_grading_standard_accounts_with_http_info(account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_grading_standard_accounts_with_http_info(account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs)  # noqa: E501
            return data

    def create_new_grading_standard_accounts_with_http_info(self, account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs):  # noqa: E501
        """Create a new grading standard  # noqa: E501

        Create a new grading standard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_grading_standard_accounts_with_http_info(account_id, title, grading_scheme_entry_name, grading_scheme_entry_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str title: The title for the Grading Standard. (required)
        :param list[str] grading_scheme_entry_name: The name for an entry value within a GradingStandard that describes the range of the value e.g. A- (required)
        :param list[int] grading_scheme_entry_value: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93 (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'title', 'grading_scheme_entry_name', 'grading_scheme_entry_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_grading_standard_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_new_grading_standard_accounts`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in params or
                                                       params['title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title` when calling `create_new_grading_standard_accounts`")  # noqa: E501
        # verify the required parameter 'grading_scheme_entry_name' is set
        if self.api_client.client_side_validation and ('grading_scheme_entry_name' not in params or
                                                       params['grading_scheme_entry_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_scheme_entry_name` when calling `create_new_grading_standard_accounts`")  # noqa: E501
        # verify the required parameter 'grading_scheme_entry_value' is set
        if self.api_client.client_side_validation and ('grading_scheme_entry_value' not in params or
                                                       params['grading_scheme_entry_value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_scheme_entry_value` when calling `create_new_grading_standard_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'grading_scheme_entry_name' in params:
            form_params.append(('grading_scheme_entry[name]', params['grading_scheme_entry_name']))  # noqa: E501
            collection_formats['grading_scheme_entry[name]'] = 'csv'  # noqa: E501
        if 'grading_scheme_entry_value' in params:
            form_params.append(('grading_scheme_entry[value]', params['grading_scheme_entry_value']))  # noqa: E501
            collection_formats['grading_scheme_entry[value]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_standards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GradingStandard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_new_grading_standard_courses(self, course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs):  # noqa: E501
        """Create a new grading standard  # noqa: E501

        Create a new grading standard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_grading_standard_courses(course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str title: The title for the Grading Standard. (required)
        :param list[str] grading_scheme_entry_name: The name for an entry value within a GradingStandard that describes the range of the value e.g. A- (required)
        :param list[int] grading_scheme_entry_value: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93 (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_grading_standard_courses_with_http_info(course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_grading_standard_courses_with_http_info(course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs)  # noqa: E501
            return data

    def create_new_grading_standard_courses_with_http_info(self, course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, **kwargs):  # noqa: E501
        """Create a new grading standard  # noqa: E501

        Create a new grading standard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_grading_standard_courses_with_http_info(course_id, title, grading_scheme_entry_name, grading_scheme_entry_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str title: The title for the Grading Standard. (required)
        :param list[str] grading_scheme_entry_name: The name for an entry value within a GradingStandard that describes the range of the value e.g. A- (required)
        :param list[int] grading_scheme_entry_value: The value for the name of the entry within a GradingStandard. The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0. e.g. 93 (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'title', 'grading_scheme_entry_name', 'grading_scheme_entry_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_grading_standard_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_new_grading_standard_courses`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in params or
                                                       params['title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title` when calling `create_new_grading_standard_courses`")  # noqa: E501
        # verify the required parameter 'grading_scheme_entry_name' is set
        if self.api_client.client_side_validation and ('grading_scheme_entry_name' not in params or
                                                       params['grading_scheme_entry_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_scheme_entry_name` when calling `create_new_grading_standard_courses`")  # noqa: E501
        # verify the required parameter 'grading_scheme_entry_value' is set
        if self.api_client.client_side_validation and ('grading_scheme_entry_value' not in params or
                                                       params['grading_scheme_entry_value'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_scheme_entry_value` when calling `create_new_grading_standard_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'grading_scheme_entry_name' in params:
            form_params.append(('grading_scheme_entry[name]', params['grading_scheme_entry_name']))  # noqa: E501
            collection_formats['grading_scheme_entry[name]'] = 'csv'  # noqa: E501
        if 'grading_scheme_entry_value' in params:
            form_params.append(('grading_scheme_entry[value]', params['grading_scheme_entry_value']))  # noqa: E501
            collection_formats['grading_scheme_entry[value]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_standards', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GradingStandard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_grading_standard_in_context_accounts(self, account_id, grading_standard_id, **kwargs):  # noqa: E501
        """Get a single grading standard in a context.  # noqa: E501

        Returns a grading standard for the given context that is visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_standard_in_context_accounts(account_id, grading_standard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str grading_standard_id: ID (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_grading_standard_in_context_accounts_with_http_info(account_id, grading_standard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_grading_standard_in_context_accounts_with_http_info(account_id, grading_standard_id, **kwargs)  # noqa: E501
            return data

    def get_single_grading_standard_in_context_accounts_with_http_info(self, account_id, grading_standard_id, **kwargs):  # noqa: E501
        """Get a single grading standard in a context.  # noqa: E501

        Returns a grading standard for the given context that is visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_standard_in_context_accounts_with_http_info(account_id, grading_standard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str grading_standard_id: ID (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'grading_standard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_grading_standard_in_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_single_grading_standard_in_context_accounts`")  # noqa: E501
        # verify the required parameter 'grading_standard_id' is set
        if self.api_client.client_side_validation and ('grading_standard_id' not in params or
                                                       params['grading_standard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_standard_id` when calling `get_single_grading_standard_in_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'grading_standard_id' in params:
            path_params['grading_standard_id'] = params['grading_standard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_standards/{grading_standard_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GradingStandard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_grading_standard_in_context_courses(self, course_id, grading_standard_id, **kwargs):  # noqa: E501
        """Get a single grading standard in a context.  # noqa: E501

        Returns a grading standard for the given context that is visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_standard_in_context_courses(course_id, grading_standard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str grading_standard_id: ID (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_grading_standard_in_context_courses_with_http_info(course_id, grading_standard_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_grading_standard_in_context_courses_with_http_info(course_id, grading_standard_id, **kwargs)  # noqa: E501
            return data

    def get_single_grading_standard_in_context_courses_with_http_info(self, course_id, grading_standard_id, **kwargs):  # noqa: E501
        """Get a single grading standard in a context.  # noqa: E501

        Returns a grading standard for the given context that is visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_standard_in_context_courses_with_http_info(course_id, grading_standard_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str grading_standard_id: ID (required)
        :return: GradingStandard
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'grading_standard_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_grading_standard_in_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_grading_standard_in_context_courses`")  # noqa: E501
        # verify the required parameter 'grading_standard_id' is set
        if self.api_client.client_side_validation and ('grading_standard_id' not in params or
                                                       params['grading_standard_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_standard_id` when calling `get_single_grading_standard_in_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'grading_standard_id' in params:
            path_params['grading_standard_id'] = params['grading_standard_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_standards/{grading_standard_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GradingStandard',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grading_standards_available_in_context_accounts(self, account_id, **kwargs):  # noqa: E501
        """List the grading standards available in a context.  # noqa: E501

        Returns the paginated list of grading standards for the given context that are visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_standards_available_in_context_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[GradingStandard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grading_standards_available_in_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grading_standards_available_in_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_grading_standards_available_in_context_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List the grading standards available in a context.  # noqa: E501

        Returns the paginated list of grading standards for the given context that are visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_standards_available_in_context_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[GradingStandard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grading_standards_available_in_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_grading_standards_available_in_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_standards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradingStandard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grading_standards_available_in_context_courses(self, course_id, **kwargs):  # noqa: E501
        """List the grading standards available in a context.  # noqa: E501

        Returns the paginated list of grading standards for the given context that are visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_standards_available_in_context_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[GradingStandard]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grading_standards_available_in_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grading_standards_available_in_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_grading_standards_available_in_context_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List the grading standards available in a context.  # noqa: E501

        Returns the paginated list of grading standards for the given context that are visible to the user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_standards_available_in_context_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[GradingStandard]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grading_standards_available_in_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_grading_standards_available_in_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_standards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GradingStandard]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
