# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class WebhooksSubscriptionsForPlagiarismPlatformApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_webhook_subscription(self, subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, **kwargs):  # noqa: E501
        """Create a Webhook Subscription  # noqa: E501

        Creates a webook subscription for the specified event type and context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook_subscription(subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_context_id: The id of the context for the subscription. (required)
        :param str subscription_context_type: The type of context for the subscription. Must be 'assignment', 'account', or 'course'. (required)
        :param Object subscription_event_types: Array of strings representing the event types for the subscription. (required)
        :param str subscription_format: Format to deliver the live events. Must be 'live-event' or 'caliper'. (required)
        :param Object subscription_transport_metadata: An object with a single key: 'Url'. Example: { \"Url\": \"sqs.example\" } (required)
        :param str subscription_transport_type: Must be either 'sqs' or 'https'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_webhook_subscription_with_http_info(subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_webhook_subscription_with_http_info(subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, **kwargs)  # noqa: E501
            return data

    def create_webhook_subscription_with_http_info(self, subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, **kwargs):  # noqa: E501
        """Create a Webhook Subscription  # noqa: E501

        Creates a webook subscription for the specified event type and context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_webhook_subscription_with_http_info(subscription_context_id, subscription_context_type, subscription_event_types, subscription_format, subscription_transport_metadata, subscription_transport_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str subscription_context_id: The id of the context for the subscription. (required)
        :param str subscription_context_type: The type of context for the subscription. Must be 'assignment', 'account', or 'course'. (required)
        :param Object subscription_event_types: Array of strings representing the event types for the subscription. (required)
        :param str subscription_format: Format to deliver the live events. Must be 'live-event' or 'caliper'. (required)
        :param Object subscription_transport_metadata: An object with a single key: 'Url'. Example: { \"Url\": \"sqs.example\" } (required)
        :param str subscription_transport_type: Must be either 'sqs' or 'https'. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['subscription_context_id', 'subscription_context_type', 'subscription_event_types', 'subscription_format', 'subscription_transport_metadata', 'subscription_transport_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_webhook_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'subscription_context_id' is set
        if self.api_client.client_side_validation and ('subscription_context_id' not in params or
                                                       params['subscription_context_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_context_id` when calling `create_webhook_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_context_type' is set
        if self.api_client.client_side_validation and ('subscription_context_type' not in params or
                                                       params['subscription_context_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_context_type` when calling `create_webhook_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_event_types' is set
        if self.api_client.client_side_validation and ('subscription_event_types' not in params or
                                                       params['subscription_event_types'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_event_types` when calling `create_webhook_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_format' is set
        if self.api_client.client_side_validation and ('subscription_format' not in params or
                                                       params['subscription_format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_format` when calling `create_webhook_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_transport_metadata' is set
        if self.api_client.client_side_validation and ('subscription_transport_metadata' not in params or
                                                       params['subscription_transport_metadata'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_transport_metadata` when calling `create_webhook_subscription`")  # noqa: E501
        # verify the required parameter 'subscription_transport_type' is set
        if self.api_client.client_side_validation and ('subscription_transport_type' not in params or
                                                       params['subscription_transport_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `subscription_transport_type` when calling `create_webhook_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'subscription_context_id' in params:
            form_params.append(('subscription[ContextId]', params['subscription_context_id']))  # noqa: E501
        if 'subscription_context_type' in params:
            form_params.append(('subscription[ContextType]', params['subscription_context_type']))  # noqa: E501
        if 'subscription_event_types' in params:
            form_params.append(('subscription[EventTypes]', params['subscription_event_types']))  # noqa: E501
        if 'subscription_format' in params:
            form_params.append(('subscription[Format]', params['subscription_format']))  # noqa: E501
        if 'subscription_transport_metadata' in params:
            form_params.append(('subscription[TransportMetadata]', params['subscription_transport_metadata']))  # noqa: E501
        if 'subscription_transport_type' in params:
            form_params.append(('subscription[TransportType]', params['subscription_transport_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/subscriptions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_webhook_subscription(self, id, **kwargs):  # noqa: E501
        """Delete a Webhook Subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_subscription(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_webhook_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete a Webhook Subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_webhook_subscription_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_webhook_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_webhook_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/subscriptions/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_webhook_subscription_for_tool_proxy(self, **kwargs):  # noqa: E501
        """List all Webhook Subscription for a tool proxy  # noqa: E501

        This endpoint returns a paginated list with a default limit of 100 items per result set. You can retrieve the next result set by setting a 'StartKey' header in your next request with the value of the 'EndKey' header in the response.  Example use of a 'StartKey' header object:   { \"Id\":\"71d6dfba-0547-477d-b41d-db8cb528c6d1\",\"DeveloperKey\":\"10000000000001\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_webhook_subscription_for_tool_proxy(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_webhook_subscription_for_tool_proxy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_all_webhook_subscription_for_tool_proxy_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_all_webhook_subscription_for_tool_proxy_with_http_info(self, **kwargs):  # noqa: E501
        """List all Webhook Subscription for a tool proxy  # noqa: E501

        This endpoint returns a paginated list with a default limit of 100 items per result set. You can retrieve the next result set by setting a 'StartKey' header in your next request with the value of the 'EndKey' header in the response.  Example use of a 'StartKey' header object:   { \"Id\":\"71d6dfba-0547-477d-b41d-db8cb528c6d1\",\"DeveloperKey\":\"10000000000001\" }  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_webhook_subscription_for_tool_proxy_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_webhook_subscription_for_tool_proxy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/subscriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_single_webhook_subscription(self, id, **kwargs):  # noqa: E501
        """Show a single Webhook Subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_single_webhook_subscription(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_single_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_single_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def show_single_webhook_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show a single Webhook Subscription  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_single_webhook_subscription_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_single_webhook_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_single_webhook_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/subscriptions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_webhook_subscription(self, id, **kwargs):  # noqa: E501
        """Update a Webhook Subscription  # noqa: E501

        This endpoint uses the same parameters as the create endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_subscription(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_webhook_subscription_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_webhook_subscription_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update a Webhook Subscription  # noqa: E501

        This endpoint uses the same parameters as the create endpoint  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_webhook_subscription_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_webhook_subscription" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_webhook_subscription`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/subscriptions/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
