# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LineItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_line_item(self, course_id, score_maximum, label, **kwargs):  # noqa: E501
        """Create a Line Item  # noqa: E501

        Create a new Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_line_item(course_id, score_maximum, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param float score_maximum: The maximum score for the line item. Scores created for the Line Item may exceed this value. (required)
        :param str label: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment. (required)
        :param str resource_id: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        :param str tag: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        :param str resource_link_id: The resource link id the Line Item should be attached to. This value should match the LTI id of the Canvas assignment associated with the tool.
        :param str start_date_time: The ISO8601 date and time when the line item is made available. Corresponds to the assignment's unlock_at date.
        :param str end_date_time: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment's due_at date.
        :param dict(str, str) httpscanvas_instructure_comltisubmission_type: (EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created. type - 'none' or 'external_tool':: external_tool_url - Submission URL only used when type: 'external_tool'::
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_line_item_with_http_info(course_id, score_maximum, label, **kwargs)  # noqa: E501
        else:
            (data) = self.create_line_item_with_http_info(course_id, score_maximum, label, **kwargs)  # noqa: E501
            return data

    def create_line_item_with_http_info(self, course_id, score_maximum, label, **kwargs):  # noqa: E501
        """Create a Line Item  # noqa: E501

        Create a new Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_line_item_with_http_info(course_id, score_maximum, label, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param float score_maximum: The maximum score for the line item. Scores created for the Line Item may exceed this value. (required)
        :param str label: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment. (required)
        :param str resource_id: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        :param str tag: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        :param str resource_link_id: The resource link id the Line Item should be attached to. This value should match the LTI id of the Canvas assignment associated with the tool.
        :param str start_date_time: The ISO8601 date and time when the line item is made available. Corresponds to the assignment's unlock_at date.
        :param str end_date_time: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment's due_at date.
        :param dict(str, str) httpscanvas_instructure_comltisubmission_type: (EXTENSION) - Optional block to set Assignment Submission Type when creating a new assignment is created. type - 'none' or 'external_tool':: external_tool_url - Submission URL only used when type: 'external_tool'::
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'score_maximum', 'label', 'resource_id', 'tag', 'resource_link_id', 'start_date_time', 'end_date_time', 'httpscanvas_instructure_comltisubmission_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_line_item`")  # noqa: E501
        # verify the required parameter 'score_maximum' is set
        if self.api_client.client_side_validation and ('score_maximum' not in params or
                                                       params['score_maximum'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `score_maximum` when calling `create_line_item`")  # noqa: E501
        # verify the required parameter 'label' is set
        if self.api_client.client_side_validation and ('label' not in params or
                                                       params['label'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `label` when calling `create_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'score_maximum' in params:
            form_params.append(('scoreMaximum', params['score_maximum']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'resource_id' in params:
            form_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
        if 'resource_link_id' in params:
            form_params.append(('resourceLinkId', params['resource_link_id']))  # noqa: E501
        if 'start_date_time' in params:
            form_params.append(('startDateTime', params['start_date_time']))  # noqa: E501
        if 'end_date_time' in params:
            form_params.append(('endDateTime', params['end_date_time']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_type' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission_type', params['httpscanvas_instructure_comltisubmission_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_line_item(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a Line Item  # noqa: E501

        Delete an existing Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_line_item(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_line_item_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a Line Item  # noqa: E501

        Delete an existing Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_line_item_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_line_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_line_items(self, course_id, **kwargs):  # noqa: E501
        """List line Items  # noqa: E501

        List all Line Items for a course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_line_items(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str tag: If specified only Line Items with this tag will be included.
        :param str resource_id: If specified only Line Items with this resource_id will be included.
        :param str resource_link_id: If specified only Line Items attached to the specified resource_link_id will be included.
        :param str limit: May be used to limit the number of Line Items returned in a page
        :param list[str] include: Array of additional information to include.  \"launch_url\":: includes the launch URL for each line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_line_items_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_line_items_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_line_items_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List line Items  # noqa: E501

        List all Line Items for a course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_line_items_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str tag: If specified only Line Items with this tag will be included.
        :param str resource_id: If specified only Line Items with this resource_id will be included.
        :param str resource_link_id: If specified only Line Items attached to the specified resource_link_id will be included.
        :param str limit: May be used to limit the number of Line Items returned in a page
        :param list[str] include: Array of additional information to include.  \"launch_url\":: includes the launch URL for each line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'tag', 'resource_id', 'resource_link_id', 'limit', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_line_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_line_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'tag' in params:
            query_params.append(('tag', params['tag']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501
        if 'resource_link_id' in params:
            query_params.append(('resource_link_id', params['resource_link_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_line_item(self, course_id, id, **kwargs):  # noqa: E501
        """Show a Line Item  # noqa: E501

        Show existing Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_line_item(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Array of additional information to include.  \"launch_url\":: includes the launch URL for this line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def show_line_item_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Show a Line Item  # noqa: E501

        Show existing Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_line_item_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Array of additional information to include.  \"launch_url\":: includes the launch URL for this line item using the \"https\\://canvas.instructure.com/lti/launch_url\" extension
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `show_line_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_line_item(self, course_id, id, **kwargs):  # noqa: E501
        """Update a Line Item  # noqa: E501

        Update new Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_line_item(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param float score_maximum: The maximum score for the line item. Scores created for the Line Item may exceed this value.
        :param str label: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
        :param str resource_id: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        :param str tag: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        :param str start_date_time: The ISO8601 date and time when the line item is made available. Corresponds to the assignment's unlock_at date.
        :param str end_date_time: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment's due_at date.
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_line_item_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def update_line_item_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Update a Line Item  # noqa: E501

        Update new Line Item  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_line_item_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param float score_maximum: The maximum score for the line item. Scores created for the Line Item may exceed this value.
        :param str label: The label for the Line Item. If no resourceLinkId is specified this value will also be used as the name of the placeholder assignment.
        :param str resource_id: A Tool Provider specified id for the Line Item. Multiple line items may share the same resourceId within a given context.
        :param str tag: A value used to qualify a line Item beyond its ids. Line Items may be queried by this value in the List endpoint. Multiple line items can share the same tag within a given context.
        :param str start_date_time: The ISO8601 date and time when the line item is made available. Corresponds to the assignment's unlock_at date.
        :param str end_date_time: The ISO8601 date and time when the line item stops receiving submissions. Corresponds to the assignment's due_at date.
        :return: LineItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'score_maximum', 'label', 'resource_id', 'tag', 'start_date_time', 'end_date_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_line_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_line_item`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_line_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'score_maximum' in params:
            form_params.append(('scoreMaximum', params['score_maximum']))  # noqa: E501
        if 'label' in params:
            form_params.append(('label', params['label']))  # noqa: E501
        if 'resource_id' in params:
            form_params.append(('resourceId', params['resource_id']))  # noqa: E501
        if 'tag' in params:
            form_params.append(('tag', params['tag']))  # noqa: E501
        if 'start_date_time' in params:
            form_params.append(('startDateTime', params['start_date_time']))  # noqa: E501
        if 'end_date_time' in params:
            form_params.append(('endDateTime', params['end_date_time']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
