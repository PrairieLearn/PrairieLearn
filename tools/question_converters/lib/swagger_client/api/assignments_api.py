# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssignmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_create_overrides_in_course(self, course_id, assignment_overrides, **kwargs):  # noqa: E501
        """Batch create overrides in a course  # noqa: E501

        Creates the specified overrides for each assignment.  Handles creation in a transaction, so all records are created or none are.  One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored.  Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_overrides_in_course(course_id, assignment_overrides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[AssignmentOverride] assignment_overrides: Attributes for the new assignment overrides. See {api:AssignmentOverridesController#create Create an assignment override} for available attributes (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_create_overrides_in_course_with_http_info(course_id, assignment_overrides, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_create_overrides_in_course_with_http_info(course_id, assignment_overrides, **kwargs)  # noqa: E501
            return data

    def batch_create_overrides_in_course_with_http_info(self, course_id, assignment_overrides, **kwargs):  # noqa: E501
        """Batch create overrides in a course  # noqa: E501

        Creates the specified overrides for each assignment.  Handles creation in a transaction, so all records are created or none are.  One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored.  Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_create_overrides_in_course_with_http_info(course_id, assignment_overrides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[AssignmentOverride] assignment_overrides: Attributes for the new assignment overrides. See {api:AssignmentOverridesController#create Create an assignment override} for available attributes (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_create_overrides_in_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `batch_create_overrides_in_course`")  # noqa: E501
        # verify the required parameter 'assignment_overrides' is set
        if self.api_client.client_side_validation and ('assignment_overrides' not in params or
                                                       params['assignment_overrides'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_overrides` when calling `batch_create_overrides_in_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/overrides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssignmentOverride]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_retrieve_overrides_in_course(self, course_id, assignment_overrides_id, assignment_overrides_assignment_id, **kwargs):  # noqa: E501
        """Batch retrieve overrides in a course  # noqa: E501

        Returns a list of specified overrides in this course, providing they target sections/groups/students visible to the current user. Returns null elements in the list for requests that were not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_retrieve_overrides_in_course(course_id, assignment_overrides_id, assignment_overrides_assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_overrides_id: Ids of overrides to retrieve (required)
        :param list[str] assignment_overrides_assignment_id: Ids of assignments for each override (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_retrieve_overrides_in_course_with_http_info(course_id, assignment_overrides_id, assignment_overrides_assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_retrieve_overrides_in_course_with_http_info(course_id, assignment_overrides_id, assignment_overrides_assignment_id, **kwargs)  # noqa: E501
            return data

    def batch_retrieve_overrides_in_course_with_http_info(self, course_id, assignment_overrides_id, assignment_overrides_assignment_id, **kwargs):  # noqa: E501
        """Batch retrieve overrides in a course  # noqa: E501

        Returns a list of specified overrides in this course, providing they target sections/groups/students visible to the current user. Returns null elements in the list for requests that were not found.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_retrieve_overrides_in_course_with_http_info(course_id, assignment_overrides_id, assignment_overrides_assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_overrides_id: Ids of overrides to retrieve (required)
        :param list[str] assignment_overrides_assignment_id: Ids of assignments for each override (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_overrides_id', 'assignment_overrides_assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_retrieve_overrides_in_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `batch_retrieve_overrides_in_course`")  # noqa: E501
        # verify the required parameter 'assignment_overrides_id' is set
        if self.api_client.client_side_validation and ('assignment_overrides_id' not in params or
                                                       params['assignment_overrides_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_overrides_id` when calling `batch_retrieve_overrides_in_course`")  # noqa: E501
        # verify the required parameter 'assignment_overrides_assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_overrides_assignment_id' not in params or
                                                       params['assignment_overrides_assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_overrides_assignment_id` when calling `batch_retrieve_overrides_in_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'assignment_overrides_id' in params:
            query_params.append(('assignment_overrides[id]', params['assignment_overrides_id']))  # noqa: E501
            collection_formats['assignment_overrides[id]'] = 'csv'  # noqa: E501
        if 'assignment_overrides_assignment_id' in params:
            query_params.append(('assignment_overrides[assignment_id]', params['assignment_overrides_assignment_id']))  # noqa: E501
            collection_formats['assignment_overrides[assignment_id]'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssignmentOverride]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_update_overrides_in_course(self, course_id, assignment_overrides, **kwargs):  # noqa: E501
        """Batch update overrides in a course  # noqa: E501

        Updates a list of specified overrides for each assignment.  Handles overrides in a transaction, so either all updates are applied or none. See {api:AssignmentOverridesController#update Update an assignment override} for available attributes.  All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.  Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_overrides_in_course(course_id, assignment_overrides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[AssignmentOverride] assignment_overrides: Attributes for the updated overrides. (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_update_overrides_in_course_with_http_info(course_id, assignment_overrides, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_update_overrides_in_course_with_http_info(course_id, assignment_overrides, **kwargs)  # noqa: E501
            return data

    def batch_update_overrides_in_course_with_http_info(self, course_id, assignment_overrides, **kwargs):  # noqa: E501
        """Batch update overrides in a course  # noqa: E501

        Updates a list of specified overrides for each assignment.  Handles overrides in a transaction, so either all updates are applied or none. See {api:AssignmentOverridesController#update Update an assignment override} for available attributes.  All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.  Errors are reported in an errors attribute, an array of errors corresponding to inputs.  Global errors will be reported as a single element errors array  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_overrides_in_course_with_http_info(course_id, assignment_overrides, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[AssignmentOverride] assignment_overrides: Attributes for the updated overrides. (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_update_overrides_in_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `batch_update_overrides_in_course`")  # noqa: E501
        # verify the required parameter 'assignment_overrides' is set
        if self.api_client.client_side_validation and ('assignment_overrides' not in params or
                                                       params['assignment_overrides'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_overrides` when calling `batch_update_overrides_in_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_overrides' in params:
            form_params.append(('assignment_overrides', params['assignment_overrides']))  # noqa: E501
            collection_formats['assignment_overrides'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/overrides', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssignmentOverride]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_update_assignment_dates(self, course_id, **kwargs):  # noqa: E501
        """Bulk update assignment dates  # noqa: E501

        Update due dates and availability dates for multiple assignments in a course.  Accepts a JSON array of objects containing two keys each: +id+, the assignment id, and +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override dates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments} endpoint with +include[]=all_dates+.  This endpoint cannot create or destroy assignment overrides; any existing assignment overrides that are not referenced in the arguments will be left alone. If an override is given, any dates that are not supplied with it will be defaulted. To clear a date, specify null explicitly.  All referenced assignments will be validated before any are saved. A list of errors will be returned if any provided dates are invalid, and no changes will be saved.  The bulk update is performed in a background job, use the {api:ProgressController#show Progress API} to check its status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_assignment_dates(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_update_assignment_dates_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.bulk_update_assignment_dates_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def bulk_update_assignment_dates_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Bulk update assignment dates  # noqa: E501

        Update due dates and availability dates for multiple assignments in a course.  Accepts a JSON array of objects containing two keys each: +id+, the assignment id, and +all_dates+, an array of +AssignmentDate+ structures containing the base and/or override dates for the assignment, as returned from the {api:AssignmentsApiController#index List assignments} endpoint with +include[]=all_dates+.  This endpoint cannot create or destroy assignment overrides; any existing assignment overrides that are not referenced in the arguments will be left alone. If an override is given, any dates that are not supplied with it will be defaulted. To clear a date, specify null explicitly.  All referenced assignments will be validated before any are saved. A list of errors will be returned if any provided dates are invalid, and no changes will be saved.  The bulk update is performed in a background job, use the {api:ProgressController#show Progress API} to check its status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_update_assignment_dates_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_update_assignment_dates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `bulk_update_assignment_dates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/bulk_update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assignment(self, course_id, assignment_name, **kwargs):  # noqa: E501
        """Create an assignment  # noqa: E501

        Create a new assignment for this course. The assignment is created in the active state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment(course_id, assignment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_name: The assignment name. (required)
        :param int assignment_position: The position of this assignment in the group when displaying assignment lists.
        :param list[str] assignment_submission_types: List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.  If not allowing online submissions, your options are:   \"online_quiz\"   \"none\"   \"on_paper\"   \"discussion_topic\"   \"external_tool\"  If you are allowing online submissions, you can have one or many allowed submission types:    \"online_upload\"   \"online_text_entry\"   \"online_url\"   \"media_recording\" (Only valid when the Kaltura plugin is enabled)   \"student_annotation\"
        :param list[str] assignment_allowed_extensions: Allowed extensions if submission_types includes \"online_upload\"  Example:   allowed_extensions: [\"docx\",\"ppt\"]
        :param bool assignment_turnitin_enabled: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        :param bool assignment_vericite_enabled: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        :param str assignment_turnitin_settings: Settings to send along to turnitin. See Assignment object definition for format.
        :param str assignment_integration_data: Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.
        :param str assignment_integration_id: Unique ID from third party integrations
        :param bool assignment_peer_reviews: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        :param bool assignment_automatic_peer_reviews: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        :param bool assignment_notify_of_update: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        :param int assignment_group_category_id: If present, the assignment will become a group assignment assigned to the group.
        :param int assignment_grade_group_students_individually: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        :param str assignment_external_tool_tag_attributes: Hash of external tool parameters if submission_types is [\"external_tool\"]. See Assignment object definition for format.
        :param float assignment_points_possible: The maximum points possible on the assignment.
        :param str assignment_grading_type: The strategy used for grading the assignment. The assignment defaults to \"points\" if this field is omitted.
        :param Object assignment_due_at: The day/time the assignment is due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_lock_at: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_unlock_at: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param str assignment_description: The assignment's description, supports HTML.
        :param int assignment_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        :param list[AssignmentOverride] assignment_assignment_overrides: List of overrides for the assignment.
        :param bool assignment_only_visible_to_overrides: Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)
        :param bool assignment_published: Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students.
        :param int assignment_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.
        :param bool assignment_omit_from_final_grade: Whether this assignment is counted towards a student's final grade.
        :param bool assignment_hide_in_gradebook: Whether this assignment is shown in the gradebook.
        :param bool assignment_quiz_lti: Whether this assignment should use the Quizzes 2 LTI tool. Sets the submission type to 'external_tool' and configures the external tool attributes to use the Quizzes 2 LTI tool configured for this course. Has no effect if no Quizzes 2 LTI tool is configured.
        :param bool assignment_moderated_grading: Whether this assignment is moderated.
        :param int assignment_grader_count: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        :param int assignment_final_grader_id: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        :param bool assignment_grader_comments_visible_to_graders: Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_anonymous_to_graders: Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_names_visible_to_final_grader: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        :param bool assignment_anonymous_grading: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        :param int assignment_allowed_attempts: The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.
        :param int assignment_annotatable_attachment_id: The Attachment ID of the document being annotated.  Only applies when submission_types includes \"student_annotation\".
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assignment_with_http_info(course_id, assignment_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assignment_with_http_info(course_id, assignment_name, **kwargs)  # noqa: E501
            return data

    def create_assignment_with_http_info(self, course_id, assignment_name, **kwargs):  # noqa: E501
        """Create an assignment  # noqa: E501

        Create a new assignment for this course. The assignment is created in the active state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_with_http_info(course_id, assignment_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_name: The assignment name. (required)
        :param int assignment_position: The position of this assignment in the group when displaying assignment lists.
        :param list[str] assignment_submission_types: List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.  If not allowing online submissions, your options are:   \"online_quiz\"   \"none\"   \"on_paper\"   \"discussion_topic\"   \"external_tool\"  If you are allowing online submissions, you can have one or many allowed submission types:    \"online_upload\"   \"online_text_entry\"   \"online_url\"   \"media_recording\" (Only valid when the Kaltura plugin is enabled)   \"student_annotation\"
        :param list[str] assignment_allowed_extensions: Allowed extensions if submission_types includes \"online_upload\"  Example:   allowed_extensions: [\"docx\",\"ppt\"]
        :param bool assignment_turnitin_enabled: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        :param bool assignment_vericite_enabled: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        :param str assignment_turnitin_settings: Settings to send along to turnitin. See Assignment object definition for format.
        :param str assignment_integration_data: Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.
        :param str assignment_integration_id: Unique ID from third party integrations
        :param bool assignment_peer_reviews: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        :param bool assignment_automatic_peer_reviews: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        :param bool assignment_notify_of_update: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        :param int assignment_group_category_id: If present, the assignment will become a group assignment assigned to the group.
        :param int assignment_grade_group_students_individually: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        :param str assignment_external_tool_tag_attributes: Hash of external tool parameters if submission_types is [\"external_tool\"]. See Assignment object definition for format.
        :param float assignment_points_possible: The maximum points possible on the assignment.
        :param str assignment_grading_type: The strategy used for grading the assignment. The assignment defaults to \"points\" if this field is omitted.
        :param Object assignment_due_at: The day/time the assignment is due. Must be between the lock dates if there are lock dates. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_lock_at: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_unlock_at: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param str assignment_description: The assignment's description, supports HTML.
        :param int assignment_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        :param list[AssignmentOverride] assignment_assignment_overrides: List of overrides for the assignment.
        :param bool assignment_only_visible_to_overrides: Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)
        :param bool assignment_published: Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students.
        :param int assignment_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.
        :param bool assignment_omit_from_final_grade: Whether this assignment is counted towards a student's final grade.
        :param bool assignment_hide_in_gradebook: Whether this assignment is shown in the gradebook.
        :param bool assignment_quiz_lti: Whether this assignment should use the Quizzes 2 LTI tool. Sets the submission type to 'external_tool' and configures the external tool attributes to use the Quizzes 2 LTI tool configured for this course. Has no effect if no Quizzes 2 LTI tool is configured.
        :param bool assignment_moderated_grading: Whether this assignment is moderated.
        :param int assignment_grader_count: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        :param int assignment_final_grader_id: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        :param bool assignment_grader_comments_visible_to_graders: Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_anonymous_to_graders: Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_names_visible_to_final_grader: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        :param bool assignment_anonymous_grading: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        :param int assignment_allowed_attempts: The number of submission attempts allowed for this assignment. Set to -1 for unlimited attempts.
        :param int assignment_annotatable_attachment_id: The Attachment ID of the document being annotated.  Only applies when submission_types includes \"student_annotation\".
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_name', 'assignment_position', 'assignment_submission_types', 'assignment_allowed_extensions', 'assignment_turnitin_enabled', 'assignment_vericite_enabled', 'assignment_turnitin_settings', 'assignment_integration_data', 'assignment_integration_id', 'assignment_peer_reviews', 'assignment_automatic_peer_reviews', 'assignment_notify_of_update', 'assignment_group_category_id', 'assignment_grade_group_students_individually', 'assignment_external_tool_tag_attributes', 'assignment_points_possible', 'assignment_grading_type', 'assignment_due_at', 'assignment_lock_at', 'assignment_unlock_at', 'assignment_description', 'assignment_assignment_group_id', 'assignment_assignment_overrides', 'assignment_only_visible_to_overrides', 'assignment_published', 'assignment_grading_standard_id', 'assignment_omit_from_final_grade', 'assignment_hide_in_gradebook', 'assignment_quiz_lti', 'assignment_moderated_grading', 'assignment_grader_count', 'assignment_final_grader_id', 'assignment_grader_comments_visible_to_graders', 'assignment_graders_anonymous_to_graders', 'assignment_graders_names_visible_to_final_grader', 'assignment_anonymous_grading', 'assignment_allowed_attempts', 'assignment_annotatable_attachment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_name' is set
        if self.api_client.client_side_validation and ('assignment_name' not in params or
                                                       params['assignment_name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_name` when calling `create_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_name' in params:
            form_params.append(('assignment[name]', params['assignment_name']))  # noqa: E501
        if 'assignment_position' in params:
            form_params.append(('assignment[position]', params['assignment_position']))  # noqa: E501
        if 'assignment_submission_types' in params:
            form_params.append(('assignment[submission_types]', params['assignment_submission_types']))  # noqa: E501
            collection_formats['assignment[submission_types]'] = 'csv'  # noqa: E501
        if 'assignment_allowed_extensions' in params:
            form_params.append(('assignment[allowed_extensions]', params['assignment_allowed_extensions']))  # noqa: E501
            collection_formats['assignment[allowed_extensions]'] = 'csv'  # noqa: E501
        if 'assignment_turnitin_enabled' in params:
            form_params.append(('assignment[turnitin_enabled]', params['assignment_turnitin_enabled']))  # noqa: E501
        if 'assignment_vericite_enabled' in params:
            form_params.append(('assignment[vericite_enabled]', params['assignment_vericite_enabled']))  # noqa: E501
        if 'assignment_turnitin_settings' in params:
            form_params.append(('assignment[turnitin_settings]', params['assignment_turnitin_settings']))  # noqa: E501
        if 'assignment_integration_data' in params:
            form_params.append(('assignment[integration_data]', params['assignment_integration_data']))  # noqa: E501
        if 'assignment_integration_id' in params:
            form_params.append(('assignment[integration_id]', params['assignment_integration_id']))  # noqa: E501
        if 'assignment_peer_reviews' in params:
            form_params.append(('assignment[peer_reviews]', params['assignment_peer_reviews']))  # noqa: E501
        if 'assignment_automatic_peer_reviews' in params:
            form_params.append(('assignment[automatic_peer_reviews]', params['assignment_automatic_peer_reviews']))  # noqa: E501
        if 'assignment_notify_of_update' in params:
            form_params.append(('assignment[notify_of_update]', params['assignment_notify_of_update']))  # noqa: E501
        if 'assignment_group_category_id' in params:
            form_params.append(('assignment[group_category_id]', params['assignment_group_category_id']))  # noqa: E501
        if 'assignment_grade_group_students_individually' in params:
            form_params.append(('assignment[grade_group_students_individually]', params['assignment_grade_group_students_individually']))  # noqa: E501
        if 'assignment_external_tool_tag_attributes' in params:
            form_params.append(('assignment[external_tool_tag_attributes]', params['assignment_external_tool_tag_attributes']))  # noqa: E501
        if 'assignment_points_possible' in params:
            form_params.append(('assignment[points_possible]', params['assignment_points_possible']))  # noqa: E501
        if 'assignment_grading_type' in params:
            form_params.append(('assignment[grading_type]', params['assignment_grading_type']))  # noqa: E501
        if 'assignment_due_at' in params:
            form_params.append(('assignment[due_at]', params['assignment_due_at']))  # noqa: E501
        if 'assignment_lock_at' in params:
            form_params.append(('assignment[lock_at]', params['assignment_lock_at']))  # noqa: E501
        if 'assignment_unlock_at' in params:
            form_params.append(('assignment[unlock_at]', params['assignment_unlock_at']))  # noqa: E501
        if 'assignment_description' in params:
            form_params.append(('assignment[description]', params['assignment_description']))  # noqa: E501
        if 'assignment_assignment_group_id' in params:
            form_params.append(('assignment[assignment_group_id]', params['assignment_assignment_group_id']))  # noqa: E501
        if 'assignment_assignment_overrides' in params:
            form_params.append(('assignment[assignment_overrides]', params['assignment_assignment_overrides']))  # noqa: E501
            collection_formats['assignment[assignment_overrides]'] = 'csv'  # noqa: E501
        if 'assignment_only_visible_to_overrides' in params:
            form_params.append(('assignment[only_visible_to_overrides]', params['assignment_only_visible_to_overrides']))  # noqa: E501
        if 'assignment_published' in params:
            form_params.append(('assignment[published]', params['assignment_published']))  # noqa: E501
        if 'assignment_grading_standard_id' in params:
            form_params.append(('assignment[grading_standard_id]', params['assignment_grading_standard_id']))  # noqa: E501
        if 'assignment_omit_from_final_grade' in params:
            form_params.append(('assignment[omit_from_final_grade]', params['assignment_omit_from_final_grade']))  # noqa: E501
        if 'assignment_hide_in_gradebook' in params:
            form_params.append(('assignment[hide_in_gradebook]', params['assignment_hide_in_gradebook']))  # noqa: E501
        if 'assignment_quiz_lti' in params:
            form_params.append(('assignment[quiz_lti]', params['assignment_quiz_lti']))  # noqa: E501
        if 'assignment_moderated_grading' in params:
            form_params.append(('assignment[moderated_grading]', params['assignment_moderated_grading']))  # noqa: E501
        if 'assignment_grader_count' in params:
            form_params.append(('assignment[grader_count]', params['assignment_grader_count']))  # noqa: E501
        if 'assignment_final_grader_id' in params:
            form_params.append(('assignment[final_grader_id]', params['assignment_final_grader_id']))  # noqa: E501
        if 'assignment_grader_comments_visible_to_graders' in params:
            form_params.append(('assignment[grader_comments_visible_to_graders]', params['assignment_grader_comments_visible_to_graders']))  # noqa: E501
        if 'assignment_graders_anonymous_to_graders' in params:
            form_params.append(('assignment[graders_anonymous_to_graders]', params['assignment_graders_anonymous_to_graders']))  # noqa: E501
        if 'assignment_graders_names_visible_to_final_grader' in params:
            form_params.append(('assignment[graders_names_visible_to_final_grader]', params['assignment_graders_names_visible_to_final_grader']))  # noqa: E501
        if 'assignment_anonymous_grading' in params:
            form_params.append(('assignment[anonymous_grading]', params['assignment_anonymous_grading']))  # noqa: E501
        if 'assignment_allowed_attempts' in params:
            form_params.append(('assignment[allowed_attempts]', params['assignment_allowed_attempts']))  # noqa: E501
        if 'assignment_annotatable_attachment_id' in params:
            form_params.append(('assignment[annotatable_attachment_id]', params['assignment_annotatable_attachment_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_assignment_override(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create an assignment override  # noqa: E501

        One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_override(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[int] assignment_override_student_ids: The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override.
        :param str assignment_override_title: The title of the adhoc assignment override. Required if student_ids is present, ignored otherwise (the title is set to the name of the targetted group or section instead).
        :param int assignment_override_group_id: The ID of the override's target group. If present, the following conditions must be met for the override to be successful:  1. the assignment MUST be a group assignment (a group_category_id is assigned to it) 2. the ID must identify an active group in the group set the assignment is in 3. the ID must not be targetted by a different override  See {Appendix: Group assignments} for more info.
        :param int assignment_override_course_section_id: The ID of the override's target section. If present, must identify an active section of the assignment's course not already targetted by a different override.
        :param Object assignment_override_due_at: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
        :param Object assignment_override_unlock_at: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
        :param Object assignment_override_lock_at: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_assignment_override_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_assignment_override_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def create_assignment_override_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Create an assignment override  # noqa: E501

        One of student_ids, group_id, or course_section_id must be present. At most one should be present; if multiple are present only the most specific (student_ids first, then group_id, then course_section_id) is used and any others are ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_assignment_override_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[int] assignment_override_student_ids: The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override.
        :param str assignment_override_title: The title of the adhoc assignment override. Required if student_ids is present, ignored otherwise (the title is set to the name of the targetted group or section instead).
        :param int assignment_override_group_id: The ID of the override's target group. If present, the following conditions must be met for the override to be successful:  1. the assignment MUST be a group assignment (a group_category_id is assigned to it) 2. the ID must identify an active group in the group set the assignment is in 3. the ID must not be targetted by a different override  See {Appendix: Group assignments} for more info.
        :param int assignment_override_course_section_id: The ID of the override's target section. If present, must identify an active section of the assignment's course not already targetted by a different override.
        :param Object assignment_override_due_at: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
        :param Object assignment_override_unlock_at: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
        :param Object assignment_override_lock_at: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'assignment_override_student_ids', 'assignment_override_title', 'assignment_override_group_id', 'assignment_override_course_section_id', 'assignment_override_due_at', 'assignment_override_unlock_at', 'assignment_override_lock_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_assignment_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_assignment_override`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_assignment_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_override_student_ids' in params:
            form_params.append(('assignment_override[student_ids]', params['assignment_override_student_ids']))  # noqa: E501
            collection_formats['assignment_override[student_ids]'] = 'csv'  # noqa: E501
        if 'assignment_override_title' in params:
            form_params.append(('assignment_override[title]', params['assignment_override_title']))  # noqa: E501
        if 'assignment_override_group_id' in params:
            form_params.append(('assignment_override[group_id]', params['assignment_override_group_id']))  # noqa: E501
        if 'assignment_override_course_section_id' in params:
            form_params.append(('assignment_override[course_section_id]', params['assignment_override_course_section_id']))  # noqa: E501
        if 'assignment_override_due_at' in params:
            form_params.append(('assignment_override[due_at]', params['assignment_override_due_at']))  # noqa: E501
        if 'assignment_override_unlock_at' in params:
            form_params.append(('assignment_override[unlock_at]', params['assignment_override_unlock_at']))  # noqa: E501
        if 'assignment_override_lock_at' in params:
            form_params.append(('assignment_override[lock_at]', params['assignment_override_lock_at']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/overrides', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assignment(self, course_id, id, **kwargs):  # noqa: E501
        """Delete an assignment  # noqa: E501

        Delete the given assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_assignment_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete an assignment  # noqa: E501

        Delete the given assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_assignment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_assignment_override(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Delete an assignment override  # noqa: E501

        Deletes an override and returns its former details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment_override(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
            return data

    def delete_assignment_override_with_http_info(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Delete an assignment override  # noqa: E501

        Deletes an override and returns its former details.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_assignment_override_with_http_info(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assignment_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_assignment_override`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_assignment_override`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_assignment_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def duplicate_assignment(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Duplicate assignment  # noqa: E501

        Duplicate an assignment and return a json based on result_type argument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_assignment(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str result_type: Optional information: When the root account has the feature `newquizzes_on_quiz_page` enabled and this argument is set to \"Quiz\" the response will be serialized into a quiz format({file:doc/api/quizzes.html#Quiz}); When this argument isn't specified the response will be serialized into an assignment format;
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.duplicate_assignment_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.duplicate_assignment_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def duplicate_assignment_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Duplicate assignment  # noqa: E501

        Duplicate an assignment and return a json based on result_type argument.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.duplicate_assignment_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str result_type: Optional information: When the root account has the feature `newquizzes_on_quiz_page` enabled and this argument is set to \"Quiz\" the response will be serialized into a quiz format({file:doc/api/quizzes.html#Quiz}); When this argument isn't specified the response will be serialized into an assignment format;
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'result_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method duplicate_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `duplicate_assignment`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `duplicate_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'result_type' in params:
            form_params.append(('result_type', params['result_type']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/duplicate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_assignment(self, course_id, id, **kwargs):  # noqa: E501
        """Edit an assignment  # noqa: E501

        Modify an existing assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_assignment(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str assignment_name: The assignment name.
        :param int assignment_position: The position of this assignment in the group when displaying assignment lists.
        :param list[str] assignment_submission_types: Only applies if the assignment doesn't have student submissions.  List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.  If not allowing online submissions, your options are:   \"online_quiz\"   \"none\"   \"on_paper\"   \"discussion_topic\"   \"external_tool\"  If you are allowing online submissions, you can have one or many allowed submission types:    \"online_upload\"   \"online_text_entry\"   \"online_url\"   \"media_recording\" (Only valid when the Kaltura plugin is enabled)   \"student_annotation\"
        :param list[str] assignment_allowed_extensions: Allowed extensions if submission_types includes \"online_upload\"  Example:   allowed_extensions: [\"docx\",\"ppt\"]
        :param bool assignment_turnitin_enabled: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        :param bool assignment_vericite_enabled: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        :param str assignment_turnitin_settings: Settings to send along to turnitin. See Assignment object definition for format.
        :param str assignment_sis_assignment_id: The sis id of the Assignment
        :param str assignment_integration_data: Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.
        :param str assignment_integration_id: Unique ID from third party integrations
        :param bool assignment_peer_reviews: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        :param bool assignment_automatic_peer_reviews: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        :param bool assignment_notify_of_update: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        :param int assignment_group_category_id: If present, the assignment will become a group assignment assigned to the group.
        :param int assignment_grade_group_students_individually: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        :param str assignment_external_tool_tag_attributes: Hash of external tool parameters if submission_types is [\"external_tool\"]. See Assignment object definition for format.
        :param float assignment_points_possible: The maximum points possible on the assignment.
        :param str assignment_grading_type: The strategy used for grading the assignment. The assignment defaults to \"points\" if this field is omitted.
        :param Object assignment_due_at: The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_lock_at: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_unlock_at: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param str assignment_description: The assignment's description, supports HTML.
        :param int assignment_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        :param list[AssignmentOverride] assignment_assignment_overrides: List of overrides for the assignment. If the +assignment[assignment_overrides]+ key is absent, any existing overrides are kept as is. If the +assignment[assignment_overrides]+ key is present, existing overrides are updated or deleted (and new ones created, as necessary) to match the provided list.
        :param bool assignment_only_visible_to_overrides: Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)
        :param bool assignment_published: Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students.
        :param int assignment_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.
        :param bool assignment_omit_from_final_grade: Whether this assignment is counted towards a student's final grade.
        :param bool assignment_hide_in_gradebook: Whether this assignment is shown in the gradebook.
        :param bool assignment_moderated_grading: Whether this assignment is moderated.
        :param int assignment_grader_count: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        :param int assignment_final_grader_id: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        :param bool assignment_grader_comments_visible_to_graders: Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_anonymous_to_graders: Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_names_visible_to_final_grader: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        :param bool assignment_anonymous_grading: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        :param int assignment_allowed_attempts: The number of submission attempts allowed for this assignment. Set to -1 or null for unlimited attempts.
        :param int assignment_annotatable_attachment_id: The Attachment ID of the document being annotated.  Only applies when submission_types includes \"student_annotation\".
        :param bool assignment_force_updated_at: If true, updated_at will be set even if no changes were made.
        :param list[str] assignment_submission_types2: Only applies if the assignment doesn't have student submissions.
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def edit_assignment_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Edit an assignment  # noqa: E501

        Modify an existing assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_assignment_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str assignment_name: The assignment name.
        :param int assignment_position: The position of this assignment in the group when displaying assignment lists.
        :param list[str] assignment_submission_types: Only applies if the assignment doesn't have student submissions.  List of supported submission types for the assignment. Unless the assignment is allowing online submissions, the array should only have one element.  If not allowing online submissions, your options are:   \"online_quiz\"   \"none\"   \"on_paper\"   \"discussion_topic\"   \"external_tool\"  If you are allowing online submissions, you can have one or many allowed submission types:    \"online_upload\"   \"online_text_entry\"   \"online_url\"   \"media_recording\" (Only valid when the Kaltura plugin is enabled)   \"student_annotation\"
        :param list[str] assignment_allowed_extensions: Allowed extensions if submission_types includes \"online_upload\"  Example:   allowed_extensions: [\"docx\",\"ppt\"]
        :param bool assignment_turnitin_enabled: Only applies when the Turnitin plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles Turnitin submissions for the assignment. Will be ignored if Turnitin is not available for the course.
        :param bool assignment_vericite_enabled: Only applies when the VeriCite plugin is enabled for a course and the submission_types array includes \"online_upload\". Toggles VeriCite submissions for the assignment. Will be ignored if VeriCite is not available for the course.
        :param str assignment_turnitin_settings: Settings to send along to turnitin. See Assignment object definition for format.
        :param str assignment_sis_assignment_id: The sis id of the Assignment
        :param str assignment_integration_data: Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.
        :param str assignment_integration_id: Unique ID from third party integrations
        :param bool assignment_peer_reviews: If submission_types does not include external_tool,discussion_topic, online_quiz, or on_paper, determines whether or not peer reviews will be turned on for the assignment.
        :param bool assignment_automatic_peer_reviews: Whether peer reviews will be assigned automatically by Canvas or if teachers must manually assign peer reviews. Does not apply if peer reviews are not enabled.
        :param bool assignment_notify_of_update: If true, Canvas will send a notification to students in the class notifying them that the content has changed.
        :param int assignment_group_category_id: If present, the assignment will become a group assignment assigned to the group.
        :param int assignment_grade_group_students_individually: If this is a group assignment, teachers have the options to grade students individually. If false, Canvas will apply the assignment's score to each member of the group. If true, the teacher can manually assign scores to each member of the group.
        :param str assignment_external_tool_tag_attributes: Hash of external tool parameters if submission_types is [\"external_tool\"]. See Assignment object definition for format.
        :param float assignment_points_possible: The maximum points possible on the assignment.
        :param str assignment_grading_type: The strategy used for grading the assignment. The assignment defaults to \"points\" if this field is omitted.
        :param Object assignment_due_at: The day/time the assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_lock_at: The day/time the assignment is locked after. Must be after the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param Object assignment_unlock_at: The day/time the assignment is unlocked. Must be before the due date if there is a due date. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.
        :param str assignment_description: The assignment's description, supports HTML.
        :param int assignment_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course.
        :param list[AssignmentOverride] assignment_assignment_overrides: List of overrides for the assignment. If the +assignment[assignment_overrides]+ key is absent, any existing overrides are kept as is. If the +assignment[assignment_overrides]+ key is present, existing overrides are updated or deleted (and new ones created, as necessary) to match the provided list.
        :param bool assignment_only_visible_to_overrides: Whether this assignment is only visible to overrides (Only useful if 'differentiated assignments' account setting is on)
        :param bool assignment_published: Whether this assignment is published. (Only useful if 'draft state' account setting is on) Unpublished assignments are not visible to students.
        :param int assignment_grading_standard_id: The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course. This will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.
        :param bool assignment_omit_from_final_grade: Whether this assignment is counted towards a student's final grade.
        :param bool assignment_hide_in_gradebook: Whether this assignment is shown in the gradebook.
        :param bool assignment_moderated_grading: Whether this assignment is moderated.
        :param int assignment_grader_count: The maximum number of provisional graders who may issue grades for this assignment. Only relevant for moderated assignments. Must be a positive value, and must be set to 1 if the course has fewer than two active instructors. Otherwise, the maximum value is the number of active instructors in the course minus one, or 10 if the course has more than 11 active instructors.
        :param int assignment_final_grader_id: The user ID of the grader responsible for choosing final grades for this assignment. Only relevant for moderated assignments.
        :param bool assignment_grader_comments_visible_to_graders: Boolean indicating if provisional graders' comments are visible to other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_anonymous_to_graders: Boolean indicating if provisional graders' identities are hidden from other provisional graders. Only relevant for moderated assignments.
        :param bool assignment_graders_names_visible_to_final_grader: Boolean indicating if provisional grader identities are visible to the the final grader. Only relevant for moderated assignments.
        :param bool assignment_anonymous_grading: Boolean indicating if the assignment is graded anonymously. If true, graders cannot see student identities.
        :param int assignment_allowed_attempts: The number of submission attempts allowed for this assignment. Set to -1 or null for unlimited attempts.
        :param int assignment_annotatable_attachment_id: The Attachment ID of the document being annotated.  Only applies when submission_types includes \"student_annotation\".
        :param bool assignment_force_updated_at: If true, updated_at will be set even if no changes were made.
        :param list[str] assignment_submission_types2: Only applies if the assignment doesn't have student submissions.
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'assignment_name', 'assignment_position', 'assignment_submission_types', 'assignment_allowed_extensions', 'assignment_turnitin_enabled', 'assignment_vericite_enabled', 'assignment_turnitin_settings', 'assignment_sis_assignment_id', 'assignment_integration_data', 'assignment_integration_id', 'assignment_peer_reviews', 'assignment_automatic_peer_reviews', 'assignment_notify_of_update', 'assignment_group_category_id', 'assignment_grade_group_students_individually', 'assignment_external_tool_tag_attributes', 'assignment_points_possible', 'assignment_grading_type', 'assignment_due_at', 'assignment_lock_at', 'assignment_unlock_at', 'assignment_description', 'assignment_assignment_group_id', 'assignment_assignment_overrides', 'assignment_only_visible_to_overrides', 'assignment_published', 'assignment_grading_standard_id', 'assignment_omit_from_final_grade', 'assignment_hide_in_gradebook', 'assignment_moderated_grading', 'assignment_grader_count', 'assignment_final_grader_id', 'assignment_grader_comments_visible_to_graders', 'assignment_graders_anonymous_to_graders', 'assignment_graders_names_visible_to_final_grader', 'assignment_anonymous_grading', 'assignment_allowed_attempts', 'assignment_annotatable_attachment_id', 'assignment_force_updated_at', 'assignment_submission_types2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `edit_assignment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edit_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_name' in params:
            form_params.append(('assignment[name]', params['assignment_name']))  # noqa: E501
        if 'assignment_position' in params:
            form_params.append(('assignment[position]', params['assignment_position']))  # noqa: E501
        if 'assignment_submission_types' in params:
            form_params.append(('assignment[submission_types]', params['assignment_submission_types']))  # noqa: E501
            collection_formats['assignment[submission_types]'] = 'csv'  # noqa: E501
        if 'assignment_allowed_extensions' in params:
            form_params.append(('assignment[allowed_extensions]', params['assignment_allowed_extensions']))  # noqa: E501
            collection_formats['assignment[allowed_extensions]'] = 'csv'  # noqa: E501
        if 'assignment_turnitin_enabled' in params:
            form_params.append(('assignment[turnitin_enabled]', params['assignment_turnitin_enabled']))  # noqa: E501
        if 'assignment_vericite_enabled' in params:
            form_params.append(('assignment[vericite_enabled]', params['assignment_vericite_enabled']))  # noqa: E501
        if 'assignment_turnitin_settings' in params:
            form_params.append(('assignment[turnitin_settings]', params['assignment_turnitin_settings']))  # noqa: E501
        if 'assignment_sis_assignment_id' in params:
            form_params.append(('assignment[sis_assignment_id]', params['assignment_sis_assignment_id']))  # noqa: E501
        if 'assignment_integration_data' in params:
            form_params.append(('assignment[integration_data]', params['assignment_integration_data']))  # noqa: E501
        if 'assignment_integration_id' in params:
            form_params.append(('assignment[integration_id]', params['assignment_integration_id']))  # noqa: E501
        if 'assignment_peer_reviews' in params:
            form_params.append(('assignment[peer_reviews]', params['assignment_peer_reviews']))  # noqa: E501
        if 'assignment_automatic_peer_reviews' in params:
            form_params.append(('assignment[automatic_peer_reviews]', params['assignment_automatic_peer_reviews']))  # noqa: E501
        if 'assignment_notify_of_update' in params:
            form_params.append(('assignment[notify_of_update]', params['assignment_notify_of_update']))  # noqa: E501
        if 'assignment_group_category_id' in params:
            form_params.append(('assignment[group_category_id]', params['assignment_group_category_id']))  # noqa: E501
        if 'assignment_grade_group_students_individually' in params:
            form_params.append(('assignment[grade_group_students_individually]', params['assignment_grade_group_students_individually']))  # noqa: E501
        if 'assignment_external_tool_tag_attributes' in params:
            form_params.append(('assignment[external_tool_tag_attributes]', params['assignment_external_tool_tag_attributes']))  # noqa: E501
        if 'assignment_points_possible' in params:
            form_params.append(('assignment[points_possible]', params['assignment_points_possible']))  # noqa: E501
        if 'assignment_grading_type' in params:
            form_params.append(('assignment[grading_type]', params['assignment_grading_type']))  # noqa: E501
        if 'assignment_due_at' in params:
            form_params.append(('assignment[due_at]', params['assignment_due_at']))  # noqa: E501
        if 'assignment_lock_at' in params:
            form_params.append(('assignment[lock_at]', params['assignment_lock_at']))  # noqa: E501
        if 'assignment_unlock_at' in params:
            form_params.append(('assignment[unlock_at]', params['assignment_unlock_at']))  # noqa: E501
        if 'assignment_description' in params:
            form_params.append(('assignment[description]', params['assignment_description']))  # noqa: E501
        if 'assignment_assignment_group_id' in params:
            form_params.append(('assignment[assignment_group_id]', params['assignment_assignment_group_id']))  # noqa: E501
        if 'assignment_assignment_overrides' in params:
            form_params.append(('assignment[assignment_overrides]', params['assignment_assignment_overrides']))  # noqa: E501
            collection_formats['assignment[assignment_overrides]'] = 'csv'  # noqa: E501
        if 'assignment_only_visible_to_overrides' in params:
            form_params.append(('assignment[only_visible_to_overrides]', params['assignment_only_visible_to_overrides']))  # noqa: E501
        if 'assignment_published' in params:
            form_params.append(('assignment[published]', params['assignment_published']))  # noqa: E501
        if 'assignment_grading_standard_id' in params:
            form_params.append(('assignment[grading_standard_id]', params['assignment_grading_standard_id']))  # noqa: E501
        if 'assignment_omit_from_final_grade' in params:
            form_params.append(('assignment[omit_from_final_grade]', params['assignment_omit_from_final_grade']))  # noqa: E501
        if 'assignment_hide_in_gradebook' in params:
            form_params.append(('assignment[hide_in_gradebook]', params['assignment_hide_in_gradebook']))  # noqa: E501
        if 'assignment_moderated_grading' in params:
            form_params.append(('assignment[moderated_grading]', params['assignment_moderated_grading']))  # noqa: E501
        if 'assignment_grader_count' in params:
            form_params.append(('assignment[grader_count]', params['assignment_grader_count']))  # noqa: E501
        if 'assignment_final_grader_id' in params:
            form_params.append(('assignment[final_grader_id]', params['assignment_final_grader_id']))  # noqa: E501
        if 'assignment_grader_comments_visible_to_graders' in params:
            form_params.append(('assignment[grader_comments_visible_to_graders]', params['assignment_grader_comments_visible_to_graders']))  # noqa: E501
        if 'assignment_graders_anonymous_to_graders' in params:
            form_params.append(('assignment[graders_anonymous_to_graders]', params['assignment_graders_anonymous_to_graders']))  # noqa: E501
        if 'assignment_graders_names_visible_to_final_grader' in params:
            form_params.append(('assignment[graders_names_visible_to_final_grader]', params['assignment_graders_names_visible_to_final_grader']))  # noqa: E501
        if 'assignment_anonymous_grading' in params:
            form_params.append(('assignment[anonymous_grading]', params['assignment_anonymous_grading']))  # noqa: E501
        if 'assignment_allowed_attempts' in params:
            form_params.append(('assignment[allowed_attempts]', params['assignment_allowed_attempts']))  # noqa: E501
        if 'assignment_annotatable_attachment_id' in params:
            form_params.append(('assignment[annotatable_attachment_id]', params['assignment_annotatable_attachment_id']))  # noqa: E501
        if 'assignment_force_updated_at' in params:
            form_params.append(('assignment[force_updated_at]', params['assignment_force_updated_at']))  # noqa: E501
        if 'assignment_submission_types2' in params:
            form_params.append(('assignment[submission_types]', params['assignment_submission_types2']))  # noqa: E501
            collection_formats['assignment[submission_types]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_assignment(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single assignment  # noqa: E501

        Returns the assignment with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_assignment(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Associations to include with the assignment. The \"assignment_visibility\" option requires that the Differentiated Assignments course feature be turned on. If \"observed_users\" is passed, submissions for observed users will also be included. For \"score_statistics\" to be included, the \"submission\" option must also be set.
        :param bool override_assignment_dates: Apply assignment overrides to the assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param bool all_dates: All dates associated with the assignment, if applicable
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_assignment_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_assignment_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single assignment  # noqa: E501

        Returns the assignment with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_assignment_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Associations to include with the assignment. The \"assignment_visibility\" option requires that the Differentiated Assignments course feature be turned on. If \"observed_users\" is passed, submissions for observed users will also be included. For \"score_statistics\" to be included, the \"submission\" option must also be set.
        :param bool override_assignment_dates: Apply assignment overrides to the assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param bool all_dates: All dates associated with the assignment, if applicable
        :return: Assignment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'include', 'override_assignment_dates', 'needs_grading_count_by_section', 'all_dates']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_assignment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_assignment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_assignment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'override_assignment_dates' in params:
            query_params.append(('override_assignment_dates', params['override_assignment_dates']))  # noqa: E501
        if 'needs_grading_count_by_section' in params:
            query_params.append(('needs_grading_count_by_section', params['needs_grading_count_by_section']))  # noqa: E501
        if 'all_dates' in params:
            query_params.append(('all_dates', params['all_dates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Assignment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_assignment_override(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Get a single assignment override  # noqa: E501

        Returns details of the the override with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_assignment_override(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_assignment_override_with_http_info(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Get a single assignment override  # noqa: E501

        Returns details of the the override with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_assignment_override_with_http_info(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_assignment_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_assignment_override`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_single_assignment_override`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_assignment_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignment_overrides(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment overrides  # noqa: E501

        Returns the paginated list of overrides for this assignment that target sections/groups/students visible to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_overrides(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignment_overrides_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignment_overrides_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def list_assignment_overrides_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment overrides  # noqa: E501

        Returns the paginated list of overrides for this assignment that target sections/groups/students visible to the current user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_overrides_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: list[AssignmentOverride]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignment_overrides" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignment_overrides`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `list_assignment_overrides`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/overrides', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssignmentOverride]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignments_assignment_groups(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """List assignments  # noqa: E501

        Returns the paginated list of assignments for the current course or assignment group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_assignment_groups(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param list[str] include: Optional information to include with each assignment: submission:: The current user's current +Submission+ assignment_visibility:: An array of ids of students who can see the assignment all_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date overrides:: An array of +AssignmentOverride+ structures observed_users:: An array of submissions for observed users can_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment. score_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included. ab_guid:: An array of guid strings for academic benchmarks
        :param str search_term: The partial title of the assignments to match and return.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param str bucket: If included, only return certain assignments depending on due date and submission status.
        :param list[str] assignment_ids: if set, return only assignments specified
        :param str order_by: Determines the order of the assignments. Defaults to \"position\".
        :param bool post_to_sis: Return only assignments that have post_to_sis set or not set.
        :param bool new_quizzes: Return only New Quizzes assignments
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignments_assignment_groups_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignments_assignment_groups_with_http_info(course_id, assignment_group_id, **kwargs)  # noqa: E501
            return data

    def list_assignments_assignment_groups_with_http_info(self, course_id, assignment_group_id, **kwargs):  # noqa: E501
        """List assignments  # noqa: E501

        Returns the paginated list of assignments for the current course or assignment group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_assignment_groups_with_http_info(course_id, assignment_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_group_id: ID (required)
        :param list[str] include: Optional information to include with each assignment: submission:: The current user's current +Submission+ assignment_visibility:: An array of ids of students who can see the assignment all_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date overrides:: An array of +AssignmentOverride+ structures observed_users:: An array of submissions for observed users can_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment. score_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included. ab_guid:: An array of guid strings for academic benchmarks
        :param str search_term: The partial title of the assignments to match and return.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param str bucket: If included, only return certain assignments depending on due date and submission status.
        :param list[str] assignment_ids: if set, return only assignments specified
        :param str order_by: Determines the order of the assignments. Defaults to \"position\".
        :param bool post_to_sis: Return only assignments that have post_to_sis set or not set.
        :param bool new_quizzes: Return only New Quizzes assignments
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_group_id', 'include', 'search_term', 'override_assignment_dates', 'needs_grading_count_by_section', 'bucket', 'assignment_ids', 'order_by', 'post_to_sis', 'new_quizzes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignments_assignment_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignments_assignment_groups`")  # noqa: E501
        # verify the required parameter 'assignment_group_id' is set
        if self.api_client.client_side_validation and ('assignment_group_id' not in params or
                                                       params['assignment_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_group_id` when calling `list_assignments_assignment_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_group_id' in params:
            path_params['assignment_group_id'] = params['assignment_group_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'override_assignment_dates' in params:
            query_params.append(('override_assignment_dates', params['override_assignment_dates']))  # noqa: E501
        if 'needs_grading_count_by_section' in params:
            query_params.append(('needs_grading_count_by_section', params['needs_grading_count_by_section']))  # noqa: E501
        if 'bucket' in params:
            query_params.append(('bucket', params['bucket']))  # noqa: E501
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'post_to_sis' in params:
            query_params.append(('post_to_sis', params['post_to_sis']))  # noqa: E501
        if 'new_quizzes' in params:
            query_params.append(('new_quizzes', params['new_quizzes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Assignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignments_assignments(self, course_id, **kwargs):  # noqa: E501
        """List assignments  # noqa: E501

        Returns the paginated list of assignments for the current course or assignment group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_assignments(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: Optional information to include with each assignment: submission:: The current user's current +Submission+ assignment_visibility:: An array of ids of students who can see the assignment all_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date overrides:: An array of +AssignmentOverride+ structures observed_users:: An array of submissions for observed users can_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment. score_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included. ab_guid:: An array of guid strings for academic benchmarks
        :param str search_term: The partial title of the assignments to match and return.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param str bucket: If included, only return certain assignments depending on due date and submission status.
        :param list[str] assignment_ids: if set, return only assignments specified
        :param str order_by: Determines the order of the assignments. Defaults to \"position\".
        :param bool post_to_sis: Return only assignments that have post_to_sis set or not set.
        :param bool new_quizzes: Return only New Quizzes assignments
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignments_assignments_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignments_assignments_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_assignments_assignments_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List assignments  # noqa: E501

        Returns the paginated list of assignments for the current course or assignment group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_assignments_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] include: Optional information to include with each assignment: submission:: The current user's current +Submission+ assignment_visibility:: An array of ids of students who can see the assignment all_dates:: An array of +AssignmentDate+ structures, one for each override, and also a +base+ if the assignment has an \"Everyone\" / \"Everyone Else\" date overrides:: An array of +AssignmentOverride+ structures observed_users:: An array of submissions for observed users can_edit:: an extra Boolean value will be included with each +Assignment+ (and +AssignmentDate+ if +all_dates+ is supplied) to indicate whether the caller can edit the assignment or date. Moderated grading and closed grading periods may restrict a user's ability to edit an assignment. score_statistics:: An object containing min, max, and mean score on this assignment. This will not be included for students if there are less than 5 graded assignments or if disabled by the instructor. Only valid if 'submission' is also included. ab_guid:: An array of guid strings for academic benchmarks
        :param str search_term: The partial title of the assignments to match and return.
        :param bool override_assignment_dates: Apply assignment overrides for each assignment, defaults to true.
        :param bool needs_grading_count_by_section: Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false
        :param str bucket: If included, only return certain assignments depending on due date and submission status.
        :param list[str] assignment_ids: if set, return only assignments specified
        :param str order_by: Determines the order of the assignments. Defaults to \"position\".
        :param bool post_to_sis: Return only assignments that have post_to_sis set or not set.
        :param bool new_quizzes: Return only New Quizzes assignments
        :return: list[Assignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'include', 'search_term', 'override_assignment_dates', 'needs_grading_count_by_section', 'bucket', 'assignment_ids', 'order_by', 'post_to_sis', 'new_quizzes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignments_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignments_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'override_assignment_dates' in params:
            query_params.append(('override_assignment_dates', params['override_assignment_dates']))  # noqa: E501
        if 'needs_grading_count_by_section' in params:
            query_params.append(('needs_grading_count_by_section', params['needs_grading_count_by_section']))  # noqa: E501
        if 'bucket' in params:
            query_params.append(('bucket', params['bucket']))  # noqa: E501
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'post_to_sis' in params:
            query_params.append(('post_to_sis', params['post_to_sis']))  # noqa: E501
        if 'new_quizzes' in params:
            query_params.append(('new_quizzes', params['new_quizzes']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Assignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignments_for_user(self, user_id, course_id, **kwargs):  # noqa: E501
        """List assignments for user  # noqa: E501

        Returns the paginated list of assignments for the specified user if the current user has rights to view. See {api:AssignmentsApiController#index List assignments} for valid arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_for_user(user_id, course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignments_for_user_with_http_info(user_id, course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignments_for_user_with_http_info(user_id, course_id, **kwargs)  # noqa: E501
            return data

    def list_assignments_for_user_with_http_info(self, user_id, course_id, **kwargs):  # noqa: E501
        """List assignments for user  # noqa: E501

        Returns the paginated list of assignments for the specified user if the current user has rights to view. See {api:AssignmentsApiController#index List assignments} for valid arguments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignments_for_user_with_http_info(user_id, course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignments_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_assignments_for_user`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignments_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/courses/{course_id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirect_to_assignment_override_for_group(self, group_id, assignment_id, **kwargs):  # noqa: E501
        """Redirect to the assignment override for a group  # noqa: E501

        Responds with a redirect to the override for the given group, if any (404 otherwise).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_assignment_override_for_group(group_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str assignment_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirect_to_assignment_override_for_group_with_http_info(group_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.redirect_to_assignment_override_for_group_with_http_info(group_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def redirect_to_assignment_override_for_group_with_http_info(self, group_id, assignment_id, **kwargs):  # noqa: E501
        """Redirect to the assignment override for a group  # noqa: E501

        Responds with a redirect to the override for the given group, if any (404 otherwise).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_assignment_override_for_group_with_http_info(group_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str assignment_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirect_to_assignment_override_for_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `redirect_to_assignment_override_for_group`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `redirect_to_assignment_override_for_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/assignments/{assignment_id}/override', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirect_to_assignment_override_for_section(self, course_section_id, assignment_id, **kwargs):  # noqa: E501
        """Redirect to the assignment override for a section  # noqa: E501

        Responds with a redirect to the override for the given section, if any (404 otherwise).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_assignment_override_for_section(course_section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_section_id: ID (required)
        :param str assignment_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirect_to_assignment_override_for_section_with_http_info(course_section_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.redirect_to_assignment_override_for_section_with_http_info(course_section_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def redirect_to_assignment_override_for_section_with_http_info(self, course_section_id, assignment_id, **kwargs):  # noqa: E501
        """Redirect to the assignment override for a section  # noqa: E501

        Responds with a redirect to the override for the given section, if any (404 otherwise).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_assignment_override_for_section_with_http_info(course_section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_section_id: ID (required)
        :param str assignment_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_section_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirect_to_assignment_override_for_section" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_section_id' is set
        if self.api_client.client_side_validation and ('course_section_id' not in params or
                                                       params['course_section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_section_id` when calling `redirect_to_assignment_override_for_section`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `redirect_to_assignment_override_for_section`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_section_id' in params:
            path_params['course_section_id'] = params['course_section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{course_section_id}/assignments/{assignment_id}/override', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_assignment_override(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Update an assignment override  # noqa: E501

        All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assignment_override(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :param list[int] assignment_override_student_ids: The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override. Ignored unless the override being updated is adhoc.
        :param str assignment_override_title: The title of an adhoc assignment override. Ignored unless the override being updated is adhoc.
        :param Object assignment_override_due_at: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
        :param Object assignment_override_unlock_at: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
        :param Object assignment_override_lock_at: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_assignment_override_with_http_info(course_id, assignment_id, id, **kwargs)  # noqa: E501
            return data

    def update_assignment_override_with_http_info(self, course_id, assignment_id, id, **kwargs):  # noqa: E501
        """Update an assignment override  # noqa: E501

        All current overridden values must be supplied if they are to be retained; e.g. if due_at was overridden, but this PUT omits a value for due_at, due_at will no longer be overridden. If the override is adhoc and student_ids is not supplied, the target override set is unchanged. Target override sets cannot be changed for group or section overrides.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_assignment_override_with_http_info(course_id, assignment_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str id: ID (required)
        :param list[int] assignment_override_student_ids: The IDs of the override's target students. If present, the IDs must each identify a user with an active student enrollment in the course that is not already targetted by a different adhoc override. Ignored unless the override being updated is adhoc.
        :param str assignment_override_title: The title of an adhoc assignment override. Ignored unless the override being updated is adhoc.
        :param Object assignment_override_due_at: The day/time the overridden assignment is due. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect due date. May be present but null to indicate the override removes any previous due date.
        :param Object assignment_override_unlock_at: The day/time the overridden assignment becomes unlocked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the unlock date. May be present but null to indicate the override removes any previous unlock date.
        :param Object assignment_override_lock_at: The day/time the overridden assignment becomes locked. Accepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z. If absent, this override will not affect the lock date. May be present but null to indicate the override removes any previous lock date.
        :return: AssignmentOverride
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'id', 'assignment_override_student_ids', 'assignment_override_title', 'assignment_override_due_at', 'assignment_override_unlock_at', 'assignment_override_lock_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assignment_override" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_assignment_override`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `update_assignment_override`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_assignment_override`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'assignment_override_student_ids' in params:
            form_params.append(('assignment_override[student_ids]', params['assignment_override_student_ids']))  # noqa: E501
            collection_formats['assignment_override[student_ids]'] = 'csv'  # noqa: E501
        if 'assignment_override_title' in params:
            form_params.append(('assignment_override[title]', params['assignment_override_title']))  # noqa: E501
        if 'assignment_override_due_at' in params:
            form_params.append(('assignment_override[due_at]', params['assignment_override_due_at']))  # noqa: E501
        if 'assignment_override_unlock_at' in params:
            form_params.append(('assignment_override[unlock_at]', params['assignment_override_unlock_at']))  # noqa: E501
        if 'assignment_override_lock_at' in params:
            form_params.append(('assignment_override[lock_at]', params['assignment_override_lock_at']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssignmentOverride',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
