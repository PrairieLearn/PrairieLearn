# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OutcomeGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_link_outcome_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_link_outcome_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'outcome_id' in params:
            form_params.append(('outcome_id', params['outcome_id']))  # noqa: E501
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_link_outcome_accounts_outcome_id(self, account_id, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_accounts_outcome_id(account_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_accounts_outcome_id_with_http_info(account_id, id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_accounts_outcome_id_with_http_info(account_id, id, outcome_id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_accounts_outcome_id_with_http_info(self, account_id, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_accounts_outcome_id_with_http_info(account_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_accounts_outcome_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_link_outcome_accounts_outcome_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_accounts_outcome_id`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `create_link_outcome_accounts_outcome_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_link_outcome_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_link_outcome_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'outcome_id' in params:
            form_params.append(('outcome_id', params['outcome_id']))  # noqa: E501
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/outcomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_link_outcome_courses_outcome_id(self, course_id, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_courses_outcome_id(course_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_courses_outcome_id_with_http_info(course_id, id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_courses_outcome_id_with_http_info(course_id, id, outcome_id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_courses_outcome_id_with_http_info(self, course_id, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_courses_outcome_id_with_http_info(course_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_courses_outcome_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_link_outcome_courses_outcome_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_courses_outcome_id`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `create_link_outcome_courses_outcome_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_link_outcome_global(self, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link.
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'outcome_id' in params:
            form_params.append(('outcome_id', params['outcome_id']))  # noqa: E501
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/outcomes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_link_outcome_global_outcome_id(self, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_global_outcome_id(id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_link_outcome_global_outcome_id_with_http_info(id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_link_outcome_global_outcome_id_with_http_info(id, outcome_id, **kwargs)  # noqa: E501
            return data

    def create_link_outcome_global_outcome_id_with_http_info(self, id, outcome_id, **kwargs):  # noqa: E501
        """Create/link an outcome  # noqa: E501

        Link an outcome into the outcome group. The outcome to link can either be specified by a PUT to the link URL for a specific outcome (the outcome_id in the PUT URLs) or by supplying the information for a new outcome (title, description, ratings, mastery_points) in a POST to the collection.  If linking an existing outcome, the outcome_id must identify an outcome available to this context; i.e. an outcome owned by this group's context, an outcome owned by an associated account, or a global outcome. With outcome_id present, any other parameters (except move_from) are ignored.  If defining a new outcome, the outcome is created in the outcome group's context using the provided title, description, ratings, and mastery points; the title is required but all other fields are optional. The new outcome is then linked into the outcome group.  If ratings are provided when creating a new outcome, an embedded rubric criterion is included in the new outcome. This criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any ratings lacking a description are given a default of \"No description\". Any ratings lacking a point value are given a default of 0. If no ratings are provided, the mastery_points parameter is ignored.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_link_outcome_global_outcome_id_with_http_info(id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int outcome_id: The ID of the existing outcome to link. (required)
        :param int move_from: The ID of the old outcome group. Only used if outcome_id is present.
        :param str title: The title of the new outcome. Required if outcome_id is absent.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The description of the new outcome.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method.  Defaults to \"decaying_average\" if the Outcomes New Decaying Average Calculation Method FF is ENABLED then Defaults to \"weighted_average\"
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"weighted_average\", \"decaying_average\" or \"n_mastery\". Defaults to 65
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'outcome_id', 'move_from', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_link_outcome_global_outcome_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_link_outcome_global_outcome_id`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `create_link_outcome_global_outcome_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'move_from' in params:
            form_params.append(('move_from', params['move_from']))  # noqa: E501
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/outcomes/{outcome_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subgroup_accounts(self, account_id, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_accounts(account_id, id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subgroup_accounts_with_http_info(account_id, id, title, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subgroup_accounts_with_http_info(account_id, id, title, **kwargs)  # noqa: E501
            return data

    def create_subgroup_accounts_with_http_info(self, account_id, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_accounts_with_http_info(account_id, id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'title', 'description', 'vendor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subgroup_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_subgroup_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_subgroup_accounts`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in params or
                                                       params['title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title` when calling `create_subgroup_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/subgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subgroup_courses(self, course_id, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_courses(course_id, id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subgroup_courses_with_http_info(course_id, id, title, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subgroup_courses_with_http_info(course_id, id, title, **kwargs)  # noqa: E501
            return data

    def create_subgroup_courses_with_http_info(self, course_id, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_courses_with_http_info(course_id, id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'title', 'description', 'vendor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subgroup_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_subgroup_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_subgroup_courses`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in params or
                                                       params['title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title` when calling `create_subgroup_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/subgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_subgroup_global(self, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_global(id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_subgroup_global_with_http_info(id, title, **kwargs)  # noqa: E501
        else:
            (data) = self.create_subgroup_global_with_http_info(id, title, **kwargs)  # noqa: E501
            return data

    def create_subgroup_global_with_http_info(self, id, title, **kwargs):  # noqa: E501
        """Create a subgroup  # noqa: E501

        Creates a new empty subgroup under the outcome group with the given title and description.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_subgroup_global_with_http_info(id, title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The title of the new outcome group. (required)
        :param str description: The description of the new outcome group.
        :param str vendor_guid: A custom GUID for the learning standard
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title', 'description', 'vendor_guid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_subgroup_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `create_subgroup_global`")  # noqa: E501
        # verify the required parameter 'title' is set
        if self.api_client.client_side_validation and ('title' not in params or
                                                       params['title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `title` when calling `create_subgroup_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/subgroups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_outcome_group_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def delete_outcome_group_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_outcome_group_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_outcome_group_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_outcome_group_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_outcome_group_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_outcome_group_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_outcome_group_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_outcome_group_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_outcome_group_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_outcome_group_global(self, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_outcome_group_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an outcome group  # noqa: E501

        Deleting an outcome group deletes descendant outcome groups and outcome links. The linked outcomes themselves are only deleted if all links to the outcome were deleted.  Aligned outcomes cannot be deleted; as such, if all remaining links to an aligned outcome are included in this group's descendants, the group deletion will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_outcome_group_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_outcome_group_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_outcome_group_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_outcome_groups_for_context_accounts(self, account_id, **kwargs):  # noqa: E501
        """Get all outcome groups for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_groups_for_context_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_outcome_groups_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_outcome_groups_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_all_outcome_groups_for_context_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get all outcome groups for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_groups_for_context_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_outcome_groups_for_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_outcome_groups_for_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_outcome_groups_for_context_courses(self, course_id, **kwargs):  # noqa: E501
        """Get all outcome groups for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_groups_for_context_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_outcome_groups_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_outcome_groups_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_all_outcome_groups_for_context_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get all outcome groups for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_groups_for_context_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_outcome_groups_for_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_all_outcome_groups_for_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_outcome_links_for_context_accounts(self, account_id, **kwargs):  # noqa: E501
        """Get all outcome links for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_links_for_context_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :param str outcome_group_style: The detail level of the outcome groups. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_outcome_links_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_outcome_links_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_all_outcome_links_for_context_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get all outcome links for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_links_for_context_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :param str outcome_group_style: The detail level of the outcome groups. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'outcome_style', 'outcome_group_style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_outcome_links_for_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_all_outcome_links_for_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'outcome_style' in params:
            query_params.append(('outcome_style', params['outcome_style']))  # noqa: E501
        if 'outcome_group_style' in params:
            query_params.append(('outcome_group_style', params['outcome_group_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_group_links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_outcome_links_for_context_courses(self, course_id, **kwargs):  # noqa: E501
        """Get all outcome links for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_links_for_context_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :param str outcome_group_style: The detail level of the outcome groups. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_outcome_links_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_outcome_links_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_all_outcome_links_for_context_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get all outcome links for context  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_outcome_links_for_context_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :param str outcome_group_style: The detail level of the outcome groups. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'outcome_style', 'outcome_group_style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_outcome_links_for_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_all_outcome_links_for_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'outcome_style' in params:
            query_params.append(('outcome_style', params['outcome_style']))  # noqa: E501
        if 'outcome_group_style' in params:
            query_params.append(('outcome_group_style', params['outcome_group_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_group_links', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_outcome_group_accounts(self, account_id, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_accounts(account_id, id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_outcome_group_accounts_with_http_info(account_id, id, source_outcome_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_outcome_group_accounts_with_http_info(account_id, id, source_outcome_group_id, **kwargs)  # noqa: E501
            return data

    def import_outcome_group_accounts_with_http_info(self, account_id, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_accounts_with_http_info(account_id, id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'source_outcome_group_id', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_outcome_group_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `import_outcome_group_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `import_outcome_group_accounts`")  # noqa: E501
        # verify the required parameter 'source_outcome_group_id' is set
        if self.api_client.client_side_validation and ('source_outcome_group_id' not in params or
                                                       params['source_outcome_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source_outcome_group_id` when calling `import_outcome_group_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_outcome_group_id' in params:
            form_params.append(('source_outcome_group_id', params['source_outcome_group_id']))  # noqa: E501
        if '_async' in params:
            form_params.append(('async', params['_async']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_outcome_group_courses(self, course_id, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_courses(course_id, id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_outcome_group_courses_with_http_info(course_id, id, source_outcome_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_outcome_group_courses_with_http_info(course_id, id, source_outcome_group_id, **kwargs)  # noqa: E501
            return data

    def import_outcome_group_courses_with_http_info(self, course_id, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_courses_with_http_info(course_id, id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'source_outcome_group_id', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_outcome_group_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `import_outcome_group_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `import_outcome_group_courses`")  # noqa: E501
        # verify the required parameter 'source_outcome_group_id' is set
        if self.api_client.client_side_validation and ('source_outcome_group_id' not in params or
                                                       params['source_outcome_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source_outcome_group_id` when calling `import_outcome_group_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_outcome_group_id' in params:
            form_params.append(('source_outcome_group_id', params['source_outcome_group_id']))  # noqa: E501
        if '_async' in params:
            form_params.append(('async', params['_async']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_outcome_group_global(self, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_global(id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_outcome_group_global_with_http_info(id, source_outcome_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_outcome_group_global_with_http_info(id, source_outcome_group_id, **kwargs)  # noqa: E501
            return data

    def import_outcome_group_global_with_http_info(self, id, source_outcome_group_id, **kwargs):  # noqa: E501
        """Import an outcome group  # noqa: E501

        Creates a new subgroup of the outcome group with the same title and description as the source group, then creates links in that new subgroup to the same outcomes that are linked in the source group. Recurses on the subgroups of the source group, importing them each in turn into the new subgroup.  Allows you to copy organizational structure, but does not create copies of the outcomes themselves, only new links.  The source group must be either global, from the same context as this outcome group, or from an associated account. The source group cannot be the root outcome group of its context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_outcome_group_global_with_http_info(id, source_outcome_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param int source_outcome_group_id: The ID of the source outcome group. (required)
        :param bool _async: If true, perform action asynchronously.  In that case, this endpoint will return a Progress object instead of an OutcomeGroup. Use the {api:ProgressController#show progress endpoint} to query the status of the operation.  The imported outcome group id and url will be returned in the results of the Progress object as \"outcome_group_id\" and \"outcome_group_url\"
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'source_outcome_group_id', '_async']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_outcome_group_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `import_outcome_group_global`")  # noqa: E501
        # verify the required parameter 'source_outcome_group_id' is set
        if self.api_client.client_side_validation and ('source_outcome_group_id' not in params or
                                                       params['source_outcome_group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `source_outcome_group_id` when calling `import_outcome_group_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_outcome_group_id' in params:
            form_params.append(('source_outcome_group_id', params['source_outcome_group_id']))  # noqa: E501
        if '_async' in params:
            form_params.append(('async', params['_async']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_linked_outcomes_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_linked_outcomes_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_linked_outcomes_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def list_linked_outcomes_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'outcome_style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_linked_outcomes_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_linked_outcomes_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_linked_outcomes_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'outcome_style' in params:
            query_params.append(('outcome_style', params['outcome_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_linked_outcomes_courses(self, course_id, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_linked_outcomes_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_linked_outcomes_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def list_linked_outcomes_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'outcome_style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_linked_outcomes_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_linked_outcomes_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_linked_outcomes_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'outcome_style' in params:
            query_params.append(('outcome_style', params['outcome_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/outcomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_linked_outcomes_global(self, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_linked_outcomes_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_linked_outcomes_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_linked_outcomes_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """List linked outcomes  # noqa: E501

        A paginated list of the immediate OutcomeLink children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_linked_outcomes_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str outcome_style: The detail level of the outcomes. Defaults to \"abbrev\". Specify \"full\" for more information.
        :return: list[OutcomeLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'outcome_style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_linked_outcomes_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_linked_outcomes_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'outcome_style' in params:
            query_params.append(('outcome_style', params['outcome_style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/outcomes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeLink]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_subgroups_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_subgroups_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_subgroups_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def list_subgroups_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subgroups_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_subgroups_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_subgroups_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/subgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_subgroups_courses(self, course_id, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_subgroups_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_subgroups_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def list_subgroups_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subgroups_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_subgroups_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_subgroups_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/subgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_subgroups_global(self, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_subgroups_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_subgroups_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_subgroups_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """List subgroups  # noqa: E501

        A paginated list of the immediate OutcomeGroup children of the outcome group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_subgroups_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: list[OutcomeGroup]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_subgroups_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `list_subgroups_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/subgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeGroup]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirect_to_root_outcome_group_for_context_accounts(self, account_id, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirect_to_root_outcome_group_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.redirect_to_root_outcome_group_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def redirect_to_root_outcome_group_for_context_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirect_to_root_outcome_group_for_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `redirect_to_root_outcome_group_for_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/root_outcome_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirect_to_root_outcome_group_for_context_courses(self, course_id, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirect_to_root_outcome_group_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.redirect_to_root_outcome_group_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def redirect_to_root_outcome_group_for_context_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirect_to_root_outcome_group_for_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `redirect_to_root_outcome_group_for_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/root_outcome_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def redirect_to_root_outcome_group_for_context_global(self, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_global(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.redirect_to_root_outcome_group_for_context_global_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.redirect_to_root_outcome_group_for_context_global_with_http_info(**kwargs)  # noqa: E501
            return data

    def redirect_to_root_outcome_group_for_context_global_with_http_info(self, **kwargs):  # noqa: E501
        """Redirect to root outcome group for context  # noqa: E501

        Convenience redirect to find the root outcome group for a particular context. Will redirect to the appropriate outcome group's URL.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.redirect_to_root_outcome_group_for_context_global_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redirect_to_root_outcome_group_for_context_global" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/root_outcome_group', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_outcome_group_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def show_outcome_group_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_outcome_group_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `show_outcome_group_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_outcome_group_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_outcome_group_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def show_outcome_group_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_outcome_group_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `show_outcome_group_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_outcome_group_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_outcome_group_global(self, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def show_outcome_group_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show an outcome group  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_group_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_outcome_group_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_outcome_group_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_outcome_accounts(self, account_id, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_accounts(account_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_outcome_accounts_with_http_info(account_id, id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_outcome_accounts_with_http_info(account_id, id, outcome_id, **kwargs)  # noqa: E501
            return data

    def unlink_outcome_accounts_with_http_info(self, account_id, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_accounts_with_http_info(account_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'outcome_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_outcome_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `unlink_outcome_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unlink_outcome_accounts`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `unlink_outcome_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_outcome_courses(self, course_id, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_courses(course_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_outcome_courses_with_http_info(course_id, id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_outcome_courses_with_http_info(course_id, id, outcome_id, **kwargs)  # noqa: E501
            return data

    def unlink_outcome_courses_with_http_info(self, course_id, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_courses_with_http_info(course_id, id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'outcome_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_outcome_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `unlink_outcome_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unlink_outcome_courses`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `unlink_outcome_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unlink_outcome_global(self, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_global(id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unlink_outcome_global_with_http_info(id, outcome_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unlink_outcome_global_with_http_info(id, outcome_id, **kwargs)  # noqa: E501
            return data

    def unlink_outcome_global_with_http_info(self, id, outcome_id, **kwargs):  # noqa: E501
        """Unlink an outcome  # noqa: E501

        Unlinking an outcome only deletes the outcome itself if this was the last link to the outcome in any group in any context. Aligned outcomes cannot be deleted; as such, if this is the last link to an aligned outcome, the unlinking will fail.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unlink_outcome_global_with_http_info(id, outcome_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str outcome_id: ID (required)
        :return: OutcomeLink
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'outcome_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unlink_outcome_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unlink_outcome_global`")  # noqa: E501
        # verify the required parameter 'outcome_id' is set
        if self.api_client.client_side_validation and ('outcome_id' not in params or
                                                       params['outcome_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `outcome_id` when calling `unlink_outcome_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'outcome_id' in params:
            path_params['outcome_id'] = params['outcome_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}/outcomes/{outcome_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeLink',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_outcome_group_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_outcome_group_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def update_outcome_group_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'title', 'description', 'vendor_guid', 'parent_outcome_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_outcome_group_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `update_outcome_group_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_outcome_group_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'parent_outcome_group_id' in params:
            form_params.append(('parent_outcome_group_id', params['parent_outcome_group_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_groups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_outcome_group_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_outcome_group_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def update_outcome_group_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'title', 'description', 'vendor_guid', 'parent_outcome_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_outcome_group_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_outcome_group_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_outcome_group_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'parent_outcome_group_id' in params:
            form_params.append(('parent_outcome_group_id', params['parent_outcome_group_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_groups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_outcome_group_global(self, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_global(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_outcome_group_global_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_outcome_group_global_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an outcome group  # noqa: E501

        Modify an existing outcome group. Fields not provided are left as is; unrecognized fields are ignored.  When changing the parent outcome group, the new parent group must belong to the same context as this outcome group, and must not be a descendant of this outcome group (i.e. no cycles allowed).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_group_global_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The new outcome group title.
        :param str description: The new outcome group description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int parent_outcome_group_id: The id of the new parent outcome group.
        :return: OutcomeGroup
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title', 'description', 'vendor_guid', 'parent_outcome_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_outcome_group_global" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_outcome_group_global`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'parent_outcome_group_id' in params:
            form_params.append(('parent_outcome_group_id', params['parent_outcome_group_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/global/outcome_groups/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OutcomeGroup',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
