# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SisIntegrationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def disable_assignments_currently_enabled_for_grade_export_to_sis(self, course_id, **kwargs):  # noqa: E501
        """Disable assignments currently enabled for grade export to SIS  # noqa: E501

        Disable all assignments flagged as \"post_to_sis\", with the option of making it specific to a grading period, in a course.  On success, the response will be 204 No Content with an empty body.  On failure, the response will be 400 Bad Request with a body of a specific message.  For disabling assignments in a specific grading period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_assignments_currently_enabled_for_grade_export_to_sis(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The ID of the course. (required)
        :param int grading_period_id: The ID of the grading period.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_assignments_currently_enabled_for_grade_export_to_sis_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_assignments_currently_enabled_for_grade_export_to_sis_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def disable_assignments_currently_enabled_for_grade_export_to_sis_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Disable assignments currently enabled for grade export to SIS  # noqa: E501

        Disable all assignments flagged as \"post_to_sis\", with the option of making it specific to a grading period, in a course.  On success, the response will be 204 No Content with an empty body.  On failure, the response will be 400 Bad Request with a body of a specific message.  For disabling assignments in a specific grading period  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_assignments_currently_enabled_for_grade_export_to_sis_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The ID of the course. (required)
        :param int grading_period_id: The ID of the grading period.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'grading_period_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_assignments_currently_enabled_for_grade_export_to_sis" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `disable_assignments_currently_enabled_for_grade_export_to_sis`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grading_period_id' in params:
            form_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sis/courses/{course_id}/disable_post_to_sis', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_assignments_enabled_for_grade_export_to_sis_accounts(self, account_id, **kwargs):  # noqa: E501
        """Retrieve assignments enabled for grade export to SIS  # noqa: E501

        Retrieve a list of published assignments flagged as \"post_to_sis\". See the Assignments API for more details on assignments. Assignment group and section information are included for convenience.  Each section includes course information for the origin course and the cross-listed course, if applicable. The `origin_course` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the `origin_course` should be preferred when performing integration work. The `xlist_course` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details.  The `override` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object's keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides.  restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include.    \"student_overrides\":: returns individual student override information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_assignments_enabled_for_grade_export_to_sis_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The ID of the account to query. (required)
        :param int course_id: The ID of the course to query.
        :param Object starts_before: When searching on an account,
        :param Object ends_after: When searching on an account,
        :param str include: Array of additional
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_assignments_enabled_for_grade_export_to_sis_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_assignments_enabled_for_grade_export_to_sis_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def retrieve_assignments_enabled_for_grade_export_to_sis_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Retrieve assignments enabled for grade export to SIS  # noqa: E501

        Retrieve a list of published assignments flagged as \"post_to_sis\". See the Assignments API for more details on assignments. Assignment group and section information are included for convenience.  Each section includes course information for the origin course and the cross-listed course, if applicable. The `origin_course` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the `origin_course` should be preferred when performing integration work. The `xlist_course` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details.  The `override` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object's keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides.  restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include.    \"student_overrides\":: returns individual student override information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_assignments_enabled_for_grade_export_to_sis_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int account_id: The ID of the account to query. (required)
        :param int course_id: The ID of the course to query.
        :param Object starts_before: When searching on an account,
        :param Object ends_after: When searching on an account,
        :param str include: Array of additional
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'course_id', 'starts_before', 'ends_after', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_assignments_enabled_for_grade_export_to_sis_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `retrieve_assignments_enabled_for_grade_export_to_sis_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'course_id' in params:
            query_params.append(('course_id', params['course_id']))  # noqa: E501
        if 'starts_before' in params:
            query_params.append(('starts_before', params['starts_before']))  # noqa: E501
        if 'ends_after' in params:
            query_params.append(('ends_after', params['ends_after']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sis/accounts/{account_id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_assignments_enabled_for_grade_export_to_sis_courses(self, course_id, **kwargs):  # noqa: E501
        """Retrieve assignments enabled for grade export to SIS  # noqa: E501

        Retrieve a list of published assignments flagged as \"post_to_sis\". See the Assignments API for more details on assignments. Assignment group and section information are included for convenience.  Each section includes course information for the origin course and the cross-listed course, if applicable. The `origin_course` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the `origin_course` should be preferred when performing integration work. The `xlist_course` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details.  The `override` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object's keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides.  restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include.    \"student_overrides\":: returns individual student override information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_assignments_enabled_for_grade_export_to_sis_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The ID of the course to query. (required)
        :param int account_id: The ID of the account to query.
        :param Object starts_before: When searching on an account,
        :param Object ends_after: When searching on an account,
        :param str include: Array of additional
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_assignments_enabled_for_grade_export_to_sis_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_assignments_enabled_for_grade_export_to_sis_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def retrieve_assignments_enabled_for_grade_export_to_sis_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Retrieve assignments enabled for grade export to SIS  # noqa: E501

        Retrieve a list of published assignments flagged as \"post_to_sis\". See the Assignments API for more details on assignments. Assignment group and section information are included for convenience.  Each section includes course information for the origin course and the cross-listed course, if applicable. The `origin_course` is the course to which the section belongs or the course from which the section was cross-listed. Generally, the `origin_course` should be preferred when performing integration work. The `xlist_course` is provided for consistency and is only present when the section has been cross-listed. See Sections API and Courses Api for me details.  The `override` is only provided if the Differentiated Assignments course feature is turned on and the assignment has an override for that section. When there is an override for the assignment the override object's keys/values can be merged with the top level assignment object to create a view of the assignment object specific to that section. See Assignments api for more information on assignment overrides.  restricts to courses that start before this date (if they have a start date) restricts to courses that end after this date (if they have an end date) information to include.    \"student_overrides\":: returns individual student override information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_assignments_enabled_for_grade_export_to_sis_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The ID of the course to query. (required)
        :param int account_id: The ID of the account to query.
        :param Object starts_before: When searching on an account,
        :param Object ends_after: When searching on an account,
        :param str include: Array of additional
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'account_id', 'starts_before', 'ends_after', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_assignments_enabled_for_grade_export_to_sis_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `retrieve_assignments_enabled_for_grade_export_to_sis_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501
        if 'starts_before' in params:
            query_params.append(('starts_before', params['starts_before']))  # noqa: E501
        if 'ends_after' in params:
            query_params.append(('ends_after', params['ends_after']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/sis/courses/{course_id}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
