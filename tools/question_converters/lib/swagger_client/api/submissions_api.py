# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SubmissionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_unread_status_for_all_submissions_courses(self, course_id, user_id, **kwargs):  # noqa: E501
        """Clear unread status for all submissions.  # noqa: E501

        Site-admin-only endpoint.  No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_unread_status_for_all_submissions_courses(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_unread_status_for_all_submissions_courses_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_unread_status_for_all_submissions_courses_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def clear_unread_status_for_all_submissions_courses_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Clear unread status for all submissions.  # noqa: E501

        Site-admin-only endpoint.  No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_unread_status_for_all_submissions_courses_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_unread_status_for_all_submissions_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `clear_unread_status_for_all_submissions_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `clear_unread_status_for_all_submissions_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/submissions/{user_id}/clear_unread', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_unread_status_for_all_submissions_sections(self, section_id, user_id, **kwargs):  # noqa: E501
        """Clear unread status for all submissions.  # noqa: E501

        Site-admin-only endpoint.  No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_unread_status_for_all_submissions_sections(section_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_unread_status_for_all_submissions_sections_with_http_info(section_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_unread_status_for_all_submissions_sections_with_http_info(section_id, user_id, **kwargs)  # noqa: E501
            return data

    def clear_unread_status_for_all_submissions_sections_with_http_info(self, section_id, user_id, **kwargs):  # noqa: E501
        """Clear unread status for all submissions.  # noqa: E501

        Site-admin-only endpoint.  No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_unread_status_for_all_submissions_sections_with_http_info(section_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_unread_status_for_all_submissions_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `clear_unread_status_for_all_submissions_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `clear_unread_status_for_all_submissions_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/submissions/{user_id}/clear_unread', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_annotations_read_state_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get document annotations read state  # noqa: E501

        Return whether annotations made on a submitted document have been read by the student  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_annotations_read_state_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_document_annotations_read_state_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_annotations_read_state_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_document_annotations_read_state_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get document annotations read state  # noqa: E501

        Return whether annotations made on a submitted document have been read by the student  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_annotations_read_state_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_annotations_read_state_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_document_annotations_read_state_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_document_annotations_read_state_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_document_annotations_read_state_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_annotations_read_state_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get document annotations read state  # noqa: E501

        Return whether annotations made on a submitted document have been read by the student  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_annotations_read_state_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_document_annotations_read_state_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_annotations_read_state_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_document_annotations_read_state_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get document annotations read state  # noqa: E501

        Return whether annotations made on a submitted document have been read by the student  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_annotations_read_state_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_annotations_read_state_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_document_annotations_read_state_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_document_annotations_read_state_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_document_annotations_read_state_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rubric_assessments_read_state_courses_rubric_assessments(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_courses_rubric_assessments(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rubric_assessments_read_state_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rubric_assessments_read_state_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_rubric_assessments_read_state_courses_rubric_assessments_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rubric_assessments_read_state_courses_rubric_assessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_rubric_assessments_read_state_courses_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_rubric_assessments_read_state_courses_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_rubric_assessments_read_state_courses_rubric_assessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rubric_assessments_read_state_courses_rubric_comments(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_courses_rubric_comments(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rubric_assessments_read_state_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rubric_assessments_read_state_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_rubric_assessments_read_state_courses_rubric_comments_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rubric_assessments_read_state_courses_rubric_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_rubric_assessments_read_state_courses_rubric_comments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_rubric_assessments_read_state_courses_rubric_comments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_rubric_assessments_read_state_courses_rubric_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rubric_assessments_read_state_sections_rubric_assessments(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_sections_rubric_assessments(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rubric_assessments_read_state_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rubric_assessments_read_state_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_rubric_assessments_read_state_sections_rubric_assessments_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rubric_assessments_read_state_sections_rubric_assessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_rubric_assessments_read_state_sections_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_rubric_assessments_read_state_sections_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_rubric_assessments_read_state_sections_rubric_assessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_rubric_assessments_read_state_sections_rubric_comments(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_sections_rubric_comments(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_rubric_assessments_read_state_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_rubric_assessments_read_state_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_rubric_assessments_read_state_sections_rubric_comments_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get rubric assessments read state  # noqa: E501

        Return whether new rubric comments/grading made on a submission have been seen by the student being assessed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_rubric_assessments_read_state_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_rubric_assessments_read_state_sections_rubric_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_rubric_assessments_read_state_sections_rubric_comments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_rubric_assessments_read_state_sections_rubric_comments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_rubric_assessments_read_state_sections_rubric_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_submission_by_anonymous_id_courses(self, course_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Get a single submission by anonymous id  # noqa: E501

        Get a single submission, based on the submission's anonymous id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_by_anonymous_id_courses(course_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
            return data

    def get_single_submission_by_anonymous_id_courses_with_http_info(self, course_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Get a single submission by anonymous id  # noqa: E501

        Get a single submission, based on the submission's anonymous id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'anonymous_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_submission_by_anonymous_id_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_submission_by_anonymous_id_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_single_submission_by_anonymous_id_courses`")  # noqa: E501
        # verify the required parameter 'anonymous_id' is set
        if self.api_client.client_side_validation and ('anonymous_id' not in params or
                                                       params['anonymous_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anonymous_id` when calling `get_single_submission_by_anonymous_id_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'anonymous_id' in params:
            path_params['anonymous_id'] = params['anonymous_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_submission_by_anonymous_id_sections(self, section_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Get a single submission by anonymous id  # noqa: E501

        Get a single submission, based on the submission's anonymous id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_by_anonymous_id_sections(section_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
            return data

    def get_single_submission_by_anonymous_id_sections_with_http_info(self, section_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Get a single submission by anonymous id  # noqa: E501

        Get a single submission, based on the submission's anonymous id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'anonymous_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_submission_by_anonymous_id_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_single_submission_by_anonymous_id_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_single_submission_by_anonymous_id_sections`")  # noqa: E501
        # verify the required parameter 'anonymous_id' is set
        if self.api_client.client_side_validation and ('anonymous_id' not in params or
                                                       params['anonymous_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anonymous_id` when calling `get_single_submission_by_anonymous_id_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'anonymous_id' in params:
            path_params['anonymous_id'] = params['anonymous_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_submission_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get a single submission  # noqa: E501

        Get a single submission, based on user id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_submission_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_submission_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_single_submission_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get a single submission  # noqa: E501

        Get a single submission, based on user id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_submission_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_submission_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_single_submission_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_single_submission_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_submission_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get a single submission  # noqa: E501

        Get a single submission, based on user id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_submission_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_submission_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def get_single_submission_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Get a single submission  # noqa: E501

        Get a single submission, based on user id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_submission_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param list[str] include: Associations to include with the group.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_submission_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `get_single_submission_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_single_submission_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_single_submission_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_multiple_submissions_courses_assignments(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_courses_assignments(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_multiple_submissions_courses_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_multiple_submissions_courses_assignments_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_multiple_submissions_courses_assignments_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_courses_assignments_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'grade_data_student_id_posted_grade', 'grade_data_student_id_excuse', 'grade_data_student_id_rubric_assessment', 'grade_data_student_id_text_comment', 'grade_data_student_id_group_comment', 'grade_data_student_id_media_comment_id', 'grade_data_student_id_media_comment_type', 'grade_data_student_id_file_ids', 'grade_data_assignment_id_student_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_multiple_submissions_courses_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `grade_or_comment_on_multiple_submissions_courses_assignments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_multiple_submissions_courses_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grade_data_student_id_posted_grade' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][posted_grade]', params['grade_data_student_id_posted_grade']))  # noqa: E501
        if 'grade_data_student_id_excuse' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][excuse]', params['grade_data_student_id_excuse']))  # noqa: E501
        if 'grade_data_student_id_rubric_assessment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][rubric_assessment]', params['grade_data_student_id_rubric_assessment']))  # noqa: E501
        if 'grade_data_student_id_text_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][text_comment]', params['grade_data_student_id_text_comment']))  # noqa: E501
        if 'grade_data_student_id_group_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][group_comment]', params['grade_data_student_id_group_comment']))  # noqa: E501
        if 'grade_data_student_id_media_comment_id' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_id]', params['grade_data_student_id_media_comment_id']))  # noqa: E501
        if 'grade_data_student_id_media_comment_type' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_type]', params['grade_data_student_id_media_comment_type']))  # noqa: E501
        if 'grade_data_student_id_file_ids' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][file_ids]', params['grade_data_student_id_file_ids']))  # noqa: E501
            collection_formats['grade_data[&lt;student_id&gt;][file_ids]'] = 'csv'  # noqa: E501
        if 'grade_data_assignment_id_student_id' in params:
            form_params.append(('grade_data[&lt;assignment_id&gt;][&lt;student_id&gt;]', params['grade_data_assignment_id_student_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_multiple_submissions_courses_submissions(self, course_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_courses_submissions(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_multiple_submissions_courses_submissions_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_multiple_submissions_courses_submissions_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_multiple_submissions_courses_submissions_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_courses_submissions_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'grade_data_student_id_posted_grade', 'grade_data_student_id_excuse', 'grade_data_student_id_rubric_assessment', 'grade_data_student_id_text_comment', 'grade_data_student_id_group_comment', 'grade_data_student_id_media_comment_id', 'grade_data_student_id_media_comment_type', 'grade_data_student_id_file_ids', 'grade_data_assignment_id_student_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_multiple_submissions_courses_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `grade_or_comment_on_multiple_submissions_courses_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grade_data_student_id_posted_grade' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][posted_grade]', params['grade_data_student_id_posted_grade']))  # noqa: E501
        if 'grade_data_student_id_excuse' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][excuse]', params['grade_data_student_id_excuse']))  # noqa: E501
        if 'grade_data_student_id_rubric_assessment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][rubric_assessment]', params['grade_data_student_id_rubric_assessment']))  # noqa: E501
        if 'grade_data_student_id_text_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][text_comment]', params['grade_data_student_id_text_comment']))  # noqa: E501
        if 'grade_data_student_id_group_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][group_comment]', params['grade_data_student_id_group_comment']))  # noqa: E501
        if 'grade_data_student_id_media_comment_id' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_id]', params['grade_data_student_id_media_comment_id']))  # noqa: E501
        if 'grade_data_student_id_media_comment_type' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_type]', params['grade_data_student_id_media_comment_type']))  # noqa: E501
        if 'grade_data_student_id_file_ids' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][file_ids]', params['grade_data_student_id_file_ids']))  # noqa: E501
            collection_formats['grade_data[&lt;student_id&gt;][file_ids]'] = 'csv'  # noqa: E501
        if 'grade_data_assignment_id_student_id' in params:
            form_params.append(('grade_data[&lt;assignment_id&gt;][&lt;student_id&gt;]', params['grade_data_assignment_id_student_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/submissions/update_grades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_multiple_submissions_sections_assignments(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_sections_assignments(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_multiple_submissions_sections_assignments_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_multiple_submissions_sections_assignments_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_multiple_submissions_sections_assignments_with_http_info(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_sections_assignments_with_http_info(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'grade_data_student_id_posted_grade', 'grade_data_student_id_excuse', 'grade_data_student_id_rubric_assessment', 'grade_data_student_id_text_comment', 'grade_data_student_id_group_comment', 'grade_data_student_id_media_comment_id', 'grade_data_student_id_media_comment_type', 'grade_data_student_id_file_ids', 'grade_data_assignment_id_student_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_multiple_submissions_sections_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `grade_or_comment_on_multiple_submissions_sections_assignments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_multiple_submissions_sections_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grade_data_student_id_posted_grade' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][posted_grade]', params['grade_data_student_id_posted_grade']))  # noqa: E501
        if 'grade_data_student_id_excuse' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][excuse]', params['grade_data_student_id_excuse']))  # noqa: E501
        if 'grade_data_student_id_rubric_assessment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][rubric_assessment]', params['grade_data_student_id_rubric_assessment']))  # noqa: E501
        if 'grade_data_student_id_text_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][text_comment]', params['grade_data_student_id_text_comment']))  # noqa: E501
        if 'grade_data_student_id_group_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][group_comment]', params['grade_data_student_id_group_comment']))  # noqa: E501
        if 'grade_data_student_id_media_comment_id' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_id]', params['grade_data_student_id_media_comment_id']))  # noqa: E501
        if 'grade_data_student_id_media_comment_type' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_type]', params['grade_data_student_id_media_comment_type']))  # noqa: E501
        if 'grade_data_student_id_file_ids' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][file_ids]', params['grade_data_student_id_file_ids']))  # noqa: E501
            collection_formats['grade_data[&lt;student_id&gt;][file_ids]'] = 'csv'  # noqa: E501
        if 'grade_data_assignment_id_student_id' in params:
            form_params.append(('grade_data[&lt;assignment_id&gt;][&lt;student_id&gt;]', params['grade_data_assignment_id_student_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_multiple_submissions_sections_submissions(self, section_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_sections_submissions(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_multiple_submissions_sections_submissions_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_multiple_submissions_sections_submissions_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_multiple_submissions_sections_submissions_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Grade or comment on multiple submissions  # noqa: E501

        Update the grading and comments on multiple student's assignment submissions in an asynchronous job.  The user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_multiple_submissions_sections_submissions_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str grade_data_student_id_posted_grade: See documentation for the posted_grade argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param bool grade_data_student_id_excuse: See documentation for the excuse argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param Object grade_data_student_id_rubric_assessment: See documentation for the rubric_assessment argument in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param str grade_data_student_id_text_comment: no description
        :param bool grade_data_student_id_group_comment: no description
        :param str grade_data_student_id_media_comment_id: no description
        :param str grade_data_student_id_media_comment_type: no description
        :param list[int] grade_data_student_id_file_ids: See documentation for the comment[] arguments in the {api:SubmissionsApiController#update Submissions Update} documentation
        :param int grade_data_assignment_id_student_id: Specifies which assignment to grade.  This argument is not necessary when using the assignment-specific endpoints.
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'grade_data_student_id_posted_grade', 'grade_data_student_id_excuse', 'grade_data_student_id_rubric_assessment', 'grade_data_student_id_text_comment', 'grade_data_student_id_group_comment', 'grade_data_student_id_media_comment_id', 'grade_data_student_id_media_comment_type', 'grade_data_student_id_file_ids', 'grade_data_assignment_id_student_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_multiple_submissions_sections_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `grade_or_comment_on_multiple_submissions_sections_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grade_data_student_id_posted_grade' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][posted_grade]', params['grade_data_student_id_posted_grade']))  # noqa: E501
        if 'grade_data_student_id_excuse' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][excuse]', params['grade_data_student_id_excuse']))  # noqa: E501
        if 'grade_data_student_id_rubric_assessment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][rubric_assessment]', params['grade_data_student_id_rubric_assessment']))  # noqa: E501
        if 'grade_data_student_id_text_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][text_comment]', params['grade_data_student_id_text_comment']))  # noqa: E501
        if 'grade_data_student_id_group_comment' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][group_comment]', params['grade_data_student_id_group_comment']))  # noqa: E501
        if 'grade_data_student_id_media_comment_id' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_id]', params['grade_data_student_id_media_comment_id']))  # noqa: E501
        if 'grade_data_student_id_media_comment_type' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][media_comment_type]', params['grade_data_student_id_media_comment_type']))  # noqa: E501
        if 'grade_data_student_id_file_ids' in params:
            form_params.append(('grade_data[&lt;student_id&gt;][file_ids]', params['grade_data_student_id_file_ids']))  # noqa: E501
            collection_formats['grade_data[&lt;student_id&gt;][file_ids]'] = 'csv'  # noqa: E501
        if 'grade_data_assignment_id_student_id' in params:
            form_params.append(('grade_data[&lt;assignment_id&gt;][&lt;student_id&gt;]', params['grade_data_assignment_id_student_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/submissions/update_grades', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_submission_by_anonymous_id_courses(self, course_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission by anonymous id  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_by_anonymous_id_courses(course_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_submission_by_anonymous_id_courses_with_http_info(self, course_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission by anonymous id  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_by_anonymous_id_courses_with_http_info(course_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'anonymous_id', 'comment_text_comment', 'comment_group_comment', 'comment_media_comment_id', 'comment_media_comment_type', 'comment_file_ids', 'include_visibility', 'submission_posted_grade', 'submission_excuse', 'submission_late_policy_status', 'submission_seconds_late_override', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_submission_by_anonymous_id_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `grade_or_comment_on_submission_by_anonymous_id_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_submission_by_anonymous_id_courses`")  # noqa: E501
        # verify the required parameter 'anonymous_id' is set
        if self.api_client.client_side_validation and ('anonymous_id' not in params or
                                                       params['anonymous_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anonymous_id` when calling `grade_or_comment_on_submission_by_anonymous_id_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'anonymous_id' in params:
            path_params['anonymous_id'] = params['anonymous_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'comment_group_comment' in params:
            form_params.append(('comment[group_comment]', params['comment_group_comment']))  # noqa: E501
        if 'comment_media_comment_id' in params:
            form_params.append(('comment[media_comment_id]', params['comment_media_comment_id']))  # noqa: E501
        if 'comment_media_comment_type' in params:
            form_params.append(('comment[media_comment_type]', params['comment_media_comment_type']))  # noqa: E501
        if 'comment_file_ids' in params:
            form_params.append(('comment[file_ids]', params['comment_file_ids']))  # noqa: E501
            collection_formats['comment[file_ids]'] = 'csv'  # noqa: E501
        if 'include_visibility' in params:
            form_params.append(('include[visibility]', params['include_visibility']))  # noqa: E501
        if 'submission_posted_grade' in params:
            form_params.append(('submission[posted_grade]', params['submission_posted_grade']))  # noqa: E501
        if 'submission_excuse' in params:
            form_params.append(('submission[excuse]', params['submission_excuse']))  # noqa: E501
        if 'submission_late_policy_status' in params:
            form_params.append(('submission[late_policy_status]', params['submission_late_policy_status']))  # noqa: E501
        if 'submission_seconds_late_override' in params:
            form_params.append(('submission[seconds_late_override]', params['submission_seconds_late_override']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_submission_by_anonymous_id_sections(self, section_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission by anonymous id  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_by_anonymous_id_sections(section_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_submission_by_anonymous_id_sections_with_http_info(self, section_id, assignment_id, anonymous_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission by anonymous id  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission, fetching the submission by anonymous id (instead of user id). If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_by_anonymous_id_sections_with_http_info(section_id, assignment_id, anonymous_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str anonymous_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'anonymous_id', 'comment_text_comment', 'comment_group_comment', 'comment_media_comment_id', 'comment_media_comment_type', 'comment_file_ids', 'include_visibility', 'submission_posted_grade', 'submission_excuse', 'submission_late_policy_status', 'submission_seconds_late_override', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_submission_by_anonymous_id_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `grade_or_comment_on_submission_by_anonymous_id_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_submission_by_anonymous_id_sections`")  # noqa: E501
        # verify the required parameter 'anonymous_id' is set
        if self.api_client.client_side_validation and ('anonymous_id' not in params or
                                                       params['anonymous_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `anonymous_id` when calling `grade_or_comment_on_submission_by_anonymous_id_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'anonymous_id' in params:
            path_params['anonymous_id'] = params['anonymous_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'comment_group_comment' in params:
            form_params.append(('comment[group_comment]', params['comment_group_comment']))  # noqa: E501
        if 'comment_media_comment_id' in params:
            form_params.append(('comment[media_comment_id]', params['comment_media_comment_id']))  # noqa: E501
        if 'comment_media_comment_type' in params:
            form_params.append(('comment[media_comment_type]', params['comment_media_comment_type']))  # noqa: E501
        if 'comment_file_ids' in params:
            form_params.append(('comment[file_ids]', params['comment_file_ids']))  # noqa: E501
            collection_formats['comment[file_ids]'] = 'csv'  # noqa: E501
        if 'include_visibility' in params:
            form_params.append(('include[visibility]', params['include_visibility']))  # noqa: E501
        if 'submission_posted_grade' in params:
            form_params.append(('submission[posted_grade]', params['submission_posted_grade']))  # noqa: E501
        if 'submission_excuse' in params:
            form_params.append(('submission[excuse]', params['submission_excuse']))  # noqa: E501
        if 'submission_late_policy_status' in params:
            form_params.append(('submission[late_policy_status]', params['submission_late_policy_status']))  # noqa: E501
        if 'submission_seconds_late_override' in params:
            form_params.append(('submission[seconds_late_override]', params['submission_seconds_late_override']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/anonymous_submissions/{anonymous_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_submission_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param int comment_attempt: The attempt number (starts at 1) to associate the comment with.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param bool prefer_points_over_scheme: Treat posted_grade as points if the value matches a grading scheme value
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param str submission_sticker: Sets the sticker for the submission.
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_submission_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_submission_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_submission_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param int comment_attempt: The attempt number (starts at 1) to associate the comment with.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param bool prefer_points_over_scheme: Treat posted_grade as points if the value matches a grading scheme value
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param str submission_sticker: Sets the sticker for the submission.
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id', 'comment_text_comment', 'comment_attempt', 'comment_group_comment', 'comment_media_comment_id', 'comment_media_comment_type', 'comment_file_ids', 'include_visibility', 'prefer_points_over_scheme', 'submission_posted_grade', 'submission_excuse', 'submission_late_policy_status', 'submission_sticker', 'submission_seconds_late_override', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_submission_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `grade_or_comment_on_submission_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_submission_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `grade_or_comment_on_submission_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'comment_attempt' in params:
            form_params.append(('comment[attempt]', params['comment_attempt']))  # noqa: E501
        if 'comment_group_comment' in params:
            form_params.append(('comment[group_comment]', params['comment_group_comment']))  # noqa: E501
        if 'comment_media_comment_id' in params:
            form_params.append(('comment[media_comment_id]', params['comment_media_comment_id']))  # noqa: E501
        if 'comment_media_comment_type' in params:
            form_params.append(('comment[media_comment_type]', params['comment_media_comment_type']))  # noqa: E501
        if 'comment_file_ids' in params:
            form_params.append(('comment[file_ids]', params['comment_file_ids']))  # noqa: E501
            collection_formats['comment[file_ids]'] = 'csv'  # noqa: E501
        if 'include_visibility' in params:
            form_params.append(('include[visibility]', params['include_visibility']))  # noqa: E501
        if 'prefer_points_over_scheme' in params:
            form_params.append(('prefer_points_over_scheme', params['prefer_points_over_scheme']))  # noqa: E501
        if 'submission_posted_grade' in params:
            form_params.append(('submission[posted_grade]', params['submission_posted_grade']))  # noqa: E501
        if 'submission_excuse' in params:
            form_params.append(('submission[excuse]', params['submission_excuse']))  # noqa: E501
        if 'submission_late_policy_status' in params:
            form_params.append(('submission[late_policy_status]', params['submission_late_policy_status']))  # noqa: E501
        if 'submission_sticker' in params:
            form_params.append(('submission[sticker]', params['submission_sticker']))  # noqa: E501
        if 'submission_seconds_late_override' in params:
            form_params.append(('submission[seconds_late_override]', params['submission_seconds_late_override']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def grade_or_comment_on_submission_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param int comment_attempt: The attempt number (starts at 1) to associate the comment with.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param bool prefer_points_over_scheme: Treat posted_grade as points if the value matches a grading scheme value
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param str submission_sticker: Sets the sticker for the submission.
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.grade_or_comment_on_submission_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.grade_or_comment_on_submission_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def grade_or_comment_on_submission_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Grade or comment on a submission  # noqa: E501

        Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.grade_or_comment_on_submission_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str comment_text_comment: Add a textual comment to the submission.
        :param int comment_attempt: The attempt number (starts at 1) to associate the comment with.
        :param bool comment_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str comment_media_comment_id: Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.
        :param str comment_media_comment_type: The type of media comment being added.
        :param list[int] comment_file_ids: Attach files to this comment that were previously uploaded using the Submission Comment API's files action
        :param str include_visibility: Whether this assignment is visible to the owner of the submission
        :param bool prefer_points_over_scheme: Treat posted_grade as points if the value matches a grading scheme value
        :param str submission_posted_grade: Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats:  points:: A floating point or integral value, such as \"13.5\". The grade   will be interpreted directly as the score of the assignment.   Values above assignment.points_possible are allowed, for awarding   extra credit. percentage:: A floating point value appended with a percent sign, such as    \"40%\". The grade will be interpreted as a percentage score on the    assignment, where 100% == assignment.points_possible. Values above 100%    are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter    grading scheme. For example, \"A-\". The resulting score will be the high    end of the defined range for the letter grade. For instance, if \"B\" is    defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The    letter grade will be rejected if the assignment does not have a defined    letter grading scheme. For more fine-grained control of scores, pass in    points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"    will give a score of 100%. \"fail\" or \"incomplete\" will give a score of    0.  Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.
        :param bool submission_excuse: Sets the \"excused\" status of an assignment.
        :param str submission_late_policy_status: Sets the late policy status to either \"late\", \"missing\", \"extended\", \"none\", or null.   NB: \"extended\" values can only be set in the UI when the \"UI features for 'extended' Submissions\" Account Feature is on
        :param str submission_sticker: Sets the sticker for the submission.
        :param int submission_seconds_late_override: Sets the seconds late if late policy status is \"late\"
        :param Object rubric_assessment: Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric:  The points awarded for this row.   rubric_assessment[criterion_id][points]  The rating id for the row.   rubric_assessment[criterion_id][rating_id]  Comments to add for this row.   rubric_assessment[criterion_id][comments]  For example, if the assignment rubric is (in JSON format):   !!!javascript   [     {       'id': 'crit1',       'points': 10,       'description': 'Criterion 1',       'ratings':       [         { 'id': 'rat1', 'description': 'Good', 'points': 10 },         { 'id': 'rat2', 'description': 'Poor', 'points': 3 }       ]     },     {       'id': 'crit2',       'points': 5,       'description': 'Criterion 2',       'ratings':       [         { 'id': 'rat1', 'description': 'Exemplary', 'points': 5 },         { 'id': 'rat2', 'description': 'Complete', 'points': 5 },         { 'id': 'rat3', 'description': 'Incomplete', 'points': 0 }       ]     }   ]  Then a possible set of values for rubric_assessment would be:     rubric_assessment[crit1][points]=3&rubric_assessment[crit1][rating_id]=rat1&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][rating_id]=rat2&rubric_assessment[crit2][comments]=Well%20Done.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id', 'comment_text_comment', 'comment_attempt', 'comment_group_comment', 'comment_media_comment_id', 'comment_media_comment_type', 'comment_file_ids', 'include_visibility', 'prefer_points_over_scheme', 'submission_posted_grade', 'submission_excuse', 'submission_late_policy_status', 'submission_sticker', 'submission_seconds_late_override', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method grade_or_comment_on_submission_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `grade_or_comment_on_submission_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `grade_or_comment_on_submission_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `grade_or_comment_on_submission_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'comment_attempt' in params:
            form_params.append(('comment[attempt]', params['comment_attempt']))  # noqa: E501
        if 'comment_group_comment' in params:
            form_params.append(('comment[group_comment]', params['comment_group_comment']))  # noqa: E501
        if 'comment_media_comment_id' in params:
            form_params.append(('comment[media_comment_id]', params['comment_media_comment_id']))  # noqa: E501
        if 'comment_media_comment_type' in params:
            form_params.append(('comment[media_comment_type]', params['comment_media_comment_type']))  # noqa: E501
        if 'comment_file_ids' in params:
            form_params.append(('comment[file_ids]', params['comment_file_ids']))  # noqa: E501
            collection_formats['comment[file_ids]'] = 'csv'  # noqa: E501
        if 'include_visibility' in params:
            form_params.append(('include[visibility]', params['include_visibility']))  # noqa: E501
        if 'prefer_points_over_scheme' in params:
            form_params.append(('prefer_points_over_scheme', params['prefer_points_over_scheme']))  # noqa: E501
        if 'submission_posted_grade' in params:
            form_params.append(('submission[posted_grade]', params['submission_posted_grade']))  # noqa: E501
        if 'submission_excuse' in params:
            form_params.append(('submission[excuse]', params['submission_excuse']))  # noqa: E501
        if 'submission_late_policy_status' in params:
            form_params.append(('submission[late_policy_status]', params['submission_late_policy_status']))  # noqa: E501
        if 'submission_sticker' in params:
            form_params.append(('submission[sticker]', params['submission_sticker']))  # noqa: E501
        if 'submission_seconds_late_override' in params:
            form_params.append(('submission[seconds_late_override]', params['submission_seconds_late_override']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignment_submissions_courses(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment submissions  # noqa: E501

        A paginated list of all existing submissions for an assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_submissions_courses(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the group.  \"group\" will add group_id and group_name.
        :param bool grouped: If this argument is true, the response will be grouped by student groups.
        :return: list[Submission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignment_submissions_courses_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignment_submissions_courses_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def list_assignment_submissions_courses_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment submissions  # noqa: E501

        A paginated list of all existing submissions for an assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_submissions_courses_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the group.  \"group\" will add group_id and group_name.
        :param bool grouped: If this argument is true, the response will be grouped by student groups.
        :return: list[Submission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'include', 'grouped']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignment_submissions_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_assignment_submissions_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `list_assignment_submissions_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Submission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_assignment_submissions_sections(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment submissions  # noqa: E501

        A paginated list of all existing submissions for an assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_submissions_sections(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the group.  \"group\" will add group_id and group_name.
        :param bool grouped: If this argument is true, the response will be grouped by student groups.
        :return: list[Submission]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_assignment_submissions_sections_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_assignment_submissions_sections_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def list_assignment_submissions_sections_with_http_info(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """List assignment submissions  # noqa: E501

        A paginated list of all existing submissions for an assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_assignment_submissions_sections_with_http_info(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param list[str] include: Associations to include with the group.  \"group\" will add group_id and group_name.
        :param bool grouped: If this argument is true, the response will be grouped by student groups.
        :return: list[Submission]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'include', 'grouped']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_assignment_submissions_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `list_assignment_submissions_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `list_assignment_submissions_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Submission]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_gradeable_students(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List gradeable students  # noqa: E501

        A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.  If anonymous grading is enabled for the current assignment and the allow_new_anonymous_id parameter is passed, the returned data will not include any values identifying the student, but will instead include an assignment-specific anonymous ID for each student.  Section-limited instructors will only see students in their own sections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_gradeable_students(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: list[UserDisplayIfAnonymousGradingIsNotEnabledForTheAssignmentOrIfTheAllowNewAnonymousIdParameterIsNotTrue]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_gradeable_students_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_gradeable_students_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def list_gradeable_students_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List gradeable students  # noqa: E501

        A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.  If anonymous grading is enabled for the current assignment and the allow_new_anonymous_id parameter is passed, the returned data will not include any values identifying the student, but will instead include an assignment-specific anonymous ID for each student.  Section-limited instructors will only see students in their own sections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_gradeable_students_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :return: list[UserDisplayIfAnonymousGradingIsNotEnabledForTheAssignmentOrIfTheAllowNewAnonymousIdParameterIsNotTrue]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_gradeable_students" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_gradeable_students`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `list_gradeable_students`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserDisplayIfAnonymousGradingIsNotEnabledForTheAssignmentOrIfTheAllowNewAnonymousIdParameterIsNotTrue]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_multiple_assignments_gradeable_students(self, course_id, **kwargs):  # noqa: E501
        """List multiple assignments gradeable students  # noqa: E501

        A paginated list of students eligible to submit a list of assignments. The caller must have permission to view grades for the requested course.  Section-limited instructors will only see students in their own sections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_multiple_assignments_gradeable_students(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_ids: Assignments being requested
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_multiple_assignments_gradeable_students_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_multiple_assignments_gradeable_students_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_multiple_assignments_gradeable_students_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List multiple assignments gradeable students  # noqa: E501

        A paginated list of students eligible to submit a list of assignments. The caller must have permission to view grades for the requested course.  Section-limited instructors will only see students in their own sections.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_multiple_assignments_gradeable_students_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] assignment_ids: Assignments being requested
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_multiple_assignments_gradeable_students" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_multiple_assignments_gradeable_students`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/gradeable_students', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_submissions_for_multiple_assignments_courses(self, course_id, **kwargs):  # noqa: E501
        """List submissions for multiple assignments  # noqa: E501

        A paginated list of all existing submissions for a given set of students and assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_submissions_for_multiple_assignments_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] student_ids: List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.
        :param list[str] assignment_ids: List of assignments to return submissions for. If none are given, submissions for all assignments are returned.
        :param bool grouped: If this argument is present, the response will be grouped by student, rather than a flat array of submissions.
        :param bool post_to_sis: If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.
        :param Object submitted_since: If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param Object graded_since: If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param int grading_period_id: The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)
        :param str workflow_state: The current status of the submission
        :param str enrollment_state: The current state of the enrollments. If omitted will include all enrollments that are not deleted.
        :param bool state_based_on_date: If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.
        :param str order: The order submissions will be returned in.  Defaults to \"id\".  Doesn't affect results for \"grouped\" mode.
        :param str order_direction: Determines whether ordered results are returned in ascending or descending order.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.
        :param list[str] include: Associations to include with the group. `total_scores` requires the `grouped` argument.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_submissions_for_multiple_assignments_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_submissions_for_multiple_assignments_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_submissions_for_multiple_assignments_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List submissions for multiple assignments  # noqa: E501

        A paginated list of all existing submissions for a given set of students and assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_submissions_for_multiple_assignments_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] student_ids: List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.
        :param list[str] assignment_ids: List of assignments to return submissions for. If none are given, submissions for all assignments are returned.
        :param bool grouped: If this argument is present, the response will be grouped by student, rather than a flat array of submissions.
        :param bool post_to_sis: If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.
        :param Object submitted_since: If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param Object graded_since: If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param int grading_period_id: The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)
        :param str workflow_state: The current status of the submission
        :param str enrollment_state: The current state of the enrollments. If omitted will include all enrollments that are not deleted.
        :param bool state_based_on_date: If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.
        :param str order: The order submissions will be returned in.  Defaults to \"id\".  Doesn't affect results for \"grouped\" mode.
        :param str order_direction: Determines whether ordered results are returned in ascending or descending order.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.
        :param list[str] include: Associations to include with the group. `total_scores` requires the `grouped` argument.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'student_ids', 'assignment_ids', 'grouped', 'post_to_sis', 'submitted_since', 'graded_since', 'grading_period_id', 'workflow_state', 'enrollment_state', 'state_based_on_date', 'order', 'order_direction', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_submissions_for_multiple_assignments_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_submissions_for_multiple_assignments_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'student_ids' in params:
            query_params.append(('student_ids', params['student_ids']))  # noqa: E501
            collection_formats['student_ids'] = 'csv'  # noqa: E501
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501
        if 'post_to_sis' in params:
            query_params.append(('post_to_sis', params['post_to_sis']))  # noqa: E501
        if 'submitted_since' in params:
            query_params.append(('submitted_since', params['submitted_since']))  # noqa: E501
        if 'graded_since' in params:
            query_params.append(('graded_since', params['graded_since']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'workflow_state' in params:
            query_params.append(('workflow_state', params['workflow_state']))  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
        if 'state_based_on_date' in params:
            query_params.append(('state_based_on_date', params['state_based_on_date']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/students/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_submissions_for_multiple_assignments_sections(self, section_id, **kwargs):  # noqa: E501
        """List submissions for multiple assignments  # noqa: E501

        A paginated list of all existing submissions for a given set of students and assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_submissions_for_multiple_assignments_sections(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] student_ids: List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.
        :param list[str] assignment_ids: List of assignments to return submissions for. If none are given, submissions for all assignments are returned.
        :param bool grouped: If this argument is present, the response will be grouped by student, rather than a flat array of submissions.
        :param bool post_to_sis: If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.
        :param Object submitted_since: If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param Object graded_since: If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param int grading_period_id: The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)
        :param str workflow_state: The current status of the submission
        :param str enrollment_state: The current state of the enrollments. If omitted will include all enrollments that are not deleted.
        :param bool state_based_on_date: If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.
        :param str order: The order submissions will be returned in.  Defaults to \"id\".  Doesn't affect results for \"grouped\" mode.
        :param str order_direction: Determines whether ordered results are returned in ascending or descending order.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.
        :param list[str] include: Associations to include with the group. `total_scores` requires the `grouped` argument.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_submissions_for_multiple_assignments_sections_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_submissions_for_multiple_assignments_sections_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def list_submissions_for_multiple_assignments_sections_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """List submissions for multiple assignments  # noqa: E501

        A paginated list of all existing submissions for a given set of students and assignments.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_submissions_for_multiple_assignments_sections_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] student_ids: List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.
        :param list[str] assignment_ids: List of assignments to return submissions for. If none are given, submissions for all assignments are returned.
        :param bool grouped: If this argument is present, the response will be grouped by student, rather than a flat array of submissions.
        :param bool post_to_sis: If this argument is set to true, the response will only include submissions for assignments that have the post_to_sis flag set to true and user enrollments that were added through sis.
        :param Object submitted_since: If this argument is set, the response will only include submissions that were submitted after the specified date_time. This will exclude submissions that do not have a submitted_at which will exclude unsubmitted submissions. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param Object graded_since: If this argument is set, the response will only include submissions that were graded after the specified date_time. This will exclude submissions that have not been graded. The value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.
        :param int grading_period_id: The id of the grading period in which submissions are being requested (Requires grading periods to exist on the account)
        :param str workflow_state: The current status of the submission
        :param str enrollment_state: The current state of the enrollments. If omitted will include all enrollments that are not deleted.
        :param bool state_based_on_date: If omitted it is set to true. When set to false it will ignore the effective state of the student enrollments and use the workflow_state for the enrollments. The argument is ignored unless enrollment_state argument is also passed.
        :param str order: The order submissions will be returned in.  Defaults to \"id\".  Doesn't affect results for \"grouped\" mode.
        :param str order_direction: Determines whether ordered results are returned in ascending or descending order.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.
        :param list[str] include: Associations to include with the group. `total_scores` requires the `grouped` argument.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'student_ids', 'assignment_ids', 'grouped', 'post_to_sis', 'submitted_since', 'graded_since', 'grading_period_id', 'workflow_state', 'enrollment_state', 'state_based_on_date', 'order', 'order_direction', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_submissions_for_multiple_assignments_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `list_submissions_for_multiple_assignments_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'student_ids' in params:
            query_params.append(('student_ids', params['student_ids']))  # noqa: E501
            collection_formats['student_ids'] = 'csv'  # noqa: E501
        if 'assignment_ids' in params:
            query_params.append(('assignment_ids', params['assignment_ids']))  # noqa: E501
            collection_formats['assignment_ids'] = 'csv'  # noqa: E501
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501
        if 'post_to_sis' in params:
            query_params.append(('post_to_sis', params['post_to_sis']))  # noqa: E501
        if 'submitted_since' in params:
            query_params.append(('submitted_since', params['submitted_since']))  # noqa: E501
        if 'graded_since' in params:
            query_params.append(('graded_since', params['graded_since']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'workflow_state' in params:
            query_params.append(('workflow_state', params['workflow_state']))  # noqa: E501
        if 'enrollment_state' in params:
            query_params.append(('enrollment_state', params['enrollment_state']))  # noqa: E501
        if 'state_based_on_date' in params:
            query_params.append(('state_based_on_date', params['state_based_on_date']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/students/submissions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_bulk_submissions_as_read_courses(self, course_id, **kwargs):  # noqa: E501
        """Mark bulk submissions as read  # noqa: E501

        Accepts a string array of submission ids. Loops through and marks each submission as read  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_bulk_submissions_as_read_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] submission_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_bulk_submissions_as_read_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_bulk_submissions_as_read_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def mark_bulk_submissions_as_read_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Mark bulk submissions as read  # noqa: E501

        Accepts a string array of submission ids. Loops through and marks each submission as read  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_bulk_submissions_as_read_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] submission_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'submission_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_bulk_submissions_as_read_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_bulk_submissions_as_read_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'submission_ids' in params:
            form_params.append(('submissionIds', params['submission_ids']))  # noqa: E501
            collection_formats['submissionIds'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/submissions/bulk_mark_read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_bulk_submissions_as_read_sections(self, section_id, **kwargs):  # noqa: E501
        """Mark bulk submissions as read  # noqa: E501

        Accepts a string array of submission ids. Loops through and marks each submission as read  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_bulk_submissions_as_read_sections(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] submission_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_bulk_submissions_as_read_sections_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_bulk_submissions_as_read_sections_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def mark_bulk_submissions_as_read_sections_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """Mark bulk submissions as read  # noqa: E501

        Accepts a string array of submission ids. Loops through and marks each submission as read  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_bulk_submissions_as_read_sections_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] submission_ids: no description
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'submission_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_bulk_submissions_as_read_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_bulk_submissions_as_read_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'submission_ids' in params:
            form_params.append(('submissionIds', params['submission_ids']))  # noqa: E501
            collection_formats['submissionIds'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/submissions/bulk_mark_read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_document_annotations_as_read_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark document annotations as read  # noqa: E501

        Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint.  NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_document_annotations_as_read_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_document_annotations_as_read_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_document_annotations_as_read_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_document_annotations_as_read_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark document annotations as read  # noqa: E501

        Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint.  NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_document_annotations_as_read_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_document_annotations_as_read_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_document_annotations_as_read_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_document_annotations_as_read_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_document_annotations_as_read_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_document_annotations_as_read_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark document annotations as read  # noqa: E501

        Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint.  NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_document_annotations_as_read_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_document_annotations_as_read_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_document_annotations_as_read_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_document_annotations_as_read_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark document annotations as read  # noqa: E501

        Indicate that annotations made on a submitted document have been read by the student. Only the student who owns the submission can use this endpoint.  NOTE: Document annotations will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_document_annotations_as_read_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_document_annotations_as_read_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_document_annotations_as_read_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_document_annotations_as_read_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_document_annotations_as_read_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/document_annotations/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_rubric_assessments_as_read_courses_rubric_assessments(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_courses_rubric_assessments(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_rubric_assessments_as_read_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_rubric_assessments_as_read_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_rubric_assessments_as_read_courses_rubric_assessments_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_courses_rubric_assessments_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_rubric_assessments_as_read_courses_rubric_assessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_rubric_assessments_as_read_courses_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_rubric_assessments_as_read_courses_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_rubric_assessments_as_read_courses_rubric_assessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_rubric_assessments_as_read_courses_rubric_comments(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_courses_rubric_comments(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_rubric_assessments_as_read_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_rubric_assessments_as_read_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_rubric_assessments_as_read_courses_rubric_comments_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_courses_rubric_comments_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_rubric_assessments_as_read_courses_rubric_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_rubric_assessments_as_read_courses_rubric_comments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_rubric_assessments_as_read_courses_rubric_comments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_rubric_assessments_as_read_courses_rubric_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_rubric_assessments_as_read_sections_rubric_assessments(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_sections_rubric_assessments(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_rubric_assessments_as_read_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_rubric_assessments_as_read_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_rubric_assessments_as_read_sections_rubric_assessments_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_sections_rubric_assessments_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_rubric_assessments_as_read_sections_rubric_assessments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_rubric_assessments_as_read_sections_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_rubric_assessments_as_read_sections_rubric_assessments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_rubric_assessments_as_read_sections_rubric_assessments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_assessments/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_rubric_assessments_as_read_sections_rubric_comments(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_sections_rubric_comments(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_rubric_assessments_as_read_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_rubric_assessments_as_read_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_rubric_assessments_as_read_sections_rubric_comments_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark rubric assessments as read  # noqa: E501

        Indicate that rubric comments/grading made on a submission have been read by the student being assessed. Only the student who owns the submission can use this endpoint.  NOTE: Rubric assessments will be marked as read automatically when they are viewed in Canvas web.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_rubric_assessments_as_read_sections_rubric_comments_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_rubric_assessments_as_read_sections_rubric_comments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_rubric_assessments_as_read_sections_rubric_comments`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_rubric_assessments_as_read_sections_rubric_comments`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_rubric_assessments_as_read_sections_rubric_comments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/rubric_comments/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_as_read_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as read  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_read_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_as_read_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_as_read_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_submission_as_read_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as read  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_read_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_as_read_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_submission_as_read_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_as_read_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_as_read_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_as_read_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as read  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_read_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_as_read_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_as_read_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_submission_as_read_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as read  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_read_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_as_read_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_submission_as_read_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_as_read_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_as_read_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_as_unread_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as unread  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_unread_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_as_unread_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_as_unread_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_submission_as_unread_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as unread  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_unread_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_as_unread_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_submission_as_unread_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_as_unread_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_as_unread_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_as_unread_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as unread  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_unread_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_as_unread_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_as_unread_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def mark_submission_as_unread_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Mark submission as unread  # noqa: E501

        No request fields are necessary.  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_as_unread_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_as_unread_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_submission_as_unread_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_as_unread_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_as_unread_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_item_as_read_courses(self, course_id, assignment_id, user_id, item, **kwargs):  # noqa: E501
        """Mark submission item as read  # noqa: E501

        No request fields are necessary.  A submission item can be \"grade\", \"comment\" or \"rubric\"  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_item_as_read_courses(course_id, assignment_id, user_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str item: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_item_as_read_courses_with_http_info(course_id, assignment_id, user_id, item, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_item_as_read_courses_with_http_info(course_id, assignment_id, user_id, item, **kwargs)  # noqa: E501
            return data

    def mark_submission_item_as_read_courses_with_http_info(self, course_id, assignment_id, user_id, item, **kwargs):  # noqa: E501
        """Mark submission item as read  # noqa: E501

        No request fields are necessary.  A submission item can be \"grade\", \"comment\" or \"rubric\"  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_item_as_read_courses_with_http_info(course_id, assignment_id, user_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str item: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_item_as_read_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `mark_submission_item_as_read_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_item_as_read_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_item_as_read_courses`")  # noqa: E501
        # verify the required parameter 'item' is set
        if self.api_client.client_side_validation and ('item' not in params or
                                                       params['item'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item` when calling `mark_submission_item_as_read_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'item' in params:
            path_params['item'] = params['item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read/{item}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def mark_submission_item_as_read_sections(self, section_id, assignment_id, user_id, item, **kwargs):  # noqa: E501
        """Mark submission item as read  # noqa: E501

        No request fields are necessary.  A submission item can be \"grade\", \"comment\" or \"rubric\"  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_item_as_read_sections(section_id, assignment_id, user_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str item: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.mark_submission_item_as_read_sections_with_http_info(section_id, assignment_id, user_id, item, **kwargs)  # noqa: E501
        else:
            (data) = self.mark_submission_item_as_read_sections_with_http_info(section_id, assignment_id, user_id, item, **kwargs)  # noqa: E501
            return data

    def mark_submission_item_as_read_sections_with_http_info(self, section_id, assignment_id, user_id, item, **kwargs):  # noqa: E501
        """Mark submission item as read  # noqa: E501

        No request fields are necessary.  A submission item can be \"grade\", \"comment\" or \"rubric\"  On success, the response will be 204 No Content with an empty body.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.mark_submission_item_as_read_sections_with_http_info(section_id, assignment_id, user_id, item, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :param str item: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id', 'item']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method mark_submission_item_as_read_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `mark_submission_item_as_read_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `mark_submission_item_as_read_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `mark_submission_item_as_read_sections`")  # noqa: E501
        # verify the required parameter 'item' is set
        if self.api_client.client_side_validation and ('item' not in params or
                                                       params['item'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item` when calling `mark_submission_item_as_read_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'item' in params:
            path_params['item'] = params['item']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read/{item}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_summary_courses(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Submission Summary  # noqa: E501

        Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_summary_courses(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param bool grouped: If this argument is true, the response will take into account student groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_summary_courses_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submission_summary_courses_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def submission_summary_courses_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Submission Summary  # noqa: E501

        Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_summary_courses_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param bool grouped: If this argument is true, the response will take into account student groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'grouped']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_summary_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `submission_summary_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `submission_summary_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submission_summary_sections(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Submission Summary  # noqa: E501

        Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_summary_sections(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param bool grouped: If this argument is true, the response will take into account student groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submission_summary_sections_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.submission_summary_sections_with_http_info(section_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def submission_summary_sections_with_http_info(self, section_id, assignment_id, **kwargs):  # noqa: E501
        """Submission Summary  # noqa: E501

        Returns the number of submissions for the given assignment based on gradeable students that fall into three categories: graded, ungraded, not submitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submission_summary_sections_with_http_info(section_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param bool grouped: If this argument is true, the response will take into account student groups.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'grouped']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submission_summary_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `submission_summary_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `submission_summary_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []
        if 'grouped' in params:
            query_params.append(('grouped', params['grouped']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_assignment_courses(self, course_id, assignment_id, submission_submission_type, **kwargs):  # noqa: E501
        """Submit an assignment  # noqa: E501

        Make a submission for an assignment. You must be enrolled as a student in the course/section to do this.  All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported:  * Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_assignment_courses(course_id, assignment_id, submission_submission_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_submission_type: The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.  The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission [submission_type] must be set to \"online_url\", otherwise the submission [url] parameter will be ignored.  \"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\" (required)
        :param str comment_text_comment: Include a textual comment with the submission.
        :param bool submission_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str submission_body: Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".
        :param str submission_url: Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\" or \"basic_lti_launch\".
        :param list[int] submission_file_ids: Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments).  To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.  Requires a submission_type of \"online_upload\".
        :param str submission_media_comment_id: The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.  Requires a submission_type of \"media_recording\".
        :param str submission_media_comment_type: The type of media comment being submitted.
        :param int submission_user_id: Submit on behalf of the given user. Requires grading permission.
        :param int submission_annotatable_attachment_id: The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.  Requires a submission_type of \"student_annotation\".
        :param Object submission_submitted_at: Choose the time the submission is listed as submitted at.  Requires grading permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_assignment_courses_with_http_info(course_id, assignment_id, submission_submission_type, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_assignment_courses_with_http_info(course_id, assignment_id, submission_submission_type, **kwargs)  # noqa: E501
            return data

    def submit_assignment_courses_with_http_info(self, course_id, assignment_id, submission_submission_type, **kwargs):  # noqa: E501
        """Submit an assignment  # noqa: E501

        Make a submission for an assignment. You must be enrolled as a student in the course/section to do this.  All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported:  * Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_assignment_courses_with_http_info(course_id, assignment_id, submission_submission_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_submission_type: The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.  The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission [submission_type] must be set to \"online_url\", otherwise the submission [url] parameter will be ignored.  \"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\" (required)
        :param str comment_text_comment: Include a textual comment with the submission.
        :param bool submission_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str submission_body: Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".
        :param str submission_url: Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\" or \"basic_lti_launch\".
        :param list[int] submission_file_ids: Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments).  To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.  Requires a submission_type of \"online_upload\".
        :param str submission_media_comment_id: The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.  Requires a submission_type of \"media_recording\".
        :param str submission_media_comment_type: The type of media comment being submitted.
        :param int submission_user_id: Submit on behalf of the given user. Requires grading permission.
        :param int submission_annotatable_attachment_id: The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.  Requires a submission_type of \"student_annotation\".
        :param Object submission_submitted_at: Choose the time the submission is listed as submitted at.  Requires grading permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'submission_submission_type', 'comment_text_comment', 'submission_group_comment', 'submission_body', 'submission_url', 'submission_file_ids', 'submission_media_comment_id', 'submission_media_comment_type', 'submission_user_id', 'submission_annotatable_attachment_id', 'submission_submitted_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_assignment_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `submit_assignment_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `submit_assignment_courses`")  # noqa: E501
        # verify the required parameter 'submission_submission_type' is set
        if self.api_client.client_side_validation and ('submission_submission_type' not in params or
                                                       params['submission_submission_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_submission_type` when calling `submit_assignment_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'submission_group_comment' in params:
            form_params.append(('submission[group_comment]', params['submission_group_comment']))  # noqa: E501
        if 'submission_submission_type' in params:
            form_params.append(('submission[submission_type]', params['submission_submission_type']))  # noqa: E501
        if 'submission_body' in params:
            form_params.append(('submission[body]', params['submission_body']))  # noqa: E501
        if 'submission_url' in params:
            form_params.append(('submission[url]', params['submission_url']))  # noqa: E501
        if 'submission_file_ids' in params:
            form_params.append(('submission[file_ids]', params['submission_file_ids']))  # noqa: E501
            collection_formats['submission[file_ids]'] = 'csv'  # noqa: E501
        if 'submission_media_comment_id' in params:
            form_params.append(('submission[media_comment_id]', params['submission_media_comment_id']))  # noqa: E501
        if 'submission_media_comment_type' in params:
            form_params.append(('submission[media_comment_type]', params['submission_media_comment_type']))  # noqa: E501
        if 'submission_user_id' in params:
            form_params.append(('submission[user_id]', params['submission_user_id']))  # noqa: E501
        if 'submission_annotatable_attachment_id' in params:
            form_params.append(('submission[annotatable_attachment_id]', params['submission_annotatable_attachment_id']))  # noqa: E501
        if 'submission_submitted_at' in params:
            form_params.append(('submission[submitted_at]', params['submission_submitted_at']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def submit_assignment_sections(self, section_id, assignment_id, submission_submission_type, **kwargs):  # noqa: E501
        """Submit an assignment  # noqa: E501

        Make a submission for an assignment. You must be enrolled as a student in the course/section to do this.  All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported:  * Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_assignment_sections(section_id, assignment_id, submission_submission_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_submission_type: The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.  The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission [submission_type] must be set to \"online_url\", otherwise the submission [url] parameter will be ignored.  \"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\" (required)
        :param str comment_text_comment: Include a textual comment with the submission.
        :param bool submission_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str submission_body: Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".
        :param str submission_url: Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\" or \"basic_lti_launch\".
        :param list[int] submission_file_ids: Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments).  To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.  Requires a submission_type of \"online_upload\".
        :param str submission_media_comment_id: The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.  Requires a submission_type of \"media_recording\".
        :param str submission_media_comment_type: The type of media comment being submitted.
        :param int submission_user_id: Submit on behalf of the given user. Requires grading permission.
        :param int submission_annotatable_attachment_id: The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.  Requires a submission_type of \"student_annotation\".
        :param Object submission_submitted_at: Choose the time the submission is listed as submitted at.  Requires grading permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.submit_assignment_sections_with_http_info(section_id, assignment_id, submission_submission_type, **kwargs)  # noqa: E501
        else:
            (data) = self.submit_assignment_sections_with_http_info(section_id, assignment_id, submission_submission_type, **kwargs)  # noqa: E501
            return data

    def submit_assignment_sections_with_http_info(self, section_id, assignment_id, submission_submission_type, **kwargs):  # noqa: E501
        """Submit an assignment  # noqa: E501

        Make a submission for an assignment. You must be enrolled as a student in the course/section to do this.  All online turn-in submission types are supported in this API. However, there are a few things that are not yet supported:  * Files can be submitted based on a file ID of a user or group file or through the {api:SubmissionsApiController#create_file file upload API}. However, there is no API yet for listing the user and group files. * Media comments can be submitted, however, there is no API yet for creating a media comment to submit. * Integration with Google Docs is not yet supported.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.submit_assignment_sections_with_http_info(section_id, assignment_id, submission_submission_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str submission_submission_type: The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error.  The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission [submission_type] must be set to \"online_url\", otherwise the submission [url] parameter will be ignored.  \"basic_lti_launch\" requires the assignment submission_type \"online\" or \"external_tool\" (required)
        :param str comment_text_comment: Include a textual comment with the submission.
        :param bool submission_group_comment: Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.
        :param str submission_body: Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".
        :param str submission_url: Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\" or \"basic_lti_launch\".
        :param list[int] submission_file_ids: Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments).  To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.  Requires a submission_type of \"online_upload\".
        :param str submission_media_comment_id: The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.  Requires a submission_type of \"media_recording\".
        :param str submission_media_comment_type: The type of media comment being submitted.
        :param int submission_user_id: Submit on behalf of the given user. Requires grading permission.
        :param int submission_annotatable_attachment_id: The Attachment ID of the document being annotated. This should match the annotatable_attachment_id on the assignment.  Requires a submission_type of \"student_annotation\".
        :param Object submission_submitted_at: Choose the time the submission is listed as submitted at.  Requires grading permission.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'submission_submission_type', 'comment_text_comment', 'submission_group_comment', 'submission_body', 'submission_url', 'submission_file_ids', 'submission_media_comment_id', 'submission_media_comment_type', 'submission_user_id', 'submission_annotatable_attachment_id', 'submission_submitted_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method submit_assignment_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `submit_assignment_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `submit_assignment_sections`")  # noqa: E501
        # verify the required parameter 'submission_submission_type' is set
        if self.api_client.client_side_validation and ('submission_submission_type' not in params or
                                                       params['submission_submission_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_submission_type` when calling `submit_assignment_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'comment_text_comment' in params:
            form_params.append(('comment[text_comment]', params['comment_text_comment']))  # noqa: E501
        if 'submission_group_comment' in params:
            form_params.append(('submission[group_comment]', params['submission_group_comment']))  # noqa: E501
        if 'submission_submission_type' in params:
            form_params.append(('submission[submission_type]', params['submission_submission_type']))  # noqa: E501
        if 'submission_body' in params:
            form_params.append(('submission[body]', params['submission_body']))  # noqa: E501
        if 'submission_url' in params:
            form_params.append(('submission[url]', params['submission_url']))  # noqa: E501
        if 'submission_file_ids' in params:
            form_params.append(('submission[file_ids]', params['submission_file_ids']))  # noqa: E501
            collection_formats['submission[file_ids]'] = 'csv'  # noqa: E501
        if 'submission_media_comment_id' in params:
            form_params.append(('submission[media_comment_id]', params['submission_media_comment_id']))  # noqa: E501
        if 'submission_media_comment_type' in params:
            form_params.append(('submission[media_comment_type]', params['submission_media_comment_type']))  # noqa: E501
        if 'submission_user_id' in params:
            form_params.append(('submission[user_id]', params['submission_user_id']))  # noqa: E501
        if 'submission_annotatable_attachment_id' in params:
            form_params.append(('submission[annotatable_attachment_id]', params['submission_annotatable_attachment_id']))  # noqa: E501
        if 'submission_submitted_at' in params:
            form_params.append(('submission[submitted_at]', params['submission_submitted_at']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_courses(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to a submission.  This API endpoint is the first step in uploading a file to a submission as a student. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the +online_upload+ assignment with these file ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_courses(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_courses_with_http_info(course_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def upload_file_courses_with_http_info(self, course_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to a submission.  This API endpoint is the first step in uploading a file to a submission as a student. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the +online_upload+ assignment with these file ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_courses_with_http_info(course_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `upload_file_courses`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `upload_file_courses`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `upload_file_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_sections(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to a submission.  This API endpoint is the first step in uploading a file to a submission as a student. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the +online_upload+ assignment with these file ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_sections(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_file_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_sections_with_http_info(section_id, assignment_id, user_id, **kwargs)  # noqa: E501
            return data

    def upload_file_sections_with_http_info(self, section_id, assignment_id, user_id, **kwargs):  # noqa: E501
        """Upload a file  # noqa: E501

        Upload a file to a submission.  This API endpoint is the first step in uploading a file to a submission as a student. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.  The final step of the file upload workflow will return the attachment data, including the new file id. The caller can then POST to submit the +online_upload+ assignment with these file ids.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_file_sections_with_http_info(section_id, assignment_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str assignment_id: ID (required)
        :param str user_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'assignment_id', 'user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `upload_file_sections`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `upload_file_sections`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `upload_file_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
