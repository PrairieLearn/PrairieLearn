# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RubricsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_rubricassociation(self, course_id, **kwargs):  # noqa: E501
        """Create a RubricAssociation  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rubricassociation(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int rubric_association_rubric_id: The id of the Rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param str rubric_association_title: The name of the object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param bool rubric_association_bookmarked: Whether or not the associated rubric appears in its context
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_rubricassociation_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_rubricassociation_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_rubricassociation_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create a RubricAssociation  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_rubricassociation_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int rubric_association_rubric_id: The id of the Rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param str rubric_association_title: The name of the object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param bool rubric_association_bookmarked: Whether or not the associated rubric appears in its context
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'rubric_association_rubric_id', 'rubric_association_association_id', 'rubric_association_association_type', 'rubric_association_title', 'rubric_association_use_for_grading', 'rubric_association_hide_score_total', 'rubric_association_purpose', 'rubric_association_bookmarked']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_rubricassociation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_rubricassociation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'rubric_association_rubric_id' in params:
            form_params.append(('rubric_association[rubric_id]', params['rubric_association_rubric_id']))  # noqa: E501
        if 'rubric_association_association_id' in params:
            form_params.append(('rubric_association[association_id]', params['rubric_association_association_id']))  # noqa: E501
        if 'rubric_association_association_type' in params:
            form_params.append(('rubric_association[association_type]', params['rubric_association_association_type']))  # noqa: E501
        if 'rubric_association_title' in params:
            form_params.append(('rubric_association[title]', params['rubric_association_title']))  # noqa: E501
        if 'rubric_association_use_for_grading' in params:
            form_params.append(('rubric_association[use_for_grading]', params['rubric_association_use_for_grading']))  # noqa: E501
        if 'rubric_association_hide_score_total' in params:
            form_params.append(('rubric_association[hide_score_total]', params['rubric_association_hide_score_total']))  # noqa: E501
        if 'rubric_association_purpose' in params:
            form_params.append(('rubric_association[purpose]', params['rubric_association_purpose']))  # noqa: E501
        if 'rubric_association_bookmarked' in params:
            form_params.append(('rubric_association[bookmarked]', params['rubric_association_bookmarked']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricAssociation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_single_rubric(self, course_id, **kwargs):  # noqa: E501
        """Create a single rubric  # noqa: E501

        Returns the rubric with the given id.  Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like   { 'rubric': Rubric, 'rubric_association': RubricAssociation }  This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_rubric(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the rubric
        :param int rubric_association_id: The id of the object with which this rubric is associated
        :param str rubric_title: The title of the rubric
        :param bool rubric_free_form_criterion_comments: Whether or not you can write custom comments in the ratings field for a rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param Object rubric_criteria: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_single_rubric_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_single_rubric_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_single_rubric_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create a single rubric  # noqa: E501

        Returns the rubric with the given id.  Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like   { 'rubric': Rubric, 'rubric_association': RubricAssociation }  This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_rubric_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the rubric
        :param int rubric_association_id: The id of the object with which this rubric is associated
        :param str rubric_title: The title of the rubric
        :param bool rubric_free_form_criterion_comments: Whether or not you can write custom comments in the ratings field for a rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param Object rubric_criteria: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'rubric_association_id', 'rubric_title', 'rubric_free_form_criterion_comments', 'rubric_association_association_id', 'rubric_association_association_type', 'rubric_association_use_for_grading', 'rubric_association_hide_score_total', 'rubric_association_purpose', 'rubric_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_rubric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_single_rubric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'id' in params:
            form_params.append(('id', params['id']))  # noqa: E501
        if 'rubric_association_id' in params:
            form_params.append(('rubric_association_id', params['rubric_association_id']))  # noqa: E501
        if 'rubric_title' in params:
            form_params.append(('rubric[title]', params['rubric_title']))  # noqa: E501
        if 'rubric_free_form_criterion_comments' in params:
            form_params.append(('rubric[free_form_criterion_comments]', params['rubric_free_form_criterion_comments']))  # noqa: E501
        if 'rubric_association_association_id' in params:
            form_params.append(('rubric_association[association_id]', params['rubric_association_association_id']))  # noqa: E501
        if 'rubric_association_association_type' in params:
            form_params.append(('rubric_association[association_type]', params['rubric_association_association_type']))  # noqa: E501
        if 'rubric_association_use_for_grading' in params:
            form_params.append(('rubric_association[use_for_grading]', params['rubric_association_use_for_grading']))  # noqa: E501
        if 'rubric_association_hide_score_total' in params:
            form_params.append(('rubric_association[hide_score_total]', params['rubric_association_hide_score_total']))  # noqa: E501
        if 'rubric_association_purpose' in params:
            form_params.append(('rubric_association[purpose]', params['rubric_association_purpose']))  # noqa: E501
        if 'rubric_criteria' in params:
            form_params.append(('rubric[criteria]', params['rubric_criteria']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_single_rubric_assessment(self, course_id, rubric_association_id, **kwargs):  # noqa: E501
        """Create a single rubric assessment  # noqa: E501

        Returns the rubric assessment with the given id. The returned object also provides the information of   :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_rubric_assessment(course_id, rubric_association_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param int rubric_association_id: The id of the object with which this rubric assessment is associated (required)
        :param str provisional: (optional) Indicates whether this assessment is provisional, defaults to false.
        :param str final: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        :param bool graded_anonymously: (optional) Defaults to false
        :param Object rubric_assessment: A Hash of data to complement the rubric assessment: The user id that refers to the person being assessed   rubric_assessment[user_id] Assessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'   rubric_assessment[assessment_type] The points awarded for this row.   rubric_assessment[criterion_id][points] Comments to add for this row.   rubric_assessment[criterion_id][comments] For each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_single_rubric_assessment_with_http_info(course_id, rubric_association_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_single_rubric_assessment_with_http_info(course_id, rubric_association_id, **kwargs)  # noqa: E501
            return data

    def create_single_rubric_assessment_with_http_info(self, course_id, rubric_association_id, **kwargs):  # noqa: E501
        """Create a single rubric assessment  # noqa: E501

        Returns the rubric assessment with the given id. The returned object also provides the information of   :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_single_rubric_assessment_with_http_info(course_id, rubric_association_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param int rubric_association_id: The id of the object with which this rubric assessment is associated (required)
        :param str provisional: (optional) Indicates whether this assessment is provisional, defaults to false.
        :param str final: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        :param bool graded_anonymously: (optional) Defaults to false
        :param Object rubric_assessment: A Hash of data to complement the rubric assessment: The user id that refers to the person being assessed   rubric_assessment[user_id] Assessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'   rubric_assessment[assessment_type] The points awarded for this row.   rubric_assessment[criterion_id][points] Comments to add for this row.   rubric_assessment[criterion_id][comments] For each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'rubric_association_id', 'provisional', 'final', 'graded_anonymously', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_rubric_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_single_rubric_assessment`")  # noqa: E501
        # verify the required parameter 'rubric_association_id' is set
        if self.api_client.client_side_validation and ('rubric_association_id' not in params or
                                                       params['rubric_association_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rubric_association_id` when calling `create_single_rubric_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'rubric_association_id' in params:
            path_params['rubric_association_id'] = params['rubric_association_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'provisional' in params:
            form_params.append(('provisional', params['provisional']))  # noqa: E501
        if 'final' in params:
            form_params.append(('final', params['final']))  # noqa: E501
        if 'graded_anonymously' in params:
            form_params.append(('graded_anonymously', params['graded_anonymously']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creates_rubric_using_csv_file_accounts(self, account_id, **kwargs):  # noqa: E501
        """Creates a rubric using a CSV file  # noqa: E501

        Returns the rubric import object that was created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creates_rubric_using_csv_file_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creates_rubric_using_csv_file_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.creates_rubric_using_csv_file_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def creates_rubric_using_csv_file_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Creates a rubric using a CSV file  # noqa: E501

        Returns the rubric import object that was created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creates_rubric_using_csv_file_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creates_rubric_using_csv_file_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `creates_rubric_using_csv_file_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/rubrics/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def creates_rubric_using_csv_file_courses(self, course_id, **kwargs):  # noqa: E501
        """Creates a rubric using a CSV file  # noqa: E501

        Returns the rubric import object that was created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creates_rubric_using_csv_file_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.creates_rubric_using_csv_file_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.creates_rubric_using_csv_file_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def creates_rubric_using_csv_file_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Creates a rubric using a CSV file  # noqa: E501

        Returns the rubric import object that was created  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.creates_rubric_using_csv_file_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method creates_rubric_using_csv_file_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `creates_rubric_using_csv_file_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/upload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_rubricassociation(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a RubricAssociation  # noqa: E501

        Delete the RubricAssociation with the given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rubricassociation(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_rubricassociation_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_rubricassociation_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_rubricassociation_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a RubricAssociation  # noqa: E501

        Delete the RubricAssociation with the given ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_rubricassociation_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_rubricassociation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_rubricassociation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_rubricassociation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricAssociation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_single_rubric(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a single rubric  # noqa: E501

        Deletes a Rubric and removes all RubricAssociations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_single_rubric(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_single_rubric_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_single_rubric_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_single_rubric_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a single rubric  # noqa: E501

        Deletes a Rubric and removes all RubricAssociations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_single_rubric_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_single_rubric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_single_rubric`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_single_rubric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rubric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_single_rubric_assessment(self, course_id, rubric_association_id, id, **kwargs):  # noqa: E501
        """Delete a single rubric assessment  # noqa: E501

        Deletes a rubric assessment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_single_rubric_assessment(course_id, rubric_association_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str rubric_association_id: ID (required)
        :param str id: ID (required)
        :return: RubricAssessment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_single_rubric_assessment_with_http_info(course_id, rubric_association_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_single_rubric_assessment_with_http_info(course_id, rubric_association_id, id, **kwargs)  # noqa: E501
            return data

    def delete_single_rubric_assessment_with_http_info(self, course_id, rubric_association_id, id, **kwargs):  # noqa: E501
        """Delete a single rubric assessment  # noqa: E501

        Deletes a rubric assessment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_single_rubric_assessment_with_http_info(course_id, rubric_association_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str rubric_association_id: ID (required)
        :param str id: ID (required)
        :return: RubricAssessment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'rubric_association_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_single_rubric_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_single_rubric_assessment`")  # noqa: E501
        # verify the required parameter 'rubric_association_id' is set
        if self.api_client.client_side_validation and ('rubric_association_id' not in params or
                                                       params['rubric_association_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rubric_association_id` when calling `delete_single_rubric_assessment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_single_rubric_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'rubric_association_id' in params:
            path_params['rubric_association_id'] = params['rubric_association_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricAssessment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses_and_assignments_for_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get the courses and assignments for  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_and_assignments_for_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: UsedLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_and_assignments_for_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_and_assignments_for_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_courses_and_assignments_for_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get the courses and assignments for  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_and_assignments_for_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: UsedLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_and_assignments_for_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_courses_and_assignments_for_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_courses_and_assignments_for_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/rubrics/{id}/used_locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsedLocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_courses_and_assignments_for_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get the courses and assignments for  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_and_assignments_for_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: UsedLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_courses_and_assignments_for_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_courses_and_assignments_for_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_courses_and_assignments_for_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get the courses and assignments for  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_courses_and_assignments_for_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: UsedLocations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_courses_and_assignments_for_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_courses_and_assignments_for_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_courses_and_assignments_for_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/{id}/used_locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UsedLocations',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_rubric_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get a single rubric  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_rubric_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Related records to include in the response.
        :param str style: Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_rubric_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_rubric_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_rubric_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get a single rubric  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_rubric_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Related records to include in the response.
        :param str style: Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'include', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_rubric_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_single_rubric_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_rubric_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'style' in params:
            query_params.append(('style', params['style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/rubrics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rubric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_rubric_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single rubric  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_rubric_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Related records to include in the response.
        :param str style: Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_rubric_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_rubric_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_rubric_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single rubric  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_rubric_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[str] include: Related records to include in the response.
        :param str style: Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.
        :return: Rubric
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'include', 'style']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_rubric_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_rubric_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_rubric_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'style' in params:
            query_params.append(('style', params['style']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Rubric',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_of_rubric_import_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Get the status of a rubric import  # noqa: E501

        Can return the latest rubric import for an account or course, or a specific import by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_of_rubric_import_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_of_rubric_import_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_of_rubric_import_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_status_of_rubric_import_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get the status of a rubric import  # noqa: E501

        Can return the latest rubric import for an account or course, or a specific import by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_of_rubric_import_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_of_rubric_import_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_status_of_rubric_import_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_status_of_rubric_import_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/rubrics/upload/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_status_of_rubric_import_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Get the status of a rubric import  # noqa: E501

        Can return the latest rubric import for an account or course, or a specific import by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_of_rubric_import_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_of_rubric_import_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_status_of_rubric_import_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_status_of_rubric_import_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get the status of a rubric import  # noqa: E501

        Can return the latest rubric import for an account or course, or a specific import by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_of_rubric_import_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: RubricImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status_of_rubric_import_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_status_of_rubric_import_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_status_of_rubric_import_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/upload/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricImport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_rubrics_accounts(self, account_id, **kwargs):  # noqa: E501
        """List rubrics  # noqa: E501

        Returns the paginated list of active rubrics for the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rubrics_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_rubrics_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_rubrics_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_rubrics_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List rubrics  # noqa: E501

        Returns the paginated list of active rubrics for the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rubrics_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_rubrics_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_rubrics_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/rubrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_rubrics_courses(self, course_id, **kwargs):  # noqa: E501
        """List rubrics  # noqa: E501

        Returns the paginated list of active rubrics for the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rubrics_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_rubrics_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_rubrics_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_rubrics_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List rubrics  # noqa: E501

        Returns the paginated list of active rubrics for the current context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_rubrics_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_rubrics_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_rubrics_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rubricassociation(self, course_id, id, **kwargs):  # noqa: E501
        """Update a RubricAssociation  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rubricassociation(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the RubricAssociation to update (required)
        :param int rubric_association_rubric_id: The id of the Rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param str rubric_association_title: The name of the object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param bool rubric_association_bookmarked: Whether or not the associated rubric appears in its context
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_rubricassociation_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rubricassociation_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def update_rubricassociation_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Update a RubricAssociation  # noqa: E501

        Returns the rubric with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_rubricassociation_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the RubricAssociation to update (required)
        :param int rubric_association_rubric_id: The id of the Rubric
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param str rubric_association_title: The name of the object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param bool rubric_association_bookmarked: Whether or not the associated rubric appears in its context
        :return: RubricAssociation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'rubric_association_rubric_id', 'rubric_association_association_id', 'rubric_association_association_type', 'rubric_association_title', 'rubric_association_use_for_grading', 'rubric_association_hide_score_total', 'rubric_association_purpose', 'rubric_association_bookmarked']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rubricassociation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_rubricassociation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_rubricassociation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'rubric_association_rubric_id' in params:
            form_params.append(('rubric_association[rubric_id]', params['rubric_association_rubric_id']))  # noqa: E501
        if 'rubric_association_association_id' in params:
            form_params.append(('rubric_association[association_id]', params['rubric_association_association_id']))  # noqa: E501
        if 'rubric_association_association_type' in params:
            form_params.append(('rubric_association[association_type]', params['rubric_association_association_type']))  # noqa: E501
        if 'rubric_association_title' in params:
            form_params.append(('rubric_association[title]', params['rubric_association_title']))  # noqa: E501
        if 'rubric_association_use_for_grading' in params:
            form_params.append(('rubric_association[use_for_grading]', params['rubric_association_use_for_grading']))  # noqa: E501
        if 'rubric_association_hide_score_total' in params:
            form_params.append(('rubric_association[hide_score_total]', params['rubric_association_hide_score_total']))  # noqa: E501
        if 'rubric_association_purpose' in params:
            form_params.append(('rubric_association[purpose]', params['rubric_association_purpose']))  # noqa: E501
        if 'rubric_association_bookmarked' in params:
            form_params.append(('rubric_association[bookmarked]', params['rubric_association_bookmarked']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RubricAssociation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_single_rubric(self, course_id, id, **kwargs):  # noqa: E501
        """Update a single rubric  # noqa: E501

        Returns the rubric with the given id.  Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like   { 'rubric': Rubric, 'rubric_association': RubricAssociation }  This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_rubric(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the rubric (required)
        :param int rubric_association_id: The id of the object with which this rubric is associated
        :param str rubric_title: The title of the rubric
        :param bool rubric_free_form_criterion_comments: Whether or not you can write custom comments in the ratings field for a rubric
        :param bool rubric_skip_updating_points_possible: Whether or not to update the points possible
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param Object rubric_criteria: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_single_rubric_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_single_rubric_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def update_single_rubric_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Update a single rubric  # noqa: E501

        Returns the rubric with the given id.  Unfortuantely this endpoint does not return a standard Rubric object, instead it returns a hash that looks like   { 'rubric': Rubric, 'rubric_association': RubricAssociation }  This may eventually be deprecated in favor of a more standardized return value, but that is not currently planned.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_rubric_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param int id: The id of the rubric (required)
        :param int rubric_association_id: The id of the object with which this rubric is associated
        :param str rubric_title: The title of the rubric
        :param bool rubric_free_form_criterion_comments: Whether or not you can write custom comments in the ratings field for a rubric
        :param bool rubric_skip_updating_points_possible: Whether or not to update the points possible
        :param int rubric_association_association_id: The id of the object with which this rubric is associated
        :param str rubric_association_association_type: The type of object this rubric is associated with
        :param bool rubric_association_use_for_grading: Whether or not the associated rubric is used for grade calculation
        :param bool rubric_association_hide_score_total: Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
        :param str rubric_association_purpose: Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context
        :param Object rubric_criteria: An indexed Hash of RubricCriteria objects where the keys are integer ids and the values are the RubricCriteria objects
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'rubric_association_id', 'rubric_title', 'rubric_free_form_criterion_comments', 'rubric_skip_updating_points_possible', 'rubric_association_association_id', 'rubric_association_association_type', 'rubric_association_use_for_grading', 'rubric_association_hide_score_total', 'rubric_association_purpose', 'rubric_criteria']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_single_rubric" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_single_rubric`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_single_rubric`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'rubric_association_id' in params:
            form_params.append(('rubric_association_id', params['rubric_association_id']))  # noqa: E501
        if 'rubric_title' in params:
            form_params.append(('rubric[title]', params['rubric_title']))  # noqa: E501
        if 'rubric_free_form_criterion_comments' in params:
            form_params.append(('rubric[free_form_criterion_comments]', params['rubric_free_form_criterion_comments']))  # noqa: E501
        if 'rubric_skip_updating_points_possible' in params:
            form_params.append(('rubric[skip_updating_points_possible]', params['rubric_skip_updating_points_possible']))  # noqa: E501
        if 'rubric_association_association_id' in params:
            form_params.append(('rubric_association[association_id]', params['rubric_association_association_id']))  # noqa: E501
        if 'rubric_association_association_type' in params:
            form_params.append(('rubric_association[association_type]', params['rubric_association_association_type']))  # noqa: E501
        if 'rubric_association_use_for_grading' in params:
            form_params.append(('rubric_association[use_for_grading]', params['rubric_association_use_for_grading']))  # noqa: E501
        if 'rubric_association_hide_score_total' in params:
            form_params.append(('rubric_association[hide_score_total]', params['rubric_association_hide_score_total']))  # noqa: E501
        if 'rubric_association_purpose' in params:
            form_params.append(('rubric_association[purpose]', params['rubric_association_purpose']))  # noqa: E501
        if 'rubric_criteria' in params:
            form_params.append(('rubric[criteria]', params['rubric_criteria']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubrics/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_single_rubric_assessment(self, id, course_id, rubric_association_id, **kwargs):  # noqa: E501
        """Update a single rubric assessment  # noqa: E501

        Returns the rubric assessment with the given id. The returned object also provides the information of   :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_rubric_assessment(id, course_id, rubric_association_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the rubric assessment (required)
        :param int course_id: The id of the course (required)
        :param int rubric_association_id: The id of the object with which this rubric assessment is associated (required)
        :param str provisional: (optional) Indicates whether this assessment is provisional, defaults to false.
        :param str final: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        :param bool graded_anonymously: (optional) Defaults to false
        :param Object rubric_assessment: A Hash of data to complement the rubric assessment: The user id that refers to the person being assessed   rubric_assessment[user_id] Assessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'   rubric_assessment[assessment_type] The points awarded for this row.   rubric_assessment[criterion_id][points] Comments to add for this row.   rubric_assessment[criterion_id][comments] For each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_single_rubric_assessment_with_http_info(id, course_id, rubric_association_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_single_rubric_assessment_with_http_info(id, course_id, rubric_association_id, **kwargs)  # noqa: E501
            return data

    def update_single_rubric_assessment_with_http_info(self, id, course_id, rubric_association_id, **kwargs):  # noqa: E501
        """Update a single rubric assessment  # noqa: E501

        Returns the rubric assessment with the given id. The returned object also provides the information of   :ratings, :assessor_name, :related_group_submissions_and_assessments, :artifact  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_rubric_assessment_with_http_info(id, course_id, rubric_association_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The id of the rubric assessment (required)
        :param int course_id: The id of the course (required)
        :param int rubric_association_id: The id of the object with which this rubric assessment is associated (required)
        :param str provisional: (optional) Indicates whether this assessment is provisional, defaults to false.
        :param str final: (optional) Indicates a provisional grade will be marked as final. It only takes effect if the provisional param is passed as true. Defaults to false.
        :param bool graded_anonymously: (optional) Defaults to false
        :param Object rubric_assessment: A Hash of data to complement the rubric assessment: The user id that refers to the person being assessed   rubric_assessment[user_id] Assessment type. There are only three valid types:  'grading', 'peer_review', or 'provisional_grade'   rubric_assessment[assessment_type] The points awarded for this row.   rubric_assessment[criterion_id][points] Comments to add for this row.   rubric_assessment[criterion_id][comments] For each criterion_id, change the id by the criterion number, ex: criterion_123 If the criterion_id is not specified it defaults to false, and nothing is updated.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'course_id', 'rubric_association_id', 'provisional', 'final', 'graded_anonymously', 'rubric_assessment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_single_rubric_assessment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_single_rubric_assessment`")  # noqa: E501
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_single_rubric_assessment`")  # noqa: E501
        # verify the required parameter 'rubric_association_id' is set
        if self.api_client.client_side_validation and ('rubric_association_id' not in params or
                                                       params['rubric_association_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `rubric_association_id` when calling `update_single_rubric_assessment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'rubric_association_id' in params:
            path_params['rubric_association_id'] = params['rubric_association_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'provisional' in params:
            form_params.append(('provisional', params['provisional']))  # noqa: E501
        if 'final' in params:
            form_params.append(('final', params['final']))  # noqa: E501
        if 'graded_anonymously' in params:
            form_params.append(('graded_anonymously', params['graded_anonymously']))  # noqa: E501
        if 'rubric_assessment' in params:
            form_params.append(('rubric_assessment', params['rubric_assessment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/rubric_associations/{rubric_association_id}/rubric_assessments/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
