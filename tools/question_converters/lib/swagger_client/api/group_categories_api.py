# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GroupCategoriesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def assign_unassigned_members(self, group_category_id, **kwargs):  # noqa: E501
        """Assign unassigned members  # noqa: E501

        Assign all unassigned members as evenly as possible among the existing student groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_unassigned_members(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param bool sync: The assigning is done asynchronously by default. If you would like to override this and have the assigning done synchronously, set this value to true.
        :return: GroupMembershipProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_unassigned_members_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_unassigned_members_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def assign_unassigned_members_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """Assign unassigned members  # noqa: E501

        Assign all unassigned members as evenly as possible among the existing student groups.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_unassigned_members_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param bool sync: The assigning is done asynchronously by default. If you would like to override this and have the assigning done synchronously, set this value to true.
        :return: GroupMembershipProgress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id', 'sync']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_unassigned_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `assign_unassigned_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'sync' in params:
            form_params.append(('sync', params['sync']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}/assign_unassigned_members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupMembershipProgress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group_category_accounts(self, account_id, name, **kwargs):  # noqa: E501
        """Create a Group Category  # noqa: E501

        Create a new group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_category_accounts(account_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str name: Name of the group category (required)
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_category_accounts_with_http_info(account_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_category_accounts_with_http_info(account_id, name, **kwargs)  # noqa: E501
            return data

    def create_group_category_accounts_with_http_info(self, account_id, name, **kwargs):  # noqa: E501
        """Create a Group Category  # noqa: E501

        Create a new group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_category_accounts_with_http_info(account_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str name: Name of the group category (required)
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'name', 'self_signup', 'auto_leader', 'group_limit', 'sis_group_category_id', 'create_group_count', 'split_group_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group_category_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_group_category_accounts`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_group_category_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'self_signup' in params:
            form_params.append(('self_signup', params['self_signup']))  # noqa: E501
        if 'auto_leader' in params:
            form_params.append(('auto_leader', params['auto_leader']))  # noqa: E501
        if 'group_limit' in params:
            form_params.append(('group_limit', params['group_limit']))  # noqa: E501
        if 'sis_group_category_id' in params:
            form_params.append(('sis_group_category_id', params['sis_group_category_id']))  # noqa: E501
        if 'create_group_count' in params:
            form_params.append(('create_group_count', params['create_group_count']))  # noqa: E501
        if 'split_group_count' in params:
            form_params.append(('split_group_count', params['split_group_count']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/group_categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_group_category_courses(self, course_id, name, **kwargs):  # noqa: E501
        """Create a Group Category  # noqa: E501

        Create a new group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_category_courses(course_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str name: Name of the group category (required)
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_group_category_courses_with_http_info(course_id, name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_group_category_courses_with_http_info(course_id, name, **kwargs)  # noqa: E501
            return data

    def create_group_category_courses_with_http_info(self, course_id, name, **kwargs):  # noqa: E501
        """Create a Group Category  # noqa: E501

        Create a new group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_group_category_courses_with_http_info(course_id, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str name: Name of the group category (required)
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'name', 'self_signup', 'auto_leader', 'group_limit', 'sis_group_category_id', 'create_group_count', 'split_group_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_group_category_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_group_category_courses`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_group_category_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'self_signup' in params:
            form_params.append(('self_signup', params['self_signup']))  # noqa: E501
        if 'auto_leader' in params:
            form_params.append(('auto_leader', params['auto_leader']))  # noqa: E501
        if 'group_limit' in params:
            form_params.append(('group_limit', params['group_limit']))  # noqa: E501
        if 'sis_group_category_id' in params:
            form_params.append(('sis_group_category_id', params['sis_group_category_id']))  # noqa: E501
        if 'create_group_count' in params:
            form_params.append(('create_group_count', params['create_group_count']))  # noqa: E501
        if 'split_group_count' in params:
            form_params.append(('split_group_count', params['split_group_count']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/group_categories', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_group_category(self, group_category_id, **kwargs):  # noqa: E501
        """Delete a Group Category  # noqa: E501

        Deletes a group category and all groups under it. Protected group categories can not be deleted, i.e. \"communities\" and \"student_organized\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def delete_group_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """Delete a Group Category  # noqa: E501

        Deletes a group category and all groups under it. Protected group categories can not be deleted, i.e. \"communities\" and \"student_organized\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_group_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_group_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `delete_group_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_groups_in_and_users_in_category(self, group_category_id, **kwargs):  # noqa: E501
        """export groups in and users in category  # noqa: E501

        Returns a csv file of users in format ready to import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_groups_in_and_users_in_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_groups_in_and_users_in_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.export_groups_in_and_users_in_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def export_groups_in_and_users_in_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """export groups in and users in category  # noqa: E501

        Returns a csv file of users in format ready to import.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_groups_in_and_users_in_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_groups_in_and_users_in_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `export_groups_in_and_users_in_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}/export', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_group_category(self, group_category_id, **kwargs):  # noqa: E501
        """Get a single group category  # noqa: E501

        Returns the data for a single group category, or a 401 if the caller doesn't have the rights to see it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_group_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def get_single_group_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """Get a single group category  # noqa: E501

        Returns the data for a single group category, or a 401 if the caller doesn't have the rights to see it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_group_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_group_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `get_single_group_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_category_groups(self, group_category_id, **kwargs):  # noqa: E501
        """Import category groups  # noqa: E501

        Create Groups in a Group Category through a CSV import  For more information on the format that's expected here, please see the \"Group Category CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_category_groups(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str attachment: There are two ways to post group category import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/group_categories/<category_id>/import'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/group_categories/<category_id>/import'
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.import_category_groups_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.import_category_groups_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def import_category_groups_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """Import category groups  # noqa: E501

        Create Groups in a Group Category through a CSV import  For more information on the format that's expected here, please see the \"Group Category CSV\" section in the API docs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_category_groups_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str attachment: There are two ways to post group category import data - either via a multipart/form-data form-field-style attachment, or via a non-multipart raw post request.  'attachment' is required for multipart/form-data style posts. Assumed to be outcome data from a file upload form field named 'attachment'.  Examples:   curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/group_categories/<category_id>/import'  If you decide to do a raw post, you can skip the 'attachment' argument, but you will then be required to provide a suitable Content-Type header. You are encouraged to also provide the 'extension' argument.  Examples:   curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\       -H \"Authorization: Bearer <token>\" \\       'https://<canvas>/api/v1/group_categories/<category_id>/import'
        :return: Progress
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id', 'attachment']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_category_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `import_category_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attachment' in params:
            form_params.append(('attachment', params['attachment']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}/import', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Progress',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_group_categories_for_context_accounts(self, account_id, **kwargs):  # noqa: E501
        """List group categories for a context  # noqa: E501

        Returns a paginated list of group categories in a context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_categories_for_context_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[GroupCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_group_categories_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_group_categories_for_context_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_group_categories_for_context_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List group categories for a context  # noqa: E501

        Returns a paginated list of group categories in a context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_categories_for_context_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: list[GroupCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_group_categories_for_context_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_group_categories_for_context_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/group_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_group_categories_for_context_courses(self, course_id, **kwargs):  # noqa: E501
        """List group categories for a context  # noqa: E501

        Returns a paginated list of group categories in a context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_categories_for_context_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[GroupCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_group_categories_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_group_categories_for_context_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_group_categories_for_context_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List group categories for a context  # noqa: E501

        Returns a paginated list of group categories in a context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_group_categories_for_context_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: list[GroupCategory]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_group_categories_for_context_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_group_categories_for_context_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/group_categories', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GroupCategory]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_groups_in_group_category(self, group_category_id, **kwargs):  # noqa: E501
        """List groups in group category  # noqa: E501

        Returns a paginated list of groups in a group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_in_group_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_groups_in_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_groups_in_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def list_groups_in_group_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """List groups in group category  # noqa: E501

        Returns a paginated list of groups in a group category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_groups_in_group_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_groups_in_group_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `list_groups_in_group_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_users_in_group_category(self, group_category_id, **kwargs):  # noqa: E501
        """List users in group category  # noqa: E501

        Returns a paginated list of users in the group category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_group_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.
        :param bool unassigned: Set this value to true if you wish only to search unassigned users in the group category.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_users_in_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_users_in_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def list_users_in_group_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """List users in group category  # noqa: E501

        Returns a paginated list of users in the group category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_users_in_group_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str search_term: The partial name or full ID of the users to match and return in the results list. Must be at least 3 characters.
        :param bool unassigned: Set this value to true if you wish only to search unassigned users in the group category.
        :return: list[User]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id', 'search_term', 'unassigned']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_users_in_group_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `list_users_in_group_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'unassigned' in params:
            query_params.append(('unassigned', params['unassigned']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[User]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_group_category(self, group_category_id, **kwargs):  # noqa: E501
        """Update a Group Category  # noqa: E501

        Modifies an existing group category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_category(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str name: Name of the group category
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). Valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_group_category_with_http_info(group_category_id, **kwargs)  # noqa: E501
            return data

    def update_group_category_with_http_info(self, group_category_id, **kwargs):  # noqa: E501
        """Update a Group Category  # noqa: E501

        Modifies an existing group category.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_group_category_with_http_info(group_category_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_category_id: ID (required)
        :param str name: Name of the group category
        :param str self_signup: Allow students to sign up for a group themselves (Course Only). Valid values are: \"enabled\":: allows students to self sign up for any group in course \"restricted\":: allows students to self sign up only for groups in the                same section null disallows self sign up
        :param str auto_leader: Assigns group leaders automatically when generating and allocating students to groups Valid values are: \"first\":: the first student to be allocated to a group is the leader \"random\":: a random student from all members is chosen as the leader
        :param int group_limit: Limit the maximum number of users in each group (Course Only). Requires self signup.
        :param str sis_group_category_id: The unique SIS identifier.
        :param int create_group_count: Create this number of groups (Course Only).
        :param str split_group_count: (Deprecated) Create this number of groups, and evenly distribute students among them. not allowed with \"enable_self_signup\". because the group assignment happens synchronously, it's recommended that you instead use the assign_unassigned_members endpoint. (Course Only)
        :return: GroupCategory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_category_id', 'name', 'self_signup', 'auto_leader', 'group_limit', 'sis_group_category_id', 'create_group_count', 'split_group_count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_group_category" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_category_id' is set
        if self.api_client.client_side_validation and ('group_category_id' not in params or
                                                       params['group_category_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_category_id` when calling `update_group_category`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_category_id' in params:
            path_params['group_category_id'] = params['group_category_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'self_signup' in params:
            form_params.append(('self_signup', params['self_signup']))  # noqa: E501
        if 'auto_leader' in params:
            form_params.append(('auto_leader', params['auto_leader']))  # noqa: E501
        if 'group_limit' in params:
            form_params.append(('group_limit', params['group_limit']))  # noqa: E501
        if 'sis_group_category_id' in params:
            form_params.append(('sis_group_category_id', params['sis_group_category_id']))  # noqa: E501
        if 'create_group_count' in params:
            form_params.append(('create_group_count', params['create_group_count']))  # noqa: E501
        if 'split_group_count' in params:
            form_params.append(('split_group_count', params['split_group_count']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/group_categories/{group_category_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupCategory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
