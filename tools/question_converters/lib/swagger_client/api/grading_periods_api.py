# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class GradingPeriodsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_update_grading_periods_courses(self, course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs):  # noqa: E501
        """Batch update grading periods  # noqa: E501

        Update multiple grading periods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_grading_periods_courses(course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str set_id: The id of the grading period set. (required)
        :param list[str] grading_periods_title: The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_end_date: The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_close_date: The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[str] grading_periods_id: The id of the grading period. If the id parameter does not exist, a new grading period will be created.
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_update_grading_periods_courses_with_http_info(course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_update_grading_periods_courses_with_http_info(course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs)  # noqa: E501
            return data

    def batch_update_grading_periods_courses_with_http_info(self, course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs):  # noqa: E501
        """Batch update grading periods  # noqa: E501

        Update multiple grading periods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_grading_periods_courses_with_http_info(course_id, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str set_id: The id of the grading period set. (required)
        :param list[str] grading_periods_title: The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_end_date: The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_close_date: The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[str] grading_periods_id: The id of the grading period. If the id parameter does not exist, a new grading period will be created.
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'set_id', 'grading_periods_title', 'grading_periods_start_date', 'grading_periods_end_date', 'grading_periods_close_date', 'grading_periods_id', 'grading_periods_weight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_update_grading_periods_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `batch_update_grading_periods_courses`")  # noqa: E501
        # verify the required parameter 'set_id' is set
        if self.api_client.client_side_validation and ('set_id' not in params or
                                                       params['set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_id` when calling `batch_update_grading_periods_courses`")  # noqa: E501
        # verify the required parameter 'grading_periods_title' is set
        if self.api_client.client_side_validation and ('grading_periods_title' not in params or
                                                       params['grading_periods_title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_title` when calling `batch_update_grading_periods_courses`")  # noqa: E501
        # verify the required parameter 'grading_periods_start_date' is set
        if self.api_client.client_side_validation and ('grading_periods_start_date' not in params or
                                                       params['grading_periods_start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_start_date` when calling `batch_update_grading_periods_courses`")  # noqa: E501
        # verify the required parameter 'grading_periods_end_date' is set
        if self.api_client.client_side_validation and ('grading_periods_end_date' not in params or
                                                       params['grading_periods_end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_end_date` when calling `batch_update_grading_periods_courses`")  # noqa: E501
        # verify the required parameter 'grading_periods_close_date' is set
        if self.api_client.client_side_validation and ('grading_periods_close_date' not in params or
                                                       params['grading_periods_close_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_close_date` when calling `batch_update_grading_periods_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'set_id' in params:
            form_params.append(('set_id', params['set_id']))  # noqa: E501
        if 'grading_periods_id' in params:
            form_params.append(('grading_periods[id]', params['grading_periods_id']))  # noqa: E501
            collection_formats['grading_periods[id]'] = 'csv'  # noqa: E501
        if 'grading_periods_title' in params:
            form_params.append(('grading_periods[title]', params['grading_periods_title']))  # noqa: E501
            collection_formats['grading_periods[title]'] = 'csv'  # noqa: E501
        if 'grading_periods_start_date' in params:
            form_params.append(('grading_periods[start_date]', params['grading_periods_start_date']))  # noqa: E501
            collection_formats['grading_periods[start_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_end_date' in params:
            form_params.append(('grading_periods[end_date]', params['grading_periods_end_date']))  # noqa: E501
            collection_formats['grading_periods[end_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_close_date' in params:
            form_params.append(('grading_periods[close_date]', params['grading_periods_close_date']))  # noqa: E501
            collection_formats['grading_periods[close_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_weight' in params:
            form_params.append(('grading_periods[weight]', params['grading_periods_weight']))  # noqa: E501
            collection_formats['grading_periods[weight]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_periods/batch_update', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def batch_update_grading_periods_grading_period_sets(self, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs):  # noqa: E501
        """Batch update grading periods  # noqa: E501

        Update multiple grading periods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_grading_periods_grading_period_sets(set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str set_id: The id of the grading period set. (required)
        :param list[str] grading_periods_title: The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_end_date: The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_close_date: The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[str] grading_periods_id: The id of the grading period. If the id parameter does not exist, a new grading period will be created.
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.batch_update_grading_periods_grading_period_sets_with_http_info(set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_update_grading_periods_grading_period_sets_with_http_info(set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs)  # noqa: E501
            return data

    def batch_update_grading_periods_grading_period_sets_with_http_info(self, set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, **kwargs):  # noqa: E501
        """Batch update grading periods  # noqa: E501

        Update multiple grading periods  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.batch_update_grading_periods_grading_period_sets_with_http_info(set_id, grading_periods_title, grading_periods_start_date, grading_periods_end_date, grading_periods_close_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str set_id: The id of the grading period set. (required)
        :param list[str] grading_periods_title: The title of the grading period. The title is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. The start_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_end_date: The date the grading period ends. The end_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[ModelDate] grading_periods_close_date: The date after which grades can no longer be changed for a grading period. The close_date is required for creating a new grading period, but not for updating an existing grading period. (required)
        :param list[str] grading_periods_id: The id of the grading period. If the id parameter does not exist, a new grading period will be created.
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_id', 'grading_periods_title', 'grading_periods_start_date', 'grading_periods_end_date', 'grading_periods_close_date', 'grading_periods_id', 'grading_periods_weight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_update_grading_periods_grading_period_sets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_id' is set
        if self.api_client.client_side_validation and ('set_id' not in params or
                                                       params['set_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `set_id` when calling `batch_update_grading_periods_grading_period_sets`")  # noqa: E501
        # verify the required parameter 'grading_periods_title' is set
        if self.api_client.client_side_validation and ('grading_periods_title' not in params or
                                                       params['grading_periods_title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_title` when calling `batch_update_grading_periods_grading_period_sets`")  # noqa: E501
        # verify the required parameter 'grading_periods_start_date' is set
        if self.api_client.client_side_validation and ('grading_periods_start_date' not in params or
                                                       params['grading_periods_start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_start_date` when calling `batch_update_grading_periods_grading_period_sets`")  # noqa: E501
        # verify the required parameter 'grading_periods_end_date' is set
        if self.api_client.client_side_validation and ('grading_periods_end_date' not in params or
                                                       params['grading_periods_end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_end_date` when calling `batch_update_grading_periods_grading_period_sets`")  # noqa: E501
        # verify the required parameter 'grading_periods_close_date' is set
        if self.api_client.client_side_validation and ('grading_periods_close_date' not in params or
                                                       params['grading_periods_close_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_close_date` when calling `batch_update_grading_periods_grading_period_sets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'set_id' in params:
            path_params['set_id'] = params['set_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grading_periods_id' in params:
            form_params.append(('grading_periods[id]', params['grading_periods_id']))  # noqa: E501
            collection_formats['grading_periods[id]'] = 'csv'  # noqa: E501
        if 'grading_periods_title' in params:
            form_params.append(('grading_periods[title]', params['grading_periods_title']))  # noqa: E501
            collection_formats['grading_periods[title]'] = 'csv'  # noqa: E501
        if 'grading_periods_start_date' in params:
            form_params.append(('grading_periods[start_date]', params['grading_periods_start_date']))  # noqa: E501
            collection_formats['grading_periods[start_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_end_date' in params:
            form_params.append(('grading_periods[end_date]', params['grading_periods_end_date']))  # noqa: E501
            collection_formats['grading_periods[end_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_close_date' in params:
            form_params.append(('grading_periods[close_date]', params['grading_periods_close_date']))  # noqa: E501
            collection_formats['grading_periods[close_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_weight' in params:
            form_params.append(('grading_periods[weight]', params['grading_periods_weight']))  # noqa: E501
            collection_formats['grading_periods[weight]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/grading_period_sets/{set_id}/grading_periods/batch_update', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_grading_period_accounts(self, account_id, id, **kwargs):  # noqa: E501
        """Delete a grading period  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_accounts(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_grading_period_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_grading_period_accounts_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def delete_grading_period_accounts_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Delete a grading period  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_accounts_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_grading_period_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_grading_period_accounts`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_grading_period_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_periods/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_grading_period_courses(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a grading period  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_courses(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_grading_period_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_grading_period_courses_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_grading_period_courses_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a grading period  # noqa: E501

        <b>204 No Content</b> response code is returned if the deletion was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_grading_period_courses_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_grading_period_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_grading_period_courses`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_grading_period_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_periods/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_grading_period(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single grading period  # noqa: E501

        Returns the grading period with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_period(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_grading_period_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_grading_period_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_grading_period_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single grading period  # noqa: E501

        Returns the grading period with the given id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_grading_period_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_grading_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_grading_period`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_grading_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_periods/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grading_periods_accounts(self, account_id, **kwargs):  # noqa: E501
        """List grading periods  # noqa: E501

        Returns the paginated list of grading periods for the current course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_periods_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grading_periods_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grading_periods_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_grading_periods_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List grading periods  # noqa: E501

        Returns the paginated list of grading periods for the current course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_periods_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grading_periods_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_grading_periods_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/grading_periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_grading_periods_courses(self, course_id, **kwargs):  # noqa: E501
        """List grading periods  # noqa: E501

        Returns the paginated list of grading periods for the current course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_periods_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_grading_periods_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_grading_periods_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_grading_periods_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List grading periods  # noqa: E501

        Returns the paginated list of grading periods for the current course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_grading_periods_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_grading_periods_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_grading_periods_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_periods', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_single_grading_period(self, course_id, id, grading_periods_start_date, grading_periods_end_date, **kwargs):  # noqa: E501
        """Update a single grading period  # noqa: E501

        Update an existing grading period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_grading_period(course_id, id, grading_periods_start_date, grading_periods_end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. (required)
        :param list[ModelDate] grading_periods_end_date: no description (required)
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_single_grading_period_with_http_info(course_id, id, grading_periods_start_date, grading_periods_end_date, **kwargs)  # noqa: E501
        else:
            (data) = self.update_single_grading_period_with_http_info(course_id, id, grading_periods_start_date, grading_periods_end_date, **kwargs)  # noqa: E501
            return data

    def update_single_grading_period_with_http_info(self, course_id, id, grading_periods_start_date, grading_periods_end_date, **kwargs):  # noqa: E501
        """Update a single grading period  # noqa: E501

        Update an existing grading period.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_grading_period_with_http_info(course_id, id, grading_periods_start_date, grading_periods_end_date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[ModelDate] grading_periods_start_date: The date the grading period starts. (required)
        :param list[ModelDate] grading_periods_end_date: no description (required)
        :param list[float] grading_periods_weight: A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'grading_periods_start_date', 'grading_periods_end_date', 'grading_periods_weight']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_single_grading_period" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_single_grading_period`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_single_grading_period`")  # noqa: E501
        # verify the required parameter 'grading_periods_start_date' is set
        if self.api_client.client_side_validation and ('grading_periods_start_date' not in params or
                                                       params['grading_periods_start_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_start_date` when calling `update_single_grading_period`")  # noqa: E501
        # verify the required parameter 'grading_periods_end_date' is set
        if self.api_client.client_side_validation and ('grading_periods_end_date' not in params or
                                                       params['grading_periods_end_date'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_periods_end_date` when calling `update_single_grading_period`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'grading_periods_start_date' in params:
            form_params.append(('grading_periods[start_date]', params['grading_periods_start_date']))  # noqa: E501
            collection_formats['grading_periods[start_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_end_date' in params:
            form_params.append(('grading_periods[end_date]', params['grading_periods_end_date']))  # noqa: E501
            collection_formats['grading_periods[end_date]'] = 'csv'  # noqa: E501
        if 'grading_periods_weight' in params:
            form_params.append(('grading_periods[weight]', params['grading_periods_weight']))  # noqa: E501
            collection_formats['grading_periods[weight]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/grading_periods/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
