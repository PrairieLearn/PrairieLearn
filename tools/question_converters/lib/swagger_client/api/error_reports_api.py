# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ErrorReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_error_report(self, error_subject, **kwargs):  # noqa: E501
        """Create Error Report  # noqa: E501

        Create a new error report documenting an experienced problem  Performs the same action as when a user uses the \"help -> report a problem\" dialog.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_error_report(error_subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_subject: The summary of the problem (required)
        :param str error_url: URL from which the report was issued
        :param str error_email: Email address for the reporting user
        :param str error_comments: The long version of the story from the user one what they experienced
        :param Object error_http_env: A collection of metadata about the users' environment.  If not provided, canvas will collect it based on information found in the request. (Doesn't have to be HTTPENV info, could be anything JSON object that can be serialized as a hash, a mobile app might include relevant metadata for itself)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_error_report_with_http_info(error_subject, **kwargs)  # noqa: E501
        else:
            (data) = self.create_error_report_with_http_info(error_subject, **kwargs)  # noqa: E501
            return data

    def create_error_report_with_http_info(self, error_subject, **kwargs):  # noqa: E501
        """Create Error Report  # noqa: E501

        Create a new error report documenting an experienced problem  Performs the same action as when a user uses the \"help -> report a problem\" dialog.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_error_report_with_http_info(error_subject, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str error_subject: The summary of the problem (required)
        :param str error_url: URL from which the report was issued
        :param str error_email: Email address for the reporting user
        :param str error_comments: The long version of the story from the user one what they experienced
        :param Object error_http_env: A collection of metadata about the users' environment.  If not provided, canvas will collect it based on information found in the request. (Doesn't have to be HTTPENV info, could be anything JSON object that can be serialized as a hash, a mobile app might include relevant metadata for itself)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['error_subject', 'error_url', 'error_email', 'error_comments', 'error_http_env']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_error_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'error_subject' is set
        if self.api_client.client_side_validation and ('error_subject' not in params or
                                                       params['error_subject'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `error_subject` when calling `create_error_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'error_subject' in params:
            form_params.append(('error[subject]', params['error_subject']))  # noqa: E501
        if 'error_url' in params:
            form_params.append(('error[url]', params['error_url']))  # noqa: E501
        if 'error_email' in params:
            form_params.append(('error[email]', params['error_email']))  # noqa: E501
        if 'error_comments' in params:
            form_params.append(('error[comments]', params['error_comments']))  # noqa: E501
        if 'error_http_env' in params:
            form_params.append(('error[http_env]', params['error_http_env']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/error_reports', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
