# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OutcomesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_aligned_assignments_for_outcome_in_course_for_particular_student(self, course_id, **kwargs):  # noqa: E501
        """Get aligned assignments for an outcome in a course for a particular student  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aligned_assignments_for_outcome_in_course_for_particular_student(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param int student_id: The id of the student
        :return: list[OutcomeAlignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aligned_assignments_for_outcome_in_course_for_particular_student_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aligned_assignments_for_outcome_in_course_for_particular_student_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_aligned_assignments_for_outcome_in_course_for_particular_student_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get aligned assignments for an outcome in a course for a particular student  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aligned_assignments_for_outcome_in_course_for_particular_student_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: The id of the course (required)
        :param int student_id: The id of the student
        :return: list[OutcomeAlignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'student_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aligned_assignments_for_outcome_in_course_for_particular_student" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_aligned_assignments_for_outcome_in_course_for_particular_student`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'student_id' in params:
            query_params.append(('student_id', params['student_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_alignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OutcomeAlignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_outcome(self, id, **kwargs):  # noqa: E501
        """Show an outcome  # noqa: E501

        Returns the details of the outcome with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :return: Outcome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_outcome_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_outcome_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def show_outcome_with_http_info(self, id, **kwargs):  # noqa: E501
        """Show an outcome  # noqa: E501

        Returns the details of the outcome with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_outcome_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :return: Outcome
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'add_defaults']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_outcome" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_outcome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'add_defaults' in params:
            query_params.append(('add_defaults', params['add_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/outcomes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Outcome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_outcome(self, id, **kwargs):  # noqa: E501
        """Update an outcome  # noqa: E501

        Modify an existing outcome. Fields not provided are left as is; unrecognized fields are ignored.  If any new ratings are provided, the combination of all new ratings provided completely replace any existing embedded rubric criterion; it is not possible to tweak the ratings of the embedded rubric criterion.  A new embedded rubric criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any new ratings lacking a description are given a default of \"No description\". Any new ratings lacking a point value are given a default of 0.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The new outcome title.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The new outcome description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The new mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a new rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a new rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method. If the Outcomes New Decaying Average Calculation Method FF is ENABLED then \"weighted_average\" can be used and it is same as previous \"decaying_average\" and new \"decaying_average\" will have improved version of calculation.
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :return: Outcome
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_outcome_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_outcome_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_outcome_with_http_info(self, id, **kwargs):  # noqa: E501
        """Update an outcome  # noqa: E501

        Modify an existing outcome. Fields not provided are left as is; unrecognized fields are ignored.  If any new ratings are provided, the combination of all new ratings provided completely replace any existing embedded rubric criterion; it is not possible to tweak the ratings of the embedded rubric criterion.  A new embedded rubric criterion's mastery_points default to the maximum points in the highest rating if not specified in the mastery_points parameter. Any new ratings lacking a description are given a default of \"No description\". Any new ratings lacking a point value are given a default of 0.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_outcome_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :param str title: The new outcome title.
        :param str display_name: A friendly name shown in reports for outcomes with cryptic titles, such as common core standards names.
        :param str description: The new outcome description.
        :param str vendor_guid: A custom GUID for the learning standard.
        :param int mastery_points: The new mastery threshold for the embedded rubric criterion.
        :param list[str] ratings_description: The description of a new rating level for the embedded rubric criterion.
        :param list[int] ratings_points: The points corresponding to a new rating level for the embedded rubric criterion.
        :param str calculation_method: The new calculation method. If the Outcomes New Decaying Average Calculation Method FF is ENABLED then \"weighted_average\" can be used and it is same as previous \"decaying_average\" and new \"decaying_average\" will have improved version of calculation.
        :param int calculation_int: The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the result. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :return: Outcome
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'title', 'display_name', 'description', 'vendor_guid', 'mastery_points', 'ratings_description', 'ratings_points', 'calculation_method', 'calculation_int', 'add_defaults']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_outcome" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_outcome`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'title' in params:
            form_params.append(('title', params['title']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'vendor_guid' in params:
            form_params.append(('vendor_guid', params['vendor_guid']))  # noqa: E501
        if 'mastery_points' in params:
            form_params.append(('mastery_points', params['mastery_points']))  # noqa: E501
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'calculation_method' in params:
            form_params.append(('calculation_method', params['calculation_method']))  # noqa: E501
        if 'calculation_int' in params:
            form_params.append(('calculation_int', params['calculation_int']))  # noqa: E501
        if 'add_defaults' in params:
            form_params.append(('add_defaults', params['add_defaults']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/outcomes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Outcome',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
