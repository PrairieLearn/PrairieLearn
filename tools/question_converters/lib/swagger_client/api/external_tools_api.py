# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ExternalToolsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_tool_to_rce_favorites(self, account_id, id, **kwargs):  # noqa: E501
        """Add tool to RCE Favorites  # noqa: E501

        Add the specified editor_button external tool to a preferred location in the RCE for courses in the given account and its subaccounts (if the subaccounts haven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tool_to_rce_favorites(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tool_to_rce_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tool_to_rce_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def add_tool_to_rce_favorites_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Add tool to RCE Favorites  # noqa: E501

        Add the specified editor_button external tool to a preferred location in the RCE for courses in the given account and its subaccounts (if the subaccounts haven't set their own RCE Favorites). Cannot set more than 2 RCE Favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tool_to_rce_favorites_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tool_to_rce_favorites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `add_tool_to_rce_favorites`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_tool_to_rce_favorites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/rce_favorites/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_tool_to_top_navigation_favorites(self, account_id, id, **kwargs):  # noqa: E501
        """Add tool to Top Navigation Favorites  # noqa: E501

        Adds a dedicated button in Top Navigation for the specified tool for the given account. Cannot set more than 2 top_navigation Favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tool_to_top_navigation_favorites(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_tool_to_top_navigation_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_tool_to_top_navigation_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def add_tool_to_top_navigation_favorites_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Add tool to Top Navigation Favorites  # noqa: E501

        Adds a dedicated button in Top Navigation for the specified tool for the given account. Cannot set more than 2 top_navigation Favorites.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_tool_to_top_navigation_favorites_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_tool_to_top_navigation_favorites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `add_tool_to_top_navigation_favorites`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `add_tool_to_top_navigation_favorites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/top_nav_favorites/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_external_tool_accounts(self, account_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs):  # noqa: E501
        """Create an external tool  # noqa: E501

        Create an external tool in the specified course/account. The created tool will be returned, see the \"show\" endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_tool_accounts(account_id, client_id, name, privacy_level, consumer_key, shared_secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str client_id: The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored (required)
        :param str name: The name of the tool (required)
        :param str privacy_level: How much user information to send to the external tool. (required)
        :param str consumer_key: The consumer key for the external tool (required)
        :param str shared_secret: The shared secret with the external tool (required)
        :param str description: A description of the tool
        :param str url: The url to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str domain: The domain to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str icon_url: The url of the icon to show for this tool
        :param str text: The default text to show for this tool
        :param str custom_fields_field_name: Custom fields that will be sent to the tool consumer; can be used multiple times
        :param bool is_rce_favorite: (Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and {api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites}) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.
        :param str account_navigation_url: The url of the external tool for account navigation
        :param bool account_navigation_enabled: Set this to enable this feature
        :param str account_navigation_text: The text that will show on the left-tab in the account navigation
        :param str account_navigation_selection_width: The width of the dialog the tool is launched in
        :param str account_navigation_selection_height: The height of the dialog the tool is launched in
        :param str account_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str user_navigation_url: The url of the external tool for user navigation
        :param bool user_navigation_enabled: Set this to enable this feature
        :param str user_navigation_text: The text that will show on the left-tab in the user navigation
        :param str user_navigation_visibility: Who will see the navigation tab. \"admins\" for admins, \"public\" or \"members\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_home_sub_navigation_url: The url of the external tool for right-side course home navigation menu
        :param bool course_home_sub_navigation_enabled: Set this to enable this feature
        :param str course_home_sub_navigation_text: The text that will show on the right-side course home navigation menu
        :param str course_home_sub_navigation_icon_url: The url of the icon to show in the right-side course home navigation menu
        :param bool course_navigation_enabled: Set this to enable this feature
        :param str course_navigation_text: The text that will show on the left-tab in the course navigation
        :param str course_navigation_visibility: Who will see the navigation tab. \"admins\" for course admins, \"members\" for students, \"public\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_navigation_window_target: Determines how the navigation tab will be opened. \"_blank\" Launches the external tool in a new window or tab. \"_self\" (Default) Launches the external tool in an iframe inside of Canvas.
        :param str course_navigation_default: If set to \"disabled\" the tool will not appear in the course navigation until a teacher explicitly enables it.  If set to \"enabled\" the tool will appear in the course navigation without requiring a teacher to explicitly enable it.  defaults to \"enabled\"
        :param str course_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str editor_button_url: The url of the external tool
        :param bool editor_button_enabled: Set this to enable this feature
        :param str editor_button_icon_url: The url of the icon to show in the WYSIWYG editor
        :param str editor_button_selection_width: The width of the dialog the tool is launched in
        :param str editor_button_selection_height: The height of the dialog the tool is launched in
        :param str editor_button_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str homework_submission_url: The url of the external tool
        :param bool homework_submission_enabled: Set this to enable this feature
        :param str homework_submission_text: The text that will show on the homework submission tab
        :param str homework_submission_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str link_selection_url: The url of the external tool
        :param bool link_selection_enabled: Set this to enable this feature
        :param str link_selection_text: The text that will show for the link selection text
        :param str link_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str migration_selection_url: The url of the external tool
        :param bool migration_selection_enabled: Set this to enable this feature
        :param str migration_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str tool_configuration_url: The url of the external tool
        :param bool tool_configuration_enabled: Set this to enable this feature
        :param str tool_configuration_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param bool tool_configuration_prefer_sis_email: Set this to default the lis_person_contact_email_primary to prefer provisioned sis_email; otherwise, omit
        :param str resource_selection_url: The url of the external tool
        :param bool resource_selection_enabled: Set this to enable this feature. If set to false, not_selectable must also be set to true in order to hide this tool from the selection UI in modules and assignments.
        :param str resource_selection_icon_url: The url of the icon to show in the module external tool list
        :param str resource_selection_selection_width: The width of the dialog the tool is launched in
        :param str resource_selection_selection_height: The height of the dialog the tool is launched in
        :param str config_type: Configuration can be passed in as CC xml instead of using query parameters. If this value is \"by_url\" or \"by_xml\" then an xml configuration will be expected in either the \"config_xml\" or \"config_url\" parameter. Note that the name parameter overrides the tool name provided in the xml
        :param str config_xml: XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_xml\"
        :param str config_url: URL where the server can retrieve an XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_url\"
        :param bool not_selectable: Default: false. If set to true, and if resource_selection is set to false, the tool won't show up in the external tool selection UI in modules and assignments
        :param bool oauth_compliant: Default: false, if set to true LTI query params will not be copied to the post body.
        :param str unified_tool_id: The unique identifier for the tool in LearnPlatform
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_external_tool_accounts_with_http_info(account_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_external_tool_accounts_with_http_info(account_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs)  # noqa: E501
            return data

    def create_external_tool_accounts_with_http_info(self, account_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs):  # noqa: E501
        """Create an external tool  # noqa: E501

        Create an external tool in the specified course/account. The created tool will be returned, see the \"show\" endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_tool_accounts_with_http_info(account_id, client_id, name, privacy_level, consumer_key, shared_secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str client_id: The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored (required)
        :param str name: The name of the tool (required)
        :param str privacy_level: How much user information to send to the external tool. (required)
        :param str consumer_key: The consumer key for the external tool (required)
        :param str shared_secret: The shared secret with the external tool (required)
        :param str description: A description of the tool
        :param str url: The url to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str domain: The domain to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str icon_url: The url of the icon to show for this tool
        :param str text: The default text to show for this tool
        :param str custom_fields_field_name: Custom fields that will be sent to the tool consumer; can be used multiple times
        :param bool is_rce_favorite: (Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and {api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites}) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.
        :param str account_navigation_url: The url of the external tool for account navigation
        :param bool account_navigation_enabled: Set this to enable this feature
        :param str account_navigation_text: The text that will show on the left-tab in the account navigation
        :param str account_navigation_selection_width: The width of the dialog the tool is launched in
        :param str account_navigation_selection_height: The height of the dialog the tool is launched in
        :param str account_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str user_navigation_url: The url of the external tool for user navigation
        :param bool user_navigation_enabled: Set this to enable this feature
        :param str user_navigation_text: The text that will show on the left-tab in the user navigation
        :param str user_navigation_visibility: Who will see the navigation tab. \"admins\" for admins, \"public\" or \"members\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_home_sub_navigation_url: The url of the external tool for right-side course home navigation menu
        :param bool course_home_sub_navigation_enabled: Set this to enable this feature
        :param str course_home_sub_navigation_text: The text that will show on the right-side course home navigation menu
        :param str course_home_sub_navigation_icon_url: The url of the icon to show in the right-side course home navigation menu
        :param bool course_navigation_enabled: Set this to enable this feature
        :param str course_navigation_text: The text that will show on the left-tab in the course navigation
        :param str course_navigation_visibility: Who will see the navigation tab. \"admins\" for course admins, \"members\" for students, \"public\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_navigation_window_target: Determines how the navigation tab will be opened. \"_blank\" Launches the external tool in a new window or tab. \"_self\" (Default) Launches the external tool in an iframe inside of Canvas.
        :param str course_navigation_default: If set to \"disabled\" the tool will not appear in the course navigation until a teacher explicitly enables it.  If set to \"enabled\" the tool will appear in the course navigation without requiring a teacher to explicitly enable it.  defaults to \"enabled\"
        :param str course_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str editor_button_url: The url of the external tool
        :param bool editor_button_enabled: Set this to enable this feature
        :param str editor_button_icon_url: The url of the icon to show in the WYSIWYG editor
        :param str editor_button_selection_width: The width of the dialog the tool is launched in
        :param str editor_button_selection_height: The height of the dialog the tool is launched in
        :param str editor_button_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str homework_submission_url: The url of the external tool
        :param bool homework_submission_enabled: Set this to enable this feature
        :param str homework_submission_text: The text that will show on the homework submission tab
        :param str homework_submission_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str link_selection_url: The url of the external tool
        :param bool link_selection_enabled: Set this to enable this feature
        :param str link_selection_text: The text that will show for the link selection text
        :param str link_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str migration_selection_url: The url of the external tool
        :param bool migration_selection_enabled: Set this to enable this feature
        :param str migration_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str tool_configuration_url: The url of the external tool
        :param bool tool_configuration_enabled: Set this to enable this feature
        :param str tool_configuration_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param bool tool_configuration_prefer_sis_email: Set this to default the lis_person_contact_email_primary to prefer provisioned sis_email; otherwise, omit
        :param str resource_selection_url: The url of the external tool
        :param bool resource_selection_enabled: Set this to enable this feature. If set to false, not_selectable must also be set to true in order to hide this tool from the selection UI in modules and assignments.
        :param str resource_selection_icon_url: The url of the icon to show in the module external tool list
        :param str resource_selection_selection_width: The width of the dialog the tool is launched in
        :param str resource_selection_selection_height: The height of the dialog the tool is launched in
        :param str config_type: Configuration can be passed in as CC xml instead of using query parameters. If this value is \"by_url\" or \"by_xml\" then an xml configuration will be expected in either the \"config_xml\" or \"config_url\" parameter. Note that the name parameter overrides the tool name provided in the xml
        :param str config_xml: XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_xml\"
        :param str config_url: URL where the server can retrieve an XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_url\"
        :param bool not_selectable: Default: false. If set to true, and if resource_selection is set to false, the tool won't show up in the external tool selection UI in modules and assignments
        :param bool oauth_compliant: Default: false, if set to true LTI query params will not be copied to the post body.
        :param str unified_tool_id: The unique identifier for the tool in LearnPlatform
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'client_id', 'name', 'privacy_level', 'consumer_key', 'shared_secret', 'description', 'url', 'domain', 'icon_url', 'text', 'custom_fields_field_name', 'is_rce_favorite', 'account_navigation_url', 'account_navigation_enabled', 'account_navigation_text', 'account_navigation_selection_width', 'account_navigation_selection_height', 'account_navigation_display_type', 'user_navigation_url', 'user_navigation_enabled', 'user_navigation_text', 'user_navigation_visibility', 'course_home_sub_navigation_url', 'course_home_sub_navigation_enabled', 'course_home_sub_navigation_text', 'course_home_sub_navigation_icon_url', 'course_navigation_enabled', 'course_navigation_text', 'course_navigation_visibility', 'course_navigation_window_target', 'course_navigation_default', 'course_navigation_display_type', 'editor_button_url', 'editor_button_enabled', 'editor_button_icon_url', 'editor_button_selection_width', 'editor_button_selection_height', 'editor_button_message_type', 'homework_submission_url', 'homework_submission_enabled', 'homework_submission_text', 'homework_submission_message_type', 'link_selection_url', 'link_selection_enabled', 'link_selection_text', 'link_selection_message_type', 'migration_selection_url', 'migration_selection_enabled', 'migration_selection_message_type', 'tool_configuration_url', 'tool_configuration_enabled', 'tool_configuration_message_type', 'tool_configuration_prefer_sis_email', 'resource_selection_url', 'resource_selection_enabled', 'resource_selection_icon_url', 'resource_selection_selection_width', 'resource_selection_selection_height', 'config_type', 'config_xml', 'config_url', 'not_selectable', 'oauth_compliant', 'unified_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_tool_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `create_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'privacy_level' is set
        if self.api_client.client_side_validation and ('privacy_level' not in params or
                                                       params['privacy_level'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privacy_level` when calling `create_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'consumer_key' is set
        if self.api_client.client_side_validation and ('consumer_key' not in params or
                                                       params['consumer_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consumer_key` when calling `create_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'shared_secret' is set
        if self.api_client.client_side_validation and ('shared_secret' not in params or
                                                       params['shared_secret'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `shared_secret` when calling `create_external_tool_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'client_id' in params:
            form_params.append(('client_id', params['client_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'privacy_level' in params:
            form_params.append(('privacy_level', params['privacy_level']))  # noqa: E501
        if 'consumer_key' in params:
            form_params.append(('consumer_key', params['consumer_key']))  # noqa: E501
        if 'shared_secret' in params:
            form_params.append(('shared_secret', params['shared_secret']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'icon_url' in params:
            form_params.append(('icon_url', params['icon_url']))  # noqa: E501
        if 'text' in params:
            form_params.append(('text', params['text']))  # noqa: E501
        if 'custom_fields_field_name' in params:
            form_params.append(('custom_fields[field_name]', params['custom_fields_field_name']))  # noqa: E501
        if 'is_rce_favorite' in params:
            form_params.append(('is_rce_favorite', params['is_rce_favorite']))  # noqa: E501
        if 'account_navigation_url' in params:
            form_params.append(('account_navigation[url]', params['account_navigation_url']))  # noqa: E501
        if 'account_navigation_enabled' in params:
            form_params.append(('account_navigation[enabled]', params['account_navigation_enabled']))  # noqa: E501
        if 'account_navigation_text' in params:
            form_params.append(('account_navigation[text]', params['account_navigation_text']))  # noqa: E501
        if 'account_navigation_selection_width' in params:
            form_params.append(('account_navigation[selection_width]', params['account_navigation_selection_width']))  # noqa: E501
        if 'account_navigation_selection_height' in params:
            form_params.append(('account_navigation[selection_height]', params['account_navigation_selection_height']))  # noqa: E501
        if 'account_navigation_display_type' in params:
            form_params.append(('account_navigation[display_type]', params['account_navigation_display_type']))  # noqa: E501
        if 'user_navigation_url' in params:
            form_params.append(('user_navigation[url]', params['user_navigation_url']))  # noqa: E501
        if 'user_navigation_enabled' in params:
            form_params.append(('user_navigation[enabled]', params['user_navigation_enabled']))  # noqa: E501
        if 'user_navigation_text' in params:
            form_params.append(('user_navigation[text]', params['user_navigation_text']))  # noqa: E501
        if 'user_navigation_visibility' in params:
            form_params.append(('user_navigation[visibility]', params['user_navigation_visibility']))  # noqa: E501
        if 'course_home_sub_navigation_url' in params:
            form_params.append(('course_home_sub_navigation[url]', params['course_home_sub_navigation_url']))  # noqa: E501
        if 'course_home_sub_navigation_enabled' in params:
            form_params.append(('course_home_sub_navigation[enabled]', params['course_home_sub_navigation_enabled']))  # noqa: E501
        if 'course_home_sub_navigation_text' in params:
            form_params.append(('course_home_sub_navigation[text]', params['course_home_sub_navigation_text']))  # noqa: E501
        if 'course_home_sub_navigation_icon_url' in params:
            form_params.append(('course_home_sub_navigation[icon_url]', params['course_home_sub_navigation_icon_url']))  # noqa: E501
        if 'course_navigation_enabled' in params:
            form_params.append(('course_navigation[enabled]', params['course_navigation_enabled']))  # noqa: E501
        if 'course_navigation_text' in params:
            form_params.append(('course_navigation[text]', params['course_navigation_text']))  # noqa: E501
        if 'course_navigation_visibility' in params:
            form_params.append(('course_navigation[visibility]', params['course_navigation_visibility']))  # noqa: E501
        if 'course_navigation_window_target' in params:
            form_params.append(('course_navigation[windowTarget]', params['course_navigation_window_target']))  # noqa: E501
        if 'course_navigation_default' in params:
            form_params.append(('course_navigation[default]', params['course_navigation_default']))  # noqa: E501
        if 'course_navigation_display_type' in params:
            form_params.append(('course_navigation[display_type]', params['course_navigation_display_type']))  # noqa: E501
        if 'editor_button_url' in params:
            form_params.append(('editor_button[url]', params['editor_button_url']))  # noqa: E501
        if 'editor_button_enabled' in params:
            form_params.append(('editor_button[enabled]', params['editor_button_enabled']))  # noqa: E501
        if 'editor_button_icon_url' in params:
            form_params.append(('editor_button[icon_url]', params['editor_button_icon_url']))  # noqa: E501
        if 'editor_button_selection_width' in params:
            form_params.append(('editor_button[selection_width]', params['editor_button_selection_width']))  # noqa: E501
        if 'editor_button_selection_height' in params:
            form_params.append(('editor_button[selection_height]', params['editor_button_selection_height']))  # noqa: E501
        if 'editor_button_message_type' in params:
            form_params.append(('editor_button[message_type]', params['editor_button_message_type']))  # noqa: E501
        if 'homework_submission_url' in params:
            form_params.append(('homework_submission[url]', params['homework_submission_url']))  # noqa: E501
        if 'homework_submission_enabled' in params:
            form_params.append(('homework_submission[enabled]', params['homework_submission_enabled']))  # noqa: E501
        if 'homework_submission_text' in params:
            form_params.append(('homework_submission[text]', params['homework_submission_text']))  # noqa: E501
        if 'homework_submission_message_type' in params:
            form_params.append(('homework_submission[message_type]', params['homework_submission_message_type']))  # noqa: E501
        if 'link_selection_url' in params:
            form_params.append(('link_selection[url]', params['link_selection_url']))  # noqa: E501
        if 'link_selection_enabled' in params:
            form_params.append(('link_selection[enabled]', params['link_selection_enabled']))  # noqa: E501
        if 'link_selection_text' in params:
            form_params.append(('link_selection[text]', params['link_selection_text']))  # noqa: E501
        if 'link_selection_message_type' in params:
            form_params.append(('link_selection[message_type]', params['link_selection_message_type']))  # noqa: E501
        if 'migration_selection_url' in params:
            form_params.append(('migration_selection[url]', params['migration_selection_url']))  # noqa: E501
        if 'migration_selection_enabled' in params:
            form_params.append(('migration_selection[enabled]', params['migration_selection_enabled']))  # noqa: E501
        if 'migration_selection_message_type' in params:
            form_params.append(('migration_selection[message_type]', params['migration_selection_message_type']))  # noqa: E501
        if 'tool_configuration_url' in params:
            form_params.append(('tool_configuration[url]', params['tool_configuration_url']))  # noqa: E501
        if 'tool_configuration_enabled' in params:
            form_params.append(('tool_configuration[enabled]', params['tool_configuration_enabled']))  # noqa: E501
        if 'tool_configuration_message_type' in params:
            form_params.append(('tool_configuration[message_type]', params['tool_configuration_message_type']))  # noqa: E501
        if 'tool_configuration_prefer_sis_email' in params:
            form_params.append(('tool_configuration[prefer_sis_email]', params['tool_configuration_prefer_sis_email']))  # noqa: E501
        if 'resource_selection_url' in params:
            form_params.append(('resource_selection[url]', params['resource_selection_url']))  # noqa: E501
        if 'resource_selection_enabled' in params:
            form_params.append(('resource_selection[enabled]', params['resource_selection_enabled']))  # noqa: E501
        if 'resource_selection_icon_url' in params:
            form_params.append(('resource_selection[icon_url]', params['resource_selection_icon_url']))  # noqa: E501
        if 'resource_selection_selection_width' in params:
            form_params.append(('resource_selection[selection_width]', params['resource_selection_selection_width']))  # noqa: E501
        if 'resource_selection_selection_height' in params:
            form_params.append(('resource_selection[selection_height]', params['resource_selection_selection_height']))  # noqa: E501
        if 'config_type' in params:
            form_params.append(('config_type', params['config_type']))  # noqa: E501
        if 'config_xml' in params:
            form_params.append(('config_xml', params['config_xml']))  # noqa: E501
        if 'config_url' in params:
            form_params.append(('config_url', params['config_url']))  # noqa: E501
        if 'not_selectable' in params:
            form_params.append(('not_selectable', params['not_selectable']))  # noqa: E501
        if 'oauth_compliant' in params:
            form_params.append(('oauth_compliant', params['oauth_compliant']))  # noqa: E501
        if 'unified_tool_id' in params:
            form_params.append(('unified_tool_id', params['unified_tool_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_external_tool_courses(self, course_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs):  # noqa: E501
        """Create an external tool  # noqa: E501

        Create an external tool in the specified course/account. The created tool will be returned, see the \"show\" endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_tool_courses(course_id, client_id, name, privacy_level, consumer_key, shared_secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str client_id: The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored (required)
        :param str name: The name of the tool (required)
        :param str privacy_level: How much user information to send to the external tool. (required)
        :param str consumer_key: The consumer key for the external tool (required)
        :param str shared_secret: The shared secret with the external tool (required)
        :param str description: A description of the tool
        :param str url: The url to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str domain: The domain to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str icon_url: The url of the icon to show for this tool
        :param str text: The default text to show for this tool
        :param str custom_fields_field_name: Custom fields that will be sent to the tool consumer; can be used multiple times
        :param bool is_rce_favorite: (Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and {api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites}) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.
        :param str account_navigation_url: The url of the external tool for account navigation
        :param bool account_navigation_enabled: Set this to enable this feature
        :param str account_navigation_text: The text that will show on the left-tab in the account navigation
        :param str account_navigation_selection_width: The width of the dialog the tool is launched in
        :param str account_navigation_selection_height: The height of the dialog the tool is launched in
        :param str account_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str user_navigation_url: The url of the external tool for user navigation
        :param bool user_navigation_enabled: Set this to enable this feature
        :param str user_navigation_text: The text that will show on the left-tab in the user navigation
        :param str user_navigation_visibility: Who will see the navigation tab. \"admins\" for admins, \"public\" or \"members\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_home_sub_navigation_url: The url of the external tool for right-side course home navigation menu
        :param bool course_home_sub_navigation_enabled: Set this to enable this feature
        :param str course_home_sub_navigation_text: The text that will show on the right-side course home navigation menu
        :param str course_home_sub_navigation_icon_url: The url of the icon to show in the right-side course home navigation menu
        :param bool course_navigation_enabled: Set this to enable this feature
        :param str course_navigation_text: The text that will show on the left-tab in the course navigation
        :param str course_navigation_visibility: Who will see the navigation tab. \"admins\" for course admins, \"members\" for students, \"public\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_navigation_window_target: Determines how the navigation tab will be opened. \"_blank\" Launches the external tool in a new window or tab. \"_self\" (Default) Launches the external tool in an iframe inside of Canvas.
        :param str course_navigation_default: If set to \"disabled\" the tool will not appear in the course navigation until a teacher explicitly enables it.  If set to \"enabled\" the tool will appear in the course navigation without requiring a teacher to explicitly enable it.  defaults to \"enabled\"
        :param str course_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str editor_button_url: The url of the external tool
        :param bool editor_button_enabled: Set this to enable this feature
        :param str editor_button_icon_url: The url of the icon to show in the WYSIWYG editor
        :param str editor_button_selection_width: The width of the dialog the tool is launched in
        :param str editor_button_selection_height: The height of the dialog the tool is launched in
        :param str editor_button_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str homework_submission_url: The url of the external tool
        :param bool homework_submission_enabled: Set this to enable this feature
        :param str homework_submission_text: The text that will show on the homework submission tab
        :param str homework_submission_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str link_selection_url: The url of the external tool
        :param bool link_selection_enabled: Set this to enable this feature
        :param str link_selection_text: The text that will show for the link selection text
        :param str link_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str migration_selection_url: The url of the external tool
        :param bool migration_selection_enabled: Set this to enable this feature
        :param str migration_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str tool_configuration_url: The url of the external tool
        :param bool tool_configuration_enabled: Set this to enable this feature
        :param str tool_configuration_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param bool tool_configuration_prefer_sis_email: Set this to default the lis_person_contact_email_primary to prefer provisioned sis_email; otherwise, omit
        :param str resource_selection_url: The url of the external tool
        :param bool resource_selection_enabled: Set this to enable this feature. If set to false, not_selectable must also be set to true in order to hide this tool from the selection UI in modules and assignments.
        :param str resource_selection_icon_url: The url of the icon to show in the module external tool list
        :param str resource_selection_selection_width: The width of the dialog the tool is launched in
        :param str resource_selection_selection_height: The height of the dialog the tool is launched in
        :param str config_type: Configuration can be passed in as CC xml instead of using query parameters. If this value is \"by_url\" or \"by_xml\" then an xml configuration will be expected in either the \"config_xml\" or \"config_url\" parameter. Note that the name parameter overrides the tool name provided in the xml
        :param str config_xml: XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_xml\"
        :param str config_url: URL where the server can retrieve an XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_url\"
        :param bool not_selectable: Default: false. If set to true, and if resource_selection is set to false, the tool won't show up in the external tool selection UI in modules and assignments
        :param bool oauth_compliant: Default: false, if set to true LTI query params will not be copied to the post body.
        :param str unified_tool_id: The unique identifier for the tool in LearnPlatform
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_external_tool_courses_with_http_info(course_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs)  # noqa: E501
        else:
            (data) = self.create_external_tool_courses_with_http_info(course_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs)  # noqa: E501
            return data

    def create_external_tool_courses_with_http_info(self, course_id, client_id, name, privacy_level, consumer_key, shared_secret, **kwargs):  # noqa: E501
        """Create an external tool  # noqa: E501

        Create an external tool in the specified course/account. The created tool will be returned, see the \"show\" endpoint for an example. If a client ID is supplied canvas will attempt to create a context external tool using the LTI 1.3 standard.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_external_tool_courses_with_http_info(course_id, client_id, name, privacy_level, consumer_key, shared_secret, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str client_id: The client id is attached to the developer key. If supplied all other parameters are unnecessary and will be ignored (required)
        :param str name: The name of the tool (required)
        :param str privacy_level: How much user information to send to the external tool. (required)
        :param str consumer_key: The consumer key for the external tool (required)
        :param str shared_secret: The shared secret with the external tool (required)
        :param str description: A description of the tool
        :param str url: The url to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str domain: The domain to match links against. Either \"url\" or \"domain\" should be set, not both.
        :param str icon_url: The url of the icon to show for this tool
        :param str text: The default text to show for this tool
        :param str custom_fields_field_name: Custom fields that will be sent to the tool consumer; can be used multiple times
        :param bool is_rce_favorite: (Deprecated in favor of {api:ExternalToolsController#add_rce_favorite Add tool to RCE Favorites} and {api:ExternalToolsController#remove_rce_favorite Remove tool from RCE Favorites}) Whether this tool should appear in a preferred location in the RCE. This only applies to tools in root account contexts that have an editor button placement.
        :param str account_navigation_url: The url of the external tool for account navigation
        :param bool account_navigation_enabled: Set this to enable this feature
        :param str account_navigation_text: The text that will show on the left-tab in the account navigation
        :param str account_navigation_selection_width: The width of the dialog the tool is launched in
        :param str account_navigation_selection_height: The height of the dialog the tool is launched in
        :param str account_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str user_navigation_url: The url of the external tool for user navigation
        :param bool user_navigation_enabled: Set this to enable this feature
        :param str user_navigation_text: The text that will show on the left-tab in the user navigation
        :param str user_navigation_visibility: Who will see the navigation tab. \"admins\" for admins, \"public\" or \"members\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_home_sub_navigation_url: The url of the external tool for right-side course home navigation menu
        :param bool course_home_sub_navigation_enabled: Set this to enable this feature
        :param str course_home_sub_navigation_text: The text that will show on the right-side course home navigation menu
        :param str course_home_sub_navigation_icon_url: The url of the icon to show in the right-side course home navigation menu
        :param bool course_navigation_enabled: Set this to enable this feature
        :param str course_navigation_text: The text that will show on the left-tab in the course navigation
        :param str course_navigation_visibility: Who will see the navigation tab. \"admins\" for course admins, \"members\" for students, \"public\" for everyone. Setting this to `null` will remove this configuration and use the default behavior, which is \"public\".
        :param str course_navigation_window_target: Determines how the navigation tab will be opened. \"_blank\" Launches the external tool in a new window or tab. \"_self\" (Default) Launches the external tool in an iframe inside of Canvas.
        :param str course_navigation_default: If set to \"disabled\" the tool will not appear in the course navigation until a teacher explicitly enables it.  If set to \"enabled\" the tool will appear in the course navigation without requiring a teacher to explicitly enable it.  defaults to \"enabled\"
        :param str course_navigation_display_type: The layout type to use when launching the tool. Must be \"full_width\", \"full_width_in_context\", \"in_nav_context\", \"borderless\", or \"default\"
        :param str editor_button_url: The url of the external tool
        :param bool editor_button_enabled: Set this to enable this feature
        :param str editor_button_icon_url: The url of the icon to show in the WYSIWYG editor
        :param str editor_button_selection_width: The width of the dialog the tool is launched in
        :param str editor_button_selection_height: The height of the dialog the tool is launched in
        :param str editor_button_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str homework_submission_url: The url of the external tool
        :param bool homework_submission_enabled: Set this to enable this feature
        :param str homework_submission_text: The text that will show on the homework submission tab
        :param str homework_submission_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str link_selection_url: The url of the external tool
        :param bool link_selection_enabled: Set this to enable this feature
        :param str link_selection_text: The text that will show for the link selection text
        :param str link_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str migration_selection_url: The url of the external tool
        :param bool migration_selection_enabled: Set this to enable this feature
        :param str migration_selection_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param str tool_configuration_url: The url of the external tool
        :param bool tool_configuration_enabled: Set this to enable this feature
        :param str tool_configuration_message_type: Set this to ContentItemSelectionRequest to tell the tool to use content-item; otherwise, omit
        :param bool tool_configuration_prefer_sis_email: Set this to default the lis_person_contact_email_primary to prefer provisioned sis_email; otherwise, omit
        :param str resource_selection_url: The url of the external tool
        :param bool resource_selection_enabled: Set this to enable this feature. If set to false, not_selectable must also be set to true in order to hide this tool from the selection UI in modules and assignments.
        :param str resource_selection_icon_url: The url of the icon to show in the module external tool list
        :param str resource_selection_selection_width: The width of the dialog the tool is launched in
        :param str resource_selection_selection_height: The height of the dialog the tool is launched in
        :param str config_type: Configuration can be passed in as CC xml instead of using query parameters. If this value is \"by_url\" or \"by_xml\" then an xml configuration will be expected in either the \"config_xml\" or \"config_url\" parameter. Note that the name parameter overrides the tool name provided in the xml
        :param str config_xml: XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_xml\"
        :param str config_url: URL where the server can retrieve an XML tool configuration, as specified in the CC xml specification. This is required if \"config_type\" is set to \"by_url\"
        :param bool not_selectable: Default: false. If set to true, and if resource_selection is set to false, the tool won't show up in the external tool selection UI in modules and assignments
        :param bool oauth_compliant: Default: false, if set to true LTI query params will not be copied to the post body.
        :param str unified_tool_id: The unique identifier for the tool in LearnPlatform
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'client_id', 'name', 'privacy_level', 'consumer_key', 'shared_secret', 'description', 'url', 'domain', 'icon_url', 'text', 'custom_fields_field_name', 'is_rce_favorite', 'account_navigation_url', 'account_navigation_enabled', 'account_navigation_text', 'account_navigation_selection_width', 'account_navigation_selection_height', 'account_navigation_display_type', 'user_navigation_url', 'user_navigation_enabled', 'user_navigation_text', 'user_navigation_visibility', 'course_home_sub_navigation_url', 'course_home_sub_navigation_enabled', 'course_home_sub_navigation_text', 'course_home_sub_navigation_icon_url', 'course_navigation_enabled', 'course_navigation_text', 'course_navigation_visibility', 'course_navigation_window_target', 'course_navigation_default', 'course_navigation_display_type', 'editor_button_url', 'editor_button_enabled', 'editor_button_icon_url', 'editor_button_selection_width', 'editor_button_selection_height', 'editor_button_message_type', 'homework_submission_url', 'homework_submission_enabled', 'homework_submission_text', 'homework_submission_message_type', 'link_selection_url', 'link_selection_enabled', 'link_selection_text', 'link_selection_message_type', 'migration_selection_url', 'migration_selection_enabled', 'migration_selection_message_type', 'tool_configuration_url', 'tool_configuration_enabled', 'tool_configuration_message_type', 'tool_configuration_prefer_sis_email', 'resource_selection_url', 'resource_selection_enabled', 'resource_selection_icon_url', 'resource_selection_selection_width', 'resource_selection_selection_height', 'config_type', 'config_xml', 'config_url', 'not_selectable', 'oauth_compliant', 'unified_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_external_tool_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if self.api_client.client_side_validation and ('client_id' not in params or
                                                       params['client_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_id` when calling `create_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in params or
                                                       params['name'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `name` when calling `create_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'privacy_level' is set
        if self.api_client.client_side_validation and ('privacy_level' not in params or
                                                       params['privacy_level'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `privacy_level` when calling `create_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'consumer_key' is set
        if self.api_client.client_side_validation and ('consumer_key' not in params or
                                                       params['consumer_key'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `consumer_key` when calling `create_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'shared_secret' is set
        if self.api_client.client_side_validation and ('shared_secret' not in params or
                                                       params['shared_secret'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `shared_secret` when calling `create_external_tool_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'client_id' in params:
            form_params.append(('client_id', params['client_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'privacy_level' in params:
            form_params.append(('privacy_level', params['privacy_level']))  # noqa: E501
        if 'consumer_key' in params:
            form_params.append(('consumer_key', params['consumer_key']))  # noqa: E501
        if 'shared_secret' in params:
            form_params.append(('shared_secret', params['shared_secret']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'url' in params:
            form_params.append(('url', params['url']))  # noqa: E501
        if 'domain' in params:
            form_params.append(('domain', params['domain']))  # noqa: E501
        if 'icon_url' in params:
            form_params.append(('icon_url', params['icon_url']))  # noqa: E501
        if 'text' in params:
            form_params.append(('text', params['text']))  # noqa: E501
        if 'custom_fields_field_name' in params:
            form_params.append(('custom_fields[field_name]', params['custom_fields_field_name']))  # noqa: E501
        if 'is_rce_favorite' in params:
            form_params.append(('is_rce_favorite', params['is_rce_favorite']))  # noqa: E501
        if 'account_navigation_url' in params:
            form_params.append(('account_navigation[url]', params['account_navigation_url']))  # noqa: E501
        if 'account_navigation_enabled' in params:
            form_params.append(('account_navigation[enabled]', params['account_navigation_enabled']))  # noqa: E501
        if 'account_navigation_text' in params:
            form_params.append(('account_navigation[text]', params['account_navigation_text']))  # noqa: E501
        if 'account_navigation_selection_width' in params:
            form_params.append(('account_navigation[selection_width]', params['account_navigation_selection_width']))  # noqa: E501
        if 'account_navigation_selection_height' in params:
            form_params.append(('account_navigation[selection_height]', params['account_navigation_selection_height']))  # noqa: E501
        if 'account_navigation_display_type' in params:
            form_params.append(('account_navigation[display_type]', params['account_navigation_display_type']))  # noqa: E501
        if 'user_navigation_url' in params:
            form_params.append(('user_navigation[url]', params['user_navigation_url']))  # noqa: E501
        if 'user_navigation_enabled' in params:
            form_params.append(('user_navigation[enabled]', params['user_navigation_enabled']))  # noqa: E501
        if 'user_navigation_text' in params:
            form_params.append(('user_navigation[text]', params['user_navigation_text']))  # noqa: E501
        if 'user_navigation_visibility' in params:
            form_params.append(('user_navigation[visibility]', params['user_navigation_visibility']))  # noqa: E501
        if 'course_home_sub_navigation_url' in params:
            form_params.append(('course_home_sub_navigation[url]', params['course_home_sub_navigation_url']))  # noqa: E501
        if 'course_home_sub_navigation_enabled' in params:
            form_params.append(('course_home_sub_navigation[enabled]', params['course_home_sub_navigation_enabled']))  # noqa: E501
        if 'course_home_sub_navigation_text' in params:
            form_params.append(('course_home_sub_navigation[text]', params['course_home_sub_navigation_text']))  # noqa: E501
        if 'course_home_sub_navigation_icon_url' in params:
            form_params.append(('course_home_sub_navigation[icon_url]', params['course_home_sub_navigation_icon_url']))  # noqa: E501
        if 'course_navigation_enabled' in params:
            form_params.append(('course_navigation[enabled]', params['course_navigation_enabled']))  # noqa: E501
        if 'course_navigation_text' in params:
            form_params.append(('course_navigation[text]', params['course_navigation_text']))  # noqa: E501
        if 'course_navigation_visibility' in params:
            form_params.append(('course_navigation[visibility]', params['course_navigation_visibility']))  # noqa: E501
        if 'course_navigation_window_target' in params:
            form_params.append(('course_navigation[windowTarget]', params['course_navigation_window_target']))  # noqa: E501
        if 'course_navigation_default' in params:
            form_params.append(('course_navigation[default]', params['course_navigation_default']))  # noqa: E501
        if 'course_navigation_display_type' in params:
            form_params.append(('course_navigation[display_type]', params['course_navigation_display_type']))  # noqa: E501
        if 'editor_button_url' in params:
            form_params.append(('editor_button[url]', params['editor_button_url']))  # noqa: E501
        if 'editor_button_enabled' in params:
            form_params.append(('editor_button[enabled]', params['editor_button_enabled']))  # noqa: E501
        if 'editor_button_icon_url' in params:
            form_params.append(('editor_button[icon_url]', params['editor_button_icon_url']))  # noqa: E501
        if 'editor_button_selection_width' in params:
            form_params.append(('editor_button[selection_width]', params['editor_button_selection_width']))  # noqa: E501
        if 'editor_button_selection_height' in params:
            form_params.append(('editor_button[selection_height]', params['editor_button_selection_height']))  # noqa: E501
        if 'editor_button_message_type' in params:
            form_params.append(('editor_button[message_type]', params['editor_button_message_type']))  # noqa: E501
        if 'homework_submission_url' in params:
            form_params.append(('homework_submission[url]', params['homework_submission_url']))  # noqa: E501
        if 'homework_submission_enabled' in params:
            form_params.append(('homework_submission[enabled]', params['homework_submission_enabled']))  # noqa: E501
        if 'homework_submission_text' in params:
            form_params.append(('homework_submission[text]', params['homework_submission_text']))  # noqa: E501
        if 'homework_submission_message_type' in params:
            form_params.append(('homework_submission[message_type]', params['homework_submission_message_type']))  # noqa: E501
        if 'link_selection_url' in params:
            form_params.append(('link_selection[url]', params['link_selection_url']))  # noqa: E501
        if 'link_selection_enabled' in params:
            form_params.append(('link_selection[enabled]', params['link_selection_enabled']))  # noqa: E501
        if 'link_selection_text' in params:
            form_params.append(('link_selection[text]', params['link_selection_text']))  # noqa: E501
        if 'link_selection_message_type' in params:
            form_params.append(('link_selection[message_type]', params['link_selection_message_type']))  # noqa: E501
        if 'migration_selection_url' in params:
            form_params.append(('migration_selection[url]', params['migration_selection_url']))  # noqa: E501
        if 'migration_selection_enabled' in params:
            form_params.append(('migration_selection[enabled]', params['migration_selection_enabled']))  # noqa: E501
        if 'migration_selection_message_type' in params:
            form_params.append(('migration_selection[message_type]', params['migration_selection_message_type']))  # noqa: E501
        if 'tool_configuration_url' in params:
            form_params.append(('tool_configuration[url]', params['tool_configuration_url']))  # noqa: E501
        if 'tool_configuration_enabled' in params:
            form_params.append(('tool_configuration[enabled]', params['tool_configuration_enabled']))  # noqa: E501
        if 'tool_configuration_message_type' in params:
            form_params.append(('tool_configuration[message_type]', params['tool_configuration_message_type']))  # noqa: E501
        if 'tool_configuration_prefer_sis_email' in params:
            form_params.append(('tool_configuration[prefer_sis_email]', params['tool_configuration_prefer_sis_email']))  # noqa: E501
        if 'resource_selection_url' in params:
            form_params.append(('resource_selection[url]', params['resource_selection_url']))  # noqa: E501
        if 'resource_selection_enabled' in params:
            form_params.append(('resource_selection[enabled]', params['resource_selection_enabled']))  # noqa: E501
        if 'resource_selection_icon_url' in params:
            form_params.append(('resource_selection[icon_url]', params['resource_selection_icon_url']))  # noqa: E501
        if 'resource_selection_selection_width' in params:
            form_params.append(('resource_selection[selection_width]', params['resource_selection_selection_width']))  # noqa: E501
        if 'resource_selection_selection_height' in params:
            form_params.append(('resource_selection[selection_height]', params['resource_selection_selection_height']))  # noqa: E501
        if 'config_type' in params:
            form_params.append(('config_type', params['config_type']))  # noqa: E501
        if 'config_xml' in params:
            form_params.append(('config_xml', params['config_xml']))  # noqa: E501
        if 'config_url' in params:
            form_params.append(('config_url', params['config_url']))  # noqa: E501
        if 'not_selectable' in params:
            form_params.append(('not_selectable', params['not_selectable']))  # noqa: E501
        if 'oauth_compliant' in params:
            form_params.append(('oauth_compliant', params['oauth_compliant']))  # noqa: E501
        if 'unified_tool_id' in params:
            form_params.append(('unified_tool_id', params['unified_tool_id']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_external_tool_accounts(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Delete an external tool  # noqa: E501

        Remove the specified external tool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_external_tool_accounts(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def delete_external_tool_accounts_with_http_info(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Delete an external tool  # noqa: E501

        Remove the specified external tool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_external_tool_accounts_with_http_info(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_external_tool_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `delete_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `delete_external_tool_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/{external_tool_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_external_tool_courses(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Delete an external tool  # noqa: E501

        Remove the specified external tool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_external_tool_courses(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def delete_external_tool_courses_with_http_info(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Delete an external tool  # noqa: E501

        Remove the specified external tool  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_external_tool_courses_with_http_info(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_external_tool_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `delete_external_tool_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools/{external_tool_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_external_tool_accounts(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Edit an external tool  # noqa: E501

        Update the specified external tool. Uses same parameters as create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_external_tool_accounts(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def edit_external_tool_accounts_with_http_info(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Edit an external tool  # noqa: E501

        Update the specified external tool. Uses same parameters as create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_external_tool_accounts_with_http_info(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_external_tool_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `edit_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `edit_external_tool_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/{external_tool_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_external_tool_courses(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Edit an external tool  # noqa: E501

        Update the specified external tool. Uses same parameters as create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_external_tool_courses(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def edit_external_tool_courses_with_http_info(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Edit an external tool  # noqa: E501

        Update the specified external tool. Uses same parameters as create  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_external_tool_courses_with_http_info(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_external_tool_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `edit_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `edit_external_tool_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools/{external_tool_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sessionless_launch_url_for_external_tool_accounts(self, account_id, **kwargs):  # noqa: E501
        """Get a sessionless launch url for an external tool.  # noqa: E501

        Returns a sessionless launch url for an external tool. Prefers the resource_link_lookup_uuid, but defaults to the other passed   parameters id, url, and launch_type  NOTE: Either the resource_link_lookup_uuid, id, or url must be provided unless launch_type is assessment or module_item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sessionless_launch_url_for_external_tool_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: The external id of the tool to launch.
        :param str url: The LTI launch url for the external tool.
        :param str assignment_id: The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".
        :param str module_item_id: The assignment id for a module item launch. Required if launch_type is set to \"module_item\".
        :param str launch_type: The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\") can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.
        :param str resource_link_lookup_uuid: The identifier to lookup a resource link.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sessionless_launch_url_for_external_tool_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sessionless_launch_url_for_external_tool_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_sessionless_launch_url_for_external_tool_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get a sessionless launch url for an external tool.  # noqa: E501

        Returns a sessionless launch url for an external tool. Prefers the resource_link_lookup_uuid, but defaults to the other passed   parameters id, url, and launch_type  NOTE: Either the resource_link_lookup_uuid, id, or url must be provided unless launch_type is assessment or module_item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sessionless_launch_url_for_external_tool_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: The external id of the tool to launch.
        :param str url: The LTI launch url for the external tool.
        :param str assignment_id: The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".
        :param str module_item_id: The assignment id for a module item launch. Required if launch_type is set to \"module_item\".
        :param str launch_type: The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\") can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.
        :param str resource_link_lookup_uuid: The identifier to lookup a resource link.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'url', 'assignment_id', 'module_item_id', 'launch_type', 'resource_link_lookup_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sessionless_launch_url_for_external_tool_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_sessionless_launch_url_for_external_tool_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'assignment_id' in params:
            query_params.append(('assignment_id', params['assignment_id']))  # noqa: E501
        if 'module_item_id' in params:
            query_params.append(('module_item_id', params['module_item_id']))  # noqa: E501
        if 'launch_type' in params:
            query_params.append(('launch_type', params['launch_type']))  # noqa: E501
        if 'resource_link_lookup_uuid' in params:
            query_params.append(('resource_link_lookup_uuid', params['resource_link_lookup_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/sessionless_launch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sessionless_launch_url_for_external_tool_courses(self, course_id, **kwargs):  # noqa: E501
        """Get a sessionless launch url for an external tool.  # noqa: E501

        Returns a sessionless launch url for an external tool. Prefers the resource_link_lookup_uuid, but defaults to the other passed   parameters id, url, and launch_type  NOTE: Either the resource_link_lookup_uuid, id, or url must be provided unless launch_type is assessment or module_item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sessionless_launch_url_for_external_tool_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: The external id of the tool to launch.
        :param str url: The LTI launch url for the external tool.
        :param str assignment_id: The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".
        :param str module_item_id: The assignment id for a module item launch. Required if launch_type is set to \"module_item\".
        :param str launch_type: The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\") can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.
        :param str resource_link_lookup_uuid: The identifier to lookup a resource link.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sessionless_launch_url_for_external_tool_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sessionless_launch_url_for_external_tool_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_sessionless_launch_url_for_external_tool_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get a sessionless launch url for an external tool.  # noqa: E501

        Returns a sessionless launch url for an external tool. Prefers the resource_link_lookup_uuid, but defaults to the other passed   parameters id, url, and launch_type  NOTE: Either the resource_link_lookup_uuid, id, or url must be provided unless launch_type is assessment or module_item.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sessionless_launch_url_for_external_tool_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: The external id of the tool to launch.
        :param str url: The LTI launch url for the external tool.
        :param str assignment_id: The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".
        :param str module_item_id: The assignment id for a module item launch. Required if launch_type is set to \"module_item\".
        :param str launch_type: The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\") can also be specified to use the custom launch url for that placement; if done, the tool id must be provided.
        :param str resource_link_lookup_uuid: The identifier to lookup a resource link.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'url', 'assignment_id', 'module_item_id', 'launch_type', 'resource_link_lookup_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sessionless_launch_url_for_external_tool_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_sessionless_launch_url_for_external_tool_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'url' in params:
            query_params.append(('url', params['url']))  # noqa: E501
        if 'assignment_id' in params:
            query_params.append(('assignment_id', params['assignment_id']))  # noqa: E501
        if 'module_item_id' in params:
            query_params.append(('module_item_id', params['module_item_id']))  # noqa: E501
        if 'launch_type' in params:
            query_params.append(('launch_type', params['launch_type']))  # noqa: E501
        if 'resource_link_lookup_uuid' in params:
            query_params.append(('resource_link_lookup_uuid', params['resource_link_lookup_uuid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools/sessionless_launch', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_external_tool_accounts(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Get a single external tool  # noqa: E501

        Returns the specified external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_external_tool_accounts(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_external_tool_accounts_with_http_info(account_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def get_single_external_tool_accounts_with_http_info(self, account_id, external_tool_id, **kwargs):  # noqa: E501
        """Get a single external tool  # noqa: E501

        Returns the specified external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_external_tool_accounts_with_http_info(account_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_external_tool_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_single_external_tool_accounts`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `get_single_external_tool_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/{external_tool_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_external_tool_courses(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Get a single external tool  # noqa: E501

        Returns the specified external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_external_tool_courses(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_external_tool_courses_with_http_info(course_id, external_tool_id, **kwargs)  # noqa: E501
            return data

    def get_single_external_tool_courses_with_http_info(self, course_id, external_tool_id, **kwargs):  # noqa: E501
        """Get a single external tool  # noqa: E501

        Returns the specified external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_external_tool_courses_with_http_info(course_id, external_tool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str external_tool_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'external_tool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_external_tool_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_external_tool_courses`")  # noqa: E501
        # verify the required parameter 'external_tool_id' is set
        if self.api_client.client_side_validation and ('external_tool_id' not in params or
                                                       params['external_tool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `external_tool_id` when calling `get_single_external_tool_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'external_tool_id' in params:
            path_params['external_tool_id'] = params['external_tool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools/{external_tool_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visible_course_navigation_tools(self, context_codes, **kwargs):  # noqa: E501
        """Get visible course navigation tools  # noqa: E501

        Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.  The response format is the same as for List external tools, but with additional context_id and context_name fields on each element in the array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visible_course_navigation_tools(context_codes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] context_codes: List of context_codes to retrieve visible course nav tools for (for example, +course_123+). Only courses are presently supported. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_visible_course_navigation_tools_with_http_info(context_codes, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visible_course_navigation_tools_with_http_info(context_codes, **kwargs)  # noqa: E501
            return data

    def get_visible_course_navigation_tools_with_http_info(self, context_codes, **kwargs):  # noqa: E501
        """Get visible course navigation tools  # noqa: E501

        Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.  The response format is the same as for List external tools, but with additional context_id and context_name fields on each element in the array.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visible_course_navigation_tools_with_http_info(context_codes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] context_codes: List of context_codes to retrieve visible course nav tools for (for example, +course_123+). Only courses are presently supported. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['context_codes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visible_course_navigation_tools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'context_codes' is set
        if self.api_client.client_side_validation and ('context_codes' not in params or
                                                       params['context_codes'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `context_codes` when calling `get_visible_course_navigation_tools`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'context_codes' in params:
            query_params.append(('context_codes', params['context_codes']))  # noqa: E501
            collection_formats['context_codes'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/external_tools/visible_course_nav_tools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_visible_course_navigation_tools_for_single_course(self, course_id, **kwargs):  # noqa: E501
        """Get visible course navigation tools for a single course  # noqa: E501

        Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.  The response format is the same as Get visible course navigation tools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visible_course_navigation_tools_for_single_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_visible_course_navigation_tools_for_single_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_visible_course_navigation_tools_for_single_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_visible_course_navigation_tools_for_single_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get visible course navigation tools for a single course  # noqa: E501

        Get a list of external tools with the course_navigation placement that have not been hidden in course settings and whose visibility settings apply to the requesting user. These tools are the same that appear in the course navigation.  The response format is the same as Get visible course navigation tools.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_visible_course_navigation_tools_for_single_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_visible_course_navigation_tools_for_single_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_visible_course_navigation_tools_for_single_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools/visible_course_nav_tools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_external_tools_accounts(self, account_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_external_tools_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_external_tools_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def list_external_tools_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'search_term', 'selectable', 'include_parents', 'placement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_external_tools_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `list_external_tools_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'selectable' in params:
            query_params.append(('selectable', params['selectable']))  # noqa: E501
        if 'include_parents' in params:
            query_params.append(('include_parents', params['include_parents']))  # noqa: E501
        if 'placement' in params:
            query_params.append(('placement', params['placement']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_external_tools_courses(self, course_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_external_tools_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_external_tools_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_external_tools_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'search_term', 'selectable', 'include_parents', 'placement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_external_tools_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_external_tools_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'selectable' in params:
            query_params.append(('selectable', params['selectable']))  # noqa: E501
        if 'include_parents' in params:
            query_params.append(('include_parents', params['include_parents']))  # noqa: E501
        if 'placement' in params:
            query_params.append(('placement', params['placement']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/external_tools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_external_tools_groups(self, group_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_groups(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_external_tools_groups_with_http_info(group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_external_tools_groups_with_http_info(group_id, **kwargs)  # noqa: E501
            return data

    def list_external_tools_groups_with_http_info(self, group_id, **kwargs):  # noqa: E501
        """List external tools  # noqa: E501

        Returns the paginated list of external tools for the current context. See the get request docs for a single tool for a list of properties on an external tool.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_external_tools_groups_with_http_info(group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group_id: ID (required)
        :param str search_term: The partial name of the tools to match and return.
        :param bool selectable: If true, then only tools that are meant to be selectable are returned.
        :param bool include_parents: If true, then include tools installed in all accounts above the current context
        :param str placement: The placement type to filter by.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group_id', 'search_term', 'selectable', 'include_parents', 'placement']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_external_tools_groups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'group_id' is set
        if self.api_client.client_side_validation and ('group_id' not in params or
                                                       params['group_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `group_id` when calling `list_external_tools_groups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in params:
            path_params['group_id'] = params['group_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501
        if 'selectable' in params:
            query_params.append(('selectable', params['selectable']))  # noqa: E501
        if 'include_parents' in params:
            query_params.append(('include_parents', params['include_parents']))  # noqa: E501
        if 'placement' in params:
            query_params.append(('placement', params['placement']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/external_tools', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tool_from_rce_favorites(self, account_id, id, **kwargs):  # noqa: E501
        """Remove tool from RCE Favorites  # noqa: E501

        Remove the specified external tool from a preferred location in the RCE for the given account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tool_from_rce_favorites(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tool_from_rce_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tool_from_rce_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def remove_tool_from_rce_favorites_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Remove tool from RCE Favorites  # noqa: E501

        Remove the specified external tool from a preferred location in the RCE for the given account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tool_from_rce_favorites_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tool_from_rce_favorites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `remove_tool_from_rce_favorites`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_tool_from_rce_favorites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/rce_favorites/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_tool_from_top_navigation_favorites(self, account_id, id, **kwargs):  # noqa: E501
        """Remove tool from Top Navigation Favorites  # noqa: E501

        Removes the dedicated button in Top Navigation for the specified tool for the given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tool_from_top_navigation_favorites(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_tool_from_top_navigation_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_tool_from_top_navigation_favorites_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def remove_tool_from_top_navigation_favorites_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Remove tool from Top Navigation Favorites  # noqa: E501

        Removes the dedicated button in Top Navigation for the specified tool for the given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_tool_from_top_navigation_favorites_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_tool_from_top_navigation_favorites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `remove_tool_from_top_navigation_favorites`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `remove_tool_from_top_navigation_favorites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/external_tools/top_nav_favorites/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
