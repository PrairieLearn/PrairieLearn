# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScoreApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_score(self, course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, **kwargs):  # noqa: E501
        """Create a Score  # noqa: E501

        Create a new Result from the score params. If this is for the first created line_item for a resourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission record will be created for the associated assignment when gradingProgress is set to FullyGraded or PendingManual.  The submission score will also be updated when a score object is sent with either of those two values for gradingProgress. If a score object is sent with either of FullyGraded or PendingManual as the value for gradingProgress and scoreGiven is missing, the assignment will not be graded. This also supposes the line_item meets the condition to create a submission.  A submission comment with an unknown author will be created when the comment value is included. This also supposes the line_item meets the condition to create a submission.  It is also possible to submit a file along with this score, which will attach the file to the submission that is created. Files should be formatted as Content Items, with the correct syntax below.  Returns a url pointing to the Result. If any files were submitted, also returns the Content Items which were sent in the request, each with a url pointing to the Progress of the file upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_score(course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str line_item_id: ID (required)
        :param str user_id: The lti_user_id or the Canvas user_id. Returns a 422 if user not found in Canvas or is not a student. (required)
        :param str activity_progress: Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed. (required)
        :param str grading_progress: Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded. (required)
        :param str timestamp: Date and time when the score was modified in the tool. Should use ISO8601-formatted date with subsecond precision. Returns a 400 if the timestamp is earlier than the updated_at time of the Result. (required)
        :param float score_given: The Current score received in the tool for this line item and user, scaled to the scoreMaximum
        :param float score_maximum: Maximum possible score for this result; it must be present if scoreGiven is present. Returns 422 if not present when scoreGiven is present.
        :param str comment: Comment visible to the student about this score.
        :param Object submission: Contains metadata about the submission attempt. Supported fields listed below.
        :param str submission_submitted_at: Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision.
        :param Object httpscanvas_instructure_comltisubmission: (EXTENSION) Optional submission type and data. Fields listed below.
        :param bool httpscanvas_instructure_comltisubmission_new_submission: (EXTENSION field) flag to indicate that this is a new submission. Defaults to true unless submission_type is none.
        :param bool httpscanvas_instructure_comltisubmission_preserve_score: (EXTENSION field) flag to prevent a request from clearing an existing grade for a submission. Defaults to false.
        :param bool httpscanvas_instructure_comltisubmission_prioritize_non_tool_grade: (EXTENSION field) flag to prevent a request from overwriting an existing grade for a submission. Defaults to false.
        :param str httpscanvas_instructure_comltisubmission_submission_type: (EXTENSION field) permissible values are: none, basic_lti_launch, online_text_entry, external_tool, online_upload, or online_url. Defaults to external_tool. Ignored if content_items are provided.
        :param str httpscanvas_instructure_comltisubmission_submission_data: (EXTENSION field) submission data (URL or body text). Only used for submission_types basic_lti_launch, online_text_entry, online_url. Ignored if content_items are provided.
        :param str httpscanvas_instructure_comltisubmission_submitted_at: (EXTENSION field) Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision. This should match the date and time that the original submission happened in Canvas. Use of submission.submittedAt is preferred.
        :param Object httpscanvas_instructure_comltisubmission_content_items: (EXTENSION field) Files that should be included with the submission. Each item should contain `type: file`, and a url pointing to the file. It can also contain a title, and an explicit MIME type if needed (otherwise, MIME type will be inferred from the title or url). If any items are present, submission_type will be online_upload.
        :return: list[ResultUrlStringTheUrlToTheResultThatWasCreated_]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_score_with_http_info(course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.create_score_with_http_info(course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, **kwargs)  # noqa: E501
            return data

    def create_score_with_http_info(self, course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, **kwargs):  # noqa: E501
        """Create a Score  # noqa: E501

        Create a new Result from the score params. If this is for the first created line_item for a resourceLinkId, or it is a line item that is not attached to a resourceLinkId, then a submission record will be created for the associated assignment when gradingProgress is set to FullyGraded or PendingManual.  The submission score will also be updated when a score object is sent with either of those two values for gradingProgress. If a score object is sent with either of FullyGraded or PendingManual as the value for gradingProgress and scoreGiven is missing, the assignment will not be graded. This also supposes the line_item meets the condition to create a submission.  A submission comment with an unknown author will be created when the comment value is included. This also supposes the line_item meets the condition to create a submission.  It is also possible to submit a file along with this score, which will attach the file to the submission that is created. Files should be formatted as Content Items, with the correct syntax below.  Returns a url pointing to the Result. If any files were submitted, also returns the Content Items which were sent in the request, each with a url pointing to the Progress of the file upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_score_with_http_info(course_id, line_item_id, user_id, activity_progress, grading_progress, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str line_item_id: ID (required)
        :param str user_id: The lti_user_id or the Canvas user_id. Returns a 422 if user not found in Canvas or is not a student. (required)
        :param str activity_progress: Indicate to Canvas the status of the user towards the activity's completion. Must be one of Initialized, Started, InProgress, Submitted, Completed. (required)
        :param str grading_progress: Indicate to Canvas the status of the grading process. A value of PendingManual will require intervention by a grader. Values of NotReady, Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded values will require no action. Possible values are NotReady, Failed, Pending, PendingManual, FullyGraded. (required)
        :param str timestamp: Date and time when the score was modified in the tool. Should use ISO8601-formatted date with subsecond precision. Returns a 400 if the timestamp is earlier than the updated_at time of the Result. (required)
        :param float score_given: The Current score received in the tool for this line item and user, scaled to the scoreMaximum
        :param float score_maximum: Maximum possible score for this result; it must be present if scoreGiven is present. Returns 422 if not present when scoreGiven is present.
        :param str comment: Comment visible to the student about this score.
        :param Object submission: Contains metadata about the submission attempt. Supported fields listed below.
        :param str submission_submitted_at: Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision.
        :param Object httpscanvas_instructure_comltisubmission: (EXTENSION) Optional submission type and data. Fields listed below.
        :param bool httpscanvas_instructure_comltisubmission_new_submission: (EXTENSION field) flag to indicate that this is a new submission. Defaults to true unless submission_type is none.
        :param bool httpscanvas_instructure_comltisubmission_preserve_score: (EXTENSION field) flag to prevent a request from clearing an existing grade for a submission. Defaults to false.
        :param bool httpscanvas_instructure_comltisubmission_prioritize_non_tool_grade: (EXTENSION field) flag to prevent a request from overwriting an existing grade for a submission. Defaults to false.
        :param str httpscanvas_instructure_comltisubmission_submission_type: (EXTENSION field) permissible values are: none, basic_lti_launch, online_text_entry, external_tool, online_upload, or online_url. Defaults to external_tool. Ignored if content_items are provided.
        :param str httpscanvas_instructure_comltisubmission_submission_data: (EXTENSION field) submission data (URL or body text). Only used for submission_types basic_lti_launch, online_text_entry, online_url. Ignored if content_items are provided.
        :param str httpscanvas_instructure_comltisubmission_submitted_at: (EXTENSION field) Date and time that the submission was originally created. Should use ISO8601-formatted date with subsecond precision. This should match the date and time that the original submission happened in Canvas. Use of submission.submittedAt is preferred.
        :param Object httpscanvas_instructure_comltisubmission_content_items: (EXTENSION field) Files that should be included with the submission. Each item should contain `type: file`, and a url pointing to the file. It can also contain a title, and an explicit MIME type if needed (otherwise, MIME type will be inferred from the title or url). If any items are present, submission_type will be online_upload.
        :return: list[ResultUrlStringTheUrlToTheResultThatWasCreated_]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'line_item_id', 'user_id', 'activity_progress', 'grading_progress', 'timestamp', 'score_given', 'score_maximum', 'comment', 'submission', 'submission_submitted_at', 'httpscanvas_instructure_comltisubmission', 'httpscanvas_instructure_comltisubmission_new_submission', 'httpscanvas_instructure_comltisubmission_preserve_score', 'httpscanvas_instructure_comltisubmission_prioritize_non_tool_grade', 'httpscanvas_instructure_comltisubmission_submission_type', 'httpscanvas_instructure_comltisubmission_submission_data', 'httpscanvas_instructure_comltisubmission_submitted_at', 'httpscanvas_instructure_comltisubmission_content_items']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_score" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_score`")  # noqa: E501
        # verify the required parameter 'line_item_id' is set
        if self.api_client.client_side_validation and ('line_item_id' not in params or
                                                       params['line_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `line_item_id` when calling `create_score`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `create_score`")  # noqa: E501
        # verify the required parameter 'activity_progress' is set
        if self.api_client.client_side_validation and ('activity_progress' not in params or
                                                       params['activity_progress'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `activity_progress` when calling `create_score`")  # noqa: E501
        # verify the required parameter 'grading_progress' is set
        if self.api_client.client_side_validation and ('grading_progress' not in params or
                                                       params['grading_progress'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `grading_progress` when calling `create_score`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if self.api_client.client_side_validation and ('timestamp' not in params or
                                                       params['timestamp'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `timestamp` when calling `create_score`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'line_item_id' in params:
            path_params['line_item_id'] = params['line_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_id' in params:
            form_params.append(('userId', params['user_id']))  # noqa: E501
        if 'activity_progress' in params:
            form_params.append(('activityProgress', params['activity_progress']))  # noqa: E501
        if 'grading_progress' in params:
            form_params.append(('gradingProgress', params['grading_progress']))  # noqa: E501
        if 'timestamp' in params:
            form_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'score_given' in params:
            form_params.append(('scoreGiven', params['score_given']))  # noqa: E501
        if 'score_maximum' in params:
            form_params.append(('scoreMaximum', params['score_maximum']))  # noqa: E501
        if 'comment' in params:
            form_params.append(('comment', params['comment']))  # noqa: E501
        if 'submission' in params:
            form_params.append(('submission', params['submission']))  # noqa: E501
        if 'submission_submitted_at' in params:
            form_params.append(('submission[submittedAt]', params['submission_submitted_at']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission', params['httpscanvas_instructure_comltisubmission']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_new_submission' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[new_submission]', params['httpscanvas_instructure_comltisubmission_new_submission']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_preserve_score' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[preserve_score]', params['httpscanvas_instructure_comltisubmission_preserve_score']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_prioritize_non_tool_grade' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[prioritize_non_tool_grade]', params['httpscanvas_instructure_comltisubmission_prioritize_non_tool_grade']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_submission_type' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[submission_type]', params['httpscanvas_instructure_comltisubmission_submission_type']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_submission_data' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[submission_data]', params['httpscanvas_instructure_comltisubmission_submission_data']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_submitted_at' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[submitted_at]', params['httpscanvas_instructure_comltisubmission_submitted_at']))  # noqa: E501
        if 'httpscanvas_instructure_comltisubmission_content_items' in params:
            form_params.append(('https://canvas.instructure.com/lti/submission[content_items]', params['httpscanvas_instructure_comltisubmission_content_items']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/courses/{course_id}/line_items/{line_item_id}/scores', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ResultUrlStringTheUrlToTheResultThatWasCreated_]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
