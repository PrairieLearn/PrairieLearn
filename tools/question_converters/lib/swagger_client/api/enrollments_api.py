# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EnrollmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accept_course_invitation(self, course_id, id, **kwargs):  # noqa: E501
        """Accept Course Invitation  # noqa: E501

        accepts a pending course invitation for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_course_invitation(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_course_invitation_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_course_invitation_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def accept_course_invitation_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Accept Course Invitation  # noqa: E501

        accepts a pending course invitation for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_course_invitation_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_course_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `accept_course_invitation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `accept_course_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments/{id}/accept', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_last_attended_date(self, course_id, user_id, **kwargs):  # noqa: E501
        """Add last attended date  # noqa: E501

        Add last attended date to student enrollment in course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_last_attended_date(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :param Object _date: The last attended date of a student enrollment in a course.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_last_attended_date_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_last_attended_date_with_http_info(course_id, user_id, **kwargs)  # noqa: E501
            return data

    def add_last_attended_date_with_http_info(self, course_id, user_id, **kwargs):  # noqa: E501
        """Add last attended date  # noqa: E501

        Add last attended date to student enrollment in course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_last_attended_date_with_http_info(course_id, user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str user_id: ID (required)
        :param Object _date: The last attended date of a student enrollment in a course.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_id', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_last_attended_date" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `add_last_attended_date`")  # noqa: E501
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `add_last_attended_date`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if '_date' in params:
            form_params.append(('date', params['_date']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/users/{user_id}/last_attended', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def conclude_deactivate_or_delete_enrollment(self, course_id, id, **kwargs):  # noqa: E501
        """Conclude, deactivate, or delete an enrollment  # noqa: E501

        Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment will be concluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conclude_deactivate_or_delete_enrollment(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str task: The action to take on the enrollment. When inactive, a user will still appear in the course roster to admins, but be unable to participate. (\"inactivate\" and \"deactivate\" are equivalent tasks)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.conclude_deactivate_or_delete_enrollment_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.conclude_deactivate_or_delete_enrollment_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def conclude_deactivate_or_delete_enrollment_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Conclude, deactivate, or delete an enrollment  # noqa: E501

        Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment will be concluded.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.conclude_deactivate_or_delete_enrollment_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str task: The action to take on the enrollment. When inactive, a user will still appear in the course roster to admins, but be unable to participate. (\"inactivate\" and \"deactivate\" are equivalent tasks)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method conclude_deactivate_or_delete_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `conclude_deactivate_or_delete_enrollment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `conclude_deactivate_or_delete_enrollment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'task' in params:
            query_params.append(('task', params['task']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enroll_user_courses(self, course_id, enrollment_user_id, enrollment_type, **kwargs):  # noqa: E501
        """Enroll a user  # noqa: E501

        Create a new user enrollment for a course or section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_courses(course_id, enrollment_user_id, enrollment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str enrollment_user_id: The ID of the user to be enrolled in the course. (required)
        :param str enrollment_type: Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used. (required)
        :param Object enrollment_start_at: The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_end_at: The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_role: Assigns a custom course-level role to the user.
        :param int enrollment_role_id: Assigns a custom course-level role to the user.
        :param str enrollment_enrollment_state: If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'.  If set to 'inactive', student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.
        :param int enrollment_course_section_id: The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.
        :param bool enrollment_limit_privileges_to_course_section: If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id. * For teachers and TAs, this includes grading privileges. * Section-limited students will not see any users (including teachers   and TAs) not enrolled in their sections. * Users may have other enrollments that grant privileges to   multiple sections in the same course.
        :param bool enrollment_notify: If true, a notification will be sent to the enrolled user. Notifications are not sent by default.
        :param str enrollment_self_enrollment_code: If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.
        :param bool enrollment_self_enrolled: If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.
        :param int enrollment_associated_user_id: For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student's enrollments (for example, as a parent), please use the {api:UserObserveesController#create User Observees API}.
        :param str enrollment_sis_user_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str enrollment_integration_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str root_account: The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enroll_user_courses_with_http_info(course_id, enrollment_user_id, enrollment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.enroll_user_courses_with_http_info(course_id, enrollment_user_id, enrollment_type, **kwargs)  # noqa: E501
            return data

    def enroll_user_courses_with_http_info(self, course_id, enrollment_user_id, enrollment_type, **kwargs):  # noqa: E501
        """Enroll a user  # noqa: E501

        Create a new user enrollment for a course or section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_courses_with_http_info(course_id, enrollment_user_id, enrollment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str enrollment_user_id: The ID of the user to be enrolled in the course. (required)
        :param str enrollment_type: Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used. (required)
        :param Object enrollment_start_at: The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_end_at: The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_role: Assigns a custom course-level role to the user.
        :param int enrollment_role_id: Assigns a custom course-level role to the user.
        :param str enrollment_enrollment_state: If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'.  If set to 'inactive', student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.
        :param int enrollment_course_section_id: The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.
        :param bool enrollment_limit_privileges_to_course_section: If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id. * For teachers and TAs, this includes grading privileges. * Section-limited students will not see any users (including teachers   and TAs) not enrolled in their sections. * Users may have other enrollments that grant privileges to   multiple sections in the same course.
        :param bool enrollment_notify: If true, a notification will be sent to the enrolled user. Notifications are not sent by default.
        :param str enrollment_self_enrollment_code: If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.
        :param bool enrollment_self_enrolled: If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.
        :param int enrollment_associated_user_id: For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student's enrollments (for example, as a parent), please use the {api:UserObserveesController#create User Observees API}.
        :param str enrollment_sis_user_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str enrollment_integration_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str root_account: The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'enrollment_user_id', 'enrollment_type', 'enrollment_start_at', 'enrollment_end_at', 'enrollment_role', 'enrollment_role_id', 'enrollment_enrollment_state', 'enrollment_course_section_id', 'enrollment_limit_privileges_to_course_section', 'enrollment_notify', 'enrollment_self_enrollment_code', 'enrollment_self_enrolled', 'enrollment_associated_user_id', 'enrollment_sis_user_id', 'enrollment_integration_id', 'root_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enroll_user_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `enroll_user_courses`")  # noqa: E501
        # verify the required parameter 'enrollment_user_id' is set
        if self.api_client.client_side_validation and ('enrollment_user_id' not in params or
                                                       params['enrollment_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollment_user_id` when calling `enroll_user_courses`")  # noqa: E501
        # verify the required parameter 'enrollment_type' is set
        if self.api_client.client_side_validation and ('enrollment_type' not in params or
                                                       params['enrollment_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollment_type` when calling `enroll_user_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_start_at' in params:
            form_params.append(('enrollment[start_at]', params['enrollment_start_at']))  # noqa: E501
        if 'enrollment_end_at' in params:
            form_params.append(('enrollment[end_at]', params['enrollment_end_at']))  # noqa: E501
        if 'enrollment_user_id' in params:
            form_params.append(('enrollment[user_id]', params['enrollment_user_id']))  # noqa: E501
        if 'enrollment_type' in params:
            form_params.append(('enrollment[type]', params['enrollment_type']))  # noqa: E501
        if 'enrollment_role' in params:
            form_params.append(('enrollment[role]', params['enrollment_role']))  # noqa: E501
        if 'enrollment_role_id' in params:
            form_params.append(('enrollment[role_id]', params['enrollment_role_id']))  # noqa: E501
        if 'enrollment_enrollment_state' in params:
            form_params.append(('enrollment[enrollment_state]', params['enrollment_enrollment_state']))  # noqa: E501
        if 'enrollment_course_section_id' in params:
            form_params.append(('enrollment[course_section_id]', params['enrollment_course_section_id']))  # noqa: E501
        if 'enrollment_limit_privileges_to_course_section' in params:
            form_params.append(('enrollment[limit_privileges_to_course_section]', params['enrollment_limit_privileges_to_course_section']))  # noqa: E501
        if 'enrollment_notify' in params:
            form_params.append(('enrollment[notify]', params['enrollment_notify']))  # noqa: E501
        if 'enrollment_self_enrollment_code' in params:
            form_params.append(('enrollment[self_enrollment_code]', params['enrollment_self_enrollment_code']))  # noqa: E501
        if 'enrollment_self_enrolled' in params:
            form_params.append(('enrollment[self_enrolled]', params['enrollment_self_enrolled']))  # noqa: E501
        if 'enrollment_associated_user_id' in params:
            form_params.append(('enrollment[associated_user_id]', params['enrollment_associated_user_id']))  # noqa: E501
        if 'enrollment_sis_user_id' in params:
            form_params.append(('enrollment[sis_user_id]', params['enrollment_sis_user_id']))  # noqa: E501
        if 'enrollment_integration_id' in params:
            form_params.append(('enrollment[integration_id]', params['enrollment_integration_id']))  # noqa: E501
        if 'root_account' in params:
            form_params.append(('root_account', params['root_account']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enroll_user_sections(self, section_id, enrollment_user_id, enrollment_type, **kwargs):  # noqa: E501
        """Enroll a user  # noqa: E501

        Create a new user enrollment for a course or section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_sections(section_id, enrollment_user_id, enrollment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str enrollment_user_id: The ID of the user to be enrolled in the course. (required)
        :param str enrollment_type: Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used. (required)
        :param Object enrollment_start_at: The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_end_at: The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_role: Assigns a custom course-level role to the user.
        :param int enrollment_role_id: Assigns a custom course-level role to the user.
        :param str enrollment_enrollment_state: If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'.  If set to 'inactive', student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.
        :param int enrollment_course_section_id: The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.
        :param bool enrollment_limit_privileges_to_course_section: If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id. * For teachers and TAs, this includes grading privileges. * Section-limited students will not see any users (including teachers   and TAs) not enrolled in their sections. * Users may have other enrollments that grant privileges to   multiple sections in the same course.
        :param bool enrollment_notify: If true, a notification will be sent to the enrolled user. Notifications are not sent by default.
        :param str enrollment_self_enrollment_code: If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.
        :param bool enrollment_self_enrolled: If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.
        :param int enrollment_associated_user_id: For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student's enrollments (for example, as a parent), please use the {api:UserObserveesController#create User Observees API}.
        :param str enrollment_sis_user_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str enrollment_integration_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str root_account: The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enroll_user_sections_with_http_info(section_id, enrollment_user_id, enrollment_type, **kwargs)  # noqa: E501
        else:
            (data) = self.enroll_user_sections_with_http_info(section_id, enrollment_user_id, enrollment_type, **kwargs)  # noqa: E501
            return data

    def enroll_user_sections_with_http_info(self, section_id, enrollment_user_id, enrollment_type, **kwargs):  # noqa: E501
        """Enroll a user  # noqa: E501

        Create a new user enrollment for a course or section.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enroll_user_sections_with_http_info(section_id, enrollment_user_id, enrollment_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param str enrollment_user_id: The ID of the user to be enrolled in the course. (required)
        :param str enrollment_type: Enroll the user as a student, teacher, TA, observer, or designer. If no value is given, the type will be inferred by enrollment[role] if supplied, otherwise 'StudentEnrollment' will be used. (required)
        :param Object enrollment_start_at: The start time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_end_at: The end time of the enrollment, in ISO8601 format. e.g. 2012-04-18T23:08:51Z
        :param Object enrollment_role: Assigns a custom course-level role to the user.
        :param int enrollment_role_id: Assigns a custom course-level role to the user.
        :param str enrollment_enrollment_state: If set to 'active,' student will be immediately enrolled in the course. Otherwise they will be required to accept a course invitation. Default is 'invited.'.  If set to 'inactive', student will be listed in the course roster for teachers, but will not be able to participate in the course until their enrollment is activated.
        :param int enrollment_course_section_id: The ID of the course section to enroll the student in. If the section-specific URL is used, this argument is redundant and will be ignored.
        :param bool enrollment_limit_privileges_to_course_section: If set, the enrollment will only allow the user to see and interact with users enrolled in the section given by course_section_id. * For teachers and TAs, this includes grading privileges. * Section-limited students will not see any users (including teachers   and TAs) not enrolled in their sections. * Users may have other enrollments that grant privileges to   multiple sections in the same course.
        :param bool enrollment_notify: If true, a notification will be sent to the enrolled user. Notifications are not sent by default.
        :param str enrollment_self_enrollment_code: If the current user is not allowed to manage enrollments in this course, but the course allows self-enrollment, the user can self- enroll as a student in the default section by passing in a valid code. When self-enrolling, the user_id must be 'self'. The enrollment_state will be set to 'active' and all other arguments will be ignored.
        :param bool enrollment_self_enrolled: If true, marks the enrollment as a self-enrollment, which gives students the ability to drop the course if desired. Defaults to false.
        :param int enrollment_associated_user_id: For an observer enrollment, the ID of a student to observe. This is a one-off operation; to automatically observe all a student's enrollments (for example, as a parent), please use the {api:UserObserveesController#create User Observees API}.
        :param str enrollment_sis_user_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (sis_user_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str enrollment_integration_id: Required if the user is being enrolled from another trusted account. The unique identifier for the user (integration_id) must also be accompanied by the root_account parameter. The user_id will be ignored.
        :param str root_account: The domain of the account to search for the user. Will be a no-op unless the sis_user_id or integration_id parameter is also included.
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'enrollment_user_id', 'enrollment_type', 'enrollment_start_at', 'enrollment_end_at', 'enrollment_role', 'enrollment_role_id', 'enrollment_enrollment_state', 'enrollment_course_section_id', 'enrollment_limit_privileges_to_course_section', 'enrollment_notify', 'enrollment_self_enrollment_code', 'enrollment_self_enrolled', 'enrollment_associated_user_id', 'enrollment_sis_user_id', 'enrollment_integration_id', 'root_account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enroll_user_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `enroll_user_sections`")  # noqa: E501
        # verify the required parameter 'enrollment_user_id' is set
        if self.api_client.client_side_validation and ('enrollment_user_id' not in params or
                                                       params['enrollment_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollment_user_id` when calling `enroll_user_sections`")  # noqa: E501
        # verify the required parameter 'enrollment_type' is set
        if self.api_client.client_side_validation and ('enrollment_type' not in params or
                                                       params['enrollment_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `enrollment_type` when calling `enroll_user_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'enrollment_start_at' in params:
            form_params.append(('enrollment[start_at]', params['enrollment_start_at']))  # noqa: E501
        if 'enrollment_end_at' in params:
            form_params.append(('enrollment[end_at]', params['enrollment_end_at']))  # noqa: E501
        if 'enrollment_user_id' in params:
            form_params.append(('enrollment[user_id]', params['enrollment_user_id']))  # noqa: E501
        if 'enrollment_type' in params:
            form_params.append(('enrollment[type]', params['enrollment_type']))  # noqa: E501
        if 'enrollment_role' in params:
            form_params.append(('enrollment[role]', params['enrollment_role']))  # noqa: E501
        if 'enrollment_role_id' in params:
            form_params.append(('enrollment[role_id]', params['enrollment_role_id']))  # noqa: E501
        if 'enrollment_enrollment_state' in params:
            form_params.append(('enrollment[enrollment_state]', params['enrollment_enrollment_state']))  # noqa: E501
        if 'enrollment_course_section_id' in params:
            form_params.append(('enrollment[course_section_id]', params['enrollment_course_section_id']))  # noqa: E501
        if 'enrollment_limit_privileges_to_course_section' in params:
            form_params.append(('enrollment[limit_privileges_to_course_section]', params['enrollment_limit_privileges_to_course_section']))  # noqa: E501
        if 'enrollment_notify' in params:
            form_params.append(('enrollment[notify]', params['enrollment_notify']))  # noqa: E501
        if 'enrollment_self_enrollment_code' in params:
            form_params.append(('enrollment[self_enrollment_code]', params['enrollment_self_enrollment_code']))  # noqa: E501
        if 'enrollment_self_enrolled' in params:
            form_params.append(('enrollment[self_enrolled]', params['enrollment_self_enrolled']))  # noqa: E501
        if 'enrollment_associated_user_id' in params:
            form_params.append(('enrollment[associated_user_id]', params['enrollment_associated_user_id']))  # noqa: E501
        if 'enrollment_sis_user_id' in params:
            form_params.append(('enrollment[sis_user_id]', params['enrollment_sis_user_id']))  # noqa: E501
        if 'enrollment_integration_id' in params:
            form_params.append(('enrollment[integration_id]', params['enrollment_integration_id']))  # noqa: E501
        if 'root_account' in params:
            form_params.append(('root_account', params['root_account']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/enrollments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enrollment_by_id(self, account_id, id, **kwargs):  # noqa: E501
        """Enrollment by ID  # noqa: E501

        Get an Enrollment object by Enrollment ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_by_id(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param int id: The ID of the enrollment object (required)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enrollment_by_id_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.enrollment_by_id_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def enrollment_by_id_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Enrollment by ID  # noqa: E501

        Get an Enrollment object by Enrollment ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enrollment_by_id_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param int id: The ID of the enrollment object (required)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enrollment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `enrollment_by_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `enrollment_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/enrollments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_enrollments_courses(self, course_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_enrollments_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_enrollments_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_enrollments_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'type', 'role', 'state', 'include', 'user_id', 'grading_period_id', 'enrollment_term_id', 'sis_account_id', 'sis_course_id', 'sis_section_id', 'sis_user_id', 'created_for_sis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_enrollments_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_enrollments_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'csv'  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
            collection_formats['role'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'enrollment_term_id' in params:
            query_params.append(('enrollment_term_id', params['enrollment_term_id']))  # noqa: E501
        if 'sis_account_id' in params:
            query_params.append(('sis_account_id', params['sis_account_id']))  # noqa: E501
            collection_formats['sis_account_id'] = 'csv'  # noqa: E501
        if 'sis_course_id' in params:
            query_params.append(('sis_course_id', params['sis_course_id']))  # noqa: E501
            collection_formats['sis_course_id'] = 'csv'  # noqa: E501
        if 'sis_section_id' in params:
            query_params.append(('sis_section_id', params['sis_section_id']))  # noqa: E501
            collection_formats['sis_section_id'] = 'csv'  # noqa: E501
        if 'sis_user_id' in params:
            query_params.append(('sis_user_id', params['sis_user_id']))  # noqa: E501
            collection_formats['sis_user_id'] = 'csv'  # noqa: E501
        if 'created_for_sis_id' in params:
            query_params.append(('created_for_sis_id', params['created_for_sis_id']))  # noqa: E501
            collection_formats['created_for_sis_id'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Enrollment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_enrollments_sections(self, section_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_sections(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_enrollments_sections_with_http_info(section_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_enrollments_sections_with_http_info(section_id, **kwargs)  # noqa: E501
            return data

    def list_enrollments_sections_with_http_info(self, section_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_sections_with_http_info(section_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str section_id: ID (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['section_id', 'type', 'role', 'state', 'include', 'user_id', 'grading_period_id', 'enrollment_term_id', 'sis_account_id', 'sis_course_id', 'sis_section_id', 'sis_user_id', 'created_for_sis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_enrollments_sections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'section_id' is set
        if self.api_client.client_side_validation and ('section_id' not in params or
                                                       params['section_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `section_id` when calling `list_enrollments_sections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'section_id' in params:
            path_params['section_id'] = params['section_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'csv'  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
            collection_formats['role'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'enrollment_term_id' in params:
            query_params.append(('enrollment_term_id', params['enrollment_term_id']))  # noqa: E501
        if 'sis_account_id' in params:
            query_params.append(('sis_account_id', params['sis_account_id']))  # noqa: E501
            collection_formats['sis_account_id'] = 'csv'  # noqa: E501
        if 'sis_course_id' in params:
            query_params.append(('sis_course_id', params['sis_course_id']))  # noqa: E501
            collection_formats['sis_course_id'] = 'csv'  # noqa: E501
        if 'sis_section_id' in params:
            query_params.append(('sis_section_id', params['sis_section_id']))  # noqa: E501
            collection_formats['sis_section_id'] = 'csv'  # noqa: E501
        if 'sis_user_id' in params:
            query_params.append(('sis_user_id', params['sis_user_id']))  # noqa: E501
            collection_formats['sis_user_id'] = 'csv'  # noqa: E501
        if 'created_for_sis_id' in params:
            query_params.append(('created_for_sis_id', params['created_for_sis_id']))  # noqa: E501
            collection_formats['created_for_sis_id'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/sections/{section_id}/enrollments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Enrollment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_enrollments_users(self, user_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_users(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster. (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_enrollments_users_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_enrollments_users_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_enrollments_users_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List enrollments  # noqa: E501

        Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments.  If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately.  note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.  Enrollments scoped to a course context will include inactive states by default if the caller has account admin authorization and the state[] parameter is omitted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_enrollments_users_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster. (required)
        :param list[str] type: A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.
        :param list[str] role: A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.
        :param list[str] state: Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. The following synthetic states are supported only when querying a user's enrollments (either via user_id argument or via user enrollments endpoint): +current_and_invited+, +current_and_future+, +current_future_and_restricted+, +current_and_concluded+
        :param list[str] include: Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record. If \"current_points\" is specified, the fields \"current_points\" and (if the caller has permissions to manage grades) \"unposted_current_points\" will be included in the \"grades\" hash for student enrollments.
        :param int grading_period_id: Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.
        :param int enrollment_term_id: Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.
        :param list[str] sis_account_id: Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.
        :param list[str] sis_course_id: Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.
        :param list[str] sis_section_id: Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.
        :param list[str] sis_user_id: Returns only enrollments for the specified SIS user ID(s). May pass in array or string.
        :param list[bool] created_for_sis_id: If sis_user_id is present and created_for_sis_id is true, Returns only enrollments for the specified SIS ID(s). If a user has two sis_id's, one enrollment may be created using one of the two ids. This would limit the enrollments returned from the endpoint to enrollments that were created from a sis_import with that sis_user_id
        :return: list[Enrollment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'role', 'state', 'include', 'grading_period_id', 'enrollment_term_id', 'sis_account_id', 'sis_course_id', 'sis_section_id', 'sis_user_id', 'created_for_sis_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_enrollments_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_enrollments_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
            collection_formats['type'] = 'csv'  # noqa: E501
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
            collection_formats['role'] = 'csv'  # noqa: E501
        if 'state' in params:
            query_params.append(('state', params['state']))  # noqa: E501
            collection_formats['state'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'grading_period_id' in params:
            query_params.append(('grading_period_id', params['grading_period_id']))  # noqa: E501
        if 'enrollment_term_id' in params:
            query_params.append(('enrollment_term_id', params['enrollment_term_id']))  # noqa: E501
        if 'sis_account_id' in params:
            query_params.append(('sis_account_id', params['sis_account_id']))  # noqa: E501
            collection_formats['sis_account_id'] = 'csv'  # noqa: E501
        if 'sis_course_id' in params:
            query_params.append(('sis_course_id', params['sis_course_id']))  # noqa: E501
            collection_formats['sis_course_id'] = 'csv'  # noqa: E501
        if 'sis_section_id' in params:
            query_params.append(('sis_section_id', params['sis_section_id']))  # noqa: E501
            collection_formats['sis_section_id'] = 'csv'  # noqa: E501
        if 'sis_user_id' in params:
            query_params.append(('sis_user_id', params['sis_user_id']))  # noqa: E501
            collection_formats['sis_user_id'] = 'csv'  # noqa: E501
        if 'created_for_sis_id' in params:
            query_params.append(('created_for_sis_id', params['created_for_sis_id']))  # noqa: E501
            collection_formats['created_for_sis_id'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/enrollments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Enrollment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def re_activate_enrollment(self, course_id, id, **kwargs):  # noqa: E501
        """Re-activate an enrollment  # noqa: E501

        Activates an inactive enrollment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.re_activate_enrollment(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.re_activate_enrollment_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.re_activate_enrollment_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def re_activate_enrollment_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Re-activate an enrollment  # noqa: E501

        Activates an inactive enrollment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.re_activate_enrollment_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Enrollment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method re_activate_enrollment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `re_activate_enrollment`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `re_activate_enrollment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments/{id}/reactivate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Enrollment',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reject_course_invitation(self, course_id, id, **kwargs):  # noqa: E501
        """Reject Course Invitation  # noqa: E501

        rejects a pending course invitation for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_course_invitation(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reject_course_invitation_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.reject_course_invitation_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def reject_course_invitation_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Reject Course Invitation  # noqa: E501

        rejects a pending course invitation for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reject_course_invitation_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reject_course_invitation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `reject_course_invitation`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `reject_course_invitation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/enrollments/{id}/reject', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_temporary_enrollment_recipient_and_provider_status(self, user_id, **kwargs):  # noqa: E501
        """Show Temporary Enrollment recipient and provider status  # noqa: E501

        Returns a JSON Object containing the temporary enrollment status for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_temporary_enrollment_recipient_and_provider_status(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str account_id: The ID of the account to check for temporary enrollment status. Defaults to the domain root account if not provided.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_temporary_enrollment_recipient_and_provider_status_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_temporary_enrollment_recipient_and_provider_status_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def show_temporary_enrollment_recipient_and_provider_status_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Show Temporary Enrollment recipient and provider status  # noqa: E501

        Returns a JSON Object containing the temporary enrollment status for a user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_temporary_enrollment_recipient_and_provider_status_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str account_id: The ID of the account to check for temporary enrollment status. Defaults to the domain root account if not provided.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_temporary_enrollment_recipient_and_provider_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `show_temporary_enrollment_recipient_and_provider_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'account_id' in params:
            query_params.append(('account_id', params['account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/temporary_enrollment_status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
