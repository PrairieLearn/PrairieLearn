# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProficiencyRatingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_update_proficiency_ratings_accounts(self, account_id, **kwargs):  # noqa: E501
        """Create/update proficiency ratings  # noqa: E501

        Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_update_proficiency_ratings_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] ratings_description: The description of the rating level.
        :param list[int] ratings_points: The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.
        :param list[int] ratings_mastery: Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.
        :param list[int] ratings_color: The color associated with the rating level. Should be a hex color code like '00FFFF'.
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_update_proficiency_ratings_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_update_proficiency_ratings_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def create_update_proficiency_ratings_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Create/update proficiency ratings  # noqa: E501

        Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_update_proficiency_ratings_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param list[str] ratings_description: The description of the rating level.
        :param list[int] ratings_points: The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.
        :param list[int] ratings_mastery: Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.
        :param list[int] ratings_color: The color associated with the rating level. Should be a hex color code like '00FFFF'.
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'ratings_description', 'ratings_points', 'ratings_mastery', 'ratings_color']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_update_proficiency_ratings_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `create_update_proficiency_ratings_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'ratings_mastery' in params:
            form_params.append(('ratings[mastery]', params['ratings_mastery']))  # noqa: E501
            collection_formats['ratings[mastery]'] = 'csv'  # noqa: E501
        if 'ratings_color' in params:
            form_params.append(('ratings[color]', params['ratings_color']))  # noqa: E501
            collection_formats['ratings[color]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_proficiency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Proficiency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_update_proficiency_ratings_courses(self, course_id, **kwargs):  # noqa: E501
        """Create/update proficiency ratings  # noqa: E501

        Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_update_proficiency_ratings_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] ratings_description: The description of the rating level.
        :param list[int] ratings_points: The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.
        :param list[int] ratings_mastery: Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.
        :param list[int] ratings_color: The color associated with the rating level. Should be a hex color code like '00FFFF'.
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_update_proficiency_ratings_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_update_proficiency_ratings_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_update_proficiency_ratings_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create/update proficiency ratings  # noqa: E501

        Create or update account-level proficiency ratings. These ratings will apply to all sub-accounts, unless they have their own account-level proficiency ratings defined.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_update_proficiency_ratings_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[str] ratings_description: The description of the rating level.
        :param list[int] ratings_points: The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.
        :param list[int] ratings_mastery: Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.
        :param list[int] ratings_color: The color associated with the rating level. Should be a hex color code like '00FFFF'.
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'ratings_description', 'ratings_points', 'ratings_mastery', 'ratings_color']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_update_proficiency_ratings_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_update_proficiency_ratings_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ratings_description' in params:
            form_params.append(('ratings[description]', params['ratings_description']))  # noqa: E501
            collection_formats['ratings[description]'] = 'csv'  # noqa: E501
        if 'ratings_points' in params:
            form_params.append(('ratings[points]', params['ratings_points']))  # noqa: E501
            collection_formats['ratings[points]'] = 'csv'  # noqa: E501
        if 'ratings_mastery' in params:
            form_params.append(('ratings[mastery]', params['ratings_mastery']))  # noqa: E501
            collection_formats['ratings[mastery]'] = 'csv'  # noqa: E501
        if 'ratings_color' in params:
            form_params.append(('ratings[color]', params['ratings_color']))  # noqa: E501
            collection_formats['ratings[color]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_proficiency', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Proficiency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_proficiency_ratings_accounts(self, account_id, **kwargs):  # noqa: E501
        """Get proficiency ratings  # noqa: E501

        Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found.    Examples:     curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\         -H 'Authorization: Bearer <token>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proficiency_ratings_accounts(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_proficiency_ratings_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_proficiency_ratings_accounts_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_proficiency_ratings_accounts_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get proficiency ratings  # noqa: E501

        Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found.    Examples:     curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\         -H 'Authorization: Bearer <token>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proficiency_ratings_accounts_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_proficiency_ratings_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_proficiency_ratings_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/outcome_proficiency', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Proficiency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_proficiency_ratings_courses(self, course_id, **kwargs):  # noqa: E501
        """Get proficiency ratings  # noqa: E501

        Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found.    Examples:     curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\         -H 'Authorization: Bearer <token>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proficiency_ratings_courses(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_proficiency_ratings_courses_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_proficiency_ratings_courses_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_proficiency_ratings_courses_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get proficiency ratings  # noqa: E501

        Get account-level proficiency ratings. If not defined for this account, it will return proficiency ratings for the nearest super-account with ratings defined. Will return 404 if none found.    Examples:     curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\         -H 'Authorization: Bearer <token>'  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_proficiency_ratings_courses_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: Proficiency
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_proficiency_ratings_courses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_proficiency_ratings_courses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_proficiency', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Proficiency',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
