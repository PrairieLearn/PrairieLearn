# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EPortfoliosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_eportfolio(self, id, **kwargs):  # noqa: E501
        """Delete an ePortfolio  # noqa: E501

        Mark an ePortfolio as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_eportfolio(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_eportfolio_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_eportfolio_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_eportfolio_with_http_info(self, id, **kwargs):  # noqa: E501
        """Delete an ePortfolio  # noqa: E501

        Mark an ePortfolio as deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_eportfolio_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_eportfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_eportfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/eportfolios/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EPortfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_eportfolios_for_user(self, user_id, **kwargs):  # noqa: E501
        """Get all ePortfolios for a User  # noqa: E501

        Get a list of all ePortfolios for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_eportfolios_for_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: deleted:: Include deleted ePortfolios. Only available to admins who can moderate_user_content.
        :return: list[EPortfolio]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_eportfolios_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_eportfolios_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def get_all_eportfolios_for_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get all ePortfolios for a User  # noqa: E501

        Get a list of all ePortfolios for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_eportfolios_for_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param list[str] include: deleted:: Include deleted ePortfolios. Only available to admins who can moderate_user_content.
        :return: list[EPortfolio]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_eportfolios_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `get_all_eportfolios_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/eportfolios', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EPortfolio]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_eportfolio(self, id, **kwargs):  # noqa: E501
        """Get an ePortfolio  # noqa: E501

        Get details for a single ePortfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eportfolio(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_eportfolio_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_eportfolio_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_eportfolio_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an ePortfolio  # noqa: E501

        Get details for a single ePortfolio.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eportfolio_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_eportfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_eportfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/eportfolios/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EPortfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_eportfolio_pages(self, eportfolio_id, **kwargs):  # noqa: E501
        """Get ePortfolio Pages  # noqa: E501

        Get details for the pages of an ePortfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eportfolio_pages(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :return: list[EPortfolioPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_eportfolio_pages_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_eportfolio_pages_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
            return data

    def get_eportfolio_pages_with_http_info(self, eportfolio_id, **kwargs):  # noqa: E501
        """Get ePortfolio Pages  # noqa: E501

        Get details for the pages of an ePortfolio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_eportfolio_pages_with_http_info(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :return: list[EPortfolioPage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eportfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_eportfolio_pages" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eportfolio_id' is set
        if self.api_client.client_side_validation and ('eportfolio_id' not in params or
                                                       params['eportfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `eportfolio_id` when calling `get_eportfolio_pages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'eportfolio_id' in params:
            path_params['eportfolio_id'] = params['eportfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/eportfolios/{eportfolio_id}/pages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EPortfolioPage]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def moderate_all_eportfolios_for_user(self, user_id, **kwargs):  # noqa: E501
        """Moderate all ePortfolios for a User  # noqa: E501

        Update the spam_status for all active eportfolios of a user. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.moderate_all_eportfolios_for_user(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str spam_status: The spam status for all the ePortfolios
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.moderate_all_eportfolios_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.moderate_all_eportfolios_for_user_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def moderate_all_eportfolios_for_user_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Moderate all ePortfolios for a User  # noqa: E501

        Update the spam_status for all active eportfolios of a user. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.moderate_all_eportfolios_for_user_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str spam_status: The spam status for all the ePortfolios
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'spam_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method moderate_all_eportfolios_for_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `moderate_all_eportfolios_for_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'spam_status' in params:
            form_params.append(('spam_status', params['spam_status']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/eportfolios', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def moderate_eportfolio(self, eportfolio_id, **kwargs):  # noqa: E501
        """Moderate an ePortfolio  # noqa: E501

        Update the spam_status of an eportfolio. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.moderate_eportfolio(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :param str spam_status: The spam status for the ePortfolio
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.moderate_eportfolio_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.moderate_eportfolio_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
            return data

    def moderate_eportfolio_with_http_info(self, eportfolio_id, **kwargs):  # noqa: E501
        """Moderate an ePortfolio  # noqa: E501

        Update the spam_status of an eportfolio. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.moderate_eportfolio_with_http_info(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :param str spam_status: The spam status for the ePortfolio
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eportfolio_id', 'spam_status']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method moderate_eportfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eportfolio_id' is set
        if self.api_client.client_side_validation and ('eportfolio_id' not in params or
                                                       params['eportfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `eportfolio_id` when calling `moderate_eportfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'eportfolio_id' in params:
            path_params['eportfolio_id'] = params['eportfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'spam_status' in params:
            form_params.append(('spam_status', params['spam_status']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/eportfolios/{eportfolio_id}/moderate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EPortfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def restore_deleted_eportfolio(self, eportfolio_id, **kwargs):  # noqa: E501
        """Restore a deleted ePortfolio  # noqa: E501

        Restore an ePortfolio back to active that was previously deleted. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_deleted_eportfolio(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.restore_deleted_eportfolio_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
        else:
            (data) = self.restore_deleted_eportfolio_with_http_info(eportfolio_id, **kwargs)  # noqa: E501
            return data

    def restore_deleted_eportfolio_with_http_info(self, eportfolio_id, **kwargs):  # noqa: E501
        """Restore a deleted ePortfolio  # noqa: E501

        Restore an ePortfolio back to active that was previously deleted. Only available to admins who can moderate_user_content.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.restore_deleted_eportfolio_with_http_info(eportfolio_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str eportfolio_id: ID (required)
        :return: EPortfolio
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eportfolio_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_deleted_eportfolio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eportfolio_id' is set
        if self.api_client.client_side_validation and ('eportfolio_id' not in params or
                                                       params['eportfolio_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `eportfolio_id` when calling `restore_deleted_eportfolio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'eportfolio_id' in params:
            path_params['eportfolio_id'] = params['eportfolio_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/eportfolios/{eportfolio_id}/restore', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EPortfolio',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
