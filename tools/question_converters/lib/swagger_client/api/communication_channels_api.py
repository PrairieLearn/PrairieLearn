# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommunicationChannelsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_communication_channel(self, user_id, communication_channel_address, communication_channel_type, **kwargs):  # noqa: E501
        """Create a communication channel  # noqa: E501

        Creates a new communication channel for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_communication_channel(user_id, communication_channel_address, communication_channel_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_address: An email address or SMS number. Not required for \"push\" type channels. (required)
        :param str communication_channel_type: The type of communication channel.  In order to enable push notification support, the server must be properly configured (via `sns_creds` in Vault) to communicate with Amazon Simple Notification Services, and the developer key used to create the access token from this request must have an SNS ARN configured on it. (required)
        :param str communication_channel_token: A registration id, device token, or equivalent token given to an app when registering with a push notification provider. Only valid for \"push\" type channels.
        :param bool skip_confirmation: Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_communication_channel_with_http_info(user_id, communication_channel_address, communication_channel_type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_communication_channel_with_http_info(user_id, communication_channel_address, communication_channel_type, **kwargs)  # noqa: E501
            return data

    def create_communication_channel_with_http_info(self, user_id, communication_channel_address, communication_channel_type, **kwargs):  # noqa: E501
        """Create a communication channel  # noqa: E501

        Creates a new communication channel for the specified user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_communication_channel_with_http_info(user_id, communication_channel_address, communication_channel_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str communication_channel_address: An email address or SMS number. Not required for \"push\" type channels. (required)
        :param str communication_channel_type: The type of communication channel.  In order to enable push notification support, the server must be properly configured (via `sns_creds` in Vault) to communicate with Amazon Simple Notification Services, and the developer key used to create the access token from this request must have an SNS ARN configured on it. (required)
        :param str communication_channel_token: A registration id, device token, or equivalent token given to an app when registering with a push notification provider. Only valid for \"push\" type channels.
        :param bool skip_confirmation: Only valid for site admins and account admins making requests; If true, the channel is automatically validated and no confirmation email or SMS is sent. Otherwise, the user must respond to a confirmation message to confirm the channel.
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'communication_channel_address', 'communication_channel_type', 'communication_channel_token', 'skip_confirmation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_communication_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `create_communication_channel`")  # noqa: E501
        # verify the required parameter 'communication_channel_address' is set
        if self.api_client.client_side_validation and ('communication_channel_address' not in params or
                                                       params['communication_channel_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_address` when calling `create_communication_channel`")  # noqa: E501
        # verify the required parameter 'communication_channel_type' is set
        if self.api_client.client_side_validation and ('communication_channel_type' not in params or
                                                       params['communication_channel_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `communication_channel_type` when calling `create_communication_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'communication_channel_address' in params:
            form_params.append(('communication_channel[address]', params['communication_channel_address']))  # noqa: E501
        if 'communication_channel_type' in params:
            form_params.append(('communication_channel[type]', params['communication_channel_type']))  # noqa: E501
        if 'communication_channel_token' in params:
            form_params.append(('communication_channel[token]', params['communication_channel_token']))  # noqa: E501
        if 'skip_confirmation' in params:
            form_params.append(('skip_confirmation', params['skip_confirmation']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommunicationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_communication_channel_id(self, user_id, id, **kwargs):  # noqa: E501
        """Delete a communication channel  # noqa: E501

        Delete an existing communication channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_communication_channel_id(user_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str id: ID (required)
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_communication_channel_id_with_http_info(user_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_communication_channel_id_with_http_info(user_id, id, **kwargs)  # noqa: E501
            return data

    def delete_communication_channel_id_with_http_info(self, user_id, id, **kwargs):  # noqa: E501
        """Delete a communication channel  # noqa: E501

        Delete an existing communication channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_communication_channel_id_with_http_info(user_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str id: ID (required)
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_communication_channel_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `delete_communication_channel_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_communication_channel_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommunicationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_communication_channel_type(self, user_id, type, address, **kwargs):  # noqa: E501
        """Delete a communication channel  # noqa: E501

        Delete an existing communication channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_communication_channel_type(user_id, type, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_communication_channel_type_with_http_info(user_id, type, address, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_communication_channel_type_with_http_info(user_id, type, address, **kwargs)  # noqa: E501
            return data

    def delete_communication_channel_type_with_http_info(self, user_id, type, address, **kwargs):  # noqa: E501
        """Delete a communication channel  # noqa: E501

        Delete an existing communication channel.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_communication_channel_type_with_http_info(user_id, type, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :param str type: ID (required)
        :param str address: ID (required)
        :return: CommunicationChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'type', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_communication_channel_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `delete_communication_channel_type`")  # noqa: E501
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `delete_communication_channel_type`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `delete_communication_channel_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels/{type}/{address}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CommunicationChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_push_notification_endpoint(self, **kwargs):  # noqa: E501
        """Delete a push notification endpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_push_notification_endpoint(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SuccessTrue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_push_notification_endpoint_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_push_notification_endpoint_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_push_notification_endpoint_with_http_info(self, **kwargs):  # noqa: E501
        """Delete a push notification endpoint  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_push_notification_endpoint_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SuccessTrue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_push_notification_endpoint" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/self/communication_channels/push', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessTrue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_communication_channels(self, user_id, **kwargs):  # noqa: E501
        """List user communication channels  # noqa: E501

        Returns a paginated list of communication channels for the specified user, sorted by position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_communication_channels(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :return: list[CommunicationChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_communication_channels_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_communication_channels_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def list_user_communication_channels_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """List user communication channels  # noqa: E501

        Returns a paginated list of communication channels for the specified user, sorted by position.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_communication_channels_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: ID (required)
        :return: list[CommunicationChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_communication_channels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if self.api_client.client_side_validation and ('user_id' not in params or
                                                       params['user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `user_id` when calling `list_user_communication_channels`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['user_id'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/users/{user_id}/communication_channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[CommunicationChannel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
