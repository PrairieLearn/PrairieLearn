# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NewQuizItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_quiz_item(self, course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, **kwargs):  # noqa: E501
        """Create a quiz item  # noqa: E501

        Create a quiz item in a new quiz. Only +QuestionItem+ types can be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_item(course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param str item_entry_type: The type of the item. (required)
        :param str item_entry_item_body: The question stem (rich content). (required)
        :param str item_entry_interaction_type_slug: The type of question. One of 'multi-answer', 'matching', 'categorization', 'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false', or 'essay'. See {Appendix: Question Types} for more info about each type. (required)
        :param Object item_entry_interaction_data: An object that contains the question data. See {Appendix: Question Types} for more info about this field. (required)
        :param Object item_entry_scoring_data: An object that describes how to score the question. See {Appendix: Question Types} for more info about this field. (required)
        :param str item_entry_scoring_algorithm: The algorithm used to score the question. See {Appendix: Question Types} for more info about this field. (required)
        :param int item_position: The position of the item within the quiz.
        :param float item_points_possible: The number of points available to score on this item. Must be positive.
        :param str item_entry_title: The question title.
        :param str item_entry_calculator_type: Type of calculator the user will have access to during the question.
        :param str item_entry_feedback_neutral: General feedback to show regardless of answer (rich content).
        :param str item_entry_feedback_correct: Feedback to show if the question is answered correctly (rich content).
        :param str item_entry_feedback_incorrect: Feedback to show if the question is answered incorrectly (rich content).
        :param Object item_entry_properties: An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_answer_feedback: Feedback provided for each answer (rich content, only available on 'choice' question types).
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quiz_item_with_http_info(course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quiz_item_with_http_info(course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, **kwargs)  # noqa: E501
            return data

    def create_quiz_item_with_http_info(self, course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, **kwargs):  # noqa: E501
        """Create a quiz item  # noqa: E501

        Create a quiz item in a new quiz. Only +QuestionItem+ types can be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_item_with_http_info(course_id, assignment_id, item_entry_type, item_entry_item_body, item_entry_interaction_type_slug, item_entry_interaction_data, item_entry_scoring_data, item_entry_scoring_algorithm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param str item_entry_type: The type of the item. (required)
        :param str item_entry_item_body: The question stem (rich content). (required)
        :param str item_entry_interaction_type_slug: The type of question. One of 'multi-answer', 'matching', 'categorization', 'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false', or 'essay'. See {Appendix: Question Types} for more info about each type. (required)
        :param Object item_entry_interaction_data: An object that contains the question data. See {Appendix: Question Types} for more info about this field. (required)
        :param Object item_entry_scoring_data: An object that describes how to score the question. See {Appendix: Question Types} for more info about this field. (required)
        :param str item_entry_scoring_algorithm: The algorithm used to score the question. See {Appendix: Question Types} for more info about this field. (required)
        :param int item_position: The position of the item within the quiz.
        :param float item_points_possible: The number of points available to score on this item. Must be positive.
        :param str item_entry_title: The question title.
        :param str item_entry_calculator_type: Type of calculator the user will have access to during the question.
        :param str item_entry_feedback_neutral: General feedback to show regardless of answer (rich content).
        :param str item_entry_feedback_correct: Feedback to show if the question is answered correctly (rich content).
        :param str item_entry_feedback_incorrect: Feedback to show if the question is answered incorrectly (rich content).
        :param Object item_entry_properties: An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_answer_feedback: Feedback provided for each answer (rich content, only available on 'choice' question types).
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'item_entry_type', 'item_entry_item_body', 'item_entry_interaction_type_slug', 'item_entry_interaction_data', 'item_entry_scoring_data', 'item_entry_scoring_algorithm', 'item_position', 'item_points_possible', 'item_entry_title', 'item_entry_calculator_type', 'item_entry_feedback_neutral', 'item_entry_feedback_correct', 'item_entry_feedback_incorrect', 'item_entry_properties', 'item_entry_answer_feedback']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quiz_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_type' is set
        if self.api_client.client_side_validation and ('item_entry_type' not in params or
                                                       params['item_entry_type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_type` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_item_body' is set
        if self.api_client.client_side_validation and ('item_entry_item_body' not in params or
                                                       params['item_entry_item_body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_item_body` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_interaction_type_slug' is set
        if self.api_client.client_side_validation and ('item_entry_interaction_type_slug' not in params or
                                                       params['item_entry_interaction_type_slug'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_interaction_type_slug` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_interaction_data' is set
        if self.api_client.client_side_validation and ('item_entry_interaction_data' not in params or
                                                       params['item_entry_interaction_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_interaction_data` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_scoring_data' is set
        if self.api_client.client_side_validation and ('item_entry_scoring_data' not in params or
                                                       params['item_entry_scoring_data'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_scoring_data` when calling `create_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_entry_scoring_algorithm' is set
        if self.api_client.client_side_validation and ('item_entry_scoring_algorithm' not in params or
                                                       params['item_entry_scoring_algorithm'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_entry_scoring_algorithm` when calling `create_quiz_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'item_position' in params:
            form_params.append(('item[position]', params['item_position']))  # noqa: E501
        if 'item_points_possible' in params:
            form_params.append(('item[points_possible]', params['item_points_possible']))  # noqa: E501
        if 'item_entry_type' in params:
            form_params.append(('item[entry_type]', params['item_entry_type']))  # noqa: E501
        if 'item_entry_title' in params:
            form_params.append(('item[entry][title]', params['item_entry_title']))  # noqa: E501
        if 'item_entry_item_body' in params:
            form_params.append(('item[entry][item_body]', params['item_entry_item_body']))  # noqa: E501
        if 'item_entry_calculator_type' in params:
            form_params.append(('item[entry][calculator_type]', params['item_entry_calculator_type']))  # noqa: E501
        if 'item_entry_feedback_neutral' in params:
            form_params.append(('item[entry][feedback][neutral]', params['item_entry_feedback_neutral']))  # noqa: E501
        if 'item_entry_feedback_correct' in params:
            form_params.append(('item[entry][feedback][correct]', params['item_entry_feedback_correct']))  # noqa: E501
        if 'item_entry_feedback_incorrect' in params:
            form_params.append(('item[entry][feedback][incorrect]', params['item_entry_feedback_incorrect']))  # noqa: E501
        if 'item_entry_interaction_type_slug' in params:
            form_params.append(('item[entry][interaction_type_slug]', params['item_entry_interaction_type_slug']))  # noqa: E501
        if 'item_entry_interaction_data' in params:
            form_params.append(('item[entry][interaction_data]', params['item_entry_interaction_data']))  # noqa: E501
        if 'item_entry_properties' in params:
            form_params.append(('item[entry][properties]', params['item_entry_properties']))  # noqa: E501
        if 'item_entry_scoring_data' in params:
            form_params.append(('item[entry][scoring_data]', params['item_entry_scoring_data']))  # noqa: E501
        if 'item_entry_answer_feedback' in params:
            form_params.append(('item[entry][answer_feedback]', params['item_entry_answer_feedback']))  # noqa: E501
        if 'item_entry_scoring_algorithm' in params:
            form_params.append(('item[entry][scoring_algorithm]', params['item_entry_scoring_algorithm']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_quiz_item(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Delete a quiz item  # noqa: E501

        Delete a single quiz item in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz_item(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
            return data

    def delete_quiz_item_with_http_info(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Delete a quiz item  # noqa: E501

        Delete a single quiz item in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz_item_with_http_info(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quiz_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_quiz_item`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in params or
                                                       params['item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_id` when calling `delete_quiz_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_items_media_upload_url(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get items media_upload_url  # noqa: E501

        Get a url for uploading media for use in hot-spot question types. See the hot-spot question type in the {Appendix: Question Types} for more details about using this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_media_upload_url(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: no description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_items_media_upload_url_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_items_media_upload_url_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_items_media_upload_url_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get items media_upload_url  # noqa: E501

        Get a url for uploading media for use in hot-spot question types. See the hot-spot question type in the {Appendix: Question Types} for more details about using this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_items_media_upload_url_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: no description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_items_media_upload_url" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_items_media_upload_url`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_items_media_upload_url`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/media_upload_url', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_quiz_item(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Get a quiz item  # noqa: E501

        Get details about a single item in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_item(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
            return data

    def get_quiz_item_with_http_info(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Get a quiz item  # noqa: E501

        Get details about a single item in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_quiz_item_with_http_info(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_quiz_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_quiz_item`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in params or
                                                       params['item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_id` when calling `get_quiz_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_quiz_items(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List quiz items  # noqa: E501

        Get a list of items in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_quiz_items(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: no description (required)
        :return: list[QuizItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_quiz_items_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_quiz_items_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def list_quiz_items_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """List quiz items  # noqa: E501

        Get a list of items in a new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_quiz_items_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: no description (required)
        :return: list[QuizItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_quiz_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_quiz_items`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `list_quiz_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QuizItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_quiz_item(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Update a quiz item  # noqa: E501

        Update a single quiz item in a new quiz. Only +QuestionItem+ types can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_quiz_item(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :param int item_position: The position of the item within the quiz.
        :param float item_points_possible: The number of points available to score on this item. Must be positive.
        :param str item_entry_type: The type of the item.
        :param str item_entry_title: The question title.
        :param str item_entry_item_body: The question stem (rich content).
        :param str item_entry_calculator_type: Type of calculator the user will have access to during the question.
        :param str item_entry_feedback_neutral: General feedback to show regardless of answer (rich content).
        :param str item_entry_feedback_correct: Feedback to show if the question is answered correctly (rich content).
        :param str item_entry_feedback_incorrect: Feedback to show if the question is answered incorrectly (rich content).
        :param str item_entry_interaction_type_slug: The type of question. One of 'multi-answer', 'matching', 'categorization', 'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false', or 'essay'. See {Appendix: Question Types} for more info about each type.
        :param Object item_entry_interaction_data: An object that contains the question data. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_properties: An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_scoring_data: An object that describes how to score the question. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_answer_feedback: Feedback provided for each answer (rich content, only available on 'choice' question types).
        :param str item_entry_scoring_algorithm: The algorithm used to score the question. See {Appendix: Question Types} for more info about this field.
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_quiz_item_with_http_info(course_id, assignment_id, item_id, **kwargs)  # noqa: E501
            return data

    def update_quiz_item_with_http_info(self, course_id, assignment_id, item_id, **kwargs):  # noqa: E501
        """Update a quiz item  # noqa: E501

        Update a single quiz item in a new quiz. Only +QuestionItem+ types can be updated.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_quiz_item_with_http_info(course_id, assignment_id, item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param int item_id: The id of the item associated with the quiz. (required)
        :param int item_position: The position of the item within the quiz.
        :param float item_points_possible: The number of points available to score on this item. Must be positive.
        :param str item_entry_type: The type of the item.
        :param str item_entry_title: The question title.
        :param str item_entry_item_body: The question stem (rich content).
        :param str item_entry_calculator_type: Type of calculator the user will have access to during the question.
        :param str item_entry_feedback_neutral: General feedback to show regardless of answer (rich content).
        :param str item_entry_feedback_correct: Feedback to show if the question is answered correctly (rich content).
        :param str item_entry_feedback_incorrect: Feedback to show if the question is answered incorrectly (rich content).
        :param str item_entry_interaction_type_slug: The type of question. One of 'multi-answer', 'matching', 'categorization', 'file-upload', 'formula', 'ordering', 'rich-fill-blank', 'hot-spot', 'choice', 'numeric', 'true-false', or 'essay'. See {Appendix: Question Types} for more info about each type.
        :param Object item_entry_interaction_data: An object that contains the question data. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_properties: An object that contains additional properties for some question types. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_scoring_data: An object that describes how to score the question. See {Appendix: Question Types} for more info about this field.
        :param Object item_entry_answer_feedback: Feedback provided for each answer (rich content, only available on 'choice' question types).
        :param str item_entry_scoring_algorithm: The algorithm used to score the question. See {Appendix: Question Types} for more info about this field.
        :return: QuizItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'item_id', 'item_position', 'item_points_possible', 'item_entry_type', 'item_entry_title', 'item_entry_item_body', 'item_entry_calculator_type', 'item_entry_feedback_neutral', 'item_entry_feedback_correct', 'item_entry_feedback_incorrect', 'item_entry_interaction_type_slug', 'item_entry_interaction_data', 'item_entry_properties', 'item_entry_scoring_data', 'item_entry_answer_feedback', 'item_entry_scoring_algorithm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_quiz_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_quiz_item`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `update_quiz_item`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in params or
                                                       params['item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_id` when calling `update_quiz_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'item_id' in params:
            path_params['item_id'] = params['item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'item_position' in params:
            form_params.append(('item[position]', params['item_position']))  # noqa: E501
        if 'item_points_possible' in params:
            form_params.append(('item[points_possible]', params['item_points_possible']))  # noqa: E501
        if 'item_entry_type' in params:
            form_params.append(('item[entry_type]', params['item_entry_type']))  # noqa: E501
        if 'item_entry_title' in params:
            form_params.append(('item[entry][title]', params['item_entry_title']))  # noqa: E501
        if 'item_entry_item_body' in params:
            form_params.append(('item[entry][item_body]', params['item_entry_item_body']))  # noqa: E501
        if 'item_entry_calculator_type' in params:
            form_params.append(('item[entry][calculator_type]', params['item_entry_calculator_type']))  # noqa: E501
        if 'item_entry_feedback_neutral' in params:
            form_params.append(('item[entry][feedback][neutral]', params['item_entry_feedback_neutral']))  # noqa: E501
        if 'item_entry_feedback_correct' in params:
            form_params.append(('item[entry][feedback][correct]', params['item_entry_feedback_correct']))  # noqa: E501
        if 'item_entry_feedback_incorrect' in params:
            form_params.append(('item[entry][feedback][incorrect]', params['item_entry_feedback_incorrect']))  # noqa: E501
        if 'item_entry_interaction_type_slug' in params:
            form_params.append(('item[entry][interaction_type_slug]', params['item_entry_interaction_type_slug']))  # noqa: E501
        if 'item_entry_interaction_data' in params:
            form_params.append(('item[entry][interaction_data]', params['item_entry_interaction_data']))  # noqa: E501
        if 'item_entry_properties' in params:
            form_params.append(('item[entry][properties]', params['item_entry_properties']))  # noqa: E501
        if 'item_entry_scoring_data' in params:
            form_params.append(('item[entry][scoring_data]', params['item_entry_scoring_data']))  # noqa: E501
        if 'item_entry_answer_feedback' in params:
            form_params.append(('item[entry][answer_feedback]', params['item_entry_answer_feedback']))  # noqa: E501
        if 'item_entry_scoring_algorithm' in params:
            form_params.append(('item[entry][scoring_algorithm]', params['item_entry_scoring_algorithm']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}/items/{item_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuizItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
