# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizSubmissionQuestionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def answering_questions(self, quiz_submission_id, attempt, validation_token, **kwargs):  # noqa: E501
        """Answering questions  # noqa: E501

        Provide or update an answer to one or more QuizQuestions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.answering_questions(quiz_submission_id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :param list[QuizSubmissionQuestion] quiz_questions: Set of question IDs and the answer value.  See {Appendix: Question Answer Formats} for the accepted answer formats for each question type.
        :return: list[QuizSubmissionQuestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.answering_questions_with_http_info(quiz_submission_id, attempt, validation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.answering_questions_with_http_info(quiz_submission_id, attempt, validation_token, **kwargs)  # noqa: E501
            return data

    def answering_questions_with_http_info(self, quiz_submission_id, attempt, validation_token, **kwargs):  # noqa: E501
        """Answering questions  # noqa: E501

        Provide or update an answer to one or more QuizQuestions.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.answering_questions_with_http_info(quiz_submission_id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :param list[QuizSubmissionQuestion] quiz_questions: Set of question IDs and the answer value.  See {Appendix: Question Answer Formats} for the accepted answer formats for each question type.
        :return: list[QuizSubmissionQuestion]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_submission_id', 'attempt', 'validation_token', 'access_code', 'quiz_questions']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method answering_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_submission_id' is set
        if self.api_client.client_side_validation and ('quiz_submission_id' not in params or
                                                       params['quiz_submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submission_id` when calling `answering_questions`")  # noqa: E501
        # verify the required parameter 'attempt' is set
        if self.api_client.client_side_validation and ('attempt' not in params or
                                                       params['attempt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attempt` when calling `answering_questions`")  # noqa: E501
        # verify the required parameter 'validation_token' is set
        if self.api_client.client_side_validation and ('validation_token' not in params or
                                                       params['validation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `validation_token` when calling `answering_questions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_submission_id' in params:
            path_params['quiz_submission_id'] = params['quiz_submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attempt' in params:
            form_params.append(('attempt', params['attempt']))  # noqa: E501
        if 'validation_token' in params:
            form_params.append(('validation_token', params['validation_token']))  # noqa: E501
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501
        if 'quiz_questions' in params:
            form_params.append(('quiz_questions', params['quiz_questions']))  # noqa: E501
            collection_formats['quiz_questions'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/quiz_submissions/{quiz_submission_id}/questions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QuizSubmissionQuestion]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def flagging_question(self, quiz_submission_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Flagging a question.  # noqa: E501

        Set a flag on a quiz question to indicate that you want to return to it later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flagging_question(quiz_submission_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.flagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.flagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, **kwargs)  # noqa: E501
            return data

    def flagging_question_with_http_info(self, quiz_submission_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Flagging a question.  # noqa: E501

        Set a flag on a quiz question to indicate that you want to return to it later.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.flagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_submission_id', 'id', 'attempt', 'validation_token', 'access_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method flagging_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_submission_id' is set
        if self.api_client.client_side_validation and ('quiz_submission_id' not in params or
                                                       params['quiz_submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submission_id` when calling `flagging_question`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `flagging_question`")  # noqa: E501
        # verify the required parameter 'attempt' is set
        if self.api_client.client_side_validation and ('attempt' not in params or
                                                       params['attempt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attempt` when calling `flagging_question`")  # noqa: E501
        # verify the required parameter 'validation_token' is set
        if self.api_client.client_side_validation and ('validation_token' not in params or
                                                       params['validation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `validation_token` when calling `flagging_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_submission_id' in params:
            path_params['quiz_submission_id'] = params['quiz_submission_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attempt' in params:
            form_params.append(('attempt', params['attempt']))  # noqa: E501
        if 'validation_token' in params:
            form_params.append(('validation_token', params['validation_token']))  # noqa: E501
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_quiz_submission_questions(self, quiz_submission_id, **kwargs):  # noqa: E501
        """Get all quiz submission questions.  # noqa: E501

        Get a list of all the question records for this quiz submission.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_quiz_submission_questions(quiz_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission question.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_quiz_submission_questions_with_http_info(quiz_submission_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_quiz_submission_questions_with_http_info(quiz_submission_id, **kwargs)  # noqa: E501
            return data

    def get_all_quiz_submission_questions_with_http_info(self, quiz_submission_id, **kwargs):  # noqa: E501
        """Get all quiz submission questions.  # noqa: E501

        Get a list of all the question records for this quiz submission.  <b>200 OK</b> response code is returned if the request was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_quiz_submission_questions_with_http_info(quiz_submission_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param list[str] include: Associations to include with the quiz submission question.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_submission_id', 'include']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_quiz_submission_questions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_submission_id' is set
        if self.api_client.client_side_validation and ('quiz_submission_id' not in params or
                                                       params['quiz_submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submission_id` when calling `get_all_quiz_submission_questions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_submission_id' in params:
            path_params['quiz_submission_id'] = params['quiz_submission_id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/quiz_submissions/{quiz_submission_id}/questions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_formatted_student_numerical_answer(self, quiz_submission_id, id, answer, **kwargs):  # noqa: E501
        """Get a formatted student numerical answer.  # noqa: E501

        Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formatted_student_numerical_answer(quiz_submission_id, id, answer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param Object answer: no description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_formatted_student_numerical_answer_with_http_info(quiz_submission_id, id, answer, **kwargs)  # noqa: E501
        else:
            (data) = self.get_formatted_student_numerical_answer_with_http_info(quiz_submission_id, id, answer, **kwargs)  # noqa: E501
            return data

    def get_formatted_student_numerical_answer_with_http_info(self, quiz_submission_id, id, answer, **kwargs):  # noqa: E501
        """Get a formatted student numerical answer.  # noqa: E501

        Matches the intended behavior of the UI when a numerical answer is entered and returns the resulting formatted number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_formatted_student_numerical_answer_with_http_info(quiz_submission_id, id, answer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param Object answer: no description (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_submission_id', 'id', 'answer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_formatted_student_numerical_answer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_submission_id' is set
        if self.api_client.client_side_validation and ('quiz_submission_id' not in params or
                                                       params['quiz_submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submission_id` when calling `get_formatted_student_numerical_answer`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_formatted_student_numerical_answer`")  # noqa: E501
        # verify the required parameter 'answer' is set
        if self.api_client.client_side_validation and ('answer' not in params or
                                                       params['answer'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `answer` when calling `get_formatted_student_numerical_answer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_submission_id' in params:
            path_params['quiz_submission_id'] = params['quiz_submission_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'answer' in params:
            query_params.append(('answer', params['answer']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/formatted_answer', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unflagging_question(self, quiz_submission_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Unflagging a question.  # noqa: E501

        Remove the flag that you previously set on a quiz question after you've returned to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unflagging_question(quiz_submission_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unflagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, **kwargs)  # noqa: E501
        else:
            (data) = self.unflagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, **kwargs)  # noqa: E501
            return data

    def unflagging_question_with_http_info(self, quiz_submission_id, id, attempt, validation_token, **kwargs):  # noqa: E501
        """Unflagging a question.  # noqa: E501

        Remove the flag that you previously set on a quiz question after you've returned to it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unflagging_question_with_http_info(quiz_submission_id, id, attempt, validation_token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str quiz_submission_id: ID (required)
        :param str id: ID (required)
        :param int attempt: The attempt number of the quiz submission being taken. Note that this must be the latest attempt index, as questions for earlier attempts can not be modified. (required)
        :param str validation_token: The unique validation token you received when the Quiz Submission was created. (required)
        :param str access_code: Access code for the Quiz, if any.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['quiz_submission_id', 'id', 'attempt', 'validation_token', 'access_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unflagging_question" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'quiz_submission_id' is set
        if self.api_client.client_side_validation and ('quiz_submission_id' not in params or
                                                       params['quiz_submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_submission_id` when calling `unflagging_question`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `unflagging_question`")  # noqa: E501
        # verify the required parameter 'attempt' is set
        if self.api_client.client_side_validation and ('attempt' not in params or
                                                       params['attempt'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `attempt` when calling `unflagging_question`")  # noqa: E501
        # verify the required parameter 'validation_token' is set
        if self.api_client.client_side_validation and ('validation_token' not in params or
                                                       params['validation_token'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `validation_token` when calling `unflagging_question`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'quiz_submission_id' in params:
            path_params['quiz_submission_id'] = params['quiz_submission_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'attempt' in params:
            form_params.append(('attempt', params['attempt']))  # noqa: E501
        if 'validation_token' in params:
            form_params.append(('validation_token', params['validation_token']))  # noqa: E501
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
