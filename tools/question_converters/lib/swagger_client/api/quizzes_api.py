# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizzesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_quiz(self, course_id, quiz_title, **kwargs):  # noqa: E501
        """Create a quiz  # noqa: E501

        Create a new quiz for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz(course_id, quiz_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_title: The quiz title. (required)
        :param str quiz_description: A description of the quiz.
        :param str quiz_quiz_type: The type of quiz.
        :param int quiz_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course. Only valid if the quiz is graded, i.e. if quiz_type is \"assignment\" or \"graded_survey\".
        :param int quiz_time_limit: Time limit to take this quiz, in minutes. Set to null for no time limit. Defaults to null.
        :param bool quiz_shuffle_answers: If true, quiz answers for multiple choice questions will be randomized for each student. Defaults to false.
        :param str quiz_hide_results: Dictates whether or not quiz results are hidden from students. If null, students can see their results after any attempt. If \"always\", students can never see their results. If \"until_after_last_attempt\", students can only see results after their last attempt. (Only valid if allowed_attempts > 1). Defaults to null.
        :param bool quiz_show_correct_answers: Only valid if hide_results=null If false, hides correct answers from students when quiz results are viewed. Defaults to true.
        :param bool quiz_show_correct_answers_last_attempt: Only valid if show_correct_answers=true and allowed_attempts > 1 If true, hides correct answers from students when quiz results are viewed until they submit the last attempt for the quiz. Defaults to false.
        :param Object quiz_show_correct_answers_at: Only valid if show_correct_answers=true If set, the correct answers will be visible by students only after this date, otherwise the correct answers are visible once the student hands in their quiz submission.
        :param Object quiz_hide_correct_answers_at: Only valid if show_correct_answers=true If set, the correct answers will stop being visible once this date has passed. Otherwise, the correct answers will be visible indefinitely.
        :param int quiz_allowed_attempts: Number of times a student is allowed to take a quiz. Set to -1 for unlimited attempts. Defaults to 1.
        :param str quiz_scoring_policy: Required and only valid if allowed_attempts > 1. Scoring policy for a quiz that students can take multiple times. Defaults to \"keep_highest\".
        :param bool quiz_one_question_at_a_time: If true, shows quiz to student one question at a time. Defaults to false.
        :param bool quiz_cant_go_back: Only valid if one_question_at_a_time=true If true, questions are locked after answering. Defaults to false.
        :param str quiz_access_code: Restricts access to the quiz with a password. For no access code restriction, set to null. Defaults to null.
        :param str quiz_ip_filter: Restricts access to the quiz to computers in a specified IP range. Filters can be a comma-separated list of addresses, or an address followed by a mask  Examples:   \"192.168.217.1\"   \"192.168.217.1/24\"   \"192.168.217.1/255.255.255.0\"  For no IP filter restriction, set to null. Defaults to null.
        :param Object quiz_due_at: The day/time the quiz is due. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param Object quiz_lock_at: The day/time the quiz is locked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param Object quiz_unlock_at: The day/time the quiz is unlocked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param bool quiz_published: Whether the quiz should have a draft state of published or unpublished. NOTE: If students have started taking the quiz, or there are any submissions for the quiz, you may not unpublish a quiz and will recieve an error.
        :param bool quiz_one_time_results: Whether students should be prevented from viewing their quiz results past the first time (right after they turn the quiz in.) Only valid if \"hide_results\" is not set to \"always\". Defaults to false.
        :param bool quiz_only_visible_to_overrides: Whether this quiz is only visible to overrides (Only useful if 'differentiated assignments' account setting is on) Defaults to false.
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_quiz_with_http_info(course_id, quiz_title, **kwargs)  # noqa: E501
        else:
            (data) = self.create_quiz_with_http_info(course_id, quiz_title, **kwargs)  # noqa: E501
            return data

    def create_quiz_with_http_info(self, course_id, quiz_title, **kwargs):  # noqa: E501
        """Create a quiz  # noqa: E501

        Create a new quiz for this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_quiz_with_http_info(course_id, quiz_title, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_title: The quiz title. (required)
        :param str quiz_description: A description of the quiz.
        :param str quiz_quiz_type: The type of quiz.
        :param int quiz_assignment_group_id: The assignment group id to put the assignment in. Defaults to the top assignment group in the course. Only valid if the quiz is graded, i.e. if quiz_type is \"assignment\" or \"graded_survey\".
        :param int quiz_time_limit: Time limit to take this quiz, in minutes. Set to null for no time limit. Defaults to null.
        :param bool quiz_shuffle_answers: If true, quiz answers for multiple choice questions will be randomized for each student. Defaults to false.
        :param str quiz_hide_results: Dictates whether or not quiz results are hidden from students. If null, students can see their results after any attempt. If \"always\", students can never see their results. If \"until_after_last_attempt\", students can only see results after their last attempt. (Only valid if allowed_attempts > 1). Defaults to null.
        :param bool quiz_show_correct_answers: Only valid if hide_results=null If false, hides correct answers from students when quiz results are viewed. Defaults to true.
        :param bool quiz_show_correct_answers_last_attempt: Only valid if show_correct_answers=true and allowed_attempts > 1 If true, hides correct answers from students when quiz results are viewed until they submit the last attempt for the quiz. Defaults to false.
        :param Object quiz_show_correct_answers_at: Only valid if show_correct_answers=true If set, the correct answers will be visible by students only after this date, otherwise the correct answers are visible once the student hands in their quiz submission.
        :param Object quiz_hide_correct_answers_at: Only valid if show_correct_answers=true If set, the correct answers will stop being visible once this date has passed. Otherwise, the correct answers will be visible indefinitely.
        :param int quiz_allowed_attempts: Number of times a student is allowed to take a quiz. Set to -1 for unlimited attempts. Defaults to 1.
        :param str quiz_scoring_policy: Required and only valid if allowed_attempts > 1. Scoring policy for a quiz that students can take multiple times. Defaults to \"keep_highest\".
        :param bool quiz_one_question_at_a_time: If true, shows quiz to student one question at a time. Defaults to false.
        :param bool quiz_cant_go_back: Only valid if one_question_at_a_time=true If true, questions are locked after answering. Defaults to false.
        :param str quiz_access_code: Restricts access to the quiz with a password. For no access code restriction, set to null. Defaults to null.
        :param str quiz_ip_filter: Restricts access to the quiz to computers in a specified IP range. Filters can be a comma-separated list of addresses, or an address followed by a mask  Examples:   \"192.168.217.1\"   \"192.168.217.1/24\"   \"192.168.217.1/255.255.255.0\"  For no IP filter restriction, set to null. Defaults to null.
        :param Object quiz_due_at: The day/time the quiz is due. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param Object quiz_lock_at: The day/time the quiz is locked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param Object quiz_unlock_at: The day/time the quiz is unlocked for students. Accepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.
        :param bool quiz_published: Whether the quiz should have a draft state of published or unpublished. NOTE: If students have started taking the quiz, or there are any submissions for the quiz, you may not unpublish a quiz and will recieve an error.
        :param bool quiz_one_time_results: Whether students should be prevented from viewing their quiz results past the first time (right after they turn the quiz in.) Only valid if \"hide_results\" is not set to \"always\". Defaults to false.
        :param bool quiz_only_visible_to_overrides: Whether this quiz is only visible to overrides (Only useful if 'differentiated assignments' account setting is on) Defaults to false.
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_title', 'quiz_description', 'quiz_quiz_type', 'quiz_assignment_group_id', 'quiz_time_limit', 'quiz_shuffle_answers', 'quiz_hide_results', 'quiz_show_correct_answers', 'quiz_show_correct_answers_last_attempt', 'quiz_show_correct_answers_at', 'quiz_hide_correct_answers_at', 'quiz_allowed_attempts', 'quiz_scoring_policy', 'quiz_one_question_at_a_time', 'quiz_cant_go_back', 'quiz_access_code', 'quiz_ip_filter', 'quiz_due_at', 'quiz_lock_at', 'quiz_unlock_at', 'quiz_published', 'quiz_one_time_results', 'quiz_only_visible_to_overrides']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_quiz`")  # noqa: E501
        # verify the required parameter 'quiz_title' is set
        if self.api_client.client_side_validation and ('quiz_title' not in params or
                                                       params['quiz_title'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_title` when calling `create_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_title' in params:
            form_params.append(('quiz[title]', params['quiz_title']))  # noqa: E501
        if 'quiz_description' in params:
            form_params.append(('quiz[description]', params['quiz_description']))  # noqa: E501
        if 'quiz_quiz_type' in params:
            form_params.append(('quiz[quiz_type]', params['quiz_quiz_type']))  # noqa: E501
        if 'quiz_assignment_group_id' in params:
            form_params.append(('quiz[assignment_group_id]', params['quiz_assignment_group_id']))  # noqa: E501
        if 'quiz_time_limit' in params:
            form_params.append(('quiz[time_limit]', params['quiz_time_limit']))  # noqa: E501
        if 'quiz_shuffle_answers' in params:
            form_params.append(('quiz[shuffle_answers]', params['quiz_shuffle_answers']))  # noqa: E501
        if 'quiz_hide_results' in params:
            form_params.append(('quiz[hide_results]', params['quiz_hide_results']))  # noqa: E501
        if 'quiz_show_correct_answers' in params:
            form_params.append(('quiz[show_correct_answers]', params['quiz_show_correct_answers']))  # noqa: E501
        if 'quiz_show_correct_answers_last_attempt' in params:
            form_params.append(('quiz[show_correct_answers_last_attempt]', params['quiz_show_correct_answers_last_attempt']))  # noqa: E501
        if 'quiz_show_correct_answers_at' in params:
            form_params.append(('quiz[show_correct_answers_at]', params['quiz_show_correct_answers_at']))  # noqa: E501
        if 'quiz_hide_correct_answers_at' in params:
            form_params.append(('quiz[hide_correct_answers_at]', params['quiz_hide_correct_answers_at']))  # noqa: E501
        if 'quiz_allowed_attempts' in params:
            form_params.append(('quiz[allowed_attempts]', params['quiz_allowed_attempts']))  # noqa: E501
        if 'quiz_scoring_policy' in params:
            form_params.append(('quiz[scoring_policy]', params['quiz_scoring_policy']))  # noqa: E501
        if 'quiz_one_question_at_a_time' in params:
            form_params.append(('quiz[one_question_at_a_time]', params['quiz_one_question_at_a_time']))  # noqa: E501
        if 'quiz_cant_go_back' in params:
            form_params.append(('quiz[cant_go_back]', params['quiz_cant_go_back']))  # noqa: E501
        if 'quiz_access_code' in params:
            form_params.append(('quiz[access_code]', params['quiz_access_code']))  # noqa: E501
        if 'quiz_ip_filter' in params:
            form_params.append(('quiz[ip_filter]', params['quiz_ip_filter']))  # noqa: E501
        if 'quiz_due_at' in params:
            form_params.append(('quiz[due_at]', params['quiz_due_at']))  # noqa: E501
        if 'quiz_lock_at' in params:
            form_params.append(('quiz[lock_at]', params['quiz_lock_at']))  # noqa: E501
        if 'quiz_unlock_at' in params:
            form_params.append(('quiz[unlock_at]', params['quiz_unlock_at']))  # noqa: E501
        if 'quiz_published' in params:
            form_params.append(('quiz[published]', params['quiz_published']))  # noqa: E501
        if 'quiz_one_time_results' in params:
            form_params.append(('quiz[one_time_results]', params['quiz_one_time_results']))  # noqa: E501
        if 'quiz_only_visible_to_overrides' in params:
            form_params.append(('quiz[only_visible_to_overrides]', params['quiz_only_visible_to_overrides']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_quiz(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a quiz  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def delete_quiz_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Delete a quiz  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_quiz_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_quiz`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `delete_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_quiz(self, course_id, id, **kwargs):  # noqa: E501
        """Edit a quiz  # noqa: E501

        Modify an existing quiz. See the documentation for quiz creation.  Additional arguments:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_quiz(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param bool quiz_notify_of_update: If true, notifies users that the quiz has changed. Defaults to true
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def edit_quiz_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Edit a quiz  # noqa: E501

        Modify an existing quiz. See the documentation for quiz creation.  Additional arguments:  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_quiz_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param bool quiz_notify_of_update: If true, notifies users that the quiz has changed. Defaults to true
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'quiz_notify_of_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `edit_quiz`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edit_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_notify_of_update' in params:
            form_params.append(('quiz[notify_of_update]', params['quiz_notify_of_update']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_quiz(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single quiz  # noqa: E501

        Returns the quiz with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_single_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_quiz_with_http_info(course_id, id, **kwargs)  # noqa: E501
            return data

    def get_single_quiz_with_http_info(self, course_id, id, **kwargs):  # noqa: E501
        """Get a single quiz  # noqa: E501

        Returns the quiz with the given id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_single_quiz_with_http_info(course_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :return: Quiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_single_quiz`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_single_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Quiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_quizzes_in_course(self, course_id, **kwargs):  # noqa: E501
        """List quizzes in a course  # noqa: E501

        Returns the paginated list of Quizzes in this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_quizzes_in_course(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial title of the quizzes to match and return.
        :return: list[Quiz]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_quizzes_in_course_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_quizzes_in_course_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_quizzes_in_course_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List quizzes in a course  # noqa: E501

        Returns the paginated list of Quizzes in this course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_quizzes_in_course_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str search_term: The partial title of the quizzes to match and return.
        :return: list[Quiz]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'search_term']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_quizzes_in_course" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_quizzes_in_course`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'search_term' in params:
            query_params.append(('search_term', params['search_term']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Quiz]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reorder_quiz_items(self, course_id, id, order_id, **kwargs):  # noqa: E501
        """Reorder quiz items  # noqa: E501

        Change order of the quiz questions or groups within the quiz  <b>204 No Content</b> response code is returned if the reorder was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_quiz_items(course_id, id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[int] order_id: The associated item's unique identifier (required)
        :param list[str] order_type: The type of item is either 'question' or 'group'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reorder_quiz_items_with_http_info(course_id, id, order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.reorder_quiz_items_with_http_info(course_id, id, order_id, **kwargs)  # noqa: E501
            return data

    def reorder_quiz_items_with_http_info(self, course_id, id, order_id, **kwargs):  # noqa: E501
        """Reorder quiz items  # noqa: E501

        Change order of the quiz questions or groups within the quiz  <b>204 No Content</b> response code is returned if the reorder was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reorder_quiz_items_with_http_info(course_id, id, order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param list[int] order_id: The associated item's unique identifier (required)
        :param list[str] order_type: The type of item is either 'question' or 'group'
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'order_id', 'order_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reorder_quiz_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `reorder_quiz_items`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `reorder_quiz_items`")  # noqa: E501
        # verify the required parameter 'order_id' is set
        if self.api_client.client_side_validation and ('order_id' not in params or
                                                       params['order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `order_id` when calling `reorder_quiz_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'order_id' in params:
            form_params.append(('order[id]', params['order_id']))  # noqa: E501
            collection_formats['order[id]'] = 'csv'  # noqa: E501
        if 'order_type' in params:
            form_params.append(('order[type]', params['order_type']))  # noqa: E501
            collection_formats['order[type]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{id}/reorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def validate_quiz_access_code(self, course_id, id, access_code, **kwargs):  # noqa: E501
        """Validate quiz access code  # noqa: E501

        Accepts an access code and returns a boolean indicating whether that access code is correct  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_quiz_access_code(course_id, id, access_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str access_code: The access code being validated (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.validate_quiz_access_code_with_http_info(course_id, id, access_code, **kwargs)  # noqa: E501
        else:
            (data) = self.validate_quiz_access_code_with_http_info(course_id, id, access_code, **kwargs)  # noqa: E501
            return data

    def validate_quiz_access_code_with_http_info(self, course_id, id, access_code, **kwargs):  # noqa: E501
        """Validate quiz access code  # noqa: E501

        Accepts an access code and returns a boolean indicating whether that access code is correct  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.validate_quiz_access_code_with_http_info(course_id, id, access_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str id: ID (required)
        :param str access_code: The access code being validated (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'id', 'access_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_quiz_access_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `validate_quiz_access_code`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `validate_quiz_access_code`")  # noqa: E501
        # verify the required parameter 'access_code' is set
        if self.api_client.client_side_validation and ('access_code' not in params or
                                                       params['access_code'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `access_code` when calling `validate_quiz_access_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'access_code' in params:
            form_params.append(('access_code', params['access_code']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{id}/validate_access_code', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
