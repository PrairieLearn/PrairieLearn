# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class QuizExtensionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def set_extensions_for_student_quiz_submissions(self, course_id, quiz_id, quiz_extensions_user_id, **kwargs):  # noqa: E501
        """Set extensions for student quiz submissions  # noqa: E501

        <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_extensions_for_student_quiz_submissions(course_id, quiz_id, quiz_extensions_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[int] quiz_extensions_user_id: The ID of the user we want to add quiz extensions for. (required)
        :param list[int] quiz_extensions_extra_attempts: Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.
        :param list[int] quiz_extensions_extra_time: The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)
        :param list[bool] quiz_extensions_manually_unlocked: Allow the student to take the quiz even if it's locked for everyone else.
        :param list[int] quiz_extensions_extend_from_now: The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)
        :param list[int] quiz_extensions_extend_from_end_at: The number of minutes to extend the quiz beyond the quiz's current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_extensions_for_student_quiz_submissions_with_http_info(course_id, quiz_id, quiz_extensions_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_extensions_for_student_quiz_submissions_with_http_info(course_id, quiz_id, quiz_extensions_user_id, **kwargs)  # noqa: E501
            return data

    def set_extensions_for_student_quiz_submissions_with_http_info(self, course_id, quiz_id, quiz_extensions_user_id, **kwargs):  # noqa: E501
        """Set extensions for student quiz submissions  # noqa: E501

        <b>Responses</b>  * <b>200 OK</b> if the request was successful * <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_extensions_for_student_quiz_submissions_with_http_info(course_id, quiz_id, quiz_extensions_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str quiz_id: ID (required)
        :param list[int] quiz_extensions_user_id: The ID of the user we want to add quiz extensions for. (required)
        :param list[int] quiz_extensions_extra_attempts: Number of times the student is allowed to re-take the quiz over the multiple-attempt limit. This is limited to 1000 attempts or less.
        :param list[int] quiz_extensions_extra_time: The number of extra minutes to allow for all attempts. This will add to the existing time limit on the submission. This is limited to 10080 minutes (1 week)
        :param list[bool] quiz_extensions_manually_unlocked: Allow the student to take the quiz even if it's locked for everyone else.
        :param list[int] quiz_extensions_extend_from_now: The number of minutes to extend the quiz from the current time. This is mutually exclusive to extend_from_end_at. This is limited to 1440 minutes (24 hours)
        :param list[int] quiz_extensions_extend_from_end_at: The number of minutes to extend the quiz beyond the quiz's current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_id', 'quiz_extensions_user_id', 'quiz_extensions_extra_attempts', 'quiz_extensions_extra_time', 'quiz_extensions_manually_unlocked', 'quiz_extensions_extend_from_now', 'quiz_extensions_extend_from_end_at']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_extensions_for_student_quiz_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `set_extensions_for_student_quiz_submissions`")  # noqa: E501
        # verify the required parameter 'quiz_id' is set
        if self.api_client.client_side_validation and ('quiz_id' not in params or
                                                       params['quiz_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_id` when calling `set_extensions_for_student_quiz_submissions`")  # noqa: E501
        # verify the required parameter 'quiz_extensions_user_id' is set
        if self.api_client.client_side_validation and ('quiz_extensions_user_id' not in params or
                                                       params['quiz_extensions_user_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quiz_extensions_user_id` when calling `set_extensions_for_student_quiz_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'quiz_id' in params:
            path_params['quiz_id'] = params['quiz_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_extensions_user_id' in params:
            form_params.append(('quiz_extensions[user_id]', params['quiz_extensions_user_id']))  # noqa: E501
            collection_formats['quiz_extensions[user_id]'] = 'csv'  # noqa: E501
        if 'quiz_extensions_extra_attempts' in params:
            form_params.append(('quiz_extensions[extra_attempts]', params['quiz_extensions_extra_attempts']))  # noqa: E501
            collection_formats['quiz_extensions[extra_attempts]'] = 'csv'  # noqa: E501
        if 'quiz_extensions_extra_time' in params:
            form_params.append(('quiz_extensions[extra_time]', params['quiz_extensions_extra_time']))  # noqa: E501
            collection_formats['quiz_extensions[extra_time]'] = 'csv'  # noqa: E501
        if 'quiz_extensions_manually_unlocked' in params:
            form_params.append(('quiz_extensions[manually_unlocked]', params['quiz_extensions_manually_unlocked']))  # noqa: E501
            collection_formats['quiz_extensions[manually_unlocked]'] = 'csv'  # noqa: E501
        if 'quiz_extensions_extend_from_now' in params:
            form_params.append(('quiz_extensions[extend_from_now]', params['quiz_extensions_extend_from_now']))  # noqa: E501
            collection_formats['quiz_extensions[extend_from_now]'] = 'csv'  # noqa: E501
        if 'quiz_extensions_extend_from_end_at' in params:
            form_params.append(('quiz_extensions[extend_from_end_at]', params['quiz_extensions_extend_from_end_at']))  # noqa: E501
            collection_formats['quiz_extensions[extend_from_end_at]'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/quizzes/{quiz_id}/extensions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
