# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OriginalityReportsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_originality_report(self, assignment_id, submission_id, originality_report_originality_score, **kwargs):  # noqa: E501
        """Create an Originality Report  # noqa: E501

        Create a new OriginalityReport for the specified file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_originality_report(assignment_id, submission_id, originality_report_originality_score, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality. (required)
        :param int originality_report_file_id: The id of the file being given an originality score. Required if creating a report associated with a file.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :param int originality_report_attempt: If no `file_id` is given, and no file is required for the assignment (that is, the assignment allows an online text entry), this parameter may be given to clarify which attempt number the report is for (in the case of resubmissions). If this field is omitted and no `file_id` is given, the report will be created (or updated, if it exists) for the first submission attempt with no associated file.
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_originality_report_with_http_info(assignment_id, submission_id, originality_report_originality_score, **kwargs)  # noqa: E501
        else:
            (data) = self.create_originality_report_with_http_info(assignment_id, submission_id, originality_report_originality_score, **kwargs)  # noqa: E501
            return data

    def create_originality_report_with_http_info(self, assignment_id, submission_id, originality_report_originality_score, **kwargs):  # noqa: E501
        """Create an Originality Report  # noqa: E501

        Create a new OriginalityReport for the specified file  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_originality_report_with_http_info(assignment_id, submission_id, originality_report_originality_score, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality. (required)
        :param int originality_report_file_id: The id of the file being given an originality score. Required if creating a report associated with a file.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :param int originality_report_attempt: If no `file_id` is given, and no file is required for the assignment (that is, the assignment allows an online text entry), this parameter may be given to clarify which attempt number the report is for (in the case of resubmissions). If this field is omitted and no `file_id` is given, the report will be created (or updated, if it exists) for the first submission attempt with no associated file.
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'submission_id', 'originality_report_originality_score', 'originality_report_file_id', 'originality_report_originality_report_url', 'originality_report_originality_report_file_id', 'originality_report_tool_setting_resource_type_code', 'originality_report_tool_setting_resource_url', 'originality_report_workflow_state', 'originality_report_error_message', 'originality_report_attempt']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_originality_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `create_originality_report`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `create_originality_report`")  # noqa: E501
        # verify the required parameter 'originality_report_originality_score' is set
        if self.api_client.client_side_validation and ('originality_report_originality_score' not in params or
                                                       params['originality_report_originality_score'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `originality_report_originality_score` when calling `create_originality_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'originality_report_file_id' in params:
            form_params.append(('originality_report[file_id]', params['originality_report_file_id']))  # noqa: E501
        if 'originality_report_originality_score' in params:
            form_params.append(('originality_report[originality_score]', params['originality_report_originality_score']))  # noqa: E501
        if 'originality_report_originality_report_url' in params:
            form_params.append(('originality_report[originality_report_url]', params['originality_report_originality_report_url']))  # noqa: E501
        if 'originality_report_originality_report_file_id' in params:
            form_params.append(('originality_report[originality_report_file_id]', params['originality_report_originality_report_file_id']))  # noqa: E501
        if 'originality_report_tool_setting_resource_type_code' in params:
            form_params.append(('originality_report[tool_setting][resource_type_code]', params['originality_report_tool_setting_resource_type_code']))  # noqa: E501
        if 'originality_report_tool_setting_resource_url' in params:
            form_params.append(('originality_report[tool_setting][resource_url]', params['originality_report_tool_setting_resource_url']))  # noqa: E501
        if 'originality_report_workflow_state' in params:
            form_params.append(('originality_report[workflow_state]', params['originality_report_workflow_state']))  # noqa: E501
        if 'originality_report_error_message' in params:
            form_params.append(('originality_report[error_message]', params['originality_report_error_message']))  # noqa: E501
        if 'originality_report_attempt' in params:
            form_params.append(('originality_report[attempt]', params['originality_report_attempt']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OriginalityReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_originality_report_files(self, assignment_id, file_id, **kwargs):  # noqa: E501
        """Edit an Originality Report  # noqa: E501

        Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_originality_report_files(assignment_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str file_id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_originality_report_files_with_http_info(assignment_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_originality_report_files_with_http_info(assignment_id, file_id, **kwargs)  # noqa: E501
            return data

    def edit_originality_report_files_with_http_info(self, assignment_id, file_id, **kwargs):  # noqa: E501
        """Edit an Originality Report  # noqa: E501

        Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_originality_report_files_with_http_info(assignment_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str file_id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'file_id', 'originality_report_originality_score', 'originality_report_originality_report_url', 'originality_report_originality_report_file_id', 'originality_report_tool_setting_resource_type_code', 'originality_report_tool_setting_resource_url', 'originality_report_workflow_state', 'originality_report_error_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_originality_report_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `edit_originality_report_files`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `edit_originality_report_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'originality_report_originality_score' in params:
            form_params.append(('originality_report[originality_score]', params['originality_report_originality_score']))  # noqa: E501
        if 'originality_report_originality_report_url' in params:
            form_params.append(('originality_report[originality_report_url]', params['originality_report_originality_report_url']))  # noqa: E501
        if 'originality_report_originality_report_file_id' in params:
            form_params.append(('originality_report[originality_report_file_id]', params['originality_report_originality_report_file_id']))  # noqa: E501
        if 'originality_report_tool_setting_resource_type_code' in params:
            form_params.append(('originality_report[tool_setting][resource_type_code]', params['originality_report_tool_setting_resource_type_code']))  # noqa: E501
        if 'originality_report_tool_setting_resource_url' in params:
            form_params.append(('originality_report[tool_setting][resource_url]', params['originality_report_tool_setting_resource_url']))  # noqa: E501
        if 'originality_report_workflow_state' in params:
            form_params.append(('originality_report[workflow_state]', params['originality_report_workflow_state']))  # noqa: E501
        if 'originality_report_error_message' in params:
            form_params.append(('originality_report[error_message]', params['originality_report_error_message']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/assignments/{assignment_id}/files/{file_id}/originality_report', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OriginalityReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def edit_originality_report_submissions(self, assignment_id, submission_id, id, **kwargs):  # noqa: E501
        """Edit an Originality Report  # noqa: E501

        Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_originality_report_submissions(assignment_id, submission_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param str id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.edit_originality_report_submissions_with_http_info(assignment_id, submission_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.edit_originality_report_submissions_with_http_info(assignment_id, submission_id, id, **kwargs)  # noqa: E501
            return data

    def edit_originality_report_submissions_with_http_info(self, assignment_id, submission_id, id, **kwargs):  # noqa: E501
        """Edit an Originality Report  # noqa: E501

        Modify an existing originality report. An alternative to this endpoint is to POST the same parameters listed below to the CREATE endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.edit_originality_report_submissions_with_http_info(assignment_id, submission_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param str id: ID (required)
        :param float originality_report_originality_score: A number between 0 and 100 representing the measure of the specified file's originality.
        :param str originality_report_originality_report_url: The URL where the originality report for the specified file may be found.
        :param int originality_report_originality_report_file_id: The ID of the file within Canvas that contains the originality report for the submitted file provided in the request URL.
        :param str originality_report_tool_setting_resource_type_code: The resource type code of the resource handler Canvas should use for the LTI launch for viewing originality reports. If set Canvas will launch to the message with type 'basic-lti-launch-request' in the specified resource handler rather than using the originality_report_url.
        :param str originality_report_tool_setting_resource_url: The URL Canvas should launch to when showing an LTI originality report. Note that this value is inferred from the specified resource handler's message \"path\" value (See `resource_type_code`) unless it is specified. If this parameter is used a `resource_type_code` must also be specified.
        :param str originality_report_workflow_state: May be set to \"pending\", \"error\", or \"scored\". If an originality score is provided a workflow state of \"scored\" will be inferred.
        :param str originality_report_error_message: A message describing the error. If set, the \"workflow_state\" will be set to \"error.\"
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'submission_id', 'id', 'originality_report_originality_score', 'originality_report_originality_report_url', 'originality_report_originality_report_file_id', 'originality_report_tool_setting_resource_type_code', 'originality_report_tool_setting_resource_url', 'originality_report_workflow_state', 'originality_report_error_message']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_originality_report_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `edit_originality_report_submissions`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `edit_originality_report_submissions`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `edit_originality_report_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'originality_report_originality_score' in params:
            form_params.append(('originality_report[originality_score]', params['originality_report_originality_score']))  # noqa: E501
        if 'originality_report_originality_report_url' in params:
            form_params.append(('originality_report[originality_report_url]', params['originality_report_originality_report_url']))  # noqa: E501
        if 'originality_report_originality_report_file_id' in params:
            form_params.append(('originality_report[originality_report_file_id]', params['originality_report_originality_report_file_id']))  # noqa: E501
        if 'originality_report_tool_setting_resource_type_code' in params:
            form_params.append(('originality_report[tool_setting][resource_type_code]', params['originality_report_tool_setting_resource_type_code']))  # noqa: E501
        if 'originality_report_tool_setting_resource_url' in params:
            form_params.append(('originality_report[tool_setting][resource_url]', params['originality_report_tool_setting_resource_url']))  # noqa: E501
        if 'originality_report_workflow_state' in params:
            form_params.append(('originality_report[workflow_state]', params['originality_report_workflow_state']))  # noqa: E501
        if 'originality_report_error_message' in params:
            form_params.append(('originality_report[error_message]', params['originality_report_error_message']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OriginalityReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_originality_report_files(self, assignment_id, file_id, **kwargs):  # noqa: E501
        """Show an Originality Report  # noqa: E501

        Get a single originality report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_originality_report_files(assignment_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str file_id: ID (required)
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_originality_report_files_with_http_info(assignment_id, file_id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_originality_report_files_with_http_info(assignment_id, file_id, **kwargs)  # noqa: E501
            return data

    def show_originality_report_files_with_http_info(self, assignment_id, file_id, **kwargs):  # noqa: E501
        """Show an Originality Report  # noqa: E501

        Get a single originality report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_originality_report_files_with_http_info(assignment_id, file_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str file_id: ID (required)
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'file_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_originality_report_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `show_originality_report_files`")  # noqa: E501
        # verify the required parameter 'file_id' is set
        if self.api_client.client_side_validation and ('file_id' not in params or
                                                       params['file_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `file_id` when calling `show_originality_report_files`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'file_id' in params:
            path_params['file_id'] = params['file_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/assignments/{assignment_id}/files/{file_id}/originality_report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OriginalityReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def show_originality_report_submissions(self, assignment_id, submission_id, id, **kwargs):  # noqa: E501
        """Show an Originality Report  # noqa: E501

        Get a single originality report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_originality_report_submissions(assignment_id, submission_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param str id: ID (required)
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.show_originality_report_submissions_with_http_info(assignment_id, submission_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.show_originality_report_submissions_with_http_info(assignment_id, submission_id, id, **kwargs)  # noqa: E501
            return data

    def show_originality_report_submissions_with_http_info(self, assignment_id, submission_id, id, **kwargs):  # noqa: E501
        """Show an Originality Report  # noqa: E501

        Get a single originality report  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.show_originality_report_submissions_with_http_info(assignment_id, submission_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assignment_id: ID (required)
        :param str submission_id: ID (required)
        :param str id: ID (required)
        :return: OriginalityReport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assignment_id', 'submission_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_originality_report_submissions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `show_originality_report_submissions`")  # noqa: E501
        # verify the required parameter 'submission_id' is set
        if self.api_client.client_side_validation and ('submission_id' not in params or
                                                       params['submission_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `submission_id` when calling `show_originality_report_submissions`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `show_originality_report_submissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501
        if 'submission_id' in params:
            path_params['submission_id'] = params['submission_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OriginalityReport',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
