# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SisImportErrorsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sis_import_error_list_sis_import_errors(self, account_id, **kwargs):  # noqa: E501
        """Get SIS import error list  # noqa: E501

        Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days.  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sis_import_error_list_sis_import_errors(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param bool failure: If set, only shows errors on a sis import that would cause a failure.
        :return: list[SisImportError]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sis_import_error_list_sis_import_errors_with_http_info(account_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sis_import_error_list_sis_import_errors_with_http_info(account_id, **kwargs)  # noqa: E501
            return data

    def get_sis_import_error_list_sis_import_errors_with_http_info(self, account_id, **kwargs):  # noqa: E501
        """Get SIS import error list  # noqa: E501

        Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days.  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sis_import_error_list_sis_import_errors_with_http_info(account_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param bool failure: If set, only shows errors on a sis import that would cause a failure.
        :return: list[SisImportError]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'failure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sis_import_error_list_sis_import_errors" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_sis_import_error_list_sis_import_errors`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501

        query_params = []
        if 'failure' in params:
            query_params.append(('failure', params['failure']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/sis_import_errors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SisImportError]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sis_import_error_list_sis_imports(self, account_id, id, **kwargs):  # noqa: E501
        """Get SIS import error list  # noqa: E501

        Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days.  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sis_import_error_list_sis_imports(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param bool failure: If set, only shows errors on a sis import that would cause a failure.
        :return: list[SisImportError]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sis_import_error_list_sis_imports_with_http_info(account_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sis_import_error_list_sis_imports_with_http_info(account_id, id, **kwargs)  # noqa: E501
            return data

    def get_sis_import_error_list_sis_imports_with_http_info(self, account_id, id, **kwargs):  # noqa: E501
        """Get SIS import error list  # noqa: E501

        Returns the list of SIS import errors for an account or a SIS import. Import errors are only stored for 30 days.  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  Example:   curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\     -H \"Authorization: Bearer <token>\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sis_import_error_list_sis_imports_with_http_info(account_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_id: ID (required)
        :param str id: ID (required)
        :param bool failure: If set, only shows errors on a sis import that would cause a failure.
        :return: list[SisImportError]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_id', 'id', 'failure']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sis_import_error_list_sis_imports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_id' is set
        if self.api_client.client_side_validation and ('account_id' not in params or
                                                       params['account_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account_id` when calling `get_sis_import_error_list_sis_imports`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_sis_import_error_list_sis_imports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'account_id' in params:
            path_params['account_id'] = params['account_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'failure' in params:
            query_params.append(('failure', params['failure']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/accounts/{account_id}/sis_imports/{id}/errors', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SisImportError]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
