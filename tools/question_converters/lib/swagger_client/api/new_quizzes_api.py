# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NewQuizzesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_new_quiz(self, course_id, **kwargs):  # noqa: E501
        """Create a new quiz  # noqa: E501

        Create a new quiz for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_quiz(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param str quiz_title: The title of the quiz.
        :param int quiz_assignment_group_id: The ID of the quiz's assignment group.
        :param float quiz_points_possible: The total point value given to the quiz. Must be positive.
        :param Object quiz_due_at: When the quiz is due.
        :param Object quiz_lock_at: When to lock the quiz.
        :param Object quiz_unlock_at: When to unlock the quiz.
        :param str quiz_grading_type: The type of grading the assignment receives.
        :param str quiz_instructions: Instructions for the quiz.
        :param str quiz_quiz_settings_calculator_type: Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
        :param bool quiz_quiz_settings_filter_ip_address: Whether IP filtering is needed.  Must be true for filters to take effect.
        :param list[str] quiz_quiz_settings_filters_ips: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there's no restriction.
        :param bool quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled: Whether multiple attempts for this quiz is true.
        :param bool quiz_quiz_settings_multiple_attempts_attempt_limit: Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_max_attempts: The allowed attempts a student can take. If null, the allowed attempts are unlimited.  Only used if attempt_limit is true.
        :param str quiz_quiz_settings_multiple_attempts_score_to_keep: Whichever score to keep for the attempts.  Only used if multiple_attempts_enabled is true.
        :param bool quiz_quiz_settings_multiple_attempts_cooling_period: Whether there is a cooling (waiting) period.  Only used if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_cooling_period_seconds: Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true
        :param str quiz_quiz_settings_one_at_a_time_type: Specifies the settings for questions to display when quiz taking.
        :param bool quiz_quiz_settings_allow_backtracking: Whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'.
        :param bool quiz_quiz_settings_results_view_settings_result_view_restricted: Whether the results view is restricted for students.  Must be true for any student restrictions to be set
        :param bool quiz_quiz_settings_results_view_settings_display_points_awarded: Whether points are shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_points_possible: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_items: Whether to show items in the results view.  Must be true for any items restrictions to be set
        :param bool quiz_quiz_settings_results_view_settings_display_item_response: Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_correctness to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response_correctness: Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_correct_answer to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_correct_answer: Whether correct answer is shown.  Only set if display_item_response_correctness is true
        :param bool quiz_quiz_settings_results_view_settings_display_item_feedback: Whether Item feedback is shown.  Only set if display_items is true
        :param bool quiz_quiz_settings_shuffle_answers: Whether answers should be shuffled for students.
        :param bool quiz_quiz_settings_shuffle_questions: Whether questions should be shuffled for students.
        :param bool quiz_quiz_settings_require_student_access_code: Whether an access code is needed to take the quiz.
        :param str quiz_quiz_settings_student_access_code: Access code to restrict quiz access. Should be null if no restriction.
        :param bool quiz_quiz_settings_has_time_limit: Whether there is a time limit for the quiz.
        :param Object quiz_quiz_settings_session_time_limit_in_seconds: Limit the time a student can work on the quiz. Should be null if no restriction.
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_new_quiz_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_new_quiz_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def create_new_quiz_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Create a new quiz  # noqa: E501

        Create a new quiz for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_new_quiz_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param str quiz_title: The title of the quiz.
        :param int quiz_assignment_group_id: The ID of the quiz's assignment group.
        :param float quiz_points_possible: The total point value given to the quiz. Must be positive.
        :param Object quiz_due_at: When the quiz is due.
        :param Object quiz_lock_at: When to lock the quiz.
        :param Object quiz_unlock_at: When to unlock the quiz.
        :param str quiz_grading_type: The type of grading the assignment receives.
        :param str quiz_instructions: Instructions for the quiz.
        :param str quiz_quiz_settings_calculator_type: Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
        :param bool quiz_quiz_settings_filter_ip_address: Whether IP filtering is needed.  Must be true for filters to take effect.
        :param list[str] quiz_quiz_settings_filters_ips: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there's no restriction.
        :param bool quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled: Whether multiple attempts for this quiz is true.
        :param bool quiz_quiz_settings_multiple_attempts_attempt_limit: Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_max_attempts: The allowed attempts a student can take. If null, the allowed attempts are unlimited.  Only used if attempt_limit is true.
        :param str quiz_quiz_settings_multiple_attempts_score_to_keep: Whichever score to keep for the attempts.  Only used if multiple_attempts_enabled is true.
        :param bool quiz_quiz_settings_multiple_attempts_cooling_period: Whether there is a cooling (waiting) period.  Only used if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_cooling_period_seconds: Required waiting period in seconds between attempts. If null, there is no required time. Only used if cooling_period is true
        :param str quiz_quiz_settings_one_at_a_time_type: Specifies the settings for questions to display when quiz taking.
        :param bool quiz_quiz_settings_allow_backtracking: Whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'.
        :param bool quiz_quiz_settings_results_view_settings_result_view_restricted: Whether the results view is restricted for students.  Must be true for any student restrictions to be set
        :param bool quiz_quiz_settings_results_view_settings_display_points_awarded: Whether points are shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_points_possible: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_items: Whether to show items in the results view.  Must be true for any items restrictions to be set
        :param bool quiz_quiz_settings_results_view_settings_display_item_response: Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_correctness to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response_correctness: Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_correct_answer to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_correct_answer: Whether correct answer is shown.  Only set if display_item_response_correctness is true
        :param bool quiz_quiz_settings_results_view_settings_display_item_feedback: Whether Item feedback is shown.  Only set if display_items is true
        :param bool quiz_quiz_settings_shuffle_answers: Whether answers should be shuffled for students.
        :param bool quiz_quiz_settings_shuffle_questions: Whether questions should be shuffled for students.
        :param bool quiz_quiz_settings_require_student_access_code: Whether an access code is needed to take the quiz.
        :param str quiz_quiz_settings_student_access_code: Access code to restrict quiz access. Should be null if no restriction.
        :param bool quiz_quiz_settings_has_time_limit: Whether there is a time limit for the quiz.
        :param Object quiz_quiz_settings_session_time_limit_in_seconds: Limit the time a student can work on the quiz. Should be null if no restriction.
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'quiz_title', 'quiz_assignment_group_id', 'quiz_points_possible', 'quiz_due_at', 'quiz_lock_at', 'quiz_unlock_at', 'quiz_grading_type', 'quiz_instructions', 'quiz_quiz_settings_calculator_type', 'quiz_quiz_settings_filter_ip_address', 'quiz_quiz_settings_filters_ips', 'quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled', 'quiz_quiz_settings_multiple_attempts_attempt_limit', 'quiz_quiz_settings_multiple_attempts_max_attempts', 'quiz_quiz_settings_multiple_attempts_score_to_keep', 'quiz_quiz_settings_multiple_attempts_cooling_period', 'quiz_quiz_settings_multiple_attempts_cooling_period_seconds', 'quiz_quiz_settings_one_at_a_time_type', 'quiz_quiz_settings_allow_backtracking', 'quiz_quiz_settings_results_view_settings_result_view_restricted', 'quiz_quiz_settings_results_view_settings_display_points_awarded', 'quiz_quiz_settings_results_view_settings_display_points_possible', 'quiz_quiz_settings_results_view_settings_display_items', 'quiz_quiz_settings_results_view_settings_display_item_response', 'quiz_quiz_settings_results_view_settings_display_item_response_correctness', 'quiz_quiz_settings_results_view_settings_display_item_correct_answer', 'quiz_quiz_settings_results_view_settings_display_item_feedback', 'quiz_quiz_settings_shuffle_answers', 'quiz_quiz_settings_shuffle_questions', 'quiz_quiz_settings_require_student_access_code', 'quiz_quiz_settings_student_access_code', 'quiz_quiz_settings_has_time_limit', 'quiz_quiz_settings_session_time_limit_in_seconds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `create_new_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_title' in params:
            form_params.append(('quiz[title]', params['quiz_title']))  # noqa: E501
        if 'quiz_assignment_group_id' in params:
            form_params.append(('quiz[assignment_group_id]', params['quiz_assignment_group_id']))  # noqa: E501
        if 'quiz_points_possible' in params:
            form_params.append(('quiz[points_possible]', params['quiz_points_possible']))  # noqa: E501
        if 'quiz_due_at' in params:
            form_params.append(('quiz[due_at]', params['quiz_due_at']))  # noqa: E501
        if 'quiz_lock_at' in params:
            form_params.append(('quiz[lock_at]', params['quiz_lock_at']))  # noqa: E501
        if 'quiz_unlock_at' in params:
            form_params.append(('quiz[unlock_at]', params['quiz_unlock_at']))  # noqa: E501
        if 'quiz_grading_type' in params:
            form_params.append(('quiz[grading_type]', params['quiz_grading_type']))  # noqa: E501
        if 'quiz_instructions' in params:
            form_params.append(('quiz[instructions]', params['quiz_instructions']))  # noqa: E501
        if 'quiz_quiz_settings_calculator_type' in params:
            form_params.append(('quiz[quiz_settings][calculator_type]', params['quiz_quiz_settings_calculator_type']))  # noqa: E501
        if 'quiz_quiz_settings_filter_ip_address' in params:
            form_params.append(('quiz[quiz_settings][filter_ip_address]', params['quiz_quiz_settings_filter_ip_address']))  # noqa: E501
        if 'quiz_quiz_settings_filters_ips' in params:
            form_params.append(('quiz[quiz_settings][filters][ips]', params['quiz_quiz_settings_filters_ips']))  # noqa: E501
            collection_formats['quiz[quiz_settings][filters][ips]'] = 'csv'  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]', params['quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_attempt_limit' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][attempt_limit]', params['quiz_quiz_settings_multiple_attempts_attempt_limit']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_max_attempts' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][max_attempts]', params['quiz_quiz_settings_multiple_attempts_max_attempts']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_score_to_keep' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][score_to_keep]', params['quiz_quiz_settings_multiple_attempts_score_to_keep']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_cooling_period' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][cooling_period]', params['quiz_quiz_settings_multiple_attempts_cooling_period']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_cooling_period_seconds' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][cooling_period_seconds]', params['quiz_quiz_settings_multiple_attempts_cooling_period_seconds']))  # noqa: E501
        if 'quiz_quiz_settings_one_at_a_time_type' in params:
            form_params.append(('quiz[quiz_settings][one_at_a_time_type]', params['quiz_quiz_settings_one_at_a_time_type']))  # noqa: E501
        if 'quiz_quiz_settings_allow_backtracking' in params:
            form_params.append(('quiz[quiz_settings][allow_backtracking]', params['quiz_quiz_settings_allow_backtracking']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_result_view_restricted' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][result_view_restricted]', params['quiz_quiz_settings_results_view_settings_result_view_restricted']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_points_awarded' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_points_awarded]', params['quiz_quiz_settings_results_view_settings_display_points_awarded']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_points_possible' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_points_possible]', params['quiz_quiz_settings_results_view_settings_display_points_possible']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_items' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_items]', params['quiz_quiz_settings_results_view_settings_display_items']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_response' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_response]', params['quiz_quiz_settings_results_view_settings_display_item_response']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_response_correctness' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_response_correctness]', params['quiz_quiz_settings_results_view_settings_display_item_response_correctness']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_correct_answer' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_correct_answer]', params['quiz_quiz_settings_results_view_settings_display_item_correct_answer']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_feedback' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_feedback]', params['quiz_quiz_settings_results_view_settings_display_item_feedback']))  # noqa: E501
        if 'quiz_quiz_settings_shuffle_answers' in params:
            form_params.append(('quiz[quiz_settings][shuffle_answers]', params['quiz_quiz_settings_shuffle_answers']))  # noqa: E501
        if 'quiz_quiz_settings_shuffle_questions' in params:
            form_params.append(('quiz[quiz_settings][shuffle_questions]', params['quiz_quiz_settings_shuffle_questions']))  # noqa: E501
        if 'quiz_quiz_settings_require_student_access_code' in params:
            form_params.append(('quiz[quiz_settings][require_student_access_code]', params['quiz_quiz_settings_require_student_access_code']))  # noqa: E501
        if 'quiz_quiz_settings_student_access_code' in params:
            form_params.append(('quiz[quiz_settings][student_access_code]', params['quiz_quiz_settings_student_access_code']))  # noqa: E501
        if 'quiz_quiz_settings_has_time_limit' in params:
            form_params.append(('quiz[quiz_settings][has_time_limit]', params['quiz_quiz_settings_has_time_limit']))  # noqa: E501
        if 'quiz_quiz_settings_session_time_limit_in_seconds' in params:
            form_params.append(('quiz[quiz_settings][session_time_limit_in_seconds]', params['quiz_quiz_settings_session_time_limit_in_seconds']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewQuiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_new_quiz(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Delete a new quiz  # noqa: E501

        Delete a single new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_new_quiz(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_new_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_new_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def delete_new_quiz_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Delete a new quiz  # noqa: E501

        Delete a single new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_new_quiz_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_new_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `delete_new_quiz`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `delete_new_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewQuiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_new_quiz(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get a new quiz  # noqa: E501

        Get details about a single new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_new_quiz(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_new_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_new_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def get_new_quiz_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Get a new quiz  # noqa: E501

        Get details about a single new quiz.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_new_quiz_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_new_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_new_quiz`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `get_new_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewQuiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_new_quizzes(self, course_id, **kwargs):  # noqa: E501
        """List new quizzes  # noqa: E501

        Get a list of new quizzes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_new_quizzes(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :return: list[NewQuiz]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_new_quizzes_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_new_quizzes_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def list_new_quizzes_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """List new quizzes  # noqa: E501

        Get a list of new quizzes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_new_quizzes_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :return: list[NewQuiz]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_new_quizzes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `list_new_quizzes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[NewQuiz]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_single_quiz(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Update a single quiz  # noqa: E501

        Update a single quiz for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_quiz(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param str quiz_title: The title of the quiz.
        :param int quiz_assignment_group_id: The ID of the quiz's assignment group.
        :param float quiz_points_possible: The total point value given to the quiz. Must be positive.
        :param Object quiz_due_at: When the quiz is due.
        :param Object quiz_lock_at: When to lock the quiz.
        :param Object quiz_unlock_at: When to unlock the quiz.
        :param str quiz_grading_type: The type of grading the assignment receives.
        :param str quiz_instructions: Instructions for the quiz.
        :param str quiz_quiz_settings_calculator_type: Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
        :param bool quiz_quiz_settings_filter_ip_address: Whether IP filtering is needed. Must be true for filters to take effect.
        :param list[str] quiz_quiz_settings_filters_ips: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there's no restriction. Specifies the range of IP addresses where the quiz can be taken from. Should be null if there's no restriction.
        :param bool quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled: Whether multiple attempts for this quiz is true.
        :param bool quiz_quiz_settings_multiple_attempts_attempt_limit: Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_max_attempts: The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.
        :param str quiz_quiz_settings_multiple_attempts_score_to_keep: Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.
        :param bool quiz_quiz_settings_multiple_attempts_cooling_period: Whether there is a cooling period. Only used if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_cooling_period_seconds: Required waiting period in seconds between attempts. If null, there is no required time.  Only used if cooling_period is true.
        :param str quiz_quiz_settings_one_at_a_time_type: Specifies the settings for questions to display when quiz taking.
        :param bool quiz_quiz_settings_allow_backtracking: Whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'.
        :param bool quiz_quiz_settings_results_view_settings_result_view_restricted: Whether the results view is restricted for students.
        :param bool quiz_quiz_settings_results_view_settings_display_points_awarded: Whether points are shown.  Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_points_possible: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_items: Whether to show items in the results view.  Must be true for any items restrictions to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response: Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_correctness to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response_correctness: Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_correct_answer to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_correct_answer: Whether correct answer is shown.  Only set if display_item_response_correctness is true.
        :param bool quiz_quiz_settings_results_view_settings_display_item_feedback: Whether Item feedback is shown. Only set if display_items is true.
        :param bool quiz_quiz_settings_shuffle_answers: Whether answers should be shuffled for students.
        :param bool quiz_quiz_settings_shuffle_questions: Whether questions should be shuffled for students.
        :param bool quiz_quiz_settings_require_student_access_code: Whether an access code is needed to take the quiz.
        :param str quiz_quiz_settings_student_access_code: Access code to restrict quiz access. Should be null if no restriction.
        :param bool quiz_quiz_settings_has_time_limit: Whether there is a time limit for the quiz.
        :param Object quiz_quiz_settings_session_time_limit_in_seconds: Limit the time a student can work on the quiz. Should be null if no restriction.
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_single_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_single_quiz_with_http_info(course_id, assignment_id, **kwargs)  # noqa: E501
            return data

    def update_single_quiz_with_http_info(self, course_id, assignment_id, **kwargs):  # noqa: E501
        """Update a single quiz  # noqa: E501

        Update a single quiz for the course.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_single_quiz_with_http_info(course_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int course_id: no description (required)
        :param int assignment_id: The id of the assignment associated with the quiz. (required)
        :param str quiz_title: The title of the quiz.
        :param int quiz_assignment_group_id: The ID of the quiz's assignment group.
        :param float quiz_points_possible: The total point value given to the quiz. Must be positive.
        :param Object quiz_due_at: When the quiz is due.
        :param Object quiz_lock_at: When to lock the quiz.
        :param Object quiz_unlock_at: When to unlock the quiz.
        :param str quiz_grading_type: The type of grading the assignment receives.
        :param str quiz_instructions: Instructions for the quiz.
        :param str quiz_quiz_settings_calculator_type: Specifies which type of Calculator a student can use during Quiz taking. Should be null if no calculator is allowed.
        :param bool quiz_quiz_settings_filter_ip_address: Whether IP filtering is needed. Must be true for filters to take effect.
        :param list[str] quiz_quiz_settings_filters_ips: Specifies ranges of IP addresses where the quiz can be taken from. Each range is an array like [start address, end address], or null if there's no restriction. Specifies the range of IP addresses where the quiz can be taken from. Should be null if there's no restriction.
        :param bool quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled: Whether multiple attempts for this quiz is true.
        :param bool quiz_quiz_settings_multiple_attempts_attempt_limit: Whether there is an attempt limit.  Only set if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_max_attempts: The allowed attempts a student can take. If null, the allowed attempts are unlimited. Only used if attempt_limit is true.
        :param str quiz_quiz_settings_multiple_attempts_score_to_keep: Whichever score to keep for the attempts. Only used if multiple_attempts_enabled is true.
        :param bool quiz_quiz_settings_multiple_attempts_cooling_period: Whether there is a cooling period. Only used if multiple_attempts_enabled is true.
        :param Object quiz_quiz_settings_multiple_attempts_cooling_period_seconds: Required waiting period in seconds between attempts. If null, there is no required time.  Only used if cooling_period is true.
        :param str quiz_quiz_settings_one_at_a_time_type: Specifies the settings for questions to display when quiz taking.
        :param bool quiz_quiz_settings_allow_backtracking: Whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'.
        :param bool quiz_quiz_settings_results_view_settings_result_view_restricted: Whether the results view is restricted for students.
        :param bool quiz_quiz_settings_results_view_settings_display_points_awarded: Whether points are shown.  Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_points_possible: Whether points possible is shown. Must set result_view_restricted to true to use this parameter.
        :param bool quiz_quiz_settings_results_view_settings_display_items: Whether to show items in the results view.  Must be true for any items restrictions to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response: Whether item response is shown.  Only set if display_items is true.  Must be true for display_item_response_correctness to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_response_correctness: Whether item correctness is shown.  Only set if display_item_response is true.  Must be true for display_item_correct_answer to be set.
        :param bool quiz_quiz_settings_results_view_settings_display_item_correct_answer: Whether correct answer is shown.  Only set if display_item_response_correctness is true.
        :param bool quiz_quiz_settings_results_view_settings_display_item_feedback: Whether Item feedback is shown. Only set if display_items is true.
        :param bool quiz_quiz_settings_shuffle_answers: Whether answers should be shuffled for students.
        :param bool quiz_quiz_settings_shuffle_questions: Whether questions should be shuffled for students.
        :param bool quiz_quiz_settings_require_student_access_code: Whether an access code is needed to take the quiz.
        :param str quiz_quiz_settings_student_access_code: Access code to restrict quiz access. Should be null if no restriction.
        :param bool quiz_quiz_settings_has_time_limit: Whether there is a time limit for the quiz.
        :param Object quiz_quiz_settings_session_time_limit_in_seconds: Limit the time a student can work on the quiz. Should be null if no restriction.
        :return: NewQuiz
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'assignment_id', 'quiz_title', 'quiz_assignment_group_id', 'quiz_points_possible', 'quiz_due_at', 'quiz_lock_at', 'quiz_unlock_at', 'quiz_grading_type', 'quiz_instructions', 'quiz_quiz_settings_calculator_type', 'quiz_quiz_settings_filter_ip_address', 'quiz_quiz_settings_filters_ips', 'quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled', 'quiz_quiz_settings_multiple_attempts_attempt_limit', 'quiz_quiz_settings_multiple_attempts_max_attempts', 'quiz_quiz_settings_multiple_attempts_score_to_keep', 'quiz_quiz_settings_multiple_attempts_cooling_period', 'quiz_quiz_settings_multiple_attempts_cooling_period_seconds', 'quiz_quiz_settings_one_at_a_time_type', 'quiz_quiz_settings_allow_backtracking', 'quiz_quiz_settings_results_view_settings_result_view_restricted', 'quiz_quiz_settings_results_view_settings_display_points_awarded', 'quiz_quiz_settings_results_view_settings_display_points_possible', 'quiz_quiz_settings_results_view_settings_display_items', 'quiz_quiz_settings_results_view_settings_display_item_response', 'quiz_quiz_settings_results_view_settings_display_item_response_correctness', 'quiz_quiz_settings_results_view_settings_display_item_correct_answer', 'quiz_quiz_settings_results_view_settings_display_item_feedback', 'quiz_quiz_settings_shuffle_answers', 'quiz_quiz_settings_shuffle_questions', 'quiz_quiz_settings_require_student_access_code', 'quiz_quiz_settings_student_access_code', 'quiz_quiz_settings_has_time_limit', 'quiz_quiz_settings_session_time_limit_in_seconds']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_single_quiz" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `update_single_quiz`")  # noqa: E501
        # verify the required parameter 'assignment_id' is set
        if self.api_client.client_side_validation and ('assignment_id' not in params or
                                                       params['assignment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `assignment_id` when calling `update_single_quiz`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501
        if 'assignment_id' in params:
            path_params['assignment_id'] = params['assignment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'quiz_title' in params:
            form_params.append(('quiz[title]', params['quiz_title']))  # noqa: E501
        if 'quiz_assignment_group_id' in params:
            form_params.append(('quiz[assignment_group_id]', params['quiz_assignment_group_id']))  # noqa: E501
        if 'quiz_points_possible' in params:
            form_params.append(('quiz[points_possible]', params['quiz_points_possible']))  # noqa: E501
        if 'quiz_due_at' in params:
            form_params.append(('quiz[due_at]', params['quiz_due_at']))  # noqa: E501
        if 'quiz_lock_at' in params:
            form_params.append(('quiz[lock_at]', params['quiz_lock_at']))  # noqa: E501
        if 'quiz_unlock_at' in params:
            form_params.append(('quiz[unlock_at]', params['quiz_unlock_at']))  # noqa: E501
        if 'quiz_grading_type' in params:
            form_params.append(('quiz[grading_type]', params['quiz_grading_type']))  # noqa: E501
        if 'quiz_instructions' in params:
            form_params.append(('quiz[instructions]', params['quiz_instructions']))  # noqa: E501
        if 'quiz_quiz_settings_calculator_type' in params:
            form_params.append(('quiz[quiz_settings][calculator_type]', params['quiz_quiz_settings_calculator_type']))  # noqa: E501
        if 'quiz_quiz_settings_filter_ip_address' in params:
            form_params.append(('quiz[quiz_settings][filter_ip_address]', params['quiz_quiz_settings_filter_ip_address']))  # noqa: E501
        if 'quiz_quiz_settings_filters_ips' in params:
            form_params.append(('quiz[quiz_settings][filters][ips]', params['quiz_quiz_settings_filters_ips']))  # noqa: E501
            collection_formats['quiz[quiz_settings][filters][ips]'] = 'csv'  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][multiple_attempts_enabled]', params['quiz_quiz_settings_multiple_attempts_multiple_attempts_enabled']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_attempt_limit' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][attempt_limit]', params['quiz_quiz_settings_multiple_attempts_attempt_limit']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_max_attempts' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][max_attempts]', params['quiz_quiz_settings_multiple_attempts_max_attempts']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_score_to_keep' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][score_to_keep]', params['quiz_quiz_settings_multiple_attempts_score_to_keep']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_cooling_period' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][cooling_period]', params['quiz_quiz_settings_multiple_attempts_cooling_period']))  # noqa: E501
        if 'quiz_quiz_settings_multiple_attempts_cooling_period_seconds' in params:
            form_params.append(('quiz[quiz_settings][multiple_attempts][cooling_period_seconds]', params['quiz_quiz_settings_multiple_attempts_cooling_period_seconds']))  # noqa: E501
        if 'quiz_quiz_settings_one_at_a_time_type' in params:
            form_params.append(('quiz[quiz_settings][one_at_a_time_type]', params['quiz_quiz_settings_one_at_a_time_type']))  # noqa: E501
        if 'quiz_quiz_settings_allow_backtracking' in params:
            form_params.append(('quiz[quiz_settings][allow_backtracking]', params['quiz_quiz_settings_allow_backtracking']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_result_view_restricted' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][result_view_restricted]', params['quiz_quiz_settings_results_view_settings_result_view_restricted']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_points_awarded' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_points_awarded]', params['quiz_quiz_settings_results_view_settings_display_points_awarded']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_points_possible' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_points_possible]', params['quiz_quiz_settings_results_view_settings_display_points_possible']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_items' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_items]', params['quiz_quiz_settings_results_view_settings_display_items']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_response' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_response]', params['quiz_quiz_settings_results_view_settings_display_item_response']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_response_correctness' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_response_correctness]', params['quiz_quiz_settings_results_view_settings_display_item_response_correctness']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_correct_answer' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_correct_answer]', params['quiz_quiz_settings_results_view_settings_display_item_correct_answer']))  # noqa: E501
        if 'quiz_quiz_settings_results_view_settings_display_item_feedback' in params:
            form_params.append(('quiz[quiz_settings][results_view_settings][display_item_feedback]', params['quiz_quiz_settings_results_view_settings_display_item_feedback']))  # noqa: E501
        if 'quiz_quiz_settings_shuffle_answers' in params:
            form_params.append(('quiz[quiz_settings][shuffle_answers]', params['quiz_quiz_settings_shuffle_answers']))  # noqa: E501
        if 'quiz_quiz_settings_shuffle_questions' in params:
            form_params.append(('quiz[quiz_settings][shuffle_questions]', params['quiz_quiz_settings_shuffle_questions']))  # noqa: E501
        if 'quiz_quiz_settings_require_student_access_code' in params:
            form_params.append(('quiz[quiz_settings][require_student_access_code]', params['quiz_quiz_settings_require_student_access_code']))  # noqa: E501
        if 'quiz_quiz_settings_student_access_code' in params:
            form_params.append(('quiz[quiz_settings][student_access_code]', params['quiz_quiz_settings_student_access_code']))  # noqa: E501
        if 'quiz_quiz_settings_has_time_limit' in params:
            form_params.append(('quiz[quiz_settings][has_time_limit]', params['quiz_quiz_settings_has_time_limit']))  # noqa: E501
        if 'quiz_quiz_settings_session_time_limit_in_seconds' in params:
            form_params.append(('quiz[quiz_settings][session_time_limit_in_seconds]', params['quiz_quiz_settings_session_time_limit_in_seconds']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/quiz/v1/courses/{course_id}/quizzes/{assignment_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NewQuiz',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
