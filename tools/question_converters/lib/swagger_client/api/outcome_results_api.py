# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class OutcomeResultsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_outcome_result_rollups(self, course_id, **kwargs):  # noqa: E501
        """Get outcome result rollups  # noqa: E501

        Gets the outcome rollups for the users and outcomes in the specified context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_result_rollups(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str aggregate: If specified, instead of returning one rollup for each user, all the user rollups will be combined into one rollup for the course that will contain the average (or median, see below) rollup score for each outcome.
        :param str aggregate_stat: If aggregate rollups requested, then this value determines what statistic is used for the aggregate. Defaults to \"mean\" if this value is not specified.
        :param list[int] user_ids: If specified, only the users whose ids are given will be included in the results or used in an aggregate result. it is an error to specify an id for a user who is not a student in the context
        :param list[int] outcome_ids: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        :param list[str] include: [String, \"courses\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"] Specify additional collections to be side loaded with the result.
        :param list[str] exclude: Specify additional values to exclude. \"missing_user_rollups\" excludes rollups for users without results.
        :param str sort_by: If specified, sorts outcome result rollups. \"student\" sorting will sort by a user's sortable name. \"outcome\" sorting will sort by the given outcome's rollup score. The latter requires specifying the \"sort_outcome_id\" parameter. By default, the sort order is ascending.
        :param int sort_outcome_id: If outcome sorting requested, then this determines which outcome to use for rollup score sorting.
        :param str sort_order: If sorting requested, then this allows changing the default sort order of ascending to descending.
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the rollup. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :param bool contributing_scores: If contributing scores are requested, then each individual outcome score will also include all graded artifacts that contributed to the outcome score
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outcome_result_rollups_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outcome_result_rollups_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_outcome_result_rollups_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get outcome result rollups  # noqa: E501

        Gets the outcome rollups for the users and outcomes in the specified context.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_result_rollups_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param str aggregate: If specified, instead of returning one rollup for each user, all the user rollups will be combined into one rollup for the course that will contain the average (or median, see below) rollup score for each outcome.
        :param str aggregate_stat: If aggregate rollups requested, then this value determines what statistic is used for the aggregate. Defaults to \"mean\" if this value is not specified.
        :param list[int] user_ids: If specified, only the users whose ids are given will be included in the results or used in an aggregate result. it is an error to specify an id for a user who is not a student in the context
        :param list[int] outcome_ids: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        :param list[str] include: [String, \"courses\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"] Specify additional collections to be side loaded with the result.
        :param list[str] exclude: Specify additional values to exclude. \"missing_user_rollups\" excludes rollups for users without results.
        :param str sort_by: If specified, sorts outcome result rollups. \"student\" sorting will sort by a user's sortable name. \"outcome\" sorting will sort by the given outcome's rollup score. The latter requires specifying the \"sort_outcome_id\" parameter. By default, the sort order is ascending.
        :param int sort_outcome_id: If outcome sorting requested, then this determines which outcome to use for rollup score sorting.
        :param str sort_order: If sorting requested, then this allows changing the default sort order of ascending to descending.
        :param bool add_defaults: If defaults are requested, then color and mastery level defaults will be added to outcome ratings in the rollup. This will only take effect if the Account Level Mastery Scales FF is DISABLED
        :param bool contributing_scores: If contributing scores are requested, then each individual outcome score will also include all graded artifacts that contributed to the outcome score
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'aggregate', 'aggregate_stat', 'user_ids', 'outcome_ids', 'include', 'exclude', 'sort_by', 'sort_outcome_id', 'sort_order', 'add_defaults', 'contributing_scores']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outcome_result_rollups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_outcome_result_rollups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'aggregate' in params:
            query_params.append(('aggregate', params['aggregate']))  # noqa: E501
        if 'aggregate_stat' in params:
            query_params.append(('aggregate_stat', params['aggregate_stat']))  # noqa: E501
        if 'user_ids' in params:
            query_params.append(('user_ids', params['user_ids']))  # noqa: E501
            collection_formats['user_ids'] = 'csv'  # noqa: E501
        if 'outcome_ids' in params:
            query_params.append(('outcome_ids', params['outcome_ids']))  # noqa: E501
            collection_formats['outcome_ids'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'exclude' in params:
            query_params.append(('exclude', params['exclude']))  # noqa: E501
            collection_formats['exclude'] = 'csv'  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sort_by', params['sort_by']))  # noqa: E501
        if 'sort_outcome_id' in params:
            query_params.append(('sort_outcome_id', params['sort_outcome_id']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sort_order', params['sort_order']))  # noqa: E501
        if 'add_defaults' in params:
            query_params.append(('add_defaults', params['add_defaults']))  # noqa: E501
        if 'contributing_scores' in params:
            query_params.append(('contributing_scores', params['contributing_scores']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_rollups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_outcome_results(self, course_id, **kwargs):  # noqa: E501
        """Get outcome results  # noqa: E501

        Gets the outcome results for users and outcomes in the specified context.  used in sLMGB  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_results(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[int] user_ids: If specified, only the users whose ids are given will be included in the results. SIS ids can be used, prefixed by \"sis_user_id:\". It is an error to specify an id for a user who is not a student in the context.
        :param list[int] outcome_ids: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        :param list[str] include: [String, \"alignments\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"] Specify additional collections to be side loaded with the result. \"alignments\" includes only the alignments referenced by the returned results. \"outcomes.alignments\" includes all alignments referenced by outcomes in the context.
        :param bool include_hidden: If true, results that are hidden from the learning mastery gradebook and student rollup scores will be included
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_outcome_results_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_outcome_results_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def get_outcome_results_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Get outcome results  # noqa: E501

        Gets the outcome results for users and outcomes in the specified context.  used in sLMGB  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_outcome_results_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :param list[int] user_ids: If specified, only the users whose ids are given will be included in the results. SIS ids can be used, prefixed by \"sis_user_id:\". It is an error to specify an id for a user who is not a student in the context.
        :param list[int] outcome_ids: If specified, only the outcomes whose ids are given will be included in the results. it is an error to specify an id for an outcome which is not linked to the context.
        :param list[str] include: [String, \"alignments\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"] Specify additional collections to be side loaded with the result. \"alignments\" includes only the alignments referenced by the returned results. \"outcomes.alignments\" includes all alignments referenced by outcomes in the context.
        :param bool include_hidden: If true, results that are hidden from the learning mastery gradebook and student rollup scores will be included
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id', 'user_ids', 'outcome_ids', 'include', 'include_hidden']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_outcome_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `get_outcome_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []
        if 'user_ids' in params:
            query_params.append(('user_ids', params['user_ids']))  # noqa: E501
            collection_formats['user_ids'] = 'csv'  # noqa: E501
        if 'outcome_ids' in params:
            query_params.append(('outcome_ids', params['outcome_ids']))  # noqa: E501
            collection_formats['outcome_ids'] = 'csv'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'csv'  # noqa: E501
        if 'include_hidden' in params:
            query_params.append(('include_hidden', params['include_hidden']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/outcome_results', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_outcome_ordering_for_lmgb(self, course_id, **kwargs):  # noqa: E501
        """Set outcome ordering for LMGB  # noqa: E501

        Saves the ordering of outcomes in LMGB for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_outcome_ordering_for_lmgb(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_outcome_ordering_for_lmgb_with_http_info(course_id, **kwargs)  # noqa: E501
        else:
            (data) = self.set_outcome_ordering_for_lmgb_with_http_info(course_id, **kwargs)  # noqa: E501
            return data

    def set_outcome_ordering_for_lmgb_with_http_info(self, course_id, **kwargs):  # noqa: E501
        """Set outcome ordering for LMGB  # noqa: E501

        Saves the ordering of outcomes in LMGB for a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_outcome_ordering_for_lmgb_with_http_info(course_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str course_id: ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['course_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_outcome_ordering_for_lmgb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'course_id' is set
        if self.api_client.client_side_validation and ('course_id' not in params or
                                                       params['course_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `course_id` when calling `set_outcome_ordering_for_lmgb`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'course_id' in params:
            path_params['course_id'] = params['course_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/courses/{course_id}/assign_outcome_order', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
