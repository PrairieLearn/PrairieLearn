---
description: Preact Conventions
globs: **/*.ts,**/*.tsx
alwaysApply: false
---
# Preact Conventions

- All new Preact components should use the `.tsx` extension.
- Use function components with hooks (e.g., `useState`, `useMemo`).
- All props and state should be strongly typed with explicit interfaces.
-  Use the `hydrate` utility for server-rendered components that need client-side interactivity.
- Use `renderHtml()` to convert Preact VNodes to HTML when integrating with legacy tagged-template (html`...` code)
- Use `dangerouslySetInnerHTML` to embed legacy tagged-template code within Preact VNodes. Prefer converting legacy tagged-template code over doing this.
- Import from `preact/compat` instead of `react`. For example,

```ts
import { useState, useMemo } from 'preact/compat'
```
- When writing interactive Preact pages, include a snippet in `assets/scripts/esm-bundles/react-fragments/ComponentName.ts` that calls `registerReactFragment`. For example,

```ts
import { InstructorInstanceAdminBillingForm } from '../../../../src/ee/lib/billing/components/InstructorInstanceAdminBillingForm.js';
import { registerReactFragment } from '../../behaviors/react-fragments/index.js';

registerReactFragment(InstructorInstanceAdminBillingForm);
```

## Example

```tsx
export function InstructorCourseInstanceBilling({
  // ...props...
}) {
  return PageLayout({
    // ...other props...
    content: (
      <>
        {/* ... */}
        <div class="card mb-4">
          <div class="card-header bg-primary text-white d-flex">Billing</div>
          <div class="card-body">
            {hydrate(
              <InstructorInstanceAdminBillingForm
                // ...props...
              />,
            )}
          </div>
        </div>
      </>
    ),
  });
}
```
