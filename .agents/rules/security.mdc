---
description: Security Model
globs:
alwaysApply: false
---
# Security Model

## Authentication vs Authorization
- Authentication: `res.locals.authn_user` (real user)
- Authorization: `res.locals.user` (effective user)
- Support for real vs effective user for impersonation

## Authorization Levels
- Course instance authorization based on `authn_user`
- Course instance authorization checked against effective `user`
- Assessment authorization based on effective `user`, `role`, `mode`, and `date`

## Request Security
- All state-modifying requests must be POST
- All associated data must be in the body
- GET requests may use query parameters for viewing options only
- Use Post/Redirect/Get pattern for state modification
- Include CSRF tokens in all forms:
  ```html
  <input type="hidden" name="__csrf_token" value="${__csrf_token}" />
  ```
- Include action identifier in forms:
  ```html
  <input type="hidden" name="__action" value="action_name" />
  ```

## Form Security Example
```typescript
router.post(
  '/',
  asyncHandler(async (req, res) => {
    if (req.body.__action === 'enroll') {
      await queryAsync(sql.enroll, {
        course_instance_id: req.body.course_instance_id,
        user_id: res.locals.authn_user.user_id,
      });
      res.redirect(req.originalUrl);
    }
  }),
);
```
