name: CI

on:
  push:
    branches:
      - master
      # Build on all code freeze branches since we will deploy from them.
      - '**-code-freeze'
  pull_request:
  merge_group:

concurrency:
  # Ensure that we only run one concurrent job for Pull Requests. This ensures
  # that someone can't kill our throughput by pushing a bunch of commits to a
  # single branch in rapid succession.
  #
  # However, for master builds, we allow maximum concurrency. This is achieved
  # because `github.head_ref` isn't defined there, and `github.run_id` is
  # globally unique in this repo.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  test-prairielearn:
    runs-on: ubuntu-latest

    env:
      # Secrets aren't accessible for PRs coming from forks, and we also can't
      # check secrets in an `if` conditional, so we check for the presence of
      # the secret here and use this value in conditionals below.
      CAN_PUSH_IMAGE: ${{ secrets.DOCKERHUB_USERNAME != '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          # We need the whole history so we can diff against `master` to determine
          # what images need to be built.
          fetch-depth: 0

      # We won't try to push in this job, but we still authenticate if the
      # secrets are available so that we don't hit image pull rate limits.
      - name: Login to DockerHub
        if: ${{ env.CAN_PUSH_IMAGE == 'true'}}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Check whether images/plbase was modified
        run: scripts/check_path_modified.sh images/plbase images_plbase_modified
      - name: Build and push prairielearn/plbase
        if: ${{ env.images_plbase_modified }}
        uses: docker/build-push-action@v6 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: images/plbase
          platforms: linux/amd64
          pull: true
          cache-from: type=registry,ref=prairielearn/plbase:buildcache-linux-amd64
          tags: prairielearn/plbase:${{ env.COMMIT_SHA }}

      # This ensures that the `prairielearn/prairielearn` image is built with the
      # correct version of `prairielearn/plbase`. We'll only tag this as `latest`
      # if we actually built it; if it wasn't built, we don't tag it, so Docker will
      # correctly fall back to pulling the `latest` version from the registry.
      - name: Tag plbase image as latest
        if: ${{ env.images_plbase_modified }}
        run: docker tag prairielearn/plbase:${{ env.COMMIT_SHA }} prairielearn/plbase:latest

      - name: Build the prairielearn docker image
        run: docker build -t prairielearn/prairielearn:${{ env.COMMIT_SHA }} --cache-from type=registry,ref=prairielearn/prairielearn:buildcache-linux-amd64 .

      # This ensures that the `prairielearn/executor` image is built with the
      # correct version of `prairielearn/prairielearn`.
      - name: Tag prairielearn image as latest
        run: docker tag prairielearn/prairielearn:${{ env.COMMIT_SHA }} prairielearn/prairielearn:latest

      - name: Build executor image
        run: docker build ./images/executor --tag prairielearn/executor:${{ env.COMMIT_SHA }}
      - name: Tag executor image as latest
        run: docker tag prairielearn/executor:${{ env.COMMIT_SHA }} prairielearn/executor:latest

      # We run the following steps in this job instead of separately to avoid the
      # overhead of pulling the image another time.

      - name: Create a temporary directory for host files
        run: mkdir -p /tmp/prairielearn
      - name: Start the container
        # We have tests for external grading code, which relies on the Docker
        # socket being available, as well as a specific volume mount and
        # environment variable. See the docs for more details:
        # https://prairielearn.readthedocs.io/en/latest/externalGrading/#running-locally-for-development
        #
        # We put the Postgres data on a tmpfs volume, which should be much faster.
        run: |
          docker run --tty --detach \
          --volume /var/run/docker.sock:/var/run/docker.sock \
          --volume /tmp/prairielearn:/jobs \
          --tmpfs=/var/postgres \
          --env HOST_JOBS_DIR=/tmp/prairielearn \
          --name=test_container \
          prairielearn/prairielearn /bin/bash
      - name: Run the JavaScript tests
        run: docker exec --env GITHUB_ACTIONS=true test_container sh -c "make -s -C /PrairieLearn test-js"
        # The JS tests hang relatively often when someone makes a mistake in a PR,
        # and the GitHub Actions default timeout is 6 hours, so the CI run keeps
        # spinning until it eventually times out. This shorter timeout helps
        # ensure that the tests fail more quickly so that people can fix them.
        timeout-minutes: 30

      # Since tests run in the context of the container, we need to copy all
      # the coverage reports out of the container and into the host filesystem.
      - name: Copy coverage reports to the host
        run: ./scripts/copy_docker_coverage_reports.sh test_container
      - name: Upload JavaScript coverage report to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: javascript

  native-checks-js:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # We need accurate timestamps to avoid prettier cache invalidation.
          # We'll use `git restore-mtime`, which requires the full history.
          fetch-depth: 0

      - name: Install OS packages
        run: sudo apt-get install -y git-restore-mtime

      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | sudo bash -s -- latest /bin

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Preinstall node-gyp headers
        run: yarn dlx node-gyp install
      - name: Install Node dependencies
        run: yarn install --immutable --inline-builds

      - name: Set up Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo/cache
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build all code
        run: make build
      - name: Set up Prettier and ESLint cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache/prettier/.prettier-cache
            .eslintcache
          key: ${{ runner.os }}-prettier-eslint-${{ hashFiles('yarn.lock', '.eslintignore', '.eslintrc.cjs', '.prettierrc.json', '.prettierignore') }}-${{ hashFiles('packages/*/src/**') }}

      - name: Run the JavaScript linter
        # Use git-restore-mtime due to a bug in prettier's content cache (https://github.com/prettier/prettier/issues/17278)
        run: |
          git restore-mtime
          make lint-js-cached
      - name: Run the links linter
        run: make lint-links

      - name: Check dependency structure
        run: make check-dependencies
      - name: Check that JSON schema is up-to-date
        run: make check-jsonschema
      # The rest of our code is typechecked in the `build` Makefile target, which
      # is run above.
      - name: Run the TypeScript typechecker for contrib
        run: make typecheck-contrib
      - name: Run the TypeScript typechecker for scripts
        run: make typecheck-scripts
      - name: Run the GitHub Actions linter
        run: make lint-actions
      # This step runs at the end, since it is common for it to fail in
      # dependabot PRs, but we still want all other tests above to run
      # in those cases.
      - name: Check for duplicate Node dependencies
        run: yarn dedupe --check

  native-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install OS packages
        run: sudo apt-get install -y graphviz libgraphviz-dev

      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o /bin/hadolint && \
          sudo chmod +x /bin/hadolint && sudo curl -fsSL https://d2lang.com/install.sh | sh -s -- && \
          sudo apt-get install -y shellcheck
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: 'images/plbase/python-requirements.txt'
      - name: Install Python dependencies
        env:
          UV_SYSTEM_PYTHON: 1
        run: uv pip install -r images/plbase/python-requirements.txt

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Set up Yarn
        # We only install the dependencies in the root workspace to avoid
        # installing dependencies that won't be used.
        run: yarn workspaces focus prairielearn
      - name: Run the d2 diagram linter
        run: make lint-d2
      - name: Run the Python typechecker
        run: make typecheck-python
      - name: Run the Python linter
        run: make lint-python
      - name: Run the Python tests
        run: make test-python
        timeout-minutes: 5
      - name: Run the Dockerfile linter
        run: make lint-docker
      - name: Run the Shellcheck linter
        run: make lint-shell
      - name: Run the Markdown linter
        run: make lint-markdown
      - name: Check for warnings in documentation
        run: make build-docs
      # Ran after the docs build, so we can lint the generated HTML.
      - name: Run the HTML linter
        run: make lint-html
      - name: Upload Python coverage report to Codecov
        uses: codecov/codecov-action@v5.4.3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: apps/prairielearn/python
          flags: python
