name: CI

on:
  push:
    branches:
      - master
      # Build on all code freeze branches since we will deploy from them.
      - '**-code-freeze'
  pull_request:
  merge_group:

concurrency:
  # Ensure that we only run one concurrent job for Pull Requests. This ensures
  # that someone can't kill our throughput by pushing a bunch of commits to a
  # single branch in rapid succession.
  #
  # However, for master builds, we allow maximum concurrency. This is achieved
  # because `github.head_ref` isn't defined there, and `github.run_id` is
  # globally unique in this repo.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  build-workspace-images:
    uses: ./.github/workflows/image-builder.yml
    if: false
    with:
      directory: workspaces
      image-prefix: prairielearn/workspace-
      base-images: "['vscode-base']"
      images: "['desktop', 'jupyterlab', 'jupyterlab-python', 'rstudio', 'xtermjs', 'vscode-python', 'vscode-cpp']"
      # Deprecated image without arm64 support
      exclude: "[{'image': 'jupyterlab', 'os': 'ubuntu-24.04-arm'}]"
    secrets: inherit

  # This job is used to check if `build-workspace-images` was successful.
  build-workspace-images-results:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [build-workspace-images]
    steps:
      - run: |
          result="${{ needs.build-workspace-images.result }}"
          if [[ $result == "success" || $result == "skipped" ]]; then
            exit 0
          else
            exit 1
          fi

  build-grader-images:
    runs-on: ubuntu-latest

    env:
      # Secrets aren't accessible for PRs coming from forks, and we also can't
      # check secrets in an `if` conditional, so we check for the presence of
      # the secret here and use this value in conditionals below.
      CAN_PUSH_IMAGE: ${{ secrets.DOCKERHUB_USERNAME != '' }}

    steps:
      - uses: actions/checkout@v4
        with:
          # We need the whole history so we can diff against `master` to determine
          # what images need to be built.
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3 # https://github.com/marketplace/actions/docker-setup-qemu
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # https://github.com/marketplace/actions/docker-setup-buildx
      - name: Login to DockerHub
        if: ${{ env.CAN_PUSH_IMAGE == 'true' }}
        uses: docker/login-action@v3 # https://github.com/marketplace/actions/docker-login
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      ######################################################################################################
      # grader-c
      - name: Check whether graders/c was modified
        run: scripts/check_path_modified.sh graders/c graders_c_modified
      - name: Build and push prairielearn/grader-c
        if: ${{ env.graders_c_modified }}
        uses: docker/build-push-action@v6 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: graders/c
          platforms: linux/amd64,linux/arm64
          push: ${{ env.CAN_PUSH_IMAGE == 'true' }}
          no-cache: true
          tags: prairielearn/grader-c:${{ env.COMMIT_SHA }}

      ######################################################################################################
      # grader-java
      - name: Check whether graders/java was modified
        run: scripts/check_path_modified.sh graders/java graders_java_modified
      - name: Build and push prairielearn/grader-java
        if: ${{ env.graders_java_modified }}
        uses: docker/build-push-action@v6 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: graders/java
          platforms: linux/amd64,linux/arm64
          push: ${{ env.CAN_PUSH_IMAGE == 'true' }}
          no-cache: true
          tags: prairielearn/grader-java:${{ env.COMMIT_SHA }}

      ######################################################################################################
      # grader-python
      - name: Check whether graders/python was modified
        run: scripts/check_path_modified.sh graders/python graders_python_modified
      - name: Build and push prairielearn/grader-python
        if: ${{ env.graders_python_modified }}
        uses: docker/build-push-action@v6 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: graders/python
          platforms: linux/amd64,linux/arm64
          push: ${{ env.CAN_PUSH_IMAGE == 'true' }}
          no-cache: true
          tags: prairielearn/grader-python:${{ env.COMMIT_SHA }}

      ######################################################################################################
      # grader-r
      - name: Check whether graders/r was modified
        run: scripts/check_path_modified.sh graders/r graders_r_modified
      - name: Build and push prairielearn/grader-r
        if: ${{ env.graders_r_modified }}
        uses: docker/build-push-action@v6 # https://github.com/marketplace/actions/build-and-push-docker-images
        with:
          context: graders/r
          platforms: linux/amd64,linux/arm64
          push: ${{ env.CAN_PUSH_IMAGE == 'true' }}
          no-cache: true
          tags: prairielearn/grader-r:${{ env.COMMIT_SHA }}

  build-core-images:
    uses: ./.github/workflows/image-builder.yml
    with:
      directory: images
      image-prefix: prairielearn/
      base-images: "['plbase']"
      images: "['prairielearn']"
    secrets: inherit

  native-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # We need accurate timestamps to avoid prettier cache invalidation.
          # We'll use `git restore-mtime`, which requires the full history.
          fetch-depth: 0

      - name: Install OS packages
        uses: awalsh128/cache-apt-pkgs-action@v1.5.0
        with:
          packages: graphviz libgraphviz-dev git-restore-mtime
          version: 1.0
          execute_install_scripts: true

      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o /bin/hadolint && \
          sudo chmod +x /bin/hadolint && sudo curl -fsSL https://d2lang.com/install.sh | sh -s -- && \
          sudo apt-get install -y shellcheck && \
          sudo curl -fsSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | sudo bash -s -- latest /bin
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: 'images/plbase/python-requirements.txt'
      - name: Install Python dependencies
        env:
          UV_SYSTEM_PYTHON: 1
        run: uv pip install -r images/plbase/python-requirements.txt

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'
      - name: Preinstall node-gyp headers
        run: yarn dlx node-gyp install
      - name: Install Node dependencies
        run: yarn install --immutable --inline-builds

      - name: Set up Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo/cache
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build all code
        run: make build
      - name: Set up Prettier and ESLint cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache/prettier/.prettier-cache
            .eslintcache
          key: ${{ runner.os }}-prettier-eslint-${{ hashFiles('yarn.lock', '.eslintignore', '.eslintrc.cjs', '.prettierrc.json', '.prettierignore') }}-${{ hashFiles('packages/*/src/**') }}

      - name: Run the JavaScript linter
        # Use git-restore-mtime due to a bug in prettier's content cache (https://github.com/prettier/prettier/issues/17278)
        run: |
          git restore-mtime
          make lint-js-cached
      - name: Run the links linter
        run: make lint-links
      - name: Run the d2 diagram linter
        run: make lint-d2

      - name: Run the Python typechecker
        run: make typecheck-python
      - name: Run the Python linter
        run: make lint-python
      - name: Run the Python tests
        run: make test-python
        timeout-minutes: 5
      - name: Run the Dockerfile linter
        run: make lint-docker
      - name: Run the Shellcheck linter
        run: make lint-shell
      - name: Run the Markdown linter
        run: make lint-markdown
      - name: Run the GitHub Actions linter
        run: make lint-actions
      - name: Check for warnings in documentation
        run: make build-docs
      # Ran after the docs build, so we can lint the generated HTML.
      - name: Run the HTML linter
        run: make lint-html
      - name: Check dependency structure
        run: make check-dependencies

      # The rest of our code is typechecked in the `build` Makefile target, which
      # is run above.
      - name: Run the TypeScript typechecker for contrib
        run: make typecheck-contrib
      - name: Run the TypeScript typechecker for scripts
        run: make typecheck-scripts

      # This step runs at the end, since it is common for it to fail in
      # dependabot PRs, but we still want all other tests above to run
      # in those cases.
      - name: Check for duplicate Node dependencies
        run: yarn dedupe --check

  report-image-sizes:
    runs-on: ubuntu-latest
    needs:
      - build-workspace-images
      - build-grader-images
      - build-core-images
    if: ${{ always() }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Preinstall node-gyp headers
        run: yarn dlx node-gyp install

      - name: Install Node dependencies
        run: yarn workspaces focus @prairielearn/actions-report-image-sizes

      - name: Build
        run: yarn build
        working-directory: packages/actions-report-image-sizes

      - name: Report image sizes
        uses: ./packages/actions-report-image-sizes
        with:
          title: All images
          sha: ${{ env.COMMIT_SHA }}
          token: ${{ secrets.GITHUB_TOKEN }}
          images: |
            prairielearn/workspace-desktop
            prairielearn/workspace-jupyterlab
            prairielearn/workspace-jupyterlab-python
            prairielearn/workspace-rstudio
            prairielearn/workspace-xtermjs
            prairielearn/workspace-vscode-python
            prairielearn/grader-c
            prairielearn/grader-java
            prairielearn/grader-python
            prairielearn/grader-r
            prairielearn/plbase
            prairielearn/prairielearn
            prairielearn/executor
