name: Check

on:
  push:
    branches:
      - master
      # Build on all code freeze branches since we will deploy from them.
      - '**-code-freeze'
  pull_request:
  merge_group:

concurrency:
  # Ensure that we only run one concurrent job for Pull Requests. This ensures
  # that someone can't kill our throughput by pushing a bunch of commits to a
  # single branch in rapid succession.
  #
  # However, for master builds, we allow maximum concurrency. This is achieved
  # because `github.head_ref` isn't defined there, and `github.run_id` is
  # globally unique in this repo.
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  COMMIT_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  check-js:
    name: JavaScript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | sudo bash -s -- latest /bin

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'yarn'
      - name: Preinstall node-gyp headers
        run: yarn dlx node-gyp install
      - name: Install Node dependencies
        run: yarn install --immutable --inline-builds

      - name: Set up Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo/cache
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Build all code
        run: make build
      - name: Set up Prettier and ESLint cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.cache/prettier/.prettier-cache
            .eslintcache
          key: ${{ runner.os }}-prettier-eslint-${{ hashFiles('yarn.lock', '.eslintignore', '.eslintrc.cjs', '.prettierrc.json', '.prettierignore') }}-${{ hashFiles('packages/*/src/**') }}

      - name: Run the JavaScript linter
        run: make lint-js-cached
      - name: Run the links linter
        run: make lint-links

      - name: Check dependency structure
        run: make check-dependencies
      - name: Check that JSON schema is up-to-date
        run: make check-jsonschema
      # The rest of our code is typechecked in the `build` Makefile target, which
      # is run above.
      - name: Run the TypeScript typechecker for contrib
        run: make typecheck-contrib
      - name: Run the TypeScript typechecker for scripts
        run: make typecheck-scripts
      # Requires `make build` so that `actions-report-image-sizes` is built.
      - name: Run the GitHub Actions linter
        run: make lint-actions
      # Requires Git history and yarn install. Not using the make version
      # because the base ref is potentially different.
      - name: Check if a changeset is required
        if: ${{ (github.event_name == 'pull_request' || github.event_name == 'merge_group')
          && !contains(github.head_ref, 'changeset-release')
          && github.event.pull_request.user.login != 'dependabot[bot]' }}
        run: yarn changeset status --since origin/${{ github.base_ref || 'master' }}
      # This step runs at the end, since it is common for it to fail in
      # dependabot PRs, but we still want all other tests above to run
      # in those cases.
      - name: Check for duplicate Node dependencies
        run: yarn dedupe --check

  check-python:
    name: Python
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install OS packages
        run: sudo apt-get install -y graphviz libgraphviz-dev

      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://d2lang.com/install.sh | sh -s --
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: 'pyproject.toml'
      - name: Install all Python dependencies
        run: make python-deps

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Set up Yarn
        # We only install the dependencies in the root workspace to avoid
        # installing dependencies that won't be used.
        run: yarn workspaces focus prairielearn
      - name: Run the Python typechecker
        run: make typecheck-python
      - name: Run the Python linter
        run: make lint-python
      - name: Run the Python tests
        run: make test-python
        timeout-minutes: 5
      - name: Run the Markdown linter
        run: make lint-markdown
      - name: Run the d2 diagram linter
        run: make lint-d2
      - name: Check for warnings in documentation
        run: make build-docs
      # Ran after the docs build, so we can lint the generated HTML.
      - name: Run the HTML linter
        run: make lint-html
      - name: Upload Python coverage report to Codecov
        uses: codecov/codecov-action@v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: apps/prairielearn/python
          flags: python

  check-other:
    name: Other
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install additional dependencies
        run: |-
          sudo curl -fsSL https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64 -o /bin/hadolint && \
          sudo chmod +x /bin/hadolint && \
          sudo apt-get install -y shellcheck

      - name: Install OS packages
        run: sudo apt-get install -y graphviz libgraphviz-dev

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: 'pyproject.toml'
          cache-suffix: 'dev'
      - name: Install Python dependencies
        run: make python-deps-dev

      - name: Run the Dockerfile linter
        run: make lint-docker
      - name: Run the Shellcheck linter
        run: make lint-shell
      - name: Run the SQL query linter
        run: make lint-sql
      - name: Run the SQL migrations linter
        run: make lint-sql-migrations
