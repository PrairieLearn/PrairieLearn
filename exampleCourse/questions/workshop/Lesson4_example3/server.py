import math


def generate(data):
    data["params"]["k"] = 20
    data["correct_answers"]["D"] = 0.01
    data["correct_answers"]["L"] = 0.3
    data["correct_answers"]["x1"] = 0.03
    data["correct_answers"]["Tb"] = 85
    data["correct_answers"]["T1"] = 55


def parse(data):
    variables = ["D", "L", "x1", "Tb", "T1", "qf"]
    for name in variables:
        var = data["submitted_answers"].get(name, None)
        if var is None:
            data["format_errors"][name] = f"Variable {name} is not defined"
        elif name in ["Tb", "T1"]:
            if var > 100:
                data["format_errors"][name] = f"Temperature {name} looks too high."
            elif var < 10:
                data["format_errors"][name] = f"Temperature {name} looks too low."
        elif name in ["D", "L", "x1"] and var > 0.5:
            data["format_errors"][name] = (
                f"Dimension {name} is outside the range of acceptable values for this experiment. Check your units?"
            )


def grade(data):
    Ac = math.pi * data["submitted_answers"]["D"] ** 2 / 4
    qf = (
        -data["params"]["k"]
        * Ac
        * (data["submitted_answers"]["T1"] - data["submitted_answers"]["Tb"])
        / data["submitted_answers"]["x1"]
    )

    if math.isclose(data["submitted_answers"]["qf"], qf, rel_tol=1e-03, abs_tol=0.0):
        data["partial_scores"]["qf"] = {"score": 1, "weight": 1}
    else:
        data["partial_scores"]["qf"] = {"score": 0, "weight": 1}

    variables = ["D", "L", "x1", "Tb", "T1", "qf"]
    score = 0
    for name in variables:
        score += data["partial_scores"][name]["score"]
    data["score"] = score / len(variables)


def test(data):
    if data["test_type"] == "invalid":
        return
    correct = data["correct_answers"]

    is_correct = data["test_type"] == "correct"
    # The value generated by pl-number-input is out of bounds, and would cause a parse error.
    if not is_correct:
        data["raw_submitted_answers"]["Tb"] = "59.5234234234242342423"

    offset = 0 if is_correct else 1
    k = data["params"]["k"]
    Ac = math.pi * correct["D"] ** 2 / 4
    data["raw_submitted_answers"]["qf"] = str(
        (-k * Ac * (correct["T1"] - correct["Tb"]) / correct["x1"]) + offset
    )
    data["score"] = 1 if is_correct else 0

    # Since the test harness can't determine this value, we set it here
    data["partial_scores"]["qf"] = {"score": data["score"], "weight": 1}
