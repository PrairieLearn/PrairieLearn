export PATH := $(CURDIR)/.venv/bin:$(PATH)

build:
	@yarn turbo run build
build-sequential:
	@yarn turbo run --concurrency 1 build

# We use the system Python due to this bug: https://github.com/astral-sh/python-build-standalone/issues/758
venv-setup:
	@[ -f .venv/bin/python3 ] || \
		uv venv --python-preference only-system --python 3.10 --seed .venv || \
		python3 -m venv --upgrade-deps .venv

# Note the `--compile-bytecode` flag, which is needed to ensure fast
# performance the first time things run:
# https://docs.astral.sh/uv/guides/integration/docker/#compiling-bytecode
#
# After installing dependencies, we remove the empty build directory generated by uv/pip.
# It's created since we are technically building a empty package.
python-deps-core: venv-setup
	@uv pip install . --compile-bytecode --python .venv || \
		.venv/bin/python3 -m pip install .
	@rm -rf build
python-deps-docs: venv-setup
	@uv pip install --group docs --compile-bytecode --python .venv || \
		.venv/bin/python3 -m pip install --group docs
python-deps-dev: venv-setup
	@uv pip install --group dev --compile-bytecode --python .venv || \
		.venv/bin/python3 -m pip install --group dev
python-deps: venv-setup
	@uv pip install . --group docs --group dev --compile-bytecode --python .venv || \
		.venv/bin/python3 -m pip install . --group docs --group dev
	@rm -rf build

deps:
	@yarn
	@$(MAKE) python-deps build

migrate:
	@yarn migrate
migrate-dev:
	@yarn migrate-dev

refresh-workspace-hosts:
	@yarn refresh-workspace-hosts
refresh-workspace-hosts-dev:
	@yarn refresh-workspace-hosts-dev

dev: start-support
	@yarn dev
dev-vite: start-support
	@yarn dev-vite
dev-bun:
	@yarn dev-bun
dev-workspace-host: start-support
	@yarn dev-workspace-host
dev-all: start-support
	@$(MAKE) -s -j2 dev dev-workspace-host

start: start-support
	@yarn start
start-workspace-host: start-support
	@yarn start-workspace-host
start-executor:
	@node apps/prairielearn/dist/executor.js
start-all: start-support
	@$(MAKE) -s -j2 start start-workspace-host

update-database-description:
	@yarn workspace @prairielearn/prairielearn pg-describe postgres -o ../../database

start-support: start-postgres start-redis start-s3rver
start-postgres:
	@scripts/start_postgres.sh
start-redis:
	@scripts/start_redis.sh
start-s3rver:
	@scripts/start_s3rver.sh

test: test-js test-python
test-js: start-support
	@yarn test
test-prairielearn-docker-smoke-tests: start-support
	@yarn workspace @prairielearn/prairielearn run test:docker-smoke-tests
test-prairielearn-dist: start-support build
	@yarn workspace @prairielearn/prairielearn run test:dist
test-python: python-deps
	@python3 -m pytest
	@python3 -m coverage xml -o ./apps/prairielearn/python/coverage.xml
test-prairielearn: start-support
	@yarn workspace @prairielearn/prairielearn run test

check-dependencies:
	@yarn depcruise apps/*/src apps/*/assets packages/*/src

check-jsonschema:
	@yarn dlx tsx scripts/gen-jsonschema.mts check
update-jsonschema:
	@yarn dlx tsx scripts/gen-jsonschema.mts && yarn prettier --write "apps/prairielearn/src/schemas/**/*.json" && yarn prettier --write "docs/assets/*.schema.json"

# Runs additional third-party linters
lint-all: lint-js lint-python lint-html lint-docs lint-docker lint-actions lint-shell lint-sql-migrations lint-sql

lint: lint-js lint-python lint-html lint-links
lint-js:
	@yarn eslint "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,html,mustache}"
	@yarn prettier "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,md,sql,json,yml,toml,html,css,scss,sh}" --check
# This is a separate target since the caches don't respect updates to plugins.
lint-js-cached:
	@yarn eslint --cache --cache-strategy content "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,html,mustache}"
	@yarn prettier "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,md,sql,json,yml,toml,html,css,scss,sh}" --check --cache --cache-strategy content
lint-python: python-deps
	@python3 -m ruff check ./
	@python3 -m ruff format --check ./
# Lint HTML files, and the build output of the docs
lint-html:
	@yarn htmlhint "testCourse/**/question.html" "exampleCourse/**/question.html" "site"
lint-markdown:
	@yarn markdownlint --ignore "**/node_modules/**" --ignore exampleCourse --ignore testCourse --ignore "**/dist/**" "**/*.md"
lint-links:
	@node scripts/validate-links.mjs
lint-docker:
	@hadolint ./graders/**/Dockerfile ./workspaces/**/Dockerfile ./images/**/Dockerfile Dockerfile
lint-shell:
	@shellcheck -S warning $(shell find . -type f -name "*.sh" ! -path "./node_modules/*" ! -path "./.venv/*" ! -path "./testCourse/*")
lint-sql:
	@sqlfluff lint
lint-sql-migrations:
	@squawk apps/prairielearn/src/migrations/*.sql
lint-actions:
	@actionlint

# Runs additional third-party formatters
format-all: format-js format-python format-sql

format: format-js format-python
format-sql:
	@sqlfluff fix

format-js:
	@yarn eslint --ext js --fix "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,html,mustache}"
	@yarn prettier --write "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,md,sql,json,yml,toml,html,css,scss,sh}"
# This is a separate target since the caches don't respect updates to plugins.
format-js-cached:
	@yarn eslint --ext js --fix --cache --cache-strategy content "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,html,mustache}"
	@yarn prettier --write --cache --cache-strategy content "**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts,md,sql,json,yml,toml,html,css,scss,sh}"

format-python: python-deps
	@python3 -m ruff check --fix ./
	@python3 -m ruff format ./

typecheck: typecheck-js typecheck-python typecheck-contrib typecheck-scripts
typecheck-contrib:
	@yarn tsc -p contrib
typecheck-scripts:
	@yarn tsc -p scripts
typecheck-js:
	@yarn turbo run build
typecheck-python: python-deps
	@yarn pyright

changeset:
	@yarn changeset
	@yarn prettier --write ".changeset/**/*.md"

lint-docs: lint-d2 lint-links lint-markdown

build-docs: python-deps
	@.venv/bin/mkdocs build --strict
preview-docs: python-deps
	@.venv/bin/mkdocs serve

format-d2:
	@d2 fmt docs/**/*.d2

lint-d2:
	@d2 fmt --check docs/**/*.d2


ci: lint typecheck check-dependencies test
