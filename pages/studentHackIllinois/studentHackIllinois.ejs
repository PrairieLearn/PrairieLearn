<!DOCTYPE html>
<html>
  <head>
    <%- include('../partials/head'); %>
  </head>
  <body>
    <div id="content" class="container">
      <h1 class="display-4 mt-5 mb-3">PrairieLearn at HackIllinois 2018</h1>
      <p>
        Last year PrairieLearn was
        a <a href="https://github.com/PrairieLearn/PrairieLearn">featured
        open-source project</a> at HackIllinois and a team of students
        won
        the <a href="http://blog.hackillinois.org/spotlight/2017/09/28/open-source-at-hackillinois-prairielearn.html">Long
        Con Contribute prize</a> for implementing code autograders in
        PrairieLearn using Docker containers on AWS. Their work is now
        powering many courses at Illinois, including CS 225, CS 233,
        and CS 421.
      </p>
      <p>
        This year PrairieLearn is back
        for <a href="https://www.hackillinois.org">HackIllinois
        2018</a>. The <a href="https://github.com/PrairieLearn/PrairieLearn/graphs/contributors">core
        developers</a> will all be there and we'd love to work with
        you! Some projects are listed below, or come talk to us about
        your own idea.
      </p>

      <div class="card mb-3 mt-4">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-fighter-jet" style="font-size: 400%; color: #dd2c00; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Project Zygote <small class="text-muted">— speed up page loads</small></h3>

              <p>
                PrairieLearn questions are generated and rendered using
                per-question custom Python scripts. These run in separate
                Python processes (for safety) that are launched from the
                main Node.js server, and this introduces about 1 second of
                latency for page loads. To speed this up, this project will
                implement zygote processes (similar to how Android
                implements fast app launch). A zygote is an already-running
                Python process which can be forked to give a per-page code
                runner. The goal of this project is to reduce page load
                times to 200 ms or faster, making PrairieLearn assignments
                and exams better for everyone!
              </p>

              <i>Languages and technologies:</i> Node.js, Python, unix process handling.
            </div>
          </div>
        </div>
      </div>

      <div class="card mb-3">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-calendar-alt" style="font-size: 400%; color: #6200ea; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Project Calendar <small class="text-muted">— unified assignment overview</small></h3>

              <p>
                This project will implement a new home page for PrairieLearn
                that all students will see on login. The new page will show a
                unified view of all upcoming due dates, together with
                upcoming CBTF exam reservations. This will replace the
                current system where it's necessary to click through into
                each course and find due dates among the big list of all
                assignments, and will help all students stay on track with
                classes.
              </p>

              <i>Languages and technologies:</i> HTML/CSS, Bootstrap, PostgreSQL, Node.js.
            </div>
          </div>
        </div>
      </div>

      <div class="card mb-3">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-edit" style="font-size: 400%; color: #33691e; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Project Editor <small class="text-muted">— inline question code editing</small></h3>

              <p>
                Course staff currently write question code offline and
                sync it to the PrairieLearn server using git via a
                private GitHub repo. While this is very flexible, it's
                also inconvenient for small changes and for instructors
                who aren't used to using version control. This project
                will implement an inline editor (e.g., Ace) for question
                code directly on the PrairieLearn question page, making
                it much faster to create questions and fix problems as
                they arise.
              </p>

              <i>Languages and technologies:</i> HTML/CSS, Bootstrap, client-side JavaScript, git, unix process handling.
            </div>
          </div>
        </div>
      </div>

      <div class="card mb-3">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-book" style="font-size: 400%; color: #f57f17; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Project Reference <small class="text-muted">— integrated reference pages</small></h3>

              <p>
                This project will add support for course reference pages
                within PrairieLearn. Reference pages include Markdown
                summaries of topics, existing HTML like compiler
                manuals, and interactive apps using graphics libraries
                like three.js. Support can be added for rendering files
                on the fly (e.g., Markdown), so course staff can just
                drop some content in and it will be immediately
                accessible to students, including during CBTF
                exams. This will make it easier to provide accurate
                information in courses, so people won't be left
                wondering about definitions during exams!
              </p>

              <i>Languages and technologies:</i> HTML/CSS, Bootstrap, PostgreSQL, Node.js.
            </div>
          </div>
        </div>
      </div>

      <div class="card mb-3">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-comment-alt" style="font-size: 400%; color: #c51162; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Project Reminder <small class="text-muted">— text messages for CBTF exams</small></h3>

              <p>
                Have you ever nearly missed a CBTF exam because you
                forgot about it?  This project will extend the CBTF
                scheduler to let students register a phone number, and
                then the scheduler will send them a reminder text
                message an hour before their exam starts. You will
                need to implement the user interface, the process to
                determine which texts to send each hour, and the
                interface with Amazon SNS (Simple Notification
                Service) to actually send the text messages.
              </p>

              <i>Languages and technologies:</i> HTML/CSS, Node.js, Amazon SNS, PostgreSQL.
            </div>
          </div>
        </div>
      </div>

      <div class="card mb-3">
        <div class="card-body">
          <div class="media">
            <span class="align-self-start mr-3">
              <i class="fas fa-question" style="font-size: 400%; color: #2962ff; width: 1.3em;"></i>
            </span>
            <div class="media-body">
              <h3 class="mt-0">Your Idea <small class="text-muted">— propose your own project</small></h3>

              <p>
                Is there something about PrairieLearn that bugs you and
                you want to fix it? We'll help you do it! Or you might
                have a great idea for a type of question in a specific
                course, or want to add something to the CBTF scheduler?
                Bring your ideas along and we can work with you to get
                them implemented.
              </p>

              <i>Languages and technologies:</i> Whatever is needed!
              PrairieLearn runs on AWS and uses Node.js, PostgreSQL,
              Python, Docker, EJS, Bootstrap, Socket.IO, and many
              other tools. We can help you learn anything necessary.
            </div>
          </div>
        </div>
      </div>

    </div>
  </body>
</html>
