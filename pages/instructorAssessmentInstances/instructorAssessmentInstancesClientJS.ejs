var bsTable;

$(function() {

    bsTable = $('#usersTable').bootstrapTable({
        buttons: {
            studentsOnly: {
                text: 'Students Only',
                icon: 'fa-user-graduate',
                attributes: { title: 'List only enrolled students' },
                event: () => {
                    const table = $('#usersTable');
                    const filterOn = !table.data('filter-student-only');
                    table.data('filter-student-only', filterOn);

                    $('.columns button[name=studentsOnly]').toggleClass('active', filterOn);
                    table.bootstrapTable('filterBy', filterOn ? { role: 'Student' } : {});
                },
            },
        },
        onPreBody: function() {
            $('.spinning-wheel').show();
        },
        onResetView: function () {
            $('.spinning-wheel').hide();

            updateTotals($('#usersTable').bootstrapTable('getData'));
            
            $('[data-toggle="popover"]').popover({
                sanitize: false,
                trigger: 'manual',
                container: 'body',
                html: true,
                placement: 'auto'
            });
            $('.time-limit-edit-button').popover({
                sanitize: false,
                placement: 'right',
                title: function() {
                    let row = $(this).data('row');
                    return row.action == 'set_time_limit_all' ? 'Change Time Limits' :
                        row.open ? 'Change Time Limit' : 'Re-Open Instance';
                },
                container: 'body',
                html: true,
                trigger: 'click',
                content: timeLimitEditPopoverContent,
          }).on("show.bs.popover", function() {
              $($(this).data("bs.popover").getTipElement()).css("max-width", "350px");
              $(this).find('.select-time-limit').change();
          });
            
        },
    });

    $(document).keydown(event => {
        if ((event.ctrlKey || event.metaKey) &&
            String.fromCharCode(event.which).toLowerCase() == 'f') {
            $('.fixed-table-toolbar .search input').focus();
            event.preventDefault();
        }
    });

    $('#deleteAssessmentInstanceModal').on('show.bs.modal', function (event) {
        var button = $(event.relatedTarget); // Button that triggered the modal
        var uid = button.data('uid'); // Extract info from data-* attributes
        var name = button.data('name');
        var number = button.data('number');
        var date_formatted = button.data('date-formatted');
        var score_perc = button.data('score-perc');
        var assessment_instance_id = button.data('assessment-instance-id');
        var modal = $(this);
        
        modal.find('form').submit(e => {
            e.preventDefault();
            $.post($(e.target).attr('action'), $(e.target).serialize(), function(data) {
                refreshTable();
            }, 'json');
            modal.modal('hide');
        });
        
        modal.find('.modal-uid').text(uid);
        modal.find('.modal-name').text(name);
        modal.find('.modal-number').text(number);
        modal.find('.modal-date').text(date_formatted);
        modal.find('.modal-score-perc').text(score_perc);
        modal.find('.modal-assessment-instance-id').val(assessment_instance_id);
    });
    
    $('#deleteAllAssessmentInstancesModal').on('show.bs.modal', function (event) {
        var modal = $(this);
        
        modal.find('form').submit(e => {
            e.preventDefault();
            $.post($(e.target).attr('action'), $(e.target).serialize(), function(data) {
                refreshTable();
            }, 'json');
            modal.modal('hide');
        });
    });

    $('[data-toggle="modal"]').click(function (e) {
        e.stopPropagation(); // Keep click from changing sort
        $($(e.currentTarget).data('target')).modal('show');
    })
});

function refreshTable() {
    bsTable.bootstrapTable('refresh', {silent: true});
}

function popoverSubmitViaAjax(e, popover) {
    e.preventDefault();
    $.post($(e.target).attr('action'), $(e.target).serialize(), function(data) {
        refreshTable();
    }, 'json');
    $(popover).popover('hide');
}

function timeLimitEditPopoverContent() {
    let that = this;
    let row = $(this).data('row');
    let form = $('<form name="set-time-limit-form" method="POST">');
    let action = row.action ? row.action : 'set_time_limit';
    form.append(`<p>Total time limit: ${row.total_time}<br/>
                    Remaining time: ${row.time_remaining}
                 </p>`);
    form.append(`<input type="hidden" name="__action" value="${action}">`);
    form.append(`<input type="hidden" name="__csrf_token" value="${window.csrf_token}">`);
    if (row.assessment_instance_id) {
        form.append(`<input type="hidden" name="assessment_instance_id" value="${row.assessment_instance_id}">`);
    }
    let select = $('<select class="form-control select-time-limit" name="plus_minus">');
    if (row.time_remaining_sec !== null) {
        if (row.has_open_instance) {
            select.append('<option value="+1">Add to instances with time limit</option>');
            select.append('<option value="-1">Subtract from instances with time limit</option>');
        } else {
            select.append('<option value="+1">Add</option>');
            select.append('<option value="-1">Subtract</option>');
        }
    }
    select.append('<option value="set_total">Set total time limit to</option>');
    select.append('<option value="set_rem">Set remaining time to</option>');
    if (!row.open || row.time_remaining_sec !== null) {
        select.append('<option value="unlimited">Remove time limit</option>');
    }
    if (row.open !== false && (row.time_remaining_sec === null ||
                               row.time_remaining_sec > 0)) {
        select.append('<option value="expire">Expire time limit</option>');
    }
    select.change(function() {
        $(this).parents('form').find('.time-limit-field').toggle($(this).val() != 'unlimited' && $(this).val() != 'expire');
        $(this).parents('form').find('.reopen-closed-field').toggle($(this).val() != '+1' && $(this).val() != '-1' && $(this).val() != 'expire');
    });
    form.append(select);
    let new_time = $('<p class="form-inline">');
    new_time.append('<input class="form-control time-limit-field" type="number" name="time_add" style="width: 5em" value="5">');
    let time_ref_select = $('<select class="form-control time-limit-field" name="time_ref">');
    time_ref_select.append('<option value="minutes">minutes</option>');
    if (row.time_remaining_sec !== null) {
        time_ref_select.append('<option value="percent">% total limit</option>');
    }
    new_time.append(time_ref_select);
    form.append(new_time);
    if (row.has_closed_instance) {
        let checkbox = $('<div class="form-check mb-2 reopen-closed-field"><input class="form-check-input" type="checkbox" name="reopen_closed" value="true" id="reopen-closed"><label class="form-check-label" for="reopen-closed">Also re-open closed instances</label></div>');
        checkbox.toggle(row.time_remaining_sec === null);
        form.append(checkbox);
    }
    let buttons = $('<div class="btn-toolbar pull-right">');
    let cancel_button = $('<button type="button" class="btn btn-secondary mr-2">Cancel</button>');
    cancel_button.click(function() {
        $(that).popover('hide')
    });
    buttons.append(cancel_button);
    buttons.append('<button type="submit" class="btn btn-success">Set</button>');
    form.append(buttons);
    form.submit(e => {
        popoverSubmitViaAjax(e, that);
    });
    return form;
};

function scorebarFormatter(score, row) {
    
    if (score != null) {
        var bar = '<div class="progress bg" style="min-width: 5em; max-width: 20em;">';
        var left = '', right = '';
        if (score >= 50) {
            left = `${Math.floor(score)}%`;
        } else {
            right = `${Math.floor(score)}%`;
        }
        bar += `<div class="progress-bar bg-success" style="width: ${Math.floor(Math.min(100, score))}%">${left}</div>`;
        bar += `<div class="progress-bar bg-danger" style="width: ${100 - Math.floor(Math.min(100, score))}%">${right}</div>`;
        bar += '</div>';
        return bar;
    } else {
        return '';
    }
}

function listFormatter(list, row) {

    if (!list || !list[0]) list = ['(empty)'];
    return '<small>' + list.join(', ') + '</small>';
}

function timeRemainingLimitFormatter(value, row) {
    //<% if (authz_data.has_course_instance_permission_edit) { %>
    var container = $('<span>');
    var link = $('<a>')
        .addClass('btn btn-secondary btn-xs ml-1 time-limit-edit-button')
        .attr('role', 'button')
        .attr('tabindex', 0)
        .attr('data-row', JSON.stringify(row))
        .append($('<i class="bi-pencil-square" aria-hidden="true">'))
        .appendTo(container);
    value += container.html();
    //<% } %>
    return value;
}

function detailsLinkFormatter(value, row) {
    var name = <% if (assessment.group_work) { %> row.group_name <% } else { %> row.uid <% } %>;
    var number = <% if (!assessment.multiple_instance) { %> row.number ==  1 ? '' : <% } %> `#${row.number}`;
    return `<a href="<%= urlPrefix %>/assessment_instance/${value}"><%= assessment_set.abbreviation %><%= assessment.number %>${number} for ${name}</a>`;
}

function detailsLinkSorter(valueA, valueB, rowA, rowB) {
    //<% if (assessment.group_work) { %>
    var nameA = rowA.group_name, nameB = rowB.group_name;
    var idA = rowA.group_id, idB = rowB.group_id;
    //<% } else { %>
    var nameA = rowA.uid, nameB = rowB.uid;
    var idA = rowA.user_id, idB = rowB.user_id;
    //<% } %>

    // Compare first by UID/group name, then user/group ID, then
    // instance number, then by instance ID.
    var compare = nameA.localeCompare(nameB);
    if (!compare) compare = idA - idB;
    if (!compare) compare = rowA.number - rowB.number;
    if (!compare) compare = valueA - valueB;
    return compare;
}

function actionButtonFormatter(_value, row, index) {
    const ai_id = row.assessment_instance_id;
    var container = $('<div>');
    var dropdown = $('<div class="dropdown">').appendTo(container);
    $('<button type="button">')
        .addClass('btn btn-secondary btn-xs dropdown-toggle')
        .attr('data-toggle', 'dropdown')
        .attr('aria-haspopup', 'true')
        .attr('aria-expanded', 'false')
        .attr('data-boundary', 'window')
        .text('Action')
        .appendTo(dropdown);
    $('<div>')
        .attr('id', `row${ai_id}PopoverClose`)
        .attr('tabindex', 0)
        .attr('data-toggle', 'popover')
        .attr('title', 'Confirm close')
        .attr('data-content',
              `<form name="close-form" method="POST" onsubmit="popoverSubmitViaAjax(event, '#row${ai_id}PopoverClose')">
                 <input type="hidden" name="__action" value="close">
                 <input type="hidden" name="__csrf_token" value="${window.csrf_token}">
                 <input type="hidden" name="assessment_instance_id" value="${ai_id}">
                 <button type="button" class="btn btn-secondary" onclick="$('#row${ai_id}PopoverClose').popover('hide')">Cancel</button>
                 <button type="submit" class="btn btn-danger">Grade and close</button>
               </form>`)
        .appendTo(dropdown);
    $('<div>')
        .attr('id', `row${ai_id}PopoverRegrade`)
        .attr('tabindex', 0)
        .attr('data-toggle', 'popover')
        .attr('title', 'Confirm regrade')
        .attr('data-content',
              `<form name="regrade-form" method="POST">
                 <input type="hidden" name="__action" value="regrade">
                 <input type="hidden" name="__csrf_token" value="${window.csrf_token}">
                 <input type="hidden" name="assessment_instance_id" value="${ai_id}">
                 <button type="button" class="btn btn-secondary" onclick="$('#row${ai_id}PopoverRegrade').popover('hide')">Cancel</button>
                 <button type="submit" class="btn btn-primary">Regrade</button>
               </form>`)
        .appendTo(dropdown);
    var menu = $('<div>')
        .addClass('dropdown-menu')
        .attr('onclick', 'window.event.preventDefault()')
        .appendTo(dropdown);
    //<% if (authz_data.has_course_instance_permission_edit) { %>
    $('<a>')
        .addClass('dropdown-item')
        .attr('role', 'button')
        .attr('tabindex', '0')
        .attr('data-toggle', 'modal')
        .attr('data-target', '#deleteAssessmentInstanceModal')
        .attr('data-uid', row.uid)
        .attr('data-name', row.name)
        .attr('data-number', row.number)
        .attr('data-date-formatted', row.date_formatted)
        .attr('data-score-perc', Math.floor(row.score_perc))
        .attr('data-assessment-instance-id', row.assessment_instance_id)
        .append($('<i>').addClass('fas fa-times mr-2')
                .attr('aria-hidden', 'true'))
        .append('Delete')
        .appendTo(menu);

    $('<a>')
        .addClass('dropdown-item' + (row.open ? '' : ' disabled'))
        .attr('role', 'button')
        .attr('tabindex', '0')
        .attr('onclick', `$("#row${ai_id}PopoverClose").popover("show")`)
        .append($('<i>').addClass('fas fa-ban mr-2')
                .attr('aria-hidden', 'true'))
        .append('Grade &amp; Close')
        .appendTo(menu);

    $('<a>')
        .addClass('dropdown-item')
        .attr('role', 'button')
        .attr('tabindex', '0')
        .attr('onclick', `$("#row${ai_id}PopoverRegrade").popover("show")`)
        .append($('<i>').addClass('fas fa-sync mr-2')
                .attr('aria-hidden', 'true'))
        .append('Regrade')
        .appendTo(menu);

    //<% } else { %>
    $('<a>')
        .addClass('dropdown-item disabled')
        .attr('role', 'button')
        .attr('tabindex', '0')
        .append('Must have editor permission')
        .appendTo(menu);

    //<% } %>

    return container.html();
}
      
function updateTotals(data) {

    var time_limit_totals;

    let time_limit_list = new Object();
    let remaining_time_min = null;
    let remaining_time_max = null;
    let has_open_instance = false;
    let has_closed_instance = false;

    data.forEach(function(row) {
        if (!row.open) {
            has_closed_instance = true;
        } else if (row.time_remaining_sec === null) {
            has_open_instance = true;
        } else {
            if (!(row.total_time_sec in time_limit_list)) {
                time_limit_list[row.total_time_sec] = row.total_time;
            }
            if (remaining_time_min === null ||
                remaining_time_min > row.time_remaining_sec) {
                remaining_time_min = row.time_remaining_sec;
            }
            if (remaining_time_max === null ||
                remaining_time_max < row.time_remaining_sec) {
                remaining_time_max = row.time_remaining_sec;
            }
        }
    });

    time_limit_list = Object.values(time_limit_list);
    if (time_limit_list.length > 5) {
        time_limit_list.splice(3, time_limit_list.length - 4, '...');
    }

    time_limit_totals = {
        total_time: time_limit_list.length > 0 ? time_limit_list.join(', ') : 'No time limits',
        time_remaining_sec: remaining_time_max,
        has_open_instance: has_open_instance,
        has_closed_instance: has_closed_instance,
        action: 'set_time_limit_all',
    };
    if (remaining_time_min === null) {
        time_limit_totals.time_remaining = 'No time limits';
    } else if (remaining_time_max < 60) {
        time_limit_totals.time_remaining = 'Less than a minute';
    } else if (remaining_time_min < 60) {
        time_limit_totals.time_remaining = 'up to ' + Math.floor(remaining_time_max / 60) + ' min';
    } else if (Math.floor(remaining_time_min / 60) == Math.floor(remaining_time_max / 60)) {
        time_limit_totals.time_remaining = Math.floor(remaining_time_min / 60) + ' min';
    } else {
        time_limit_totals.time_remaining = 'between ' + Math.floor(remaining_time_min / 60) + ' and ' + Math.floor(remaining_time_max / 60) + ' min';
    }

    $('.time-limit-edit-all-button').data('row', time_limit_totals);
}

