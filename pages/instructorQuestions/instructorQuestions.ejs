<!DOCTYPE html>
<html lang="en">
  
  <head>
    <%- include('../partials/head'); %>
    <script src="<%= node_modules_asset_path('lodash/lodash.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/bootstrap-table.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.min.js') %>"></script>
    <script src="<%= node_modules_asset_path('bootstrap-table/dist/extensions/filter-control/bootstrap-table-filter-control.min.js') %>"></script>
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/bootstrap-table.min.css') %>" rel="stylesheet" />
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.min.css') %>" rel="stylesheet" />
    <link href="<%= node_modules_asset_path('bootstrap-table/dist/extensions/filter-control/bootstrap-table-filter-control.min.css') %>" rel="stylesheet" />
  </head>
  
  <body>
    <script>
      $(function() {
          $('#questionsTable').bootstrapTable({
              icons: {
                  columns: 'fa-th-list',
              },
              buttons: {
                  clearFilters: {
                      text: 'Clear filters',
                      icon: 'fa-times',
                      attributes: { title: 'Clear all set question filters' },
                      event: () => {
                          $('#questionsTable').bootstrapTable('clearFilterControl');
                      },
                  },
                  //<% if ((authz_data.has_course_permission_edit) && (! course.example_course) && (! locals.needToSync)) { %>
                  addQuestion: {
                      text: 'Add Question',
                      icon: 'fa-plus',
                      attributes: { title: 'Create a new question' },
                      event: () => {
                          $('form[name=add-question-form]').submit();
                      },
                  },
                  //<% } %>
              },
              onPreBody: function() {
              },
              onResetView: function () {
                  $('[data-toggle="popover"]').popover({
                      sanitize: false,
                      container: 'body',
                      html: true,
                      trigger: 'hover',
                  }).on("show.bs.popover", function() {
                      $($(this).data("bs.popover").getTipElement()).css("max-width", "80%");
                  });
              },
          });

          $(document).keydown(event => {
              if ((event.ctrlKey || event.metaKey) &&
                  String.fromCharCode(event.which).toLowerCase() == 'f') {
                  if ($('.sticky-header-container:visible input.bootstrap-table-filter-control-qid').length)
                      $('.sticky-header-container:visible input.bootstrap-table-filter-control-qid').focus();
                  else
                      $('input.bootstrap-table-filter-control-qid').focus();
                  event.preventDefault();
              }
          });
      });

      function topicList() {
          var data = $('#questionsTable').bootstrapTable('getData');
          return _.keyBy(_.map(data, row => row.topic.name));
      }

      function tagsList() {
          var data = $('#questionsTable').bootstrapTable('getData');
          return _.keyBy(_.map(_.flatten(_.filter(_.map(data, row => row.tags))), row => row.name));
      }

      function versionList() {
          var data = $('#questionsTable').bootstrapTable('getData');
          return _.keyBy(_.map(data, row => row.display_type));
      }

      function assessmentsByCourseInstanceList(ci_id) {
          var data = $('#questionsTable').bootstrapTable('getData');
          var assessments = _.filter(_.flatten(_.map(data, row => row.assessments)), row => row && row.course_instance_id == ci_id);
          return _.assign(_.keyBy(_.map(assessments, row => row.label)), {'(None)': '(None)'});
      }
      
      function qidFormatter(qid, question) {
          var text = '';
          if (question.sync_errors) {
              text += `<button class="btn btn-xs mr-1" data-toggle="popover" data-title="Sync Errors"
                               data-content="<pre style=&quot;background-color: black&quot; class=&quot;text-white rounded p-3&quot;>${_.escape(question.sync_errors_ansified)}</pre>">
                    <i class="fa fa-times text-danger" aria-hidden="true"></i>
                  </button>`;
          } else if (question.sync_warnings) {
              text += `<button class="btn btn-xs mr-1" data-toggle="popover" data-title="Sync Warnings"
                          data-content="<pre style=&quot;background-color: black&quot; class=&quot;text-white rounded p-3&quot;>${_.escape(question.sync_warnings_ansified)}</pre>">
                    <i class="fa fa-exclamation-triangle text-warning" aria-hidden="true"></i>
                  </button>`;
          }
          text += `<a class="formatter-data" href="<%= urlPrefix %>/question/${question.id}/">${_.escape(question.qid)}</a>`;
          if (question.open_issue_count > 0) {
              text += `<a class="badge badge-pill badge-danger ml-1" href="<%= urlPrefix %>/course_admin/issues?q=qid%3A${_.escape(question.qid)}">${question.open_issue_count}</a>`;
          }
          return text;
      }

      function topicFormatter(topic, question) {
          return `<span class="badge color-${question.topic.color}">${_.escape(question.topic.name)}</span>`;
      }

      function tagsFormatter(tags, question) {
          return _.map(question.tags ?? [], tag => `<span class="badge color-${tag.color}">${tag.name}</span>`).join(' ');
      }

      function versionFormatter(version, question) {
          return `<span class="badge color-${question.display_type == 'v3' ? 'green1' : 'red1'}">${_.escape(question.display_type)}</span>`;
      }

      function assessmentsByCourseInstanceFormatter(ci_id, question) {
          var ci_assessments = _.filter(question.assessments ?? [], assessment => assessment.course_instance_id == ci_id);
          return _.map(ci_assessments, assessment => `<a href="<%= plainUrlPrefix %>/course_instance/${ci_id}/instructor/assessment/${assessment.assessment_id}" class="badge color-${assessment.color} color-hover" onclick="event.stopPropagation();"><span>${_.escape(assessment.label)}</span></a>`).join(' ');
      }

      function topicSorter(topicA, topicB) {
          return topicA.name.localeCompare(topicB.name);
      }

      function genericFilterSearch(search, value) {
          return $('<div>').html(value).find('.formatter-data').text().toUpperCase().includes(search.toUpperCase());
      }

      function badgeFilterSearch(search, value) {
          if (search == '(none)') { return value == ''; }
          var values = $('<div>').html(value).find('.badge')
              .filter((i, elem) => $(elem).text().toUpperCase() == search.toUpperCase())
              .length;
          return !!values;
      }

      //<% (authz_data.course_instances || []).forEach(course_instance => { %>
      function assessments<%= course_instance.id %>List() {
          return assessmentsByCourseInstanceList(<%= course_instance.id %>);
      }

      function assessments<%= course_instance.id %>Formatter(_, question) {
          return assessmentsByCourseInstanceFormatter(<%= course_instance.id %>, question);
      }
      //<% }); %>

    </script>
    <style>
      .sticky-column {
          position: sticky;
          left: 0;
          background: white;
          background-clip: padding-box;
          box-shadow: inset -1px 0 #dee2e6;
      }
      .table-hover tbody tr:hover td.sticky-column {
          color: #212529;
          background-color: #efefef;
      }
      .fixed-table-toolbar {
          padding: 0 1em 0 1em;
      }
      .fixed-table-toolbar div.pagination,
      .fixed-table-toolbar div.pagination-detail {
          margin: 0 1em 0 0 !important;
      }
    </style>
    <%- include('../partials/navbar'); %>
    <form class="ml-1 btn-group" name="add-question-form" method="POST">
      <input type="hidden" name="__csrf_token" value="<%= __csrf_token %>">
      <input type="hidden" name="__action" value="add_question">
    </form>
    <div id="content" class="container-fluid">
      <%- include('../partials/courseSyncErrorsAndWarnings'); %>
      <div class="card mb-4">
        <div class="card-header bg-primary">
          <div class="row align-items-center justify-content-between">
            <div class="col-auto">
              <span class="text-white">Questions</span>
            </div>
          </div>
        </div>

        <table id="questionsTable"
               data-data="<%= JSON.stringify(questions) %>"
               data-classes="table table-sm table-hover table-bordered"
               data-thead-classes="thead-light"
               data-filter-control="true"
               data-show-columns="true"
               data-show-columns-toggle-all="true"
               data-show-button-text="true"
               data-pagination="true"
               data-pagination-v-align="both"
               data-pagination-h-align="left"
               data-pagination-detail-h-align="right"
               data-page-list="[10,20,50,100,200,500,unlimited]"
               data-page-size="50"
               data-smart-display="false"
               data-show-extended-pagination="true"
               data-toolbar=".fixed-table-pagination:nth(0)"
               data-sticky-header="true">
          <thead>
            <tr>
              <th data-field="qid"
                  data-sortable="true"
                  data-class="align-middle sticky-column"
                  data-formatter="qidFormatter"
                  data-filter-control="input"
                  data-filter-custom-search="genericFilterSearch"
                  data-switchable="true">QID</th>
              <th data-field="title"
                  data-sortable="true"
                  data-class="align-middle text-nowrap"
                  data-filter-control="input"
                  data-switchable="true">Title</th>
              <th data-field="topic"
                  data-sortable="true"
                  data-class="align-middle text-nowrap"
                  data-formatter="topicFormatter"
                  data-sorter="topicSorter"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Topics)"
                  data-filter-data="func:topicList"
                  data-filter-custom-search="badgeFilterSearch"
                  data-switchable="true">Topic</th>
              <th data-field="tags"
                  data-sortable="false"
                  data-class="align-middle text-nowrap"
                  data-formatter="tagsFormatter"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Tags)"
                  data-filter-data="func:tagsList"
                  data-filter-custom-search="badgeFilterSearch"
                  data-switchable="true">Tags</th>
              <th data-field="display_type"
                  data-sortable="true"
                  data-class="align-middle text-nowrap"
                  data-formatter="versionFormatter"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Versions)"
                  data-filter-data="func:versionList"
                  data-filter-custom-search="badgeFilterSearch"
                  data-visible="<%= has_legacy_questions %>"
                  data-switchable="true">Version</th>
              <th data-field="grading_method"
                  data-sortable="true"
                  data-class="align-middle text-nowrap"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Methods)"
                  data-visible="false"
                  data-switchable="true">Grading Method</th>
              <th data-field="external_grading_image"
                  data-sortable="true"
                  data-class="align-middle text-nowrap"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Images)"
                  data-visible="false"
                  data-switchable="true">External Grading Image</th>
              <% (authz_data.course_instances || []).forEach(course_instance => { %>
              <th data-field="assessments_<%= course_instance.id %>"
                  data-class="align-middle text-nowrap"
                  data-formatter="assessments<%= course_instance.id %>Formatter"
                  data-filter-control="select"
                  data-filter-control-placeholder="(All Assessments)"
                  data-filter-data="func:assessments<%= course_instance.id %>List"
                  data-filter-custom-search="badgeFilterSearch"
                  data-visible="<%= locals.course_instance && locals.course_instance.id == course_instance.id %>"
                  data-switchable="true"><%= course_instance.short_name %> Assessments</th>
              <% }); %>
            </tr>
          </thead>
          </table>
        </div>
      </div>
    </div>
</body>

</html>
