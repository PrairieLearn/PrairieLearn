<% if (question.grading_method == 'External') { %>
<script>
  $(function() {
    var variantId = '<%= variant.id %>';
    var variantToken = '<%= variantToken %>';
    var urlPrefix = '<%= urlPrefix %>';
    var questionContext = '<%= question_context %>';
    var csrfToken = '<%= __csrf_token %>';

    // Render initial grading states into the DOM
    var gradingPending = false;
    $('[id^=submission-]').each(function(index, elem) {
      // Ensure that this is a valid submission element
      if (!/^submission-\d+$/.test($(elem).attr('id'))) {
        return;
      }

      var status = $(elem).data('grading-job-status');
      var submissionId = $(elem).attr('id').replace('submission-', '');
      updateStatus(submissionId, status);
      if (status !== 'graded' && status !== 'canceled') {
        gradingPending = true;
      }
    });

    // If everything has been graded or was canceled, don't even open a socket
    if (!gradingPending) {
      return;
    }

    // By this point, it's safe to open a socket
    var socket = io('/external-grading');

    socket.emit('init', {variant_id: variantId, variant_token: variantToken}, function(msg) {
      handleStatusChange(msg);
    });

    socket.on('change:status', function(msg) {
      handleStatusChange(msg);
    });

    function handleStatusChange(msg) {
      msg.submissions.forEach(function(submission) {
        // Always update results
        updateStatus(submission);

        if (submission.grading_job_status == 'graded') {
          // Check if this state is reflected in the DOM; it's possible this is
          // just a message from the initial data sync and that we already have
          // results in the DOM.
          var status = $('#submission-' + submission.id).data('grading-job-status');
          var gradingJobId = $('#submission-' + submission.id).data('grading-job-id');

          // Ignore jobs that we already have results for, but allow results
          // from more recent grading jobs to replace the existing ones.
          if (status != 'graded' || gradingJobId != submission.grading_job_id) {
            // Let's get results for this job!
            fetchResults(submission.id);
          }
        }
      });
    }

    function fetchResults(submissionId) {
      var wasModalOpen = ($('#submissionInfoModal-' + submissionId).data('bs.modal') || {})._isShown;
      $('#submissionInfoModal-' + submissionId).modal('hide');
      socket.emit('getResults', {
        variant_id: variantId,
        variant_token: variantToken,
        submission_id: submissionId,
        url_prefix: urlPrefix,
        question_context: questionContext,
        csrf_token: csrfToken,
        // Indicates whether submissions are allowed, either because
        // the instance question is part of the current user's
        // assessment instance (authorized_edit==true) or because the
        // question is open in preview mode (authz_result==undefined)
        authorized_edit: <%= !locals.authz_result || locals.authz_result.authorized_edit %>
      }, function(msg) {
        // We're done with the socket for this incarnation of the page
        socket.close();
        if (msg.submissionPanel) {
          $('#submission-' + submissionId).replaceWith(function() {
            return $(msg.submissionPanel).fadeIn('slow');
          });
          // Restore modal state if need be
          if (wasModalOpen) {
            $('#submissionInfoModal-' + submissionId).modal('show');
          }
          resultsLoaded = true;
        }
        if (msg.questionScorePanel) {
          $('#question-score-panel').replaceWith(function() {
            return $(msg.questionScorePanel).fadeIn('slow');
          });
        }
        if (msg.assessmentScorePanel) {
          $('#assessment-score-panel').replaceWith(function() {
            return $(msg.assessmentScorePanel).fadeIn('slow');
          });
        }
        if (msg.questionPanelFooter) {
          $('#question-panel-footer').replaceWith(function() {
            return $(msg.questionPanelFooter).fadeIn('slow');
          });
        }
        if (msg.questionNavNextButton) {
          $('#question-nav-next').replaceWith(() => {
            return $(msg.questionNavNextButton);
          });
        }
      });
    }

    function updateStatus(submission) {
      var display = $('#grading-status-' + submission.id);
      var label;
      var spinner = '<i class="fa fa-sync fa-spin fa-fw"></i>';
      switch (submission.grading_job_status) {
        case 'requested':
          label = 'Grading requested ' + spinner;
          break;
        case 'queued':
          label = 'Queued for grading ' + spinner;
          break;
        case 'grading':
          label = 'Grading in progress ' + spinner;
          break;
        case 'graded':
          label = 'Graded!'
          break;
        default:
          label = 'UNKNOWN STATUS';
          break;
      }
      display.html(label);
    }
  });
</script>
<% } %>
