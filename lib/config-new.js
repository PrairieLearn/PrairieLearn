// @ts-check
const { z } = require('zod');
const {
  ConfigLoader,
  makeFileConfig,
  makeImdsConfig,
  makeSecretsManagerConfig,
} = require('@prairielearn/config');

const ConfigSchema = z.object({
  startServer: z.boolean().default(true),
  postgresqlUser: z.string().default('postgres'),
  postgresqlPassword: z.string().nullable().default(null),
  postgresqlDatabase: z.string().default('postgres'),
  postgresqlHost: z.string().default('localhost'),
  postgresqlPoolSize: z.number().default(100),
  postgresqlIdleTimeoutMillis: z.number().default(30_000),
  namedLocksRenewIntervalMs: z.number().default(60_000),
  courseDirs: z
    .array(z.string())
    .default([
      '/course',
      '/course2',
      '/course3',
      '/course4',
      '/course5',
      '/course6',
      '/course7',
      '/course8',
      '/course9',
      'exampleCourse',
      'testCourse',
    ]),
  courseRepoDefaultBranch: z.string().default('master'),
  urlPrefix: z.string().default('/pl'),
  homeUrl: z.string().default('/'),
  coursesRoot: z.string().default('/data1/courses'),
  redisUrl: z.string().nullable().default('redis://localhost:6379/'),
  logFilename: z.string().default('server.log'),
  logErrorFilename: z.string().nullable().default(null),
  // TODO: develop an enum for our auth types.
  authType: z.string().default('none'),
  authUid: z.string().nullable().default('dev@illinois.edu'),
  authName: z.string().nullable().default('Dev User'),
  authUin: z.string().nullable().default('000000000'),
  authnCookieMaxAgeMilliseconds: z.number().default(30 * 24 * 60 * 60 * 1000),
  serverType: z.enum(['http', 'https']).default('http'),
  serverPort: z.string().default('3000'),
  serverTimeout: z.number().default(10 * 60 * 1000),
  serverKeepAliveTimeout: z.number().default(65 * 1000),
  serverCanonicalHost: z.string().nullable().default(null),
  runMigrations: z.boolean().default(true),
  sslCertificateFile: z.string().default('/etc/pki/tls/certs/localhost.crt'),
  sslKeyFile: z.string().default('/etc/pki/tls/private/localhost.key'),
  sslCAFile: z.string().default('/etc/pki/tls/certs/server-chain.crt'),
  fileUploadMaxBytes: z.number().default(1e7),
  fileUploadMaxParts: z.number().default(1000),
  fileStoreS3Bucket: z.string().default('file-store'),
  // TODO: develop an enum for our storage types.
  fileStoreStorageTypeDefault: z.string().default('S3'),
  initNewsItems: z.boolean().default(true),
  cronActive: z.boolean().default(true),
  cronEnabledJobs: z.array(z.string()).nullable().default(null),
  cronDisabledJobs: z.array(z.string()).nullable().default(null),
  cronOverrideAllIntervalsSec: z.number().nullable().default(null),
  cronIntervalAutoFinishExamsSec: z.number().default(10 * 60),
  cronIntervalErrorAbandonedJobsSec: z.number().default(10 * 60),
  cronIntervalExternalGraderLoadSec: z.number().default(8),
  cronIntervalServerLoadSec: z.number().default(8),
  cronIntervalServerUsageSec: z.number().default(8),
  cronIntervalCalculateAssessmentQuestionStatsSec: z.number().default(10 * 60),
  cronIntervalWorkspaceTimeoutStopSec: z.number().default(60),
  cronIntervalWorkspaceTimeoutWarnSec: z.number().default(60),
  cronIntervalWorkspaceHostLoadsSec: z.number().default(10),
  cronIntervalWorkspaceHostTransitionsSec: z.number().default(10),
  cronIntervalChunksHostAutoScalingSec: z.number().default(10),
  cronIntervalCleanTimeSeriesSec: z.number().default(10 * 60),
  cronDailySec: z.number().default(8 * 60 * 60),
  timeSeriesRetentionPeriodSec: z.number().default(24 * 60 * 60),
  nodeMetricsIntervalSec: z.number().default(5),
  autoFinishAgeMins: z.number().default(6 * 60),
  questionDefaultsDir: z.string().default('question-servers/default-calculation'),
  questionTimeoutMilliseconds: z.number().default(10000),
  secretKey: z.string().default('THIS_IS_THE_SECRET_KEY'),
  secretSlackOpsBotEndpoint: z.string().nullable().default(null),
  secretSlackToken: z.string().nullable().default(null),
  secretSlackCourseRequestChannel: z.string().nullable().default(null),
  githubClientToken: z.string().nullable().default(null),
  githubCourseOwner: z.string().default('PrairieLearn'),
  githubCourseTemplate: z.string().default('pl-template'),
  githubMachineTeam: z.string().default('machine'),
  githubMainBranch: z.string().default('master'),
  gitSshCommand: z.string().nullable().default(null),
  externalGradingUseAws: z.boolean().default(false),
  externalGradingJobsQueueName: z.string().default('grading_jobs_dev'),
  externalGradingResultsQueueName: z.string().default('grading_results_dev'),
  externalGradingJobsDeadLetterQueueName: z.string().nullable().default(null),
  externalGradingResultsDeadLetterQueueName: z.string().nullable().default(null),
  externalGradingAutoScalingGroupName: z.string().nullable().default(null),
  externalGradingS3Bucket: z.string().default('prairielearn.dev.grading'),
  externalGradingDefaultTimeout: z.number().default(30),
  externalGradingLoadAverageIntervalSec: z.number().default(30),
  externalGradingHistoryLoadIntervalSec: z.number().default(15 * 60),
  externalGradingCurrentCapacityFactor: z.number().default(1),
  externalGradingHistoryCapacityFactor: z.number().default(1),
  externalGradingPullImagesFromDockerHub: z.boolean().default(true),
  externalGradingEnableResults: z.boolean().default(true),
  workspacePullImagesFromDockerHub: z.boolean().default(true),
  runningInEc2: z.boolean().default(false),
  cacheImageRegistry: z.string().nullable().default(null),
  fileEditorUseGit: z.boolean().default(false),
  workersCount: z.number().nullable().default(null),
  workersPerCpu: z.number().default(1),
  workersExecutionMode: z.enum(['container', 'native', 'disabled']).default('native'),
  legacyQuestionExecutionMode: z
    .enum(['inprocess', 'subprocess', 'parallel-run'])
    .default('inprocess'),
  workerUseQueue: z.boolean().default(true),
  workerOverloadDelayMS: z.number().default(10_000),
  workerPingTimeoutMilliseconds: z.number().default(60_000),
  workerExecutorImageRepository: z.string().nullable().default(null),
  workerExecutorImageTag: z.string().nullable().default(null),
  ensureExecutorImageAtStartup: z.boolean().default(false),
  groupName: z.string().default('local'),
  instanceId: z.string().default('server'),
  hostname: z.string().default('localhost'),
  reportIntervalSec: z.number().default(10),
  maxResponseTimeSec: z.number().default(500),
  serverLoadAverageIntervalSec: z.number().default(30),
  serverUsageIntervalSec: z.number().default(10),
  blockedWarnEnable: z.boolean().default(false),
  blockedAtWarnEnable: z.boolean().default(false),
  blockedWarnThresholdMS: z.number().default(100),
  SEBServerUrl: z.string().nullable().default(null),
  SEBServerFilter: z.string().nullable().default(null),
  SEBDownloadUrl: z.string().nullable().default(null),
  awsRegion: z.string().default('us-east-2'),
  awsServiceGlobalOptions: z.record(z.unknown()).default({}),
  hasShib: z.boolean().default(false),
  hideShibLogin: z.boolean().default(false),
  shibLinkText: z.string().default('Sign in with Illinois'),
  shibLinkLogo: z.string().default('/images/illinois_logo.svg'),
  shibLinkColors: z
    .object({
      normal: z.object({
        background: z.string(),
        border: z.string(),
        text: z.string(),
      }),
      hover: z.object({
        background: z.string(),
        border: z.string(),
        text: z.string(),
      }),
      active: z.object({
        background: z.string(),
        border: z.string(),
        text: z.string(),
      }),
      focus: z.object({
        shadow: z.string(),
      }),
    })
    .default({
      normal: { background: '#E84A27', border: '#E84A27', text: 'white' },
      hover: { background: '#D04223', border: '#D04223', text: 'white' },
      active: { background: '#B93B1F', border: '#B93B1F', text: 'white' },
      focus: { shadow: 'rgba(255, 83, 0, 0.35)' },
    }),
  hasAzure: z.boolean().default(false),
  hasOauth: z.boolean().default(false),
  googleClientId: z.string().nullable().default(null),
  googleClientSecret: z.string().nullable().default(null),
  googleRedirectUrl: z.string().nullable().default(null),
  syncExamIdAccessRules: z.boolean().default(false),
  ptHost: z.string().default('http://localhost:4000'),
  checkAccessRulesExamUuid: z.boolean().default(false),
  questionRenderCacheType: z.enum(['none', 'redis', 'memory']).default('none'),
  questionRenderCacheMaxItems: z.number().default(100_000),
  questionRenderCacheMaxAgeMilliseconds: z.number().default(6 * 60 * 60 * 1000),
  hasLti: z.boolean().default(false),
  ltiRedirectUrl: z.string().nullable().default(null),
  filesRoot: z.string().default('/files'),
  // TODO: this should support more values, see express docs.
  trustProxy: z.union([z.boolean(), z.string()]).default(false),
  workspaceLogsS3Bucket: z.string().nullable().default(null),
  workspaceLogsFlushIntervalSec: z.number().default(60),
  workspaceLogsExpirationDays: z.number().default(120),
  workspaceDevHostInstanceId: z.string().default('devWSHost1'),
  workspaceDevHostHostname: z.string().default('localhost'),
  workspaceHostPort: z.number().default(8081),
  workspaceDevContainerHostname: z.string().default('host.docker.internal'),
  workspaceAuthzCookieMaxAgeMilliseconds: z.number().default(60 * 1000),
  workspaceJobsDirectoryOwnerUid: z.number().default(0),
  workspaceJobsDirectoryOwnerGid: z.number().default(0),
  workspaceJobsParallelLimit: z.number().default(5),
  workspaceHeartbeatIntervalSec: z.number().default(60),
  workspaceHeartbeatTimeoutSec: z.number().default(10 * 60),
  workspaceVisibilityTimeoutSec: z.number().default(30 * 60),
  workspaceLaunchedTimeoutSec: z.number().default(12 * 60 * 60),
  workspaceLaunchedTimeoutWarnSec: z.number().default(15 * 60),
  workspaceInLaunchingTimeoutSec: z.number().default(30 * 60),
  workspaceLaunchingRetryIntervalSec: z.number().default(10),
  workspaceLaunchingRetryAttempts: z.number().default(60),
  workspaceHostFileWatchIntervalSec: z.number().default(5),
  workspaceHostPruneContainersSec: z.number().default(60),
  workspaceHostMinPortRange: z.number().default(1024),
  workspaceHostMaxPortRange: z.number().default(45000),
  workspaceHostMaxPortAllocationAttempts: z.number().default(0),
  workspaceEnable: z.boolean().default(true),
  workspaceCloudWatchName: z.string().default('workspaces_local_dev'),
  workspaceLoadCapacityFactor: z.number().default(1.3),
  workspaceLoadHostCapacity: z.number().default(40),
  workspaceLoadLaunchTemplateId: z.string().nullable().default(null),
  workspaceLoadLaunchTag: z.string().default('workspace-host'),
  workspaceHostUnhealthyTimeoutSec: z.number().default(12 * 60 * 60),
  workspaceHostLaunchTimeoutSec: z.number().default(10 * 60),
  workspaceUrlRewriteCacheMaxAgeSec: z.number().default(60 * 60),
  workspacePercentMessageRateLimitSec: z.number().default(1),
  workspaceSupportNoInternet: z.boolean().default(false),
  workspaceHomeDirRoot: z.string().default('/jobs/workspaces'),
  workspaceHostHomeDirRoot: z.string().default('/jobs/workspaces'),
  workspaceDockerMemory: z.number().default(1 << 30),
  workspaceDockerMemorySwap: z.number().default(1 << 30),
  workspaceDockerKernelMemory: z.number().default(1 << 29),
  workspaceDockerDiskQuota: z.number().default(1 << 30),
  workspaceDockerCpuPeriod: z.number().default(100000),
  workspaceDockerCpuQuota: z.number().default(90000),
  workspaceDockerPidsLimit: z.number().default(1024),
  workspaceMaxGradedFilesCount: z.number().default(100),
  workspaceMaxGradedFilesSize: z.number().default(100 * 1024 * 1024),
  chunksS3Bucket: z.string().default('chunks'),
  chunksGenerator: z.boolean().default(false),
  chunksConsumer: z.boolean().default(false),
  chunksConsumerDirectory: z.string().default('/chunks'),
  chunksMaxParallelDownload: z.number().default(20),
  chunksMaxParallelUpload: z.number().default(20),
  chunksAutoScalingGroupName: z.string().nullable().default(null),
  chunksLoadBalancerDimensionName: z.string().nullable().default(null),
  chunksTargetGroupDimensionName: z.string().nullable().default(null),
  chunksHostAutoScalingHistoryIntervalSec: z.number().default(15 * 60),
  chunksPageViewsCapacityFactor: z.number().default(10),
  chunksActiveWorkersCapacityFactor: z.number().default(2),
  chunksLoadBalancerRequestsCapacityFactor: z.number().default(1000),
  isEnterprise: z.boolean().default(false),
  prairieTestAuthSecret: z.string().default('THIS_SHOULD_MATCH_THE_PT_KEY'),
  openTelemetryEnabled: z.boolean().default(false),
  openTelemetryExporter: z.enum(['console', 'honeycomb', 'jaeger']).default('console'),
  openTelemetryMetricExporter: z.enum(['console', 'honeycomb']).nullable().default(null),
  openTelemetryMetricExportIntervalMillis: z.number().default(30_000),
  openTelemetrySamplerType: z
    .enum(['always-on', 'always-off', 'trace-id-ratio'])
    .default('always-on'),
  openTelemetrySampleRate: z.number().default(1),
  honeycombApiKey: z.string().nullable().default(null),
  honeycombDataset: z.string().nullable().default('prairielearn-dev'),
  sentryDsn: z.string().nullable().default(null),
  sentryEnvironment: z.string().default('development'),
  sentryTracesSampleRate: z.number().nullable().default(null),
  sentryProfilesSampleRate: z.number().nullable().default(null),
  pyroscopeEnabled: z.boolean().default(false),
  pyroscopeServerAddress: z.string().default('https://ingest.pyroscope.cloud'),
  pyroscopeAuthToken: z.string().nullable().default(null),
  pyroscopeTags: z.record(z.string()).default({}),
  titleOverride: z.string().nullable().default(null),
  homepageFooterText: z.string().nullable().default(null),
  homepageFooterTextHref: z.string().nullable().default(null),
  announcementHtml: z.string().nullable().default(null),
  announcementColor: z.string().nullable().default(null),
  autoScalingGroupName: z.string().nullable().default(null),
  autoScalingLaunchingLifecycleHookName: z.string().nullable().default(null),
  autoScalingTerminatingLifecycleHookName: z.string().nullable().default(null),
  serverJobHeartbeatIntervalSec: z.number().default(10),
  serverJobsAbandonedTimeoutSec: z.number().default(30),
  courseRequestAutoApprovalEnabled: z.boolean().default(false),
  attachedFilesDialogEnabled: z.boolean().default(true),
  devMode: z.boolean().default((process.env.NODE_ENV ?? 'development') === 'development'),
  azureClientID: z.string().default('<your_client_id>'),
  azureRedirectUrl: z.string().default('<your_redirect_url>'),
  azureAllowHttpForRedirectUrl: z.boolean().default(false),
  azureClientSecret: z.string().default('<your_client_secret>'),
  azureCookieEncryptionKeys: z
    .array(
      z.object({
        key: z.string().length(32),
        iv: z.string().length(12),
      })
    )
    .default([]),
  azureLoggingLevel: z.enum(['error', 'warn', 'info']).default('warn'),
  azureResourceURL: z.string().nullable().default('https://graph.windows.net'),
  azureDestroySessionUrl: z
    .string()
    .nullable()
    .default(
      'https://login.microsoftonline.com/common/oauth2/logout?post_logout_redirect_uri=http://localhost:3000'
    ),
});

/** @typedef {z.infer<typeof ConfigSchema>} Config */

const loader = new ConfigLoader(ConfigSchema);

module.exports.config = loader.config;

module.exports.loadConfigAsync = async function (path) {
  await loader.loadAndValidate([
    makeFileConfig(path),
    makeImdsConfig(),
    makeSecretsManagerConfig('ConfSecret'),
  ]);
};
